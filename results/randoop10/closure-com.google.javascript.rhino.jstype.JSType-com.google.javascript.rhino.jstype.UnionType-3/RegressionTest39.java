import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest39 {

    public static boolean debug = false;

    @Test
    public void test19501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19501");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int20 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = node7.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node19.getJsDocBuilderForNode();
        boolean boolean23 = node19.isOnlyModifiesThisCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo24.getImplementedInterfaces();
        boolean boolean28 = jSDocInfo24.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo24.getTemplateTypeNames();
        java.lang.String[] strArray36 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.Object[] objArray39 = strSet37.toArray();
        strSet37.clear();
        boolean boolean41 = strList29.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean56 = strList48.containsAll((java.util.Collection<java.lang.String>) strList55);
        int int57 = strList55.size();
        boolean boolean58 = strSet37.retainAll((java.util.Collection<java.lang.String>) strList55);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean60 = strSet37.isEmpty();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test19502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19502");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isReturn();
        com.google.javascript.rhino.InputId inputId7 = node2.getInputId();
        boolean boolean8 = node2.isAdd();
        boolean boolean9 = node2.isQuotedString();
        int int11 = node2.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isNot();
        boolean boolean18 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.Node node23 = node13.copyInformationFromForTree(node20);
        node13.setOptionalArg(true);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node38 = node36.getParent();
        com.google.javascript.rhino.Node node39 = node29.useSourceInfoFromForTree(node36);
        boolean boolean40 = node39.isSetterDef();
        com.google.javascript.rhino.Node node41 = node39.getLastChild();
        boolean boolean42 = node39.isLocalResultCall();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(1, node2, node13, node27, node39);
        boolean boolean44 = node2.isInc();
        boolean boolean45 = node2.isSwitch();
        com.google.javascript.rhino.Node node46 = node2.getLastSibling();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 38, 4);
        int int51 = node50.getSideEffectFlags();
        boolean boolean52 = node50.isContinue();
        com.google.javascript.rhino.Node node53 = node46.copyInformationFrom(node50);
        boolean boolean54 = node46.isCase();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test19503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19503");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        int int7 = node4.getLength();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        node4.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node29 = node27.getParent();
        com.google.javascript.rhino.Node node30 = node20.useSourceInfoFromForTree(node27);
        boolean boolean31 = node14.hasChild(node20);
        boolean boolean32 = node14.isStringKey();
        com.google.javascript.rhino.Node node33 = node4.useSourceInfoFromForTree(node14);
        boolean boolean34 = node33.isLabel();
        boolean boolean35 = node33.isAnd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node33.siblings();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node47 = node45.getParent();
        com.google.javascript.rhino.Node node48 = node38.useSourceInfoFromForTree(node45);
        boolean boolean49 = node48.isSetterDef();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        boolean boolean57 = node51.isBlock();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node61 = node51.copyInformationFromForTree(node60);
        node51.setType((int) '4');
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        int int69 = node67.getType();
        boolean boolean70 = node67.isOptionalArg();
        com.google.javascript.rhino.Node node71 = node51.useSourceInfoFrom(node67);
        com.google.javascript.rhino.Node node72 = node48.srcref(node71);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = null;
        node72.setStaticSourceFile(staticSourceFile73);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(15, node33, node72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test19504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19504");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        boolean boolean8 = node4.isTypeOf();
        boolean boolean9 = node4.wasEmptyNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isTypeOf();
        boolean boolean16 = node11.isDelProp();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node20.setJSType(jSType23);
        java.lang.String str25 = node20.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        node27.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList35 = com.google.common.collect.ImmutableList.of(node4, node11, node20, node27);
        com.google.javascript.rhino.Node node36 = node2.copyInformationFrom(node27);
        node36.putIntProp((int) ' ', 45);
        boolean boolean40 = node36.isInstanceOf();
        int int41 = node36.getSideEffectFlags();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = jSDocInfo42.getTemplateTypeNames();
        boolean boolean45 = jSDocInfo42.isNoTypeCheck();
        java.lang.String str47 = jSDocInfo42.getDescriptionForParameter("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n");
        java.util.Set<java.lang.String> strSet48 = jSDocInfo42.getParameterNames();
        node36.setDirectives(strSet48);
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet48.spliterator();
        java.lang.Object[] objArray51 = strSet48.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR" + "'", str25, "OR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
    }

    @Test
    public void test19505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19505");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean17 = node16.isExprResult();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node21.isLabel();
        boolean boolean24 = node16.isEquivalentTo(node21);
        com.google.javascript.rhino.Node node25 = node10.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.children();
        node27.putIntProp(8, (int) '4');
        node10.addChildrenToBack(node27);
        boolean boolean36 = node27.isThrow();
        node27.setVarArgs(true);
        boolean boolean39 = node27.hasChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node27.new FileLevelJsDocBuilder();
        boolean boolean41 = node27.isCase();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test19506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19506");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node3.isThis();
        boolean boolean24 = node3.isStringKey();
        boolean boolean25 = node3.isCase();
        boolean boolean26 = node3.isObjectLit();
        boolean boolean27 = node3.isDo();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test19507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19507");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        boolean boolean8 = jSDocInfo0.hasType();
        boolean boolean9 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test19508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19508");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean72 = jSDocInfo71.isNoShadow();
        boolean boolean73 = jSDocInfo71.isNoShadow();
        boolean boolean74 = jSDocInfo71.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo71.getReturnType();
        java.lang.String str76 = jSDocInfo71.getLendsName();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo71.getParameterNames();
        int int78 = strList6.indexOf((java.lang.Object) jSDocInfo71);
        java.util.Spliterator<java.lang.String> strSpliterator79 = strList6.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = strList6.remove(4100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator79);
    }

    @Test
    public void test19509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19509");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isExprResult();
        boolean boolean10 = node8.hasMoreThanOneChild();
        node8.detachChildren();
        boolean boolean12 = node8.isAnd();
        boolean boolean13 = node8.isSetterDef();
        boolean boolean14 = node8.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19510");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        int int73 = strList6.indexOf((java.lang.Object) (short) 0);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor74 = strList6.iterator();
        java.lang.Object[] objArray75 = strList6.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.hasBaseType();
        java.lang.String str78 = jSDocInfo76.getReturnDescription();
        int int79 = jSDocInfo76.getImplementedInterfaceCount();
        boolean boolean80 = strList6.contains((java.lang.Object) jSDocInfo76);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test19511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19511");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.hasModifies();
        jSDocInfo0.setLicense("(OR\n    OR\n)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test19512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19512");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getDescription();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        boolean boolean12 = jSDocInfo0.hasParameter("OR [jsdoc_info: JSDocInfo] [length: 46]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test19513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19513");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.Node node7 = node3.getParent();
        boolean boolean8 = node3.isFunction();
        com.google.javascript.rhino.Node node9 = node3.removeChildren();
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test19514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19514");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        node21.detachChildren();
        int int24 = node21.getIntProp((int) (short) 0);
        node21.putIntProp((int) (short) 100, 24613);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.hasBaseType();
        jSDocInfo28.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo28.getTypedefType();
        boolean boolean33 = jSDocInfo28.isNoSideEffects();
        boolean boolean35 = jSDocInfo28.hasDescriptionForParameter("JSDocInfo");
        jSDocInfo28.setLicense("Unknown class name");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isNot();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = node39.copyInformationFromForTree(node45);
        boolean boolean47 = node39.isNew();
        boolean boolean48 = node39.isLabel();
        jSDocInfo28.setAssociatedNode(node39);
        boolean boolean50 = node39.isFalse();
        com.google.javascript.rhino.Node node51 = node21.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean52 = node51.isStringKey();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test19515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19515");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        int int20 = node10.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node10.children();
        boolean boolean22 = node10.isParamList();
        com.google.javascript.rhino.Node node23 = node10.getLastSibling();
        boolean boolean24 = node10.isInc();
        boolean boolean25 = node10.isLabel();
        node10.setType(30);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test19516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19516");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 53, 46, 39);
        boolean boolean4 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = node3.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSDocInfo5);
    }

    @Test
    public void test19517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19517");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasParameter("Not declared as a type name");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19518");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setItem("");
        int int11 = stringPosition0.getStartLine();
        int int12 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("NUMBER 0.0 44");
        int int15 = stringPosition0.getStartLine();
        int int16 = stringPosition0.getStartLine();
        stringPosition0.setPositionInformation(7, 39, 30, 41004);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test19519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19519");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 151552);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test19520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19520");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isFalse();
        boolean boolean14 = node9.isParamList();
        node1.addChildToFront(node9);
        java.lang.String str16 = node1.toString();
        boolean boolean17 = node1.isTry();
        boolean boolean18 = node1.isAnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR" + "'", str16, "OR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test19521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19521");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        com.google.javascript.rhino.Node node16 = node7.copyInformationFromForTree(node10);
        jSDocInfo1.setAssociatedNode(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node10.children();
        boolean boolean19 = node10.isAssign();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, node10, 45, (int) (byte) 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node10.siblings();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node28 = node10.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d);
        com.google.javascript.rhino.Node node31 = node30.removeFirstChild();
        com.google.javascript.rhino.Node node32 = node28.useSourceInfoFrom(node30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node35.setStaticSourceFile(staticSourceFile38);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.Node node50 = node48.getParent();
        com.google.javascript.rhino.Node node51 = node41.useSourceInfoFromForTree(node48);
        boolean boolean52 = node35.hasChild(node41);
        boolean boolean53 = node35.isStringKey();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node35, "NUMBER 1.0 37\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression55);
        com.google.javascript.rhino.Node node57 = jSTypeExpression56.getRoot();
        node30.putProp(7, (java.lang.Object) node57);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        node60.putIntProp((int) (short) 0, 38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder67 = node60.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        node69.addChildrenToFront(node71);
        boolean boolean73 = node69.isNot();
        boolean boolean74 = node69.isIf();
        boolean boolean75 = node69.isNoSideEffectsCall();
        int int76 = node69.getType();
        boolean boolean77 = node69.isAssign();
        com.google.javascript.rhino.Node node78 = node60.copyInformationFromForTree(node69);
        boolean boolean79 = node60.isAssignAdd();
        com.google.javascript.rhino.Node node80 = node57.useSourceInfoIfMissingFrom(node60);
        boolean boolean81 = node80.isCase();
        node80.setCharno(5);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test19522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19522");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition3.setItem("NUMBER 4.0 1\n");
        stringPosition3.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str11 = stringPosition3.getItem();
        stringPosition3.setItem("");
        int int14 = stringPosition3.getStartLine();
        int int15 = stringPosition3.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int17 = stringPosition16.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList18 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition16);
        java.lang.String str19 = stringPosition0.getItem();
        int int20 = stringPosition0.getPositionOnStartLine();
        int int21 = stringPosition0.getPositionOnEndLine();
        int int22 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 4.0 1\n" + "'", str11, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(stringPositionList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 4.0 1\n" + "'", str19, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test19523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19523");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node1.isDelProp();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node39 = node37.getParent();
        node37.setIsSyntheticBlock(true);
        boolean boolean42 = node37.isContinue();
        java.lang.String str43 = node37.getQualifiedName();
        boolean boolean44 = node37.isSwitch();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.wasEmptyNode();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isTypeOf();
        boolean boolean58 = node53.isDelProp();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node62.setJSType(jSType65);
        java.lang.String str67 = node62.toString();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node69.setStaticSourceFile(staticSourceFile72);
        boolean boolean74 = node69.isComma();
        node69.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList77 = com.google.common.collect.ImmutableList.of(node46, node53, node62, node69);
        boolean boolean78 = node37.hasChild(node46);
        boolean boolean79 = node1.hasChild(node37);
        node1.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node82 = node1.getLastSibling();
        int int83 = node82.getSourceOffset();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR" + "'", str67, "OR");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test19524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19524");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasModifies();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
    }

    @Test
    public void test19525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19525");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isInc();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        node23.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node44 = node3.useSourceInfoFromForTree(node23);
        java.lang.Object obj46 = node3.getProp(42);
        boolean boolean47 = node3.isIn();
        boolean boolean48 = node3.isStringKey();
        int int49 = node3.getCharno();
        java.util.Set<java.lang.String> strSet50 = node3.getDirectives();
        boolean boolean51 = node3.isDefaultCase();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test19526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19526");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        int int12 = node3.getType();
        boolean boolean13 = node3.isNot();
        boolean boolean14 = node3.isIf();
        node3.setType(51);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        boolean boolean28 = node23.isIf();
        com.google.javascript.rhino.Node node29 = node20.copyInformationFromForTree(node23);
        boolean boolean30 = node20.isEmpty();
        com.google.javascript.rhino.jstype.JSType jSType31 = node20.getJSType();
        boolean boolean32 = node3.hasChild(node20);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        int int46 = node42.getCharno();
        com.google.javascript.rhino.Node node47 = node36.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        node51.setIsSyntheticBlock(true);
        boolean boolean56 = node51.isContinue();
        java.lang.String str57 = node51.getQualifiedName();
        boolean boolean58 = node51.isSwitch();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        boolean boolean64 = node60.isTypeOf();
        boolean boolean65 = node60.wasEmptyNode();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isTypeOf();
        boolean boolean72 = node67.isDelProp();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        com.google.javascript.rhino.Node node78 = node76.getParent();
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        node76.setJSType(jSType79);
        java.lang.String str81 = node76.toString();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        node83.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile86 = null;
        node83.setStaticSourceFile(staticSourceFile86);
        boolean boolean88 = node83.isComma();
        node83.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList91 = com.google.common.collect.ImmutableList.of(node60, node67, node76, node83);
        boolean boolean92 = node51.hasChild(node60);
        com.google.javascript.rhino.Node node93 = node42.useSourceInfoIfMissingFrom(node60);
        boolean boolean94 = node60.isThis();
        com.google.javascript.rhino.Node node95 = node3.useSourceInfoIfMissingFrom(node60);
        boolean boolean96 = node60.isEmpty();
        boolean boolean97 = node60.isGetProp();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "OR" + "'", str81, "OR");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(nodeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test19527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19527");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = null;
        node4.setStaticSourceFile(staticSourceFile7);
        boolean boolean9 = node4.isComma();
        node1.addChildrenToBack(node4);
        node1.setOptionalArg(true);
        com.google.javascript.rhino.InputId inputId13 = node1.getInputId();
        boolean boolean14 = node1.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19528");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        com.google.javascript.rhino.Node node16 = node7.copyInformationFromForTree(node10);
        jSDocInfo1.setAssociatedNode(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node10.children();
        boolean boolean19 = node10.isAssign();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, node10, 45, (int) (byte) 0);
        boolean boolean23 = node22.isTrue();
        boolean boolean24 = node22.isThis();
        com.google.javascript.rhino.Node node25 = node22.removeFirstChild();
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isHook();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test19529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19529");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder5 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder7 = nodeArrayBuilder5.add(nodeArray6);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(12, nodeArray6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(11, nodeArray6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '4', nodeArray6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(11, nodeArray6, (-1), 4);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(nodeArrayBuilder7);
    }

    @Test
    public void test19530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19530");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection29 = jSDocInfo0.getTypeNodes();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator30 = nodeCollection29.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNotNull(nodeCollection29);
        org.junit.Assert.assertNotNull(nodeSpliterator30);
    }

    @Test
    public void test19531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19531");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(30, 54, 409600);
    }

    @Test
    public void test19532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19532");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
    }

    @Test
    public void test19533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19533");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.lang.String str4 = jSDocInfo0.getVersion();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19534");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition6.getPositionOnEndLine();
        int int10 = typePosition6.getStartLine();
        int int11 = typePosition6.getPositionOnStartLine();
        int int12 = typePosition6.getEndLine();
        int int13 = typePosition6.getEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test19535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19535");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "((OR))", (int) (byte) 1, 10);
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList11.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.lang.String[] strArray22 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isTypeOf();
        boolean boolean31 = node26.wasEmptyNode();
        int int32 = strList23.indexOf((java.lang.Object) boolean31);
        int int33 = strList18.indexOf((java.lang.Object) boolean31);
        boolean boolean34 = strList18.isEmpty();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        int int48 = node44.getCharno();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] { node37, node44 };
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray49);
        int int51 = strList18.indexOf((java.lang.Object) node50);
        java.lang.String str52 = node50.toString();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        com.google.javascript.rhino.Node node58 = node56.getParent();
        node56.setIsSyntheticBlock(true);
        boolean boolean61 = node56.isContinue();
        java.lang.String str62 = node56.getQualifiedName();
        boolean boolean63 = node56.isSwitch();
        java.util.Set<java.lang.String> strSet64 = node56.getDirectives();
        boolean boolean65 = node56.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = node50.srcrefTree(node56);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        java.lang.String str71 = node68.toString();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node73.addSuppression("");
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node77 = node73.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node73.getStaticSourceFile();
        com.google.javascript.rhino.Node node79 = node68.copyInformationFromForTree(node73);
        node73.setOptionalArg(false);
        boolean boolean82 = node73.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("OR 0\n    OR\n");
        boolean boolean85 = node84.isLocalResultCall();
        boolean boolean86 = node73.isEquivalentToTyped(node84);
        com.google.javascript.rhino.Node node87 = node66.useSourceInfoFrom(node73);
        com.google.javascript.rhino.Node node88 = node4.clonePropsFrom(node66);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = node88.getExistingIntProp(27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 27");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "BITXOR 0" + "'", str52, "BITXOR 0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str71, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str76, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(staticSourceFile78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test19536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19536");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder3 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] { node5 };
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node13.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] { node13 };
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] { node21 };
        com.google.javascript.rhino.Node[][] nodeArray28 = new com.google.javascript.rhino.Node[][] { nodeArray11, nodeArray19, nodeArray27 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder29 = nodeArrayBuilder3.add(nodeArray28);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder32 = nodeArrayBuilder30.add(nodeArray31);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder33 = nodeArrayBuilder29.add(nodeArray31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(4095, nodeArray31);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(41, nodeArray31, (int) (short) 100, 30);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(15, nodeArray31, 1, 41);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArrayBuilder29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArrayBuilder32);
        org.junit.Assert.assertNotNull(nodeArrayBuilder33);
    }

    @Test
    public void test19537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19537");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags5.setReturnsTainted();
        int int7 = sideEffectFlags5.valueOf();
        boolean boolean8 = strSet3.remove((java.lang.Object) sideEffectFlags5);
        java.lang.String[] strArray15 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.lang.Object[] objArray18 = strSet16.toArray();
        strSet16.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean34 = strList26.containsAll((java.util.Collection<java.lang.String>) strList33);
        int int35 = strList26.size();
        boolean boolean36 = strSet16.retainAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean37 = strList26.isEmpty();
        boolean boolean38 = strSet3.containsAll((java.util.Collection<java.lang.String>) strList26);
        java.lang.Object[] objArray39 = strList26.toArray();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isNot();
        boolean boolean46 = node41.isDefaultCase();
        java.lang.String str47 = node41.toStringTree();
        boolean boolean48 = node41.isLabel();
        node41.removeProp(5);
        boolean boolean51 = strList26.equals((java.lang.Object) 5);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR\n    OR\n" + "'", str47, "OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test19538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19538");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasBaseType();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        int int22 = jSDocInfo19.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getEnumParameterType();
        node10.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getReturnType();
        java.lang.String str26 = jSDocInfo19.toString();
        java.lang.String str27 = jSDocInfo19.getFileOverview();
        java.util.Collection<java.lang.String> strCollection28 = jSDocInfo19.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo19.getVisibility();
        boolean boolean30 = jSDocInfo19.isDeprecated();
        int int31 = jSDocInfo19.getParameterCount();
        boolean boolean32 = jSDocInfo19.isInterface();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JSDocInfo" + "'", str26, "JSDocInfo");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strCollection28);
        org.junit.Assert.assertNull(visibility29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test19539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19539");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder1 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        java.lang.String str6 = node3.toString();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node3.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] { node11 };
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node19 };
        com.google.javascript.rhino.Node[][] nodeArray26 = new com.google.javascript.rhino.Node[][] { nodeArray9, nodeArray17, nodeArray25 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder27 = nodeArrayBuilder1.add(nodeArray26);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder28.add(nodeArray29);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = nodeArrayBuilder27.add(nodeArray29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, nodeArray29);
        boolean boolean33 = node32.isNE();
        boolean boolean34 = node32.isOptionalArg();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = node32.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str6, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArrayBuilder27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertNotNull(nodeArrayBuilder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test19540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19540");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        java.lang.String str41 = node36.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node47 = node45.getParent();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType54 = node49.getJSType();
        boolean boolean55 = node49.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node56 = node47.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int62 = node61.getSideEffectFlags();
        com.google.javascript.rhino.Node node63 = node49.useSourceInfoIfMissingFrom(node61);
        node61.detachChildren();
        com.google.javascript.rhino.Node node65 = node36.srcrefTree(node61);
        int int66 = node36.getSourcePosition();
        boolean boolean67 = node36.isUnscopedQualifiedName();
        java.lang.String str71 = node36.toString(false, false, false);
        node36.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 40999 + "'", int66 == 40999);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "OR" + "'", str71, "OR");
    }

    @Test
    public void test19541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19541");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair11 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType9, jSType10);
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair11.typeB;
        com.google.javascript.rhino.jstype.JSType jSType14 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType15 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType16 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType17 = typePair11.typeB;
        com.google.javascript.rhino.jstype.JSType jSType18 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair21 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType19, jSType20);
        com.google.javascript.rhino.jstype.JSType jSType22 = typePair21.typeA;
        com.google.javascript.rhino.jstype.JSType jSType23 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType jSType24 = typePair21.typeA;
        com.google.javascript.rhino.jstype.JSType jSType25 = typePair21.typeA;
        com.google.javascript.rhino.jstype.JSType jSType26 = typePair21.typeA;
        com.google.javascript.rhino.jstype.JSType jSType27 = typePair21.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList28 = com.google.common.collect.ImmutableList.of(typePair2, typePair11, typePair21);
        com.google.javascript.rhino.jstype.JSType jSType29 = typePair21.typeA;
        com.google.javascript.rhino.jstype.JSType jSType30 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType jSType31 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType.TypePair[] typePairArray32 = new com.google.javascript.rhino.jstype.JSType.TypePair[] { typePair21 };
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair35 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType33, jSType34);
        com.google.javascript.rhino.jstype.JSType jSType36 = typePair35.typeA;
        com.google.javascript.rhino.jstype.JSType jSType37 = typePair35.typeB;
        com.google.javascript.rhino.jstype.JSType jSType38 = typePair35.typeA;
        com.google.javascript.rhino.jstype.JSType jSType39 = typePair35.typeA;
        com.google.javascript.rhino.jstype.JSType jSType40 = typePair35.typeB;
        com.google.javascript.rhino.jstype.JSType jSType41 = typePair35.typeA;
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair44 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType42, jSType43);
        com.google.javascript.rhino.jstype.JSType jSType45 = typePair44.typeA;
        com.google.javascript.rhino.jstype.JSType jSType46 = typePair44.typeB;
        com.google.javascript.rhino.jstype.JSType jSType47 = typePair44.typeA;
        com.google.javascript.rhino.jstype.JSType jSType48 = typePair44.typeA;
        com.google.javascript.rhino.jstype.JSType jSType49 = typePair44.typeA;
        com.google.javascript.rhino.jstype.JSType jSType50 = typePair44.typeB;
        com.google.javascript.rhino.jstype.JSType jSType51 = typePair44.typeA;
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair54 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType52, jSType53);
        com.google.javascript.rhino.jstype.JSType jSType55 = typePair54.typeA;
        com.google.javascript.rhino.jstype.JSType jSType56 = typePair54.typeB;
        com.google.javascript.rhino.jstype.JSType jSType57 = typePair54.typeA;
        com.google.javascript.rhino.jstype.JSType jSType58 = typePair54.typeA;
        com.google.javascript.rhino.jstype.JSType jSType59 = typePair54.typeA;
        com.google.javascript.rhino.jstype.JSType jSType60 = typePair54.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList61 = com.google.common.collect.ImmutableList.of(typePair35, typePair44, typePair54);
        com.google.javascript.rhino.jstype.JSType jSType62 = typePair54.typeA;
        com.google.javascript.rhino.jstype.JSType jSType63 = typePair54.typeB;
        com.google.javascript.rhino.jstype.JSType jSType64 = typePair54.typeB;
        com.google.javascript.rhino.jstype.JSType.TypePair[] typePairArray65 = new com.google.javascript.rhino.jstype.JSType.TypePair[] { typePair54 };
        com.google.javascript.rhino.jstype.JSType.TypePair[][] typePairArray66 = new com.google.javascript.rhino.jstype.JSType.TypePair[][] { typePairArray32, typePairArray65 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair[]> typePairArrayList67 = com.google.common.collect.ImmutableList.copyOf(typePairArray66);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair[]> typePairArrayList68 = com.google.common.collect.ImmutableList.of(typePairArray66);
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertNull(jSType16);
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertNull(jSType18);
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertNull(jSType23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertNotNull(typePairList28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertNotNull(typePairArray32);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertNull(jSType37);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNull(jSType41);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(typePairList61);
        org.junit.Assert.assertNull(jSType62);
        org.junit.Assert.assertNull(jSType63);
        org.junit.Assert.assertNull(jSType64);
        org.junit.Assert.assertNotNull(typePairArray65);
        org.junit.Assert.assertNotNull(typePairArray66);
        org.junit.Assert.assertNotNull(typePairArrayList67);
        org.junit.Assert.assertNotNull(typePairArrayList68);
    }

    @Test
    public void test19542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19542");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(2);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        int int5 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test19543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19543");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int6 = node5.getSideEffectFlags();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node13.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node8.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node5, node8, (int) '4', (int) (byte) 100);
        node22.removeProp(4);
        boolean boolean25 = node22.isLabel();
        boolean boolean26 = node22.hasChildren();
        com.google.javascript.rhino.jstype.JSType jSType27 = node22.getJSType();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        boolean boolean33 = node29.isNot();
        boolean boolean34 = node29.isDefaultCase();
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        int int41 = node37.getCharno();
        boolean boolean42 = node37.isName();
        boolean boolean43 = node37.isNE();
        boolean boolean44 = node37.isIn();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.Node node50 = node48.getParent();
        boolean boolean51 = node50.isDefaultCase();
        int int52 = node37.getIndexOfChild(node50);
        boolean boolean53 = node50.isLabelName();
        boolean boolean54 = node29.isEquivalentTo(node50);
        boolean boolean55 = node50.isTypeOf();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean60 = node59.isName();
        node59.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node63 = node50.useSourceInfoIfMissingFrom(node59);
        int int64 = node22.getIndexOfChild(node50);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        node68.setIsSyntheticBlock(true);
        boolean boolean73 = node68.isContinue();
        java.lang.String str74 = node68.getQualifiedName();
        boolean boolean75 = node68.isSwitch();
        java.util.Set<java.lang.String> strSet76 = node68.getDirectives();
        boolean boolean77 = node68.isLocalResultCall();
        com.google.javascript.rhino.Node node78 = node50.useSourceInfoFrom(node68);
        boolean boolean79 = node78.isIn();
        boolean boolean80 = node78.hasChildren();
        node78.setVarArgs(true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test19544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19544");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isLabelName();
        boolean boolean9 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        int int15 = node11.getCharno();
        boolean boolean16 = node11.isName();
        boolean boolean17 = node11.isNE();
        boolean boolean18 = node11.isEmpty();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        boolean boolean24 = node20.hasChildren();
        com.google.javascript.rhino.Node node25 = node11.srcrefTree(node20);
        com.google.javascript.rhino.Node node26 = node1.srcref(node25);
        boolean boolean27 = node25.isUnscopedQualifiedName();
        int int28 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node30.setStaticSourceFile(staticSourceFile33);
        boolean boolean35 = node30.isComma();
        node30.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node39.children();
        com.google.javascript.rhino.InputId inputId44 = null;
        node39.setInputId(inputId44);
        boolean boolean46 = node39.isName();
        java.lang.String str47 = node30.checkTreeEquals(node39);
        boolean boolean48 = node39.isInc();
        boolean boolean49 = node39.isDebugger();
        boolean boolean50 = node39.isAssign();
        java.lang.String str54 = node39.toString(true, true, true);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        boolean boolean61 = node60.isDefaultCase();
        boolean boolean62 = node60.isNoSideEffectsCall();
        boolean boolean63 = node60.isNew();
        node60.setSourceEncodedPosition((int) (short) 100);
        boolean boolean66 = node60.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.hasBaseType();
        jSDocInfo68.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo68.setLicense("Not declared as a type name");
        node60.putProp(32, (java.lang.Object) "Not declared as a type name");
        // The following exception was thrown during execution in test generation
        try {
            node25.replaceChild(node39, node60);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str47, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR" + "'", str54, "OR");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test19545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19545");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test19546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19546");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        int int12 = node3.getType();
        boolean boolean13 = node3.isNot();
        boolean boolean14 = node3.isIf();
        node3.setType(51);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        boolean boolean28 = node23.isIf();
        com.google.javascript.rhino.Node node29 = node20.copyInformationFromForTree(node23);
        boolean boolean30 = node20.isEmpty();
        com.google.javascript.rhino.jstype.JSType jSType31 = node20.getJSType();
        boolean boolean32 = node3.hasChild(node20);
        boolean boolean33 = node3.isIf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test19547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19547");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean14 = strSet7.equals((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean29 = strList21.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strList21.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = strList21.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor32 = strList21.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean35 = ternaryValue33.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean38 = ternaryValue36.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str40 = ternaryValue39.toString();
        boolean boolean42 = ternaryValue39.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue36.and(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue33.and(ternaryValue39);
        int int45 = strList21.indexOf((java.lang.Object) ternaryValue44);
        java.lang.String str46 = strList21.toString();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor47 = strList21.listIterator();
        boolean boolean48 = strSet7.addAll((java.util.Collection<java.lang.String>) strList21);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(30, "OR [synthetic: 1]");
        boolean boolean52 = node51.isVarArgs();
        boolean boolean53 = strList21.contains((java.lang.Object) boolean52);
        int int54 = strList21.size();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags56.setReturnsTainted();
        sideEffectFlags56.setMutatesArguments();
        sideEffectFlags56.setReturnsTainted();
        int int60 = sideEffectFlags56.valueOf();
        boolean boolean61 = sideEffectFlags56.areAllFlagsSet();
        sideEffectFlags56.setThrows();
        boolean boolean63 = strList21.contains((java.lang.Object) sideEffectFlags56);
        sideEffectFlags56.setReturnsTainted();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "unknown" + "'", str40, "unknown");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str46, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test19548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19548");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setItem("");
        int int11 = stringPosition0.getStartLine();
        int int12 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("NUMBER 0.0 44");
        int int15 = stringPosition0.getStartLine();
        stringPosition0.setItem("()");
        int int18 = stringPosition0.getStartLine();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test19549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19549");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        jSDocInfo0.addSuppression("((Node tree inequality:\nTree1:\nOR 2 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n))");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test19550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19550");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        int int5 = node4.getLength();
        com.google.javascript.rhino.Node node6 = node4.getLastSibling();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(36, node4, 6, (int) (short) 10);
        boolean boolean11 = node10.isNot();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19551");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet0.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet5.union(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet9.union(booleanLiteralSet10);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = booleanLiteralSet5.union(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet2.union(booleanLiteralSet12);
        boolean boolean15 = booleanLiteralSet13.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet16.union(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet21.union(booleanLiteralSet22);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet24.union(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet23.union(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet19.union(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet13.intersection(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet31.intersection(booleanLiteralSet32);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet13.union(booleanLiteralSet33);
        boolean boolean36 = booleanLiteralSet13.contains(true);
        boolean boolean38 = booleanLiteralSet13.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet40.union(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet43.union(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet42.union(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = booleanLiteralSet48.union(booleanLiteralSet50);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = booleanLiteralSet53.union(booleanLiteralSet54);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = booleanLiteralSet57.union(booleanLiteralSet58);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = booleanLiteralSet53.union(booleanLiteralSet57);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet50.union(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet42.union(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet13.union(booleanLiteralSet62);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test19552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19552");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1), (-1), 15);
        node4.setType(50);
        boolean boolean7 = node4.isReturn();
        java.lang.String[] strArray14 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.lang.Object[] objArray17 = strSet15.toArray();
        strSet15.clear();
        java.util.Iterator<java.lang.String> strItor19 = strSet15.iterator();
        int int20 = strSet15.size();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        boolean boolean27 = node22.isName();
        boolean boolean28 = node22.isNE();
        boolean boolean29 = node22.isEmpty();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node31.addSuppression("");
        java.lang.String str34 = node31.toString();
        boolean boolean35 = node31.hasChildren();
        com.google.javascript.rhino.Node node36 = node22.srcrefTree(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node31.children();
        boolean boolean38 = strSet15.remove((java.lang.Object) node31);
        com.google.javascript.rhino.Node node39 = node31.cloneTree();
        boolean boolean40 = node39.isQuotedString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(15, node4, node39, 29, (int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isTypeOf();
        boolean boolean50 = node45.wasEmptyNode();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node52.isTypeOf();
        boolean boolean57 = node52.isDelProp();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        com.google.javascript.rhino.Node node63 = node61.getParent();
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node61.setJSType(jSType64);
        java.lang.String str66 = node61.toString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node68.setStaticSourceFile(staticSourceFile71);
        boolean boolean73 = node68.isComma();
        node68.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList76 = com.google.common.collect.ImmutableList.of(node45, node52, node61, node68);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        boolean boolean82 = node80.isLabel();
        boolean boolean83 = node80.isContinue();
        com.google.javascript.rhino.Node node84 = node52.copyInformationFrom(node80);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable85 = node80.getAncestors();
        com.google.javascript.rhino.Node node86 = node39.useSourceInfoFrom(node80);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str34, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR" + "'", str66, "OR");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeList76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(ancestorIterable85);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test19553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19553");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        boolean boolean71 = strList37.isEmpty();
        java.lang.Object[] objArray72 = strList37.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList37.spliterator();
        java.lang.Object[] objArray74 = strList37.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.hasBaseType();
        jSDocInfo75.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo75.getBaseType();
        java.util.Set<java.lang.String> strSet80 = jSDocInfo75.getParameterNames();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(100);
        node82.addChildrenToFront(node84);
        int int86 = node82.getCharno();
        boolean boolean87 = node82.isContinue();
        boolean boolean88 = strSet80.equals((java.lang.Object) node82);
        boolean boolean89 = node82.isSetterDef();
        int int90 = strList37.indexOf((java.lang.Object) boolean89);
        int int91 = strList37.size();
        boolean boolean92 = strList37.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor93 = strList37.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor94 = strList37.listIterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 6 + "'", int91 == 6);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strItor93);
        org.junit.Assert.assertNotNull(strItor94);
    }

    @Test
    public void test19554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19554");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        boolean boolean4 = node1.getBooleanProp(4095);
        node1.setSourceEncodedPosition(51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId8 = node1.getInputId();
        boolean boolean9 = node1.isAdd();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags11.setMutatesArguments();
        sideEffectFlags11.clearSideEffectFlags();
        sideEffectFlags11.setMutatesThis();
        sideEffectFlags11.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder7);
        org.junit.Assert.assertNull(inputId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test19555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19555");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        com.google.javascript.rhino.Node node16 = node7.copyInformationFromForTree(node10);
        jSDocInfo1.setAssociatedNode(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node10.children();
        boolean boolean19 = node10.isAssign();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, node10, 45, (int) (byte) 0);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.jstype.JSType jSType24 = node22.getJSType();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSType24);
    }

    @Test
    public void test19556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19556");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        boolean boolean15 = node6.isOr();
        node6.putIntProp(2, 0);
        com.google.javascript.rhino.jstype.JSType jSType19 = node6.getJSType();
        boolean boolean20 = node6.isCatch();
        boolean boolean21 = node6.isInc();
        boolean boolean22 = node6.isObjectLit();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test19557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19557");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.isOnlyModifiesThisCall();
        boolean boolean8 = node2.isDelProp();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node10.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node10.isComma();
        boolean boolean16 = node10.isBlock();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = node18.cloneNode();
        com.google.javascript.rhino.Node node20 = node10.copyInformationFromForTree(node19);
        node10.setType((int) '4');
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        int int28 = node26.getType();
        boolean boolean29 = node26.isOptionalArg();
        com.google.javascript.rhino.Node node30 = node10.useSourceInfoFrom(node26);
        boolean boolean31 = node10.isSwitch();
        com.google.javascript.rhino.Node node32 = node10.getNext();
        boolean boolean33 = node10.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean35 = jSDocInfo34.hasBaseType();
        jSDocInfo34.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getBaseType();
        java.util.Set<java.lang.String> strSet39 = jSDocInfo34.getParameterNames();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        int int45 = node41.getCharno();
        boolean boolean46 = node41.isContinue();
        boolean boolean47 = strSet39.equals((java.lang.Object) node41);
        boolean boolean48 = node41.isSetterDef();
        node41.setSourceFileForTesting("NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        boolean boolean55 = node52.isVarArgs();
        int int56 = node52.getChildCount();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isNot();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = node58.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node66 = node52.useSourceInfoFromForTree(node64);
        node66.setCharno(16);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(29, node2, node10, node41, node66, 51, 16);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        boolean boolean77 = node73.isNot();
        boolean boolean78 = node73.isLocalResultCall();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node80.addSuppression("");
        com.google.javascript.rhino.Node node83 = node73.copyInformationFromForTree(node80);
        node2.addChildrenToBack(node80);
        boolean boolean85 = node80.isComma();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test19558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19558");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int1 = sideEffectFlags0.valueOf();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesThis();
        boolean boolean6 = sideEffectFlags0.areAllFlagsSet();
        int int7 = sideEffectFlags0.valueOf();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test19559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19559");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        boolean boolean8 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node19 = node15.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node10.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFrom(node15);
        boolean boolean23 = node22.isDelProp();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(42, node22, 10, 41);
        com.google.javascript.rhino.Node node27 = node22.getParent();
        boolean boolean28 = node22.isOptionalArg();
        node22.setCharno((int) '#');
        boolean boolean31 = node22.isBlock();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test19560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19560");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.lang.Object obj18 = null;
        boolean boolean19 = strList5.equals(obj18);
        boolean boolean20 = strList5.isEmpty();
        java.util.Iterator<java.lang.String> strItor21 = strList5.iterator();
        java.util.stream.Stream<java.lang.String> strStream22 = strList5.parallelStream();
        boolean boolean23 = strList5.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = strList5.set(46, "(STRING OR)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test19561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19561");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, (int) (byte) 10, 30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = node3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19562");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node13 = node9.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node9.getStaticSourceFile();
        boolean boolean15 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        node17.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node26.children();
        com.google.javascript.rhino.InputId inputId31 = null;
        node26.setInputId(inputId31);
        boolean boolean33 = node26.isName();
        java.lang.String str34 = node17.checkTreeEquals(node26);
        boolean boolean35 = node26.isInc();
        node26.setType((int) (short) -1);
        node9.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node49 = node45.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node45.getStaticSourceFile();
        com.google.javascript.rhino.Node node51 = node40.copyInformationFromForTree(node45);
        boolean boolean52 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isTypeOf();
        boolean boolean59 = node54.isVarArgs();
        boolean boolean60 = node54.isIn();
        node45.addChildToFront(node54);
        node54.removeProp(48);
        com.google.javascript.rhino.Node node65 = node54.getAncestor(0);
        com.google.javascript.rhino.Node node67 = node65.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node68 = node9.useSourceInfoFromForTree(node67);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node67.children();
        boolean boolean70 = node67.isEmpty();
        com.google.javascript.rhino.Node node71 = node3.srcref(node67);
        boolean boolean72 = node67.isEmpty();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str34, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str43, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test19563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19563");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.stream.Stream<java.lang.String> strStream6 = strSet5.parallelStream();
        java.lang.Object obj7 = null;
        boolean boolean8 = strSet5.equals(obj7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19564");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isFalse();
        boolean boolean14 = node9.isParamList();
        node1.addChildToFront(node9);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node9.getJsDocBuilderForNode();
        node9.addSuppression("");
        com.google.javascript.rhino.InputId inputId19 = null;
        node9.setInputId(inputId19);
        com.google.javascript.rhino.Node node21 = node9.getNext();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder16);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test19565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19565");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        boolean boolean14 = node9.isName();
        boolean boolean15 = node9.isNE();
        boolean boolean16 = node9.isIn();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        boolean boolean23 = node22.isDefaultCase();
        int int24 = node9.getIndexOfChild(node22);
        boolean boolean25 = node22.isLabelName();
        boolean boolean26 = node1.isEquivalentTo(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(53, "OR [jsdoc_info: JSDocInfo]");
        boolean boolean30 = node29.isRegExp();
        boolean boolean32 = node29.getBooleanProp(16);
        com.google.javascript.rhino.Node node33 = node22.copyInformationFrom(node29);
        node33.setWasEmptyNode(true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable36 = node33.getAncestors();
        int int38 = node33.getIntProp((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(ancestorIterable36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test19566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19566");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        jSDocInfo0.addSuppression("(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test19567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19567");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        node2.putIntProp((int) (short) 0, 38);
        boolean boolean9 = node2.isTypeOf();
        boolean boolean10 = node2.isVar();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(0, node2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19568");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        java.lang.String str10 = jSDocInfo0.getMeaning();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getTypedefType();
        boolean boolean17 = jSDocInfo12.isNoSideEffects();
        com.google.javascript.rhino.Node node18 = jSDocInfo12.getAssociatedNode();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo12.getSuppressions();
        strSet19.clear();
        boolean boolean21 = strList11.containsAll((java.util.Collection<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strList11.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor24 = strList11.listIterator(33);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (33) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
    }

    @Test
    public void test19569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19569");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        boolean boolean15 = node6.isNoSideEffectsCall();
        boolean boolean16 = node6.isVoid();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        boolean boolean23 = node22.isDefaultCase();
        com.google.javascript.rhino.Node node24 = node6.useSourceInfoFrom(node22);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node26.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node26.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.children();
        boolean boolean33 = node26.isObjectLit();
        node26.setSourceEncodedPosition(15);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(43, "NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node42.isLabel();
        boolean boolean45 = node42.isContinue();
        node42.setVarArgs(false);
        boolean boolean48 = node42.isVoid();
        com.google.javascript.rhino.Node node49 = node38.copyInformationFrom(node42);
        node42.setWasEmptyNode(true);
        boolean boolean52 = node42.isNot();
        boolean boolean53 = node42.isLocalResultCall();
        boolean boolean54 = node42.hasChildren();
        com.google.javascript.rhino.Node node55 = node26.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition56.setItem(node58);
        int int60 = node58.getSourceOffset();
        node26.addChildrenToBack(node58);
        com.google.javascript.rhino.Node node62 = node24.srcref(node26);
        int int63 = node26.getLineno();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags64 = null;
        // The following exception was thrown during execution in test generation
        try {
            node26.setSideEffectFlags(sideEffectFlags64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test19570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19570");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean11 = jSTypeExpression10.isVarArgs();
        boolean boolean12 = jSTypeExpression10.isVarArgs();
        boolean boolean13 = jSTypeExpression10.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression10);
        com.google.javascript.rhino.Node node15 = jSTypeExpression10.getRoot();
        com.google.javascript.rhino.Node node16 = jSTypeExpression10.getRoot();
        boolean boolean17 = jSTypeExpression10.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression18);
    }

    @Test
    public void test19571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19571");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node64.setStaticSourceFile(staticSourceFile66);
        int int68 = node64.getSourceOffset();
        boolean boolean69 = node64.isNumber();
        java.lang.String str73 = node64.toString(true, false, false);
        node64.putIntProp(31, 10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder77 = node64.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "OR" + "'", str73, "OR");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder77);
    }

    @Test
    public void test19572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19572");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        boolean boolean4 = jSDocInfo0.isHidden();
        boolean boolean5 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19573");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        stringPosition0.setItem("(NUMBER 1.0 37\n)");
        stringPosition0.setItem("(OR)");
        stringPosition0.setItem("OR [jsdoc_info: JSDocInfo] [source_file: OR\n]");
        stringPosition0.setPositionInformation(15, (int) (byte) 10, 50, 13);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test19574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19574");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test19575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19575");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        node2.putIntProp((int) (short) 0, 38);
        boolean boolean9 = node2.isCall();
        int int10 = node2.getCharno();
        boolean boolean12 = node2.getBooleanProp(41);
        boolean boolean13 = node2.isScript();
        com.google.javascript.rhino.Node node14 = node2.cloneNode();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(11, node2, 4095, 51);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(30, "OR 0\n    OR\n");
        node20.setVarArgs(false);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node23 = node2.getChildBefore(node20);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test19576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19576");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(44, 6, 9);
        boolean boolean5 = node3.getBooleanProp((int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
    }

    @Test
    public void test19577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19577");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isFalse();
        boolean boolean13 = node8.isParamList();
        com.google.javascript.rhino.Node node14 = node1.useSourceInfoIfMissingFrom(node8);
        boolean boolean15 = node14.isSyntheticBlock();
        int int16 = node14.getType();
        boolean boolean17 = node14.isThrow();
        com.google.javascript.rhino.Node node18 = node14.cloneTree();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test19578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19578");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        node3.setVarArgs(false);
        boolean boolean9 = node3.isVoid();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node11.getStaticSourceFile();
        boolean boolean17 = node11.isLocalResultCall();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node19.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = node11.useSourceInfoFrom(node24);
        boolean boolean32 = node24.isWhile();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node40.cloneNode();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isNot();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = node43.copyInformationFromForTree(node49);
        com.google.javascript.rhino.InputId inputId51 = node43.getInputId();
        com.google.javascript.rhino.Node node52 = node43.getNext();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        boolean boolean60 = node54.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node24, node36, node41, node43, node54);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node43.getJsDocBuilderForNode();
        boolean boolean63 = node43.hasOneChild();
        node3.addChildrenToBack(node43);
        com.google.javascript.rhino.Node node65 = node43.getFirstChild();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = new com.google.javascript.rhino.JSTypeExpression(node43, "(OR 2 [jsdoc_info: JSDocInfo])");
        com.google.javascript.rhino.Node node68 = jSTypeExpression67.getRoot();
        com.google.javascript.rhino.Node node69 = jSTypeExpression67.getRoot();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(inputId51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test19579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19579");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor21 = strList12.listIterator();
        boolean boolean22 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList12);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node33.children();
        com.google.javascript.rhino.InputId inputId38 = null;
        node33.setInputId(inputId38);
        boolean boolean40 = node33.isName();
        java.lang.String str41 = node24.checkTreeEquals(node33);
        boolean boolean42 = node33.isInc();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isNot();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = node44.copyInformationFromForTree(node50);
        com.google.javascript.rhino.InputId inputId52 = node44.getInputId();
        node33.addChildrenToFront(node44);
        boolean boolean54 = strList12.equals((java.lang.Object) node44);
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = strList12.reverse();
        java.lang.Object[] objArray56 = strList12.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList57 = strList12.reverse();
        java.util.ListIterator<java.lang.String> strItor58 = strList57.listIterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str41, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strItor58);
    }

    @Test
    public void test19580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19580");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        jSDocInfo0.setLicense("OR 0 [jsdoc_info: JSDocInfo]\n");
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue8.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue10.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue8.and(ternaryValue12);
        boolean boolean14 = strSet5.remove((java.lang.Object) ternaryValue12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19581");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.isOnlyModifiesThisCall();
        node1.setWasEmptyNode(true);
        java.util.Set<java.lang.String> strSet9 = node1.getDirectives();
        node1.putBooleanProp(8, true);
        boolean boolean13 = node1.isDec();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test19582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19582");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.isConstructor();
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test19583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19583");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasBaseType();
        jSDocInfo6.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getTypedefType();
        boolean boolean11 = jSDocInfo6.isNoSideEffects();
        com.google.javascript.rhino.Node node12 = jSDocInfo6.getAssociatedNode();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo6.getSuppressions();
        strSet13.clear();
        int int15 = strSet13.size();
        boolean boolean16 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        boolean boolean17 = strSet13.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator18 = strSet13.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo19.getImplementedInterfaces();
        boolean boolean23 = jSDocInfo19.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo19.getTemplateTypeNames();
        java.lang.String[] strArray31 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        java.lang.Object[] objArray34 = strSet32.toArray();
        strSet32.clear();
        boolean boolean36 = strList24.containsAll((java.util.Collection<java.lang.String>) strSet32);
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean51 = strList43.containsAll((java.util.Collection<java.lang.String>) strList50);
        int int52 = strList50.size();
        boolean boolean53 = strSet32.retainAll((java.util.Collection<java.lang.String>) strList50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str55 = jSDocInfo54.getFileOverview();
        java.lang.String str56 = jSDocInfo54.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList57 = jSDocInfo54.getThrownTypes();
        boolean boolean58 = jSDocInfo54.isHidden();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = jSDocInfo54.getTemplateTypeNames();
        boolean boolean60 = strList50.containsAll((java.util.Collection<java.lang.String>) strList59);
        boolean boolean61 = strList50.isEmpty();
        boolean boolean62 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList50);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSpliterator18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(jSTypeExpressionList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test19584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19584");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        boolean boolean5 = jSDocInfo0.isExpose();
        java.lang.String str6 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test19585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19585");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(31, "OR [directives: []]\n    OR\n", (int) (short) 100, 3);
        node4.setWasEmptyNode(false);
        boolean boolean7 = node4.wasEmptyNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19586");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node16.isLabel();
        boolean boolean19 = node16.isContinue();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        com.google.javascript.rhino.Node node27 = node16.useSourceInfoIfMissingFrom(node22);
        boolean boolean28 = node3.isEquivalentTo(node22);
        boolean boolean29 = node3.isNew();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test19587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19587");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        node3.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node19 = node15.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node10.copyInformationFromForTree(node15);
        boolean boolean22 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node24.isTypeOf();
        boolean boolean29 = node24.isVarArgs();
        boolean boolean30 = node24.isIn();
        node15.addChildToFront(node24);
        node24.removeProp(48);
        node24.addSuppression("OR [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node36 = node3.copyInformationFrom(node24);
        boolean boolean37 = node3.isGetElem();
        node3.setLength(38);
        boolean boolean40 = node3.isDo();
        boolean boolean41 = node3.isNot();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test19588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19588");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet3.union(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet8.union(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet12.union(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet8.union(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet5.union(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet16.union(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet20.intersection(booleanLiteralSet21);
        boolean boolean24 = booleanLiteralSet20.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet18.intersection(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet26.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet25.intersection(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet1.intersection(booleanLiteralSet30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        com.google.javascript.rhino.Node node42 = node40.getParent();
        com.google.javascript.rhino.Node node43 = node33.useSourceInfoFromForTree(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.hasBaseType();
        jSDocInfo44.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo44.getBaseType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo44.getParameterNames();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        int int55 = node51.getCharno();
        boolean boolean56 = node51.isContinue();
        boolean boolean57 = strSet49.equals((java.lang.Object) node51);
        node43.setDirectives(strSet49);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        boolean boolean68 = strList61.retainAll((java.util.Collection<java.lang.String>) strList66);
        int int69 = strList61.size();
        boolean boolean70 = strSet49.containsAll((java.util.Collection<java.lang.String>) strList61);
        com.google.common.collect.ImmutableList<java.util.Set<java.lang.String>> strSetList71 = com.google.common.collect.ImmutableList.of(strSet49);
        java.lang.Object[] objArray72 = strSet49.toArray();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = booleanLiteralSet74.union(booleanLiteralSet75);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = booleanLiteralSet77.union(booleanLiteralSet79);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet81 = booleanLiteralSet76.union(booleanLiteralSet80);
        boolean boolean82 = strSet49.equals((java.lang.Object) booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean85 = booleanLiteralSet83.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = booleanLiteralSet86.intersection(booleanLiteralSet87);
        boolean boolean90 = booleanLiteralSet88.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet91 = booleanLiteralSet83.intersection(booleanLiteralSet88);
        boolean boolean93 = booleanLiteralSet91.contains(false);
        boolean boolean95 = booleanLiteralSet91.contains(true);
        boolean boolean97 = booleanLiteralSet91.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet98 = booleanLiteralSet76.intersection(booleanLiteralSet91);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet99 = booleanLiteralSet1.intersection(booleanLiteralSet98);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSetList71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet81 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet81.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet91 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet91.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet98 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet98.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet99 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet99.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test19589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19589");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isOnlyModifiesThisCall();
        int int10 = node3.getSourcePosition();
        boolean boolean11 = node3.isObjectLit();
        boolean boolean12 = node3.isWith();
        boolean boolean13 = node3.isDo();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test19590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19590");
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        java.lang.String str11 = strList10.toString();
        java.util.Iterator<java.lang.String> strItor12 = strList10.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = strList10.reverse();
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]" + "'", str11, "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test19591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19591");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(42);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 42 + "'", int2 == 42);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test19592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19592");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isNoSideEffectsCall();
        java.lang.String str11 = node5.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasTypedefType();
        java.lang.String str14 = jSDocInfo12.toString();
        node5.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getEnumParameterType();
        boolean boolean17 = jSDocInfo12.isOverride();
        boolean boolean18 = jSDocInfo12.hasTypedefType();
        boolean boolean19 = jSDocInfo12.hasModifies();
        boolean boolean20 = jSDocInfo12.isNoAlias();
        boolean boolean21 = jSDocInfo12.isIdGenerator();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR" + "'", str11, "OR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSDocInfo" + "'", str14, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test19593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19593");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isAssign();
        boolean boolean11 = node1.isReturn();
        int int12 = node1.getLineno();
        node1.setLineno(2);
        boolean boolean15 = node1.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR 2 [jsdoc_info: JSDocInfo] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test19594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19594");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(49, "OR\n    OR\n", 31, (int) (short) 100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(43, node5);
        node5.setLength(9);
        node5.putIntProp((int) (byte) 100, (int) (byte) 10);
        node5.setSourceEncodedPositionForTree(50);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test19595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19595");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        stringPosition0.setItem("(NUMBER 1.0 37\n)");
        int int4 = stringPosition0.getEndLine();
        int int5 = stringPosition0.getStartLine();
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test19596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19596");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        boolean boolean7 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19597");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition8 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker0.getName();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(nodeSourcePosition8);
        org.junit.Assert.assertNull(stringPosition9);
    }

    @Test
    public void test19598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19598");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isBlock();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = node22.cloneNode();
        com.google.javascript.rhino.Node node24 = node14.copyInformationFromForTree(node23);
        node14.setType((int) '4');
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        int int32 = node30.getType();
        boolean boolean33 = node30.isOptionalArg();
        com.google.javascript.rhino.Node node34 = node14.useSourceInfoFrom(node30);
        com.google.javascript.rhino.Node node35 = node11.srcref(node34);
        // The following exception was thrown during execution in test generation
        try {
            node34.setDouble((double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: INSTANCEOF [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test19599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19599");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        boolean boolean7 = node1.isFunction();
        boolean boolean8 = node1.isThrow();
        int int9 = node1.getChildCount();
        boolean boolean10 = node1.isArrayLit();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19600");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        com.google.javascript.rhino.Node node9 = null;
        typePosition1.setItem(node9);
        int int11 = typePosition1.getStartLine();
        com.google.javascript.rhino.Node node12 = typePosition1.getItem();
        int int13 = typePosition1.getStartLine();
        int int14 = typePosition1.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition1.setPositionInformation(5, 24, 0, 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 5?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test19601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19601");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(4, 50, 44);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node3.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19602");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        boolean boolean7 = node3.isThis();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node11.isLabel();
        boolean boolean14 = node11.isContinue();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        int int21 = node17.getCharno();
        com.google.javascript.rhino.Node node22 = node11.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        node26.setIsSyntheticBlock(true);
        boolean boolean31 = node26.isContinue();
        java.lang.String str32 = node26.getQualifiedName();
        boolean boolean33 = node26.isSwitch();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isTypeOf();
        boolean boolean40 = node35.wasEmptyNode();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node42.isTypeOf();
        boolean boolean47 = node42.isDelProp();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        node51.setJSType(jSType54);
        java.lang.String str56 = node51.toString();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node58.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        node58.setStaticSourceFile(staticSourceFile61);
        boolean boolean63 = node58.isComma();
        node58.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList66 = com.google.common.collect.ImmutableList.of(node35, node42, node51, node58);
        boolean boolean67 = node26.hasChild(node35);
        com.google.javascript.rhino.Node node68 = node17.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node35.setJSType(jSType69);
        node35.setSourceEncodedPositionForTree(12);
        boolean boolean73 = node35.hasOneChild();
        com.google.javascript.rhino.Node node74 = node3.copyInformationFrom(node35);
        boolean boolean75 = node74.isCatch();
        node74.putIntProp(15, 53);
        boolean boolean79 = node74.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = node74.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "OR" + "'", str56, "OR");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSDocInfo80);
    }

    @Test
    public void test19603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19603");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = strList13.reverse();
        int int25 = strList13.size();
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList26 = com.google.common.collect.ImmutableList.of();
        boolean boolean27 = strList13.contains((java.lang.Object) strListList26);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(strListList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test19604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19604");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.lang.Object[] objArray11 = strSet7.toArray();
        boolean boolean13 = strSet7.add("GETELEM");
        java.util.Iterator<java.lang.String> strItor14 = strSet7.iterator();
        java.util.stream.Stream<java.lang.String> strStream15 = strSet7.parallelStream();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strStream15);
    }

    @Test
    public void test19605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19605");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(839028746);
    }

    @Test
    public void test19606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19606");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(9, 39, (int) '#');
        boolean boolean4 = node3.isNot();
        boolean boolean5 = node3.isVoid();
        java.lang.Object obj7 = node3.getProp(4100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test19607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19607");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        java.lang.String str34 = jSDocInfo27.getOriginalCommentString();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection35 = jSDocInfo27.getMarkers();
        boolean boolean36 = jSDocInfo27.isDefine();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(markerCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test19608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19608");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(OR [jsdoc_info: JSDocInfo])");
        boolean boolean2 = node1.isBlock();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo3.getParameterNames();
        boolean boolean5 = jSDocInfo3.isOverride();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isNot();
        boolean boolean17 = node12.isIf();
        com.google.javascript.rhino.Node node18 = node9.copyInformationFromForTree(node12);
        jSDocInfo3.setAssociatedNode(node12);
        int int20 = jSDocInfo3.getImplementedInterfaceCount();
        jSDocInfo3.setDeprecated(false);
        com.google.javascript.rhino.Node node23 = jSDocInfo3.getAssociatedNode();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "NUMBER 1.0 37\n");
        com.google.javascript.rhino.Node node27 = node23.srcrefTree(node26);
        com.google.javascript.rhino.Node node28 = node26.removeFirstChild();
        boolean boolean29 = node1.isEquivalentToTyped(node26);
        boolean boolean30 = node26.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test19609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19609");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19610");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.wasEmptyNode();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node46.setJSType(jSType49);
        java.lang.String str51 = node46.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        boolean boolean58 = node53.isComma();
        node53.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node30, node37, node46, node53);
        boolean boolean62 = node53.isComma();
        boolean boolean63 = node7.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node node64 = node7.getLastChild();
        boolean boolean65 = node7.isGetProp();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node7.siblings();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node68.setStaticSourceFile(staticSourceFile71);
        boolean boolean73 = node68.isComma();
        node68.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node77.addChildrenToFront(node79);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable81 = node77.children();
        com.google.javascript.rhino.InputId inputId82 = null;
        node77.setInputId(inputId82);
        boolean boolean84 = node77.isName();
        java.lang.String str85 = node68.checkTreeEquals(node77);
        node77.setCharno((int) '#');
        com.google.javascript.rhino.Node node88 = node7.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node node89 = node88.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node89.setOptionalArg(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeIterable81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str85, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test19611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19611");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasModifies();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.hasParameterType("GETELEM");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "(OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n)", 45, 4095);
        jSDocInfo0.setAssociatedNode(node15);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test19612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19612");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isIdGenerator();
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        boolean boolean4 = jSDocInfo0.isExpose();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19613");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        node2.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node11.children();
        com.google.javascript.rhino.InputId inputId16 = null;
        node11.setInputId(inputId16);
        boolean boolean18 = node11.isName();
        java.lang.String str19 = node2.checkTreeEquals(node11);
        boolean boolean20 = node11.isStringKey();
        boolean boolean21 = node11.isLocalResultCall();
        com.google.javascript.rhino.Node node22 = node11.removeChildren();
        boolean boolean23 = node22.isTypeOf();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node25.getStaticSourceFile();
        boolean boolean31 = node25.isLocalResultCall();
        boolean boolean32 = node25.isArrayLit();
        boolean boolean33 = node25.isAssign();
        com.google.javascript.rhino.Node node34 = node22.clonePropsFrom(node25);
        boolean boolean35 = node22.isGetProp();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isNot();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = node37.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node46.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node46.getStaticSourceFile();
        boolean boolean52 = node46.isLocalResultCall();
        boolean boolean53 = node46.isArrayLit();
        boolean boolean54 = node46.isAssign();
        boolean boolean55 = node46.isAssign();
        boolean boolean56 = node46.isReturn();
        int int57 = node46.getLineno();
        boolean boolean58 = node46.isVar();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node60.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node60.setStaticSourceFile(staticSourceFile63);
        boolean boolean65 = node60.isComma();
        boolean boolean66 = node60.isBlock();
        com.google.javascript.rhino.Node node67 = node60.getLastSibling();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node73 = node69.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node69.getStaticSourceFile();
        boolean boolean75 = node69.isVarArgs();
        node60.addChildrenToFront(node69);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, node22, node43, node46, node60, 44, 3);
        boolean boolean80 = node22.isScript();
        boolean boolean81 = node22.isInc();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str19, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test19614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19614");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.util.stream.BaseStream[][] baseStreamArray8 = new java.util.stream.BaseStream[0][];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][] strBaseStreamArray9 = (java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][]) baseStreamArray8;
        java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][] strBaseStreamArray10 = strSet6.toArray(strBaseStreamArray9);
        java.util.Collection<java.lang.String> strCollection11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = strSet6.containsAll(strCollection11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(baseStreamArray8);
        org.junit.Assert.assertNotNull(strBaseStreamArray9);
        org.junit.Assert.assertNotNull(strBaseStreamArray10);
    }

    @Test
    public void test19615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19615");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        boolean boolean8 = node1.isName();
        boolean boolean9 = node1.isFunction();
        com.google.javascript.rhino.Node node10 = node1.removeChildren();
        node1.setType((int) ' ');
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test19616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19616");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isDefaultCase();
        boolean boolean8 = node1.isLocalResultCall();
        boolean boolean9 = node1.isOnlyModifiesThisCall();
        boolean boolean10 = node1.isThrow();
        com.google.javascript.rhino.Node node11 = node1.getLastSibling();
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean26 = strList18.containsAll((java.util.Collection<java.lang.String>) strList25);
        java.lang.String[] strArray29 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.wasEmptyNode();
        int int39 = strList30.indexOf((java.lang.Object) boolean38);
        int int40 = strList25.indexOf((java.lang.Object) boolean38);
        boolean boolean41 = strList25.isEmpty();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isTypeOf();
        boolean boolean49 = node44.isDelProp();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        int int55 = node51.getCharno();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node44, node51 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray56);
        int int58 = strList25.indexOf((java.lang.Object) node57);
        java.lang.String str59 = node57.toString();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        node61.setStaticSourceFile(staticSourceFile64);
        boolean boolean66 = node61.hasMoreThanOneChild();
        node57.addChildToBack(node61);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = new com.google.javascript.rhino.JSTypeExpression(node57, "");
        node57.addSuppression("NUMBER 10.0");
        int int72 = node57.getLength();
        boolean boolean73 = node11.isEquivalentTo(node57);
        int int74 = node11.getCharno();
        java.lang.String str75 = node11.getSourceFileName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "BITXOR 0" + "'", str59, "BITXOR 0");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test19617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19617");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node1.isQuotedString();
        boolean boolean34 = node1.isNumber();
        boolean boolean35 = node1.isNoSideEffectsCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str37 = jSDocInfo36.getFileOverview();
        java.lang.String str38 = jSDocInfo36.getFileOverview();
        boolean boolean39 = jSDocInfo36.isConstant();
        jSDocInfo36.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo36.setVisibility(visibility42);
        java.util.Set<java.lang.String> strSet44 = jSDocInfo36.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet44.spliterator();
        node1.setDirectives(strSet44);
        int int47 = strSet44.size();
        int int48 = strSet44.size();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test19618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19618");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(24613, "Node tree inequality:\nTree1:\nSTRING OR [jsdoc_info: JSDocInfo] 4\n\n\nTree2:\nBITXOR 0\n    OR\n        OR\n    OR\n        OR\n\n\nSubtree1: STRING OR [jsdoc_info: JSDocInfo] 4\n\n\nSubtree2: BITXOR 0\n    OR\n        OR\n    OR\n        OR\n", 4100, (int) (short) 0);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test19619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19619");
        java.lang.String[] strArray14 = new java.lang.String[] { "", "OR [jsdoc_info: JSDocInfo]", "NUMBER 4.0 1\n", "Named type with empty name component", "unknown", "OR\n", "Unknown class name", "Not declared as a type name", "OR [jsdoc_info: JSDocInfo]\n", "OR\n", "OR [jsdoc_info: JSDocInfo]", "unknown", "NUMBER 4.0 1\n", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet15.spliterator();
        int int18 = strSet15.size();
        java.lang.Object obj19 = null;
        boolean boolean20 = strSet15.remove(obj19);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test19620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19620");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        node1.removeProp(44);
        boolean boolean21 = node1.isIf();
        boolean boolean22 = node1.isString();
        com.google.javascript.rhino.Node node23 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isReturn();
        com.google.javascript.rhino.InputId inputId30 = node25.getInputId();
        boolean boolean31 = node25.isArrayLit();
        boolean boolean32 = node25.isObjectLit();
        node1.addChildrenToFront(node25);
        boolean boolean34 = node25.isQualifiedName();
        boolean boolean35 = node25.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node25.getJsDocBuilderForNode();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder36);
    }

    @Test
    public void test19621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19621");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        int int17 = node13.getCharno();
        boolean boolean18 = node13.isName();
        boolean boolean19 = node13.isNE();
        boolean boolean20 = node13.isLabelName();
        boolean boolean21 = node8.isEquivalentToTyped(node13);
        boolean boolean22 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        node26.setIsSyntheticBlock(true);
        boolean boolean31 = node26.isContinue();
        boolean boolean32 = node26.isParamList();
        boolean boolean33 = node26.isParamList();
        boolean boolean34 = node26.isOptionalArg();
        boolean boolean35 = node26.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node46.children();
        com.google.javascript.rhino.InputId inputId51 = null;
        node46.setInputId(inputId51);
        boolean boolean53 = node46.isName();
        java.lang.String str54 = node37.checkTreeEquals(node46);
        boolean boolean55 = node46.isStringKey();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        int int61 = node59.getType();
        com.google.javascript.rhino.InputId inputId62 = node59.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = null;
        node59.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.Node node65 = node46.srcref(node59);
        boolean boolean66 = node26.isEquivalentToTyped(node59);
        com.google.javascript.rhino.Node node67 = node8.copyInformationFrom(node59);
        node67.putBooleanProp((int) (byte) 100, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder71 = node67.getJsDocBuilderForNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node67.setStaticSourceFile(staticSourceFile72);
        boolean boolean74 = node67.isFromExterns();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str54, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNull(inputId62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test19622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19622");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int20 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = node7.useSourceInfoIfMissingFrom(node19);
        node19.detachChildren();
        boolean boolean23 = node19.isDo();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isNot();
        boolean boolean31 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.Node node36 = node26.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node38.setStaticSourceFile(staticSourceFile41);
        boolean boolean43 = node38.isComma();
        boolean boolean44 = node38.isBlock();
        java.lang.String str45 = node38.toStringTree();
        boolean boolean46 = node38.isDec();
        node38.setWasEmptyNode(false);
        boolean boolean49 = node38.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        boolean boolean57 = node51.isVarArgs();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(40, node36, node38, node51);
        com.google.javascript.rhino.Node node59 = node38.detachFromParent();
        com.google.javascript.rhino.Node node60 = node19.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.Node node61 = node19.getLastSibling();
        boolean boolean62 = node19.isIf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str45, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test19623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19623");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray6 = strSet5.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet5.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(strSpliterator7);
    }

    @Test
    public void test19624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19624");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        jSDocInfo0.setLicense("NUMBER -1.0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getThrownTypes();
        boolean boolean11 = jSDocInfo0.hasParameterType("EQUALS");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19625");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = strList2.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList11 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.String>) strList10);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        boolean boolean13 = strList3.containsAll((java.util.Collection<java.lang.String>) strList10);
        java.util.Iterator<java.lang.String> strItor14 = strList10.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean29 = strList21.containsAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor30 = strList21.listIterator();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        boolean boolean35 = node32.isVarArgs();
        int int36 = node32.getChildCount();
        int int37 = strList21.lastIndexOf((java.lang.Object) int36);
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList21.asList();
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList39 = com.google.common.collect.ImmutableList.of();
        boolean boolean40 = strList21.equals((java.lang.Object) strSetList39);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        boolean boolean51 = node47.isNot();
        boolean boolean52 = node47.isIf();
        com.google.javascript.rhino.Node node53 = node44.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node55.setStaticSourceFile(staticSourceFile58);
        boolean boolean60 = node55.isComma();
        node55.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node64.children();
        com.google.javascript.rhino.InputId inputId69 = null;
        node64.setInputId(inputId69);
        boolean boolean71 = node64.isName();
        java.lang.String str72 = node55.checkTreeEquals(node64);
        boolean boolean73 = node64.isInc();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node75.addChildrenToFront(node77);
        boolean boolean79 = node75.isNot();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node82 = node75.copyInformationFromForTree(node81);
        com.google.javascript.rhino.InputId inputId83 = node75.getInputId();
        node64.addChildrenToFront(node75);
        com.google.javascript.rhino.Node node85 = node44.useSourceInfoFromForTree(node64);
        java.lang.Object obj87 = node44.getProp(42);
        boolean boolean88 = node44.isIn();
        boolean boolean89 = node44.isStringKey();
        boolean boolean90 = node44.isCase();
        boolean boolean91 = strList21.contains((java.lang.Object) boolean90);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = strList10.addAll((java.util.Collection<java.lang.String>) strList21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(charSequenceList11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strSetList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str72, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(inputId83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test19626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19626");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isAdd();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node8.getStaticSourceFile();
        boolean boolean14 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node16.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = node8.useSourceInfoFrom(node21);
        boolean boolean29 = node21.isWhile();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node33.isLabel();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = node37.cloneNode();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node40.copyInformationFromForTree(node46);
        com.google.javascript.rhino.InputId inputId48 = node40.getInputId();
        com.google.javascript.rhino.Node node49 = node40.getNext();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        boolean boolean57 = node51.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node21, node33, node38, node40, node51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node40.getJsDocBuilderForNode();
        boolean boolean60 = node40.hasOneChild();
        com.google.javascript.rhino.Node node61 = node1.copyInformationFrom(node40);
        boolean boolean62 = node61.hasMoreThanOneChild();
        java.lang.String str63 = node61.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node65 = node61.getChildAtIndex(38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "OR\n    OR\n" + "'", str63, "OR\n    OR\n");
    }

    @Test
    public void test19627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19627");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.union(booleanLiteralSet19);
        boolean boolean21 = strList16.equals((java.lang.Object) booleanLiteralSet18);
        java.lang.Object obj22 = null;
        boolean boolean23 = strList16.equals(obj22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isReturn();
        com.google.javascript.rhino.InputId inputId30 = node25.getInputId();
        boolean boolean31 = node25.isArrayLit();
        boolean boolean32 = node25.isInc();
        boolean boolean33 = strList16.contains((java.lang.Object) node25);
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = strList16.reverse();
        int int35 = strList34.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.isNoShadow();
        boolean boolean38 = jSDocInfo36.hasFileOverview();
        int int39 = jSDocInfo36.getParameterCount();
        boolean boolean40 = jSDocInfo36.isNoSideEffects();
        boolean boolean41 = jSDocInfo36.hasReturnType();
        java.lang.String str42 = jSDocInfo36.getLendsName();
        boolean boolean43 = jSDocInfo36.isInterface();
        int int44 = strList34.lastIndexOf((java.lang.Object) boolean43);
        java.util.Iterator<java.lang.String> strItor45 = strList34.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = strList34.get(24613);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (24613) must be less than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strItor45);
    }

    @Test
    public void test19628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19628");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean11 = jSDocInfo0.isDefine();
        boolean boolean12 = jSDocInfo0.isNoShadow();
        java.lang.String str13 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str13, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
    }

    @Test
    public void test19629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19629");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        node1.putIntProp((int) (short) 0, 38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        boolean boolean16 = node10.isNoSideEffectsCall();
        int int17 = node10.getType();
        boolean boolean18 = node10.isAssign();
        com.google.javascript.rhino.Node node19 = node1.copyInformationFromForTree(node10);
        boolean boolean20 = node10.isString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node24.getParent();
        int int27 = node24.getLength();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("OR [directives: []]\n    OR\n");
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node node31 = node10.useSourceInfoFromForTree(node24);
        boolean boolean32 = node24.isNumber();
        boolean boolean33 = node24.isGetProp();
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test19630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19630");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        int int6 = jSDocInfo0.getParameterCount();
        java.lang.String str7 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test19631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19631");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.hasType();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        boolean boolean7 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19632");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getLicense();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test19633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19633");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16, "INSTANCEOF");
        boolean boolean3 = node2.isNE();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test19634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19634");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList13.asList();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = strList13.contains((java.lang.Object) node32);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test19635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19635");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node3.addChildrenToFront(node5);
        boolean boolean7 = node3.isTypeOf();
        boolean boolean8 = node3.wasEmptyNode();
        com.google.javascript.rhino.Node node9 = node3.removeChildren();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node3);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        node15.setLength(1);
        node15.setLineno((int) (short) 100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node10, node15, (int) '#', 16);
        boolean boolean23 = node15.isSetterDef();
        node15.putIntProp(54, (int) (byte) 10);
        boolean boolean27 = node15.isObjectLit();
        boolean boolean28 = node15.isParamList();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList37 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34, typePosition35, typePosition36);
        typePosition36.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        boolean boolean48 = node44.hasChildren();
        typePosition36.setItem(node44);
        int int50 = typePosition36.getPositionOnStartLine();
        boolean boolean51 = typePosition36.hasBrackets();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isNot();
        boolean boolean59 = node54.isLocalResultCall();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        com.google.javascript.rhino.Node node64 = node54.copyInformationFromForTree(node61);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(40, node64, (int) (byte) -1, 44);
        boolean boolean68 = node64.isFunction();
        typePosition36.setItem(node64);
        com.google.javascript.rhino.Node node70 = typePosition36.getItem();
        boolean boolean71 = node70.isRegExp();
        int int72 = node15.getIndexOfChild(node70);
        boolean boolean73 = node70.isAdd();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(typePositionList37);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 48 + "'", int50 == 48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test19636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19636");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = strList10.reverse();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList14 = strList11.subList(0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (100) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test19637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19637");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition3.setItem("NUMBER 4.0 1\n");
        stringPosition3.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str11 = stringPosition3.getItem();
        stringPosition3.setItem("");
        int int14 = stringPosition3.getStartLine();
        int int15 = stringPosition3.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int17 = stringPosition16.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList18 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition16);
        java.lang.String str19 = stringPosition0.getItem();
        int int20 = stringPosition0.getPositionOnStartLine();
        int int21 = stringPosition0.getStartLine();
        stringPosition0.setPositionInformation((int) (byte) 0, 35, 43, 40);
        int int27 = stringPosition0.getPositionOnEndLine();
        int int28 = stringPosition0.getPositionOnStartLine();
        int int29 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 4.0 1\n" + "'", str11, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(stringPositionList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 4.0 1\n" + "'", str19, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    }

    @Test
    public void test19638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19638");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node24.isComma();
        boolean boolean34 = node24.isCase();
        boolean boolean35 = node24.isScript();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        com.google.javascript.rhino.Node node46 = node44.getParent();
        com.google.javascript.rhino.Node node47 = node37.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        int int53 = node49.getCharno();
        boolean boolean54 = node49.isName();
        boolean boolean55 = node49.isNE();
        boolean boolean56 = node49.isIn();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        com.google.javascript.rhino.Node node62 = node60.getParent();
        boolean boolean63 = node62.isDefaultCase();
        int int64 = node49.getIndexOfChild(node62);
        node49.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = node47.useSourceInfoIfMissingFromForTree(node49);
        node24.addChildrenToBack(node47);
        boolean boolean69 = node24.isArrayLit();
        int int70 = node24.getSourceOffset();
        boolean boolean71 = node24.isAdd();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test19639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19639");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        int int16 = node7.getType();
        java.lang.Object obj18 = node7.getProp(38);
        com.google.javascript.rhino.Node node19 = node7.cloneNode();
        node19.putBooleanProp(4, false);
        int int23 = node19.getCharno();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test19640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19640");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        java.lang.String str8 = node1.toStringTree();
        boolean boolean9 = node1.isDec();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        boolean boolean16 = node11.isIf();
        boolean boolean17 = node11.isInstanceOf();
        java.lang.String str18 = node11.getQualifiedName();
        node11.setLineno(38);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFromForTree(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node11.children();
        int int23 = node11.getLength();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str8, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test19641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19641");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        java.lang.String str5 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("NUMBER 4.0 1\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasBaseType();
        java.lang.String str12 = jSDocInfo10.getFileOverview();
        int int13 = jSDocInfo10.getParameterCount();
        boolean boolean14 = jSDocInfo10.isConstant();
        java.lang.String str15 = jSDocInfo10.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean30 = strList22.containsAll((java.util.Collection<java.lang.String>) strList29);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor31 = strList22.listIterator();
        int int32 = strList22.size();
        boolean boolean33 = strList22.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int35 = strList22.lastIndexOf((java.lang.Object) visibility34);
        jSDocInfo10.setVisibility(visibility34);
        jSDocInfo0.setVisibility(visibility34);
        boolean boolean38 = jSDocInfo0.isExterns();
        java.lang.String str39 = jSDocInfo0.getMeaning();
        boolean boolean40 = jSDocInfo0.isNoAlias();
        boolean boolean41 = jSDocInfo0.hasModifies();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection42 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeCollection42);
    }

    @Test
    public void test19642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19642");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isUnscopedQualifiedName();
        node1.putBooleanProp(36, true);
        boolean boolean14 = node1.isInstanceOf();
        boolean boolean15 = node1.isString();
        int int16 = node1.getType();
        boolean boolean18 = node1.getBooleanProp(38);
        boolean boolean19 = node1.isInstanceOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node1.siblings();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        boolean boolean28 = node22.isLocalResultCall();
        boolean boolean29 = node22.isArrayLit();
        boolean boolean30 = node22.isAssign();
        boolean boolean31 = node22.isUnscopedQualifiedName();
        node22.putBooleanProp(36, true);
        boolean boolean35 = node22.isInstanceOf();
        boolean boolean36 = node22.isString();
        int int37 = node22.getType();
        boolean boolean38 = node22.isBreak();
        int int39 = node1.getIndexOfChild(node22);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test19643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19643");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList57 = jSDocInfo1.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo1.getSuppressions();
        boolean boolean59 = jSDocInfo1.hasType();
        boolean boolean60 = jSDocInfo1.isNoAlias();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNotNull(jSTypeExpressionList57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test19644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19644");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int26 = strList17.size();
        boolean boolean27 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList17);
        boolean boolean28 = strList17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.isNoShadow();
        boolean boolean31 = jSDocInfo29.isNoShadow();
        boolean boolean32 = jSDocInfo29.hasModifies();
        boolean boolean33 = jSDocInfo29.isExterns();
        boolean boolean34 = jSDocInfo29.hasType();
        boolean boolean35 = jSDocInfo29.isDefine();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo29.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = jSDocInfo29.getTemplateTypeNames();
        boolean boolean38 = strList17.containsAll((java.util.Collection<java.lang.String>) strList37);
        java.util.stream.Stream<java.lang.String> strStream39 = strList37.parallelStream();
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean54 = strList46.containsAll((java.util.Collection<java.lang.String>) strList53);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor55 = strList53.iterator();
        boolean boolean56 = strList53.isEmpty();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        int int62 = node58.getCharno();
        boolean boolean63 = strList53.equals((java.lang.Object) node58);
        java.lang.String str64 = strList53.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = strList53.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = strList65.asList();
        java.lang.Object[] objArray67 = strList66.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = strList37.removeAll((java.util.Collection<java.lang.String>) strList66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strCollection36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str64, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test19645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19645");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        int int17 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean18 = jSDocInfo0.isInterface();
        int int19 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str21 = jSDocInfo0.getDescriptionForParameter("Unknown class name");
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = node23.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isNot();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node38 = node32.getLastSibling();
        jSDocInfo0.setAssociatedNode(node32);
        boolean boolean40 = node32.isStringKey();
        boolean boolean41 = node32.isHook();
        boolean boolean42 = node32.isInc();
        boolean boolean43 = node32.isSwitch();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test19646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19646");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasBaseType();
        jSDocInfo53.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo53.getBaseType();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo53.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet58.spliterator();
        node33.setDirectives(strSet58);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strSet58.spliterator();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node63.setStaticSourceFile(staticSourceFile66);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        com.google.javascript.rhino.Node node78 = node76.getParent();
        com.google.javascript.rhino.Node node79 = node69.useSourceInfoFromForTree(node76);
        boolean boolean80 = node63.hasChild(node69);
        boolean boolean81 = node69.isNot();
        boolean boolean82 = strSet58.equals((java.lang.Object) node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = node69.getJSDocInfo();
        java.lang.String str84 = node69.toString();
        node69.setIsSyntheticBlock(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str84, "OR [jsdoc_info: JSDocInfo]");
    }

    @Test
    public void test19647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19647");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isParamList();
        boolean boolean11 = node3.isOptionalArg();
        boolean boolean12 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isStringKey();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        int int38 = node36.getType();
        com.google.javascript.rhino.InputId inputId39 = node36.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        node36.setJSDocInfo(jSDocInfo40);
        com.google.javascript.rhino.Node node42 = node23.srcref(node36);
        boolean boolean43 = node3.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node49 = node47.getParent();
        int int50 = node47.getLength();
        node47.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node59.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node59.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node54.copyInformationFromForTree(node59);
        boolean boolean66 = node59.isAssignAdd();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node68.addChildrenToFront(node70);
        boolean boolean72 = node68.isTypeOf();
        boolean boolean73 = node68.isVarArgs();
        boolean boolean74 = node68.isIn();
        node59.addChildToFront(node68);
        node68.removeProp(48);
        node68.addSuppression("OR [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node80 = node47.copyInformationFrom(node68);
        boolean boolean81 = node3.hasChild(node68);
        boolean boolean82 = node68.isReturn();
        boolean boolean83 = node68.isTrue();
        boolean boolean84 = node68.wasEmptyNode();
        boolean boolean85 = node68.isName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str57, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str62, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test19648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19648");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        boolean boolean20 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node21 = node10.removeChildren();
        node10.setSourceFileForTesting("Named type with empty name component");
        java.lang.String str24 = node10.getQualifiedName();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isReturn();
        com.google.javascript.rhino.InputId inputId31 = node26.getInputId();
        boolean boolean32 = node26.isArrayLit();
        boolean boolean33 = node26.isObjectLit();
        com.google.javascript.rhino.Node node35 = node26.getAncestor((int) (byte) 0);
        com.google.javascript.rhino.Node node36 = node26.removeChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasTypedefType();
        java.lang.String str39 = jSDocInfo37.toString();
        boolean boolean41 = jSDocInfo37.hasParameterType("Unknown class name");
        boolean boolean42 = jSDocInfo37.isIdGenerator();
        int int43 = jSDocInfo37.getExtendedInterfacesCount();
        boolean boolean44 = jSDocInfo37.hasThisType();
        int int45 = jSDocInfo37.getExtendedInterfacesCount();
        java.lang.String str46 = jSDocInfo37.getDeprecationReason();
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = jSDocInfo37.getTemplateTypeNames();
        java.lang.String str48 = strList47.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node59.children();
        com.google.javascript.rhino.InputId inputId64 = null;
        node59.setInputId(inputId64);
        boolean boolean66 = node59.isName();
        java.lang.String str67 = node50.checkTreeEquals(node59);
        boolean boolean68 = node59.isInc();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        boolean boolean74 = node70.isNot();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = node70.copyInformationFromForTree(node76);
        com.google.javascript.rhino.InputId inputId78 = node70.getInputId();
        node59.addChildrenToFront(node70);
        boolean boolean80 = node59.isGetterDef();
        boolean boolean81 = node59.isScript();
        int int82 = strList47.indexOf((java.lang.Object) node59);
        com.google.javascript.rhino.Node node83 = node59.cloneNode();
        com.google.javascript.rhino.Node node84 = node26.srcrefTree(node83);
        com.google.javascript.rhino.Node node85 = node10.useSourceInfoFromForTree(node84);
        boolean boolean86 = node84.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(inputId31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JSDocInfo" + "'", str39, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str67, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(inputId78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test19649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19649");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        boolean boolean9 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        java.lang.String str11 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str12 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JSDocInfo" + "'", str12, "JSDocInfo");
    }

    @Test
    public void test19650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19650");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("()", 47, 24);
        boolean boolean4 = node3.isCase();
        boolean boolean5 = node3.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test19651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19651");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("");
        jSDocInfo0.addSuppression("STRING  32\n");
        java.lang.String str12 = jSDocInfo0.getMeaning();
        boolean boolean13 = jSDocInfo0.isConstructor();
        java.lang.String str14 = jSDocInfo0.getLicense();
        boolean boolean15 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test19652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19652");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList11 = com.google.common.collect.ImmutableList.of(visibility8, visibility9, visibility10);
        jSDocInfo0.setVisibility(visibility10);
        boolean boolean13 = jSDocInfo0.isNoShadow();
        boolean boolean14 = jSDocInfo0.isHidden();
        java.util.Collection<java.lang.String> strCollection15 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strCollection15);
    }

    @Test
    public void test19653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19653");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isIdGenerator();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test19654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19654");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isNoSideEffectsCall();
        java.lang.String str11 = node5.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasTypedefType();
        java.lang.String str14 = jSDocInfo12.toString();
        node5.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.Node node16 = node5.cloneTree();
        int int17 = node5.getSourcePosition();
        boolean boolean18 = node5.isNumber();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = new com.google.javascript.rhino.JSTypeExpression(node5, "NUMBER 4.0 1\n");
        boolean boolean21 = jSTypeExpression20.isOptionalArg();
        com.google.javascript.rhino.Node node22 = jSTypeExpression20.getRoot();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression20);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeExpression20.evaluate(jSTypeStaticScope24, jSTypeRegistry25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR" + "'", str11, "OR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSDocInfo" + "'", str14, "JSDocInfo");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
    }

    @Test
    public void test19655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19655");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isNot();
        boolean boolean18 = node13.isIf();
        com.google.javascript.rhino.Node node19 = node10.copyInformationFromForTree(node13);
        boolean boolean20 = node10.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node22.isReturn();
        com.google.javascript.rhino.InputId inputId27 = node22.getInputId();
        boolean boolean28 = node22.isAdd();
        node10.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        boolean boolean31 = strSet6.contains((java.lang.Object) node30);
        java.lang.Object[] objArray32 = strSet6.toArray();
        java.lang.String[] strArray34 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        boolean boolean37 = strList35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet39 = jSDocInfo38.getParameterNames();
        boolean boolean40 = jSDocInfo38.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = jSDocInfo38.getVisibility();
        java.lang.String str43 = jSDocInfo38.getDescriptionForParameter("Not declared as a type name");
        boolean boolean44 = jSDocInfo38.isOverride();
        java.lang.String str46 = jSDocInfo38.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = jSDocInfo38.getTemplateTypeNames();
        boolean boolean48 = strList35.containsAll((java.util.Collection<java.lang.String>) strList47);
        java.util.stream.Stream<java.lang.String> strStream49 = strList47.parallelStream();
        boolean boolean50 = strSet6.equals((java.lang.Object) strStream49);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node52.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node52.isComma();
        boolean boolean58 = node52.isBlock();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = node60.cloneNode();
        com.google.javascript.rhino.Node node62 = node52.copyInformationFromForTree(node61);
        int int63 = node61.getLength();
        int int64 = node61.getSourceOffset();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = new com.google.javascript.rhino.JSTypeExpression(node61, "()");
        boolean boolean67 = strSet6.contains((java.lang.Object) node61);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(visibility41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test19656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19656");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        boolean boolean10 = jSDocInfo0.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getThisType();
        boolean boolean14 = jSDocInfo0.hasParameter("OR 52");
        java.util.Set<java.lang.String> strSet15 = jSDocInfo0.getSuppressions();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test19657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19657");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        int int12 = node3.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        com.google.javascript.rhino.Node node14 = node3.getNext();
        boolean boolean15 = node3.isScript();
        int int16 = node3.getLength();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test19658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19658");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node72.addSuppression("");
        java.lang.String str75 = node72.toString();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node77.addSuppression("");
        java.lang.String str80 = node77.toString();
        com.google.javascript.rhino.Node node81 = node77.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node77.getStaticSourceFile();
        com.google.javascript.rhino.Node node83 = node72.copyInformationFromForTree(node77);
        boolean boolean84 = strList28.remove((java.lang.Object) node83);
        boolean boolean85 = node83.isScript();
        boolean boolean86 = node83.hasOneChild();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str75, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str80, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test19659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19659");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        node1.setIsSyntheticBlock(false);
        boolean boolean9 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        com.google.javascript.rhino.Node node15 = node13.getParent();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        node17.putIntProp((int) (short) 0, 38);
        node13.addChildToBack(node17);
        boolean boolean25 = node1.isEquivalentTo(node17);
        boolean boolean26 = node17.isFalse();
        com.google.javascript.rhino.Node node27 = node17.cloneTree();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test19660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19660");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        boolean boolean7 = node1.isDebugger();
        com.google.javascript.rhino.Node node8 = node1.getNext();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean24 = strList16.containsAll((java.util.Collection<java.lang.String>) strList23);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor25 = strList16.listIterator();
        int int26 = strList16.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList16.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean42 = strList34.containsAll((java.util.Collection<java.lang.String>) strList41);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor43 = strList34.listIterator();
        java.lang.Object[] objArray44 = strList34.toArray();
        boolean boolean45 = strList16.containsAll((java.util.Collection<java.lang.String>) strList34);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        node47.setStaticSourceFile(staticSourceFile50);
        boolean boolean52 = node47.isComma();
        boolean boolean53 = node47.isFalse();
        boolean boolean54 = node47.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        boolean boolean60 = node58.isLabel();
        boolean boolean61 = node58.isContinue();
        node58.setVarArgs(false);
        com.google.javascript.rhino.Node node64 = node47.srcrefTree(node58);
        boolean boolean65 = strList16.contains((java.lang.Object) node58);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor67 = strList16.listIterator((int) (short) 0);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        node69.addChildrenToFront(node71);
        int int73 = node69.getCharno();
        boolean boolean74 = node69.isName();
        boolean boolean75 = strList16.contains((java.lang.Object) node69);
        boolean boolean76 = node69.isObjectLit();
        // The following exception was thrown during execution in test generation
        try {
            node8.putProp(213028, (java.lang.Object) node69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strItor67);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test19661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19661");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setLineno(37);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = node25.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node33 = node19.srcref(node25);
        int int34 = strList13.indexOf((java.lang.Object) node33);
        java.lang.String[] strArray41 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        java.lang.Object[] objArray44 = strSet42.toArray();
        strSet42.clear();
        java.lang.Object[] objArray46 = strSet42.toArray();
        boolean boolean48 = strSet42.add("GETELEM");
        java.util.Iterator<java.lang.String> strItor49 = strSet42.iterator();
        boolean boolean50 = strList13.contains((java.lang.Object) strSet42);
        java.util.Spliterator<java.lang.String> strSpliterator51 = strSet42.spliterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSpliterator51);
    }

    @Test
    public void test19662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19662");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("RETURN ()\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((NUMBER 1.0 37\n))", "GETELEM", "OR [synthetic: 1]", "NUMBER 1.0 37\n");
        java.lang.Object[] objArray7 = strList6.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasBaseType();
        jSDocInfo9.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int13 = jSDocInfo9.getParameterCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = jSDocInfo9.getTemplateTypeNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = strList6.addAll(6, (java.util.Collection<java.lang.String>) strList14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[RETURN ()\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((NUMBER 1.0 37\n)), GETELEM, OR [synthetic: 1], NUMBER 1.0 37\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[RETURN ()\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((NUMBER 1.0 37\n)), GETELEM, OR [synthetic: 1], NUMBER 1.0 37\n]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test19663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19663");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node3.isThis();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node3.getJsDocBuilderForNode();
        boolean boolean25 = node3.isExprResult();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test19664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19664");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        boolean boolean14 = node9.isName();
        boolean boolean15 = node9.isNE();
        boolean boolean16 = node9.isIn();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        boolean boolean23 = node22.isDefaultCase();
        int int24 = node9.getIndexOfChild(node22);
        boolean boolean25 = node22.isLabelName();
        boolean boolean26 = node1.isEquivalentTo(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(53, "OR [jsdoc_info: JSDocInfo]");
        boolean boolean30 = node29.isRegExp();
        boolean boolean32 = node29.getBooleanProp(16);
        com.google.javascript.rhino.Node node33 = node22.copyInformationFrom(node29);
        boolean boolean34 = node29.isComma();
        int int35 = node29.getSourcePosition();
        com.google.javascript.rhino.Node node36 = node29.cloneTree();
        boolean boolean37 = node29.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test19665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19665");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        node3.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        com.google.javascript.rhino.Node node29 = node19.useSourceInfoFromForTree(node26);
        boolean boolean30 = node13.hasChild(node19);
        boolean boolean31 = node13.isStringKey();
        com.google.javascript.rhino.Node node32 = node3.useSourceInfoFromForTree(node13);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder34 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node36 };
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node48 = node44.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] { node44 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] { node52 };
        com.google.javascript.rhino.Node[][] nodeArray59 = new com.google.javascript.rhino.Node[][] { nodeArray42, nodeArray50, nodeArray58 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder60 = nodeArrayBuilder34.add(nodeArray59);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder61 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder63 = nodeArrayBuilder61.add(nodeArray62);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder64 = nodeArrayBuilder60.add(nodeArray62);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(0, nodeArray62);
        boolean boolean66 = node65.isNE();
        node32.addChildrenToBack(node65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.isNoShadow();
        java.lang.String str70 = jSDocInfo68.getMeaning();
        com.google.javascript.rhino.Node node71 = jSDocInfo68.getAssociatedNode();
        java.lang.String str72 = jSDocInfo68.getLicense();
        java.lang.String str73 = jSDocInfo68.getOriginalCommentString();
        boolean boolean74 = jSDocInfo68.isNoAlias();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility75 = jSDocInfo68.getVisibility();
        boolean boolean76 = jSDocInfo68.hasThisType();
        boolean boolean78 = jSDocInfo68.hasParameterType("(OR)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo68.getBaseType();
        node65.setJSDocInfo(jSDocInfo68);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString((int) ' ', "[]");
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable84 = node83.getAncestors();
        node83.setQuotedString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = node65.checkTreeEquals(node83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArrayBuilder60);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(nodeArrayBuilder63);
        org.junit.Assert.assertNotNull(nodeArrayBuilder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(visibility75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(ancestorIterable84);
    }

    @Test
    public void test19666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19666");
        java.lang.String[] strArray3 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray4 = new java.lang.String[][] { strArray3 };
        java.lang.String[] strArray8 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray9 = new java.lang.String[][] { strArray8 };
        java.lang.String[] strArray13 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray14 = new java.lang.String[][] { strArray13 };
        java.lang.String[] strArray18 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray19 = new java.lang.String[][] { strArray18 };
        java.lang.String[] strArray23 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray24 = new java.lang.String[][] { strArray23 };
        java.lang.String[] strArray28 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray29 = new java.lang.String[][] { strArray28 };
        java.lang.String[][][] strArray30 = new java.lang.String[][][] { strArray4, strArray9, strArray14, strArray19, strArray24, strArray29 };
        java.lang.String[] strArray34 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray35 = new java.lang.String[][] { strArray34 };
        java.lang.String[] strArray39 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray40 = new java.lang.String[][] { strArray39 };
        java.lang.String[] strArray44 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray45 = new java.lang.String[][] { strArray44 };
        java.lang.String[] strArray49 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray50 = new java.lang.String[][] { strArray49 };
        java.lang.String[] strArray54 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray55 = new java.lang.String[][] { strArray54 };
        java.lang.String[] strArray59 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray60 = new java.lang.String[][] { strArray59 };
        java.lang.String[][][] strArray61 = new java.lang.String[][][] { strArray35, strArray40, strArray45, strArray50, strArray55, strArray60 };
        java.lang.String[] strArray65 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray66 = new java.lang.String[][] { strArray65 };
        java.lang.String[] strArray70 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray71 = new java.lang.String[][] { strArray70 };
        java.lang.String[] strArray75 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray76 = new java.lang.String[][] { strArray75 };
        java.lang.String[] strArray80 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray81 = new java.lang.String[][] { strArray80 };
        java.lang.String[] strArray85 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray86 = new java.lang.String[][] { strArray85 };
        java.lang.String[] strArray90 = new java.lang.String[] { "CALL unknown 100", "NUMBER ", "(OR \n)" };
        java.lang.String[][] strArray91 = new java.lang.String[][] { strArray90 };
        java.lang.String[][][] strArray92 = new java.lang.String[][][] { strArray66, strArray71, strArray76, strArray81, strArray86, strArray91 };
        java.lang.String[][][][] strArray93 = new java.lang.String[][][][] { strArray30, strArray61, strArray92 };
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList94 = com.google.common.collect.ImmutableList.of(strArray93);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>[][][]> strComparableArrayList95 = com.google.common.collect.ImmutableList.copyOf((java.lang.Comparable<java.lang.String>[][][][]) strArray93);
        com.google.common.collect.ImmutableList<java.io.Serializable[][]> serializableArrayList96 = com.google.common.collect.ImmutableList.of((java.io.Serializable[][][]) strArray93);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArrayList94);
        org.junit.Assert.assertNotNull(strComparableArrayList95);
        org.junit.Assert.assertNotNull(serializableArrayList96);
    }

    @Test
    public void test19667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19667");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        int int12 = strList3.indexOf((java.lang.Object) boolean11);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.stream();
        java.util.Spliterator<java.lang.String> strSpliterator14 = strList3.spliterator();
        int int15 = strList3.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo16.isNoShadow();
        java.lang.String str18 = jSDocInfo16.getMeaning();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo16.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags21 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags21.setReturnsTainted();
        int int23 = sideEffectFlags21.valueOf();
        boolean boolean24 = strSet19.remove((java.lang.Object) sideEffectFlags21);
        java.lang.String[] strArray31 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        java.lang.Object[] objArray34 = strSet32.toArray();
        strSet32.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean50 = strList42.containsAll((java.util.Collection<java.lang.String>) strList49);
        int int51 = strList42.size();
        boolean boolean52 = strSet32.retainAll((java.util.Collection<java.lang.String>) strList42);
        boolean boolean53 = strList42.isEmpty();
        boolean boolean54 = strSet19.containsAll((java.util.Collection<java.lang.String>) strList42);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        boolean boolean60 = node56.isNot();
        boolean boolean61 = node56.isDefaultCase();
        boolean boolean62 = node56.isWhile();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = node64.cloneNode();
        boolean boolean67 = node64.getBooleanProp(4095);
        com.google.javascript.rhino.Node node68 = node64.cloneNode();
        node56.addChildToBack(node68);
        boolean boolean70 = strList42.equals((java.lang.Object) node68);
        java.util.Spliterator<java.lang.String> strSpliterator71 = strList42.spliterator();
        java.util.Iterator<java.lang.String> strItor72 = strList42.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = strList42.asList();
        boolean boolean74 = strList3.containsAll((java.util.Collection<java.lang.String>) strList42);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSpliterator71);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test19668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19668");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str11 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test19669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19669");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setItem("unknown");
        stringPosition0.setItem("(OR)");
        stringPosition0.setItem("OR \n");
        int int9 = stringPosition0.getPositionOnStartLine();
        int int10 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test19670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19670");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.wasEmptyNode();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node46.setJSType(jSType49);
        java.lang.String str51 = node46.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        boolean boolean58 = node53.isComma();
        node53.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node30, node37, node46, node53);
        boolean boolean62 = node53.isComma();
        boolean boolean63 = node7.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        com.google.javascript.rhino.Node node69 = node67.getParent();
        node67.setIsSyntheticBlock(true);
        boolean boolean72 = node67.isContinue();
        java.lang.String str73 = node67.getQualifiedName();
        node67.putBooleanProp(1, false);
        com.google.javascript.rhino.Node node77 = node53.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node79.addChildrenToFront(node81);
        boolean boolean83 = node79.isTypeOf();
        boolean boolean84 = node79.isWith();
        boolean boolean85 = node53.isEquivalentTo(node79);
        int int86 = node79.getSourceOffset();
        boolean boolean87 = node79.isArrayLit();
        com.google.javascript.rhino.Node node88 = node79.removeFirstChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test19671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19671");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        java.lang.String str11 = jSDocInfo0.getLendsName();
        boolean boolean12 = jSDocInfo0.isHidden();
        boolean boolean13 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test19672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19672");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test19673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19673");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = com.google.common.collect.ImmutableList.of(jSTypeExpression9, jSTypeExpression23);
        boolean boolean27 = jSTypeExpression9.isVarArgs();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean42 = strList34.containsAll((java.util.Collection<java.lang.String>) strList41);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor43 = strList34.listIterator();
        java.lang.Object[] objArray44 = strList34.toArray();
        java.util.ListIterator<java.lang.String> strItor45 = strList34.listIterator();
        java.util.Iterator<java.lang.String> strItor46 = strList34.iterator();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition47 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition47.setItem("NUMBER 4.0 1\n");
        stringPosition47.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str55 = stringPosition47.getItem();
        int int56 = stringPosition47.getEndLine();
        int int57 = stringPosition47.getPositionOnStartLine();
        int int58 = stringPosition47.getPositionOnEndLine();
        int int59 = strList34.indexOf((java.lang.Object) stringPosition47);
        boolean boolean60 = jSTypeExpression9.equals((java.lang.Object) stringPosition47);
        int int61 = stringPosition47.getPositionOnEndLine();
        int int62 = stringPosition47.getEndLine();
        stringPosition47.setItem("");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER 4.0 1\n" + "'", str55, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test19674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19674");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.wasEmptyNode();
        boolean boolean36 = node30.isLabelName();
        node30.removeProp(49);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node40.copyInformationFromForTree(node46);
        com.google.javascript.rhino.InputId inputId48 = node40.getInputId();
        boolean boolean49 = node40.isIn();
        boolean boolean50 = node40.isContinue();
        com.google.javascript.rhino.Node node51 = node30.copyInformationFromForTree(node40);
        int int52 = node51.getSideEffectFlags();
        com.google.javascript.rhino.Node node53 = node51.getLastChild();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node51);
        boolean boolean55 = node54.isInc();
        boolean boolean56 = node54.isAdd();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test19675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19675");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        boolean boolean11 = node4.isEmpty();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.hasChildren();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node13);
        int int19 = strList2.indexOf((java.lang.Object) node4);
        java.util.stream.Stream<java.lang.String> strStream20 = strList2.stream();
        boolean boolean21 = strList2.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean36 = strList28.containsAll((java.util.Collection<java.lang.String>) strList35);
        java.util.Spliterator<java.lang.String> strSpliterator37 = strList28.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList28.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean43 = strList38.containsAll((java.util.Collection<java.lang.String>) strList42);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node45.setStaticSourceFile(staticSourceFile48);
        boolean boolean50 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node52.isNot();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = node52.copyInformationFromForTree(node58);
        boolean boolean60 = node59.isExprResult();
        boolean boolean61 = node59.isDefaultCase();
        node45.addChildrenToBack(node59);
        node45.setSourceEncodedPositionForTree(42);
        boolean boolean65 = node45.isHook();
        boolean boolean66 = node45.isLabelName();
        boolean boolean67 = strList38.equals((java.lang.Object) boolean66);
        java.util.Iterator<java.lang.String> strItor68 = strList38.iterator();
        boolean boolean69 = strList2.containsAll((java.util.Collection<java.lang.String>) strList38);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = strList2.add("((OR 2 [jsdoc_info: JSDocInfo]))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strSpliterator37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test19676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19676");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        boolean boolean19 = node2.hasChild(node8);
        boolean boolean20 = node8.isNot();
        node8.addSuppression("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = node24.cloneNode();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        com.google.javascript.rhino.Node node59 = node25.copyInformationFrom(node50);
        boolean boolean60 = node25.isRegExp();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 1, node8, node25);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        int int67 = node63.getCharno();
        boolean boolean68 = node63.isName();
        boolean boolean69 = node63.isNE();
        boolean boolean70 = node63.isLabelName();
        boolean boolean71 = node63.isName();
        boolean boolean72 = node63.isFor();
        com.google.javascript.rhino.Node node73 = node25.srcrefTree(node63);
        boolean boolean74 = node63.isWith();
        boolean boolean75 = node63.isIn();
        int int76 = node63.getCharno();
        boolean boolean77 = node63.isWith();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test19677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19677");
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = com.google.common.collect.ImmutableList.of("OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]\n", "OR [synthetic: 1]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "hi!", "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n", "Named type with empty name component", "Unknown class name");
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList12 = strList9.subList(53, 24613);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (53) must not be greater than size (9)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test19678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19678");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        node3.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId10 = null;
        node3.setInputId(inputId10);
        com.google.javascript.rhino.InputId inputId12 = null;
        node3.setInputId(inputId12);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder9);
    }

    @Test
    public void test19679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19679");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isInc();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        node23.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node44 = node3.useSourceInfoFromForTree(node23);
        java.lang.Object obj46 = node3.getProp(42);
        boolean boolean47 = node3.isIn();
        boolean boolean48 = node3.isStringKey();
        boolean boolean49 = node3.isCase();
        boolean boolean50 = node3.isThrow();
        boolean boolean51 = node3.isOr();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test19680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19680");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.isHidden();
        java.lang.String str7 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR 0");
        java.lang.String str10 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str7, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test19681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19681");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        int int6 = node2.getCharno();
        boolean boolean7 = node2.isName();
        boolean boolean8 = node2.isNE();
        boolean boolean9 = node2.isEmpty();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        boolean boolean15 = node11.hasChildren();
        com.google.javascript.rhino.Node node16 = node2.srcrefTree(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0, node2);
        boolean boolean18 = node17.hasMoreThanOneChild();
        node17.putIntProp(48, 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test19682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19682");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        java.lang.String str57 = jSDocInfo52.getOriginalCommentString();
        boolean boolean59 = jSDocInfo52.hasParameterType("Named type with empty name component");
        java.lang.String str60 = jSDocInfo52.getLicense();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo52.getSuppressions();
        int int62 = strSet61.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoShadow();
        java.lang.String str65 = jSDocInfo63.getMeaning();
        com.google.javascript.rhino.Node node66 = jSDocInfo63.getAssociatedNode();
        java.lang.String str67 = jSDocInfo63.getLicense();
        boolean boolean68 = jSDocInfo63.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection69 = jSDocInfo63.getTypeNodes();
        jSDocInfo63.setLicense("hi!");
        boolean boolean72 = strSet61.remove((java.lang.Object) jSDocInfo63);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = jSDocInfo63.getVisibility();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeCollection69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(visibility73);
    }

    @Test
    public void test19683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19683");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.hasParameter("NUMBER 53.0");
        boolean boolean8 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19684");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        node17.setIsSyntheticBlock(true);
        boolean boolean22 = node17.isContinue();
        boolean boolean23 = strSet5.equals((java.lang.Object) node17);
        com.google.javascript.rhino.Node node24 = node17.getNext();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test19685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19685");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker19.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition26 = marker19.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = marker19.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = marker19.getAnnotation();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(stringPosition24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(nodeSourcePosition26);
        org.junit.Assert.assertNull(typePosition27);
        org.junit.Assert.assertNull(stringPosition28);
        org.junit.Assert.assertNull(stringPosition29);
    }

    @Test
    public void test19686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19686");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setIsSyntheticBlock(true);
        boolean boolean24 = node19.isContinue();
        java.lang.String str25 = node19.getQualifiedName();
        boolean boolean26 = node19.isSwitch();
        node19.removeProp((int) '4');
        boolean boolean29 = node19.isParamList();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node19.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node19.children();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node19.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node33 = node8.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node35.setStaticSourceFile(staticSourceFile38);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.Node node50 = node48.getParent();
        com.google.javascript.rhino.Node node51 = node41.useSourceInfoFromForTree(node48);
        boolean boolean52 = node35.hasChild(node41);
        node35.removeProp(44);
        boolean boolean55 = node35.isIf();
        boolean boolean56 = node35.isString();
        com.google.javascript.rhino.Node node57 = node35.removeFirstChild();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        boolean boolean63 = node59.isReturn();
        com.google.javascript.rhino.InputId inputId64 = node59.getInputId();
        boolean boolean65 = node59.isArrayLit();
        boolean boolean66 = node59.isObjectLit();
        node35.addChildrenToFront(node59);
        com.google.javascript.rhino.jstype.JSType jSType68 = node59.getJSType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node59.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = node33.useSourceInfoIfMissingFromForTree(node59);
        node70.setSourceFileForTesting("THIS");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(inputId64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test19687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19687");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, (int) ' ', (int) (byte) -1);
        node3.setVarArgs(true);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node9.isLabel();
        boolean boolean12 = node9.isContinue();
        com.google.javascript.rhino.Node node13 = node9.removeFirstChild();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        int int19 = node15.getCharno();
        com.google.javascript.rhino.Node node20 = node9.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node24.getParent();
        node24.setIsSyntheticBlock(true);
        boolean boolean29 = node24.isContinue();
        java.lang.String str30 = node24.getQualifiedName();
        boolean boolean31 = node24.isSwitch();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isTypeOf();
        boolean boolean45 = node40.isDelProp();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node49.setJSType(jSType52);
        java.lang.String str54 = node49.toString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node56.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        node56.setStaticSourceFile(staticSourceFile59);
        boolean boolean61 = node56.isComma();
        node56.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList64 = com.google.common.collect.ImmutableList.of(node33, node40, node49, node56);
        boolean boolean65 = node24.hasChild(node33);
        com.google.javascript.rhino.Node node66 = node15.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node33.setJSType(jSType67);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("OR");
        node70.addSuppression("NUMBER 4.0 1\n");
        node33.addChildrenToFront(node70);
        boolean boolean74 = node70.isNoSideEffectsCall();
        boolean boolean75 = node70.isCatch();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n", (int) (byte) 10, 44);
        com.google.javascript.rhino.Node node80 = node70.useSourceInfoIfMissingFromForTree(node79);
        boolean boolean81 = node3.isEquivalentTo(node79);
        boolean boolean82 = node3.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR" + "'", str54, "OR");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test19688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19688");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor21 = strList19.iterator();
        int int22 = strList19.size();
        boolean boolean23 = strList19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.hasBaseType();
        jSDocInfo24.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo24.getBaseType();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo24.getParameterNames();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        int int35 = node31.getCharno();
        boolean boolean36 = node31.isContinue();
        boolean boolean37 = strSet29.equals((java.lang.Object) node31);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node43 = node41.getParent();
        node41.setIsSyntheticBlock(true);
        boolean boolean46 = node41.isContinue();
        boolean boolean47 = strSet29.equals((java.lang.Object) node41);
        java.lang.Object[] objArray48 = strSet29.toArray();
        int int49 = strList19.indexOf((java.lang.Object) objArray48);
        java.util.Spliterator<java.lang.String> strSpliterator50 = strList19.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isNoShadow();
        boolean boolean53 = jSDocInfo51.isNoShadow();
        boolean boolean54 = jSDocInfo51.hasModifies();
        boolean boolean55 = jSDocInfo51.isOverride();
        java.util.Collection<java.lang.String> strCollection56 = jSDocInfo51.getAuthors();
        java.lang.String str57 = jSDocInfo51.getBlockDescription();
        java.util.Collection<java.lang.String> strCollection58 = jSDocInfo51.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo51.getReturnType();
        boolean boolean60 = jSDocInfo51.isExpose();
        int int61 = strList19.lastIndexOf((java.lang.Object) boolean60);
        java.util.Spliterator<java.lang.String> strSpliterator62 = strList19.spliterator();
        boolean boolean63 = strSet5.retainAll((java.util.Collection<java.lang.String>) strList19);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = strSet5.add("STRING (OR [jsdoc_info: JSDocInfo]) 2");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strCollection56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strCollection58);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test19689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19689");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(40, node12, (int) (byte) -1, 44);
        java.lang.Object obj17 = node12.getProp((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node19.copyInformationFromForTree(node24);
        node24.setOptionalArg(false);
        node24.setSourceEncodedPositionForTree((int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        boolean boolean40 = node36.isGetterDef();
        java.util.Set<java.lang.String> strSet41 = node36.getDirectives();
        boolean boolean42 = node36.isDebugger();
        com.google.javascript.rhino.Node node43 = node24.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isReturn();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        com.google.javascript.rhino.Node node61 = node51.useSourceInfoFromForTree(node58);
        boolean boolean62 = node61.isArrayLit();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node64.addSuppression("");
        java.lang.String str67 = node64.toString();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node73 = node69.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node69.getStaticSourceFile();
        com.google.javascript.rhino.Node node75 = node64.copyInformationFromForTree(node69);
        java.lang.String str76 = node75.getSourceFileName();
        com.google.javascript.rhino.Node node77 = node61.copyInformationFromForTree(node75);
        boolean boolean78 = node45.hasChild(node77);
        node43.addChildToBack(node77);
        boolean boolean80 = node43.isNE();
        int int81 = node43.getLineno();
        com.google.javascript.rhino.Node node82 = node12.useSourceInfoIfMissingFrom(node43);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str67, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test19690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19690");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node13 = node11.getLastChild();
        boolean boolean14 = node11.isLocalResultCall();
        boolean boolean15 = node11.isThis();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean21 = node20.isExprResult();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node25.isLabel();
        boolean boolean28 = node20.isEquivalentTo(node25);
        node20.addSuppression("unknown");
        boolean boolean31 = node11.hasChild(node20);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.wasEmptyNode();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isTypeOf();
        boolean boolean46 = node41.isDelProp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node52 = node50.getParent();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node50.setJSType(jSType53);
        java.lang.String str55 = node50.toString();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node57.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        node57.setStaticSourceFile(staticSourceFile60);
        boolean boolean62 = node57.isComma();
        node57.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList65 = com.google.common.collect.ImmutableList.of(node34, node41, node50, node57);
        boolean boolean66 = node34.isQuotedString();
        boolean boolean67 = node34.isNumber();
        boolean boolean68 = node34.isNoSideEffectsCall();
        boolean boolean69 = node34.isNew();
        node11.putProp(46, (java.lang.Object) node34);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags72 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags72.clearAllFlags();
        sideEffectFlags72.clearSideEffectFlags();
        sideEffectFlags72.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node34.setSideEffectFlags(sideEffectFlags72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR" + "'", str55, "OR");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test19691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19691");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        boolean boolean35 = jSDocInfo27.hasDescriptionForParameter("hi!");
        java.lang.String str36 = jSDocInfo27.getBlockDescription();
        int int37 = jSDocInfo27.getExtendedInterfacesCount();
        int int38 = jSDocInfo27.getParameterCount();
        boolean boolean39 = jSDocInfo27.containsDeclaration();
        boolean boolean40 = jSDocInfo27.hasType();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test19692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19692");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isInterface();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19693");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR\n", 2, (int) (byte) -1);
        boolean boolean4 = node3.isNull();
        node3.setQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test19694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19694");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = node2.cloneNode();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        boolean boolean9 = node5.isTypeOf();
        boolean boolean10 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.isDelProp();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node21.setJSType(jSType24);
        java.lang.String str26 = node21.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        node28.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList36 = com.google.common.collect.ImmutableList.of(node5, node12, node21, node28);
        com.google.javascript.rhino.Node node37 = node3.copyInformationFrom(node28);
        java.util.Set<java.lang.String> strSet38 = node37.getDirectives();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(1, node37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isBreak();
        com.google.javascript.rhino.Node node46 = node37.useSourceInfoFromForTree(node41);
        boolean boolean47 = node41.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR" + "'", str26, "OR");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test19695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19695");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(48, "Unknown class name", (-1), 42);
        boolean boolean6 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo14.getParameterNames();
        boolean boolean16 = jSDocInfo14.isOverride();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        boolean boolean28 = node23.isIf();
        com.google.javascript.rhino.Node node29 = node20.copyInformationFromForTree(node23);
        jSDocInfo14.setAssociatedNode(node23);
        node23.setCharno(36);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isOnlyModifiesThisCall();
        boolean boolean40 = node34.isDelProp();
        boolean boolean41 = node34.isNull();
        com.google.javascript.rhino.Node node42 = node23.clonePropsFrom(node34);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(6, node5, node8, node23, 0, 15);
        com.google.javascript.rhino.Node node46 = node23.getFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.isNoShadow();
        boolean boolean49 = jSDocInfo47.isNoShadow();
        boolean boolean50 = jSDocInfo47.hasModifies();
        boolean boolean51 = jSDocInfo47.isOverride();
        node23.setJSDocInfo(jSDocInfo47);
        boolean boolean53 = node23.isDec();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test19696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19696");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.isOverride();
        jSDocInfo0.setLicense("true");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test19697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19697");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.wasEmptyNode();
        boolean boolean8 = node2.isLabelName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isHook();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(29, node2, node10, 50, 41);
        int int21 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node10.getNext();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test19698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19698");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.lang.String str6 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19699");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        boolean boolean10 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19700");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node27.setJSType(jSType61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("OR");
        node64.addSuppression("NUMBER 4.0 1\n");
        node27.addChildrenToFront(node64);
        boolean boolean68 = node64.isNoSideEffectsCall();
        node64.setType(4095);
        boolean boolean71 = node64.isLabelName();
        boolean boolean72 = node64.hasChildren();
        node64.setIsSyntheticBlock(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test19701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19701");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setItem("");
        int int11 = stringPosition0.getStartLine();
        stringPosition0.setItem("[JSDocInfo, GETELEM, NUMBER -1.0\n, Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n, NUMBER 1.0 37\n, , OR\n, OR 0 [jsdoc_info: JSDocInfo]\n, , (OR \n), OR\n    OR\n]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test19702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19702");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("RETURN ()\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((NUMBER 1.0 37\n))", "GETELEM", "OR [synthetic: 1]", "NUMBER 1.0 37\n");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList9 = strList6.subList((int) '#', 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (35) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test19703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19703");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        int int12 = strList3.indexOf((java.lang.Object) boolean11);
        java.lang.Object[] objArray13 = strList3.toArray();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node15.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node15.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.children();
        boolean boolean22 = node15.isObjectLit();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node24.isReturn();
        com.google.javascript.rhino.InputId inputId29 = node24.getInputId();
        boolean boolean30 = node24.isArrayLit();
        boolean boolean31 = node24.isInc();
        com.google.javascript.rhino.Node node32 = node15.srcrefTree(node24);
        boolean boolean33 = strList3.equals((java.lang.Object) node32);
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean48 = strList40.containsAll((java.util.Collection<java.lang.String>) strList47);
        java.util.Spliterator<java.lang.String> strSpliterator49 = strList40.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = strList40.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean55 = strList50.containsAll((java.util.Collection<java.lang.String>) strList54);
        boolean boolean56 = strList3.removeAll((java.util.Collection<java.lang.String>) strList54);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor57 = strList54.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor58 = strList54.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.hasBaseType();
        jSDocInfo59.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo59.getTypedefType();
        boolean boolean64 = jSDocInfo59.isNoSideEffects();
        boolean boolean65 = jSDocInfo59.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo59.getThisType();
        boolean boolean67 = jSDocInfo59.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo59.getThisType();
        java.util.Set<java.lang.String> strSet69 = jSDocInfo59.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator70 = strSet69.spliterator();
        java.lang.Object[] objArray71 = strSet69.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = strList54.removeAll((java.util.Collection<java.lang.String>) strSet69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strSpliterator49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strItor58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(strSpliterator70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
    }

    @Test
    public void test19704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19704");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isTypeOf();
        boolean boolean37 = node32.isDelProp();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        int int43 = node39.getCharno();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node32, node39 };
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray44);
        int int46 = strList13.indexOf((java.lang.Object) node45);
        java.util.Iterator<java.lang.String> strItor47 = strList13.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        boolean boolean59 = strList13.containsAll((java.util.Collection<java.lang.String>) strList58);
        int int60 = strList58.size();
        java.lang.String str61 = strList58.toString();
        boolean boolean62 = strList58.isEmpty();
        boolean boolean63 = strList58.isEmpty();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition64 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition64.setItem("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition67.setItem("NUMBER 4.0 1\n");
        stringPosition67.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str75 = stringPosition67.getItem();
        stringPosition67.setItem("");
        int int78 = stringPosition67.getStartLine();
        int int79 = stringPosition67.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition80 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int81 = stringPosition80.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList82 = com.google.common.collect.ImmutableList.of(stringPosition64, stringPosition67, stringPosition80);
        int int83 = stringPosition64.getEndLine();
        int int84 = stringPosition64.getPositionOnStartLine();
        int int85 = strList58.lastIndexOf((java.lang.Object) stringPosition64);
        int int86 = stringPosition64.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]" + "'", str61, "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER 4.0 1\n" + "'", str75, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(stringPositionList82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test19705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19705");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        boolean boolean57 = jSDocInfo52.isNoTypeCheck();
        boolean boolean58 = jSDocInfo52.isExterns();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo52.getImplementedInterfaces();
        java.lang.String str60 = jSDocInfo52.getReturnDescription();
        java.lang.Class<?> wildcardClass61 = jSDocInfo52.getClass();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test19706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19706");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "OR\n");
        boolean boolean31 = node24.isBlock();
        boolean boolean32 = node24.isString();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node38 = node36.getParent();
        node36.setIsSyntheticBlock(true);
        boolean boolean41 = node36.isContinue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node36.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        com.google.javascript.rhino.Node node54 = node44.useSourceInfoFromForTree(node51);
        boolean boolean55 = node54.isSetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node54.siblings();
        int int57 = node36.getIndexOfChild(node54);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        boolean boolean63 = node59.isGetterDef();
        java.util.Set<java.lang.String> strSet64 = node59.getDirectives();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        boolean boolean70 = node66.isFalse();
        boolean boolean71 = node66.isParamList();
        com.google.javascript.rhino.Node node72 = node59.useSourceInfoIfMissingFrom(node66);
        node72.setLength(45);
        boolean boolean75 = node72.isStringKey();
        node72.setVarArgs(false);
        com.google.javascript.rhino.Node node78 = node54.copyInformationFromForTree(node72);
        boolean boolean79 = node72.isCall();
        node72.detachChildren();
        node24.addChildrenToBack(node72);
        node72.setVarArgs(true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test19707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19707");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) 'a');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        boolean boolean3 = node1.isFalse();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test19708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19708");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("(OR [jsdoc_info: JSDocInfo])");
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("Named type with empty name component");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo0.isConstant();
        boolean boolean13 = jSDocInfo0.hasDescriptionForParameter("EQ OR [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(visibility14);
    }

    @Test
    public void test19709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19709");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition3.setItem("NUMBER 4.0 1\n");
        stringPosition3.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str11 = stringPosition3.getItem();
        stringPosition3.setItem("");
        int int14 = stringPosition3.getStartLine();
        int int15 = stringPosition3.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int17 = stringPosition16.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList18 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition16);
        int int19 = stringPosition0.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(53, 36, 41, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 53?end-line: 41");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 4.0 1\n" + "'", str11, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(stringPositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test19710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19710");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        node3.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        com.google.javascript.rhino.Node node29 = node19.useSourceInfoFromForTree(node26);
        boolean boolean30 = node13.hasChild(node19);
        boolean boolean31 = node13.isStringKey();
        com.google.javascript.rhino.Node node32 = node3.useSourceInfoFromForTree(node13);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder34 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node36 };
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node48 = node44.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] { node44 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] { node52 };
        com.google.javascript.rhino.Node[][] nodeArray59 = new com.google.javascript.rhino.Node[][] { nodeArray42, nodeArray50, nodeArray58 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder60 = nodeArrayBuilder34.add(nodeArray59);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder61 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder63 = nodeArrayBuilder61.add(nodeArray62);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder64 = nodeArrayBuilder60.add(nodeArray62);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(0, nodeArray62);
        boolean boolean66 = node65.isNE();
        node32.addChildrenToBack(node65);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        node69.addChildrenToFront(node71);
        boolean boolean73 = node69.isTypeOf();
        boolean boolean74 = node69.isVarArgs();
        boolean boolean75 = node69.isIn();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean80 = node79.isRegExp();
        boolean boolean81 = node79.isDebugger();
        boolean boolean82 = node79.isCall();
        com.google.javascript.rhino.Node node83 = node69.srcrefTree(node79);
        node83.setOptionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node86 = node65.getChildBefore(node83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArrayBuilder60);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(nodeArrayBuilder63);
        org.junit.Assert.assertNotNull(nodeArrayBuilder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test19711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19711");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.lang.String str5 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isName();
        boolean boolean13 = node7.isNE();
        boolean boolean14 = node7.isIn();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        boolean boolean21 = node20.isDefaultCase();
        int int22 = node7.getIndexOfChild(node20);
        boolean boolean23 = node20.isLabelName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node20.children();
        boolean boolean25 = node20.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(1, "((OR))", (int) (byte) 1, 10);
        boolean boolean31 = node30.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = node20.srcref(node30);
        jSDocInfo0.setAssociatedNode(node30);
        int int34 = node30.getType();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isNot();
        boolean boolean46 = node41.isIf();
        com.google.javascript.rhino.Node node47 = node38.copyInformationFromForTree(node41);
        boolean boolean48 = node47.isParamList();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = new com.google.javascript.rhino.JSTypeExpression(node47, "OR [jsdoc_info: JSDocInfo]\n");
        boolean boolean51 = node47.hasOneChild();
        java.lang.String str55 = node47.toString(false, true, true);
        boolean boolean56 = node47.isName();
        int int57 = node47.getSourcePosition();
        com.google.javascript.rhino.Node node58 = node30.useSourceInfoFromForTree(node47);
        node58.setCharno(10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR" + "'", str55, "OR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test19712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19712");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasBaseType();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        int int22 = jSDocInfo19.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getEnumParameterType();
        node10.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getReturnType();
        java.lang.String str26 = jSDocInfo19.toString();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo19.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo19.getParameterType("OR 0 [synthetic: 1]");
        java.lang.String str30 = jSDocInfo19.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JSDocInfo" + "'", str26, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSDocInfo" + "'", str30, "JSDocInfo");
    }

    @Test
    public void test19713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19713");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility10);
        java.lang.String str12 = jSDocInfo0.getDescription();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test19714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19714");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: NUMBER -1.0\n", (int) (short) 10, 44);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        com.google.javascript.rhino.Node node15 = node5.useSourceInfoFromForTree(node12);
        node15.setOptionalArg(false);
        int int19 = node15.getIntProp(8);
        com.google.javascript.rhino.Node node20 = node3.srcrefTree(node15);
        boolean boolean21 = node20.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test19715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19715");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node3.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator11 = ancestorIterable10.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator12 = ancestorIterable10.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator13 = ancestorIterable10.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor14 = ancestorIterable10.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator15 = ancestorIterable10.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor16 = ancestorIterable10.iterator();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertNotNull(nodeSpliterator13);
        org.junit.Assert.assertNotNull(nodeItor14);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(nodeItor16);
    }

    @Test
    public void test19716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19716");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isNot();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = node8.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isExprResult();
        boolean boolean17 = node15.isDefaultCase();
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node29 = node27.getParent();
        com.google.javascript.rhino.Node node30 = node20.useSourceInfoFromForTree(node27);
        boolean boolean31 = node30.isSetterDef();
        com.google.javascript.rhino.Node node32 = node30.getLastChild();
        boolean boolean33 = node30.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node34 = node15.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node34.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = node34.cloneNode();
        boolean boolean38 = node37.isAdd();
        boolean boolean39 = node37.isCall();
        com.google.javascript.rhino.Node node41 = node37.getAncestor((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test19717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19717");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isArrayLit();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node14.copyInformationFromForTree(node19);
        java.lang.String str26 = node25.getSourceFileName();
        com.google.javascript.rhino.Node node27 = node11.copyInformationFromForTree(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node25.siblings();
        boolean boolean29 = node25.isInc();
        node25.setType(32);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test19718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19718");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node17.isNumber();
        boolean boolean34 = node17.isString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node17, "Named type with empty name component");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test19719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19719");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(49, "[]", 3, 11);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test19720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19720");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        java.lang.String str10 = jSDocInfo0.getMeaning();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo0.getMarkers();
        java.lang.String str12 = jSDocInfo0.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression[] jSTypeExpressionArray14 = new com.google.javascript.rhino.JSTypeExpression[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = com.google.common.collect.ImmutableList.copyOf(jSTypeExpressionArray14);
        com.google.javascript.rhino.JSTypeExpression[] jSTypeExpressionArray16 = strList13.toArray(jSTypeExpressionArray14);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo17.getImplementedInterfaces();
        boolean boolean21 = jSDocInfo17.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = jSDocInfo17.getTemplateTypeNames();
        boolean boolean23 = strList22.isEmpty();
        int int25 = strList22.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = strList13.retainAll((java.util.Collection<java.lang.String>) strList22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(markerCollection11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray14);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test19721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19721");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isFalse();
        boolean boolean14 = node9.isParamList();
        node1.addChildToFront(node9);
        node9.putIntProp(38, 35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node9.siblings();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node9.getStaticSourceFile();
        node9.setSourceFileForTesting("");
        boolean boolean23 = node9.isQuotedString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test19722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19722");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(29, "OR [length: 45]", (int) '4', 213092);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test19723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19723");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node10.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] { node10 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node[][] nodeArray25 = new com.google.javascript.rhino.Node[][] { nodeArray8, nodeArray16, nodeArray24 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder26 = nodeArrayBuilder0.add(nodeArray25);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        boolean boolean32 = node30.isLabel();
        boolean boolean33 = node30.isObjectLit();
        int int34 = node30.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] { node30 };
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node39.isLabel();
        boolean boolean42 = node39.isObjectLit();
        int int43 = node39.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node39 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node48.isLabel();
        boolean boolean51 = node48.isObjectLit();
        int int52 = node48.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] { node48 };
        com.google.javascript.rhino.Node[][] nodeArray54 = new com.google.javascript.rhino.Node[][] { nodeArray35, nodeArray44, nodeArray53 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder55 = nodeArrayBuilder26.add(nodeArray54);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder56 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node58.addSuppression("");
        java.lang.String str61 = node58.toString();
        com.google.javascript.rhino.Node node62 = node58.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node58.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] { node58 };
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node66.addSuppression("");
        java.lang.String str69 = node66.toString();
        com.google.javascript.rhino.Node node70 = node66.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = node66.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] { node66 };
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node74.addSuppression("");
        java.lang.String str77 = node74.toString();
        com.google.javascript.rhino.Node node78 = node74.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = node74.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] { node74 };
        com.google.javascript.rhino.Node[][] nodeArray81 = new com.google.javascript.rhino.Node[][] { nodeArray64, nodeArray72, nodeArray80 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder82 = nodeArrayBuilder56.add(nodeArray81);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder83 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder85 = nodeArrayBuilder83.add(nodeArray84);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder86 = nodeArrayBuilder82.add(nodeArray84);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder87 = nodeArrayBuilder55.add(nodeArray84);
        com.google.javascript.rhino.Node[] nodeArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder89 = nodeArrayBuilder55.add(nodeArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArrayBuilder26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArrayBuilder55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str61, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str69, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(staticSourceFile71);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str77, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNull(staticSourceFile79);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(nodeArrayBuilder82);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(nodeArrayBuilder85);
        org.junit.Assert.assertNotNull(nodeArrayBuilder86);
        org.junit.Assert.assertNotNull(nodeArrayBuilder87);
    }

    @Test
    public void test19724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19724");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node13 = node11.getLastChild();
        node11.putIntProp(42, 4095);
        int int17 = node11.getSideEffectFlags();
        boolean boolean18 = node11.isOptionalArg();
        boolean boolean19 = node11.isBreak();
        node11.setLineno(49);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4095 + "'", int17 == 4095);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test19725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19725");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition2.hasBrackets();
        boolean boolean10 = typePosition2.hasBrackets();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19726");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test19727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19727");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        java.lang.String str8 = jSDocInfo0.toString();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19728");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        node21.putBooleanProp(43, true);
        boolean boolean34 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node35 = node21.getLastChild();
        java.lang.Appendable appendable36 = null;
        // The following exception was thrown during execution in test generation
        try {
            node35.appendStringTree(appendable36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test19729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19729");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        boolean boolean16 = node6.hasMoreThanOneChild();
        boolean boolean17 = node6.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node6);
        jSDocInfo0.addSuppression("(OR \n)");
        boolean boolean21 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node24.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node24.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.children();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node36 = node24.clonePropsFrom(node32);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node38.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node38.getStaticSourceFile();
        boolean boolean44 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node46.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node58 = node38.useSourceInfoFrom(node51);
        boolean boolean59 = node51.isNot();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        java.lang.String str64 = node61.toString();
        com.google.javascript.rhino.Node node65 = node61.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node61.getStaticSourceFile();
        boolean boolean67 = node61.isLocalResultCall();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node74.addSuppression("");
        java.lang.String str77 = node74.toString();
        com.google.javascript.rhino.Node node78 = node74.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = node74.getStaticSourceFile();
        com.google.javascript.rhino.Node node80 = node69.copyInformationFromForTree(node74);
        com.google.javascript.rhino.Node node81 = node61.useSourceInfoFrom(node74);
        boolean boolean82 = node74.isNot();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(44, node32, node51, node74);
        com.google.javascript.rhino.InputId inputId84 = null;
        node83.setInputId(inputId84);
        node83.removeProp((int) (short) -1);
        boolean boolean88 = node83.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node83);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder90 = node83.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node91 = node83.getFirstChild();
        boolean boolean92 = node91.isQualifiedName();
        com.google.javascript.rhino.Node node93 = node91.getLastSibling();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str64, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str77, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNull(staticSourceFile79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test19730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19730");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isNoSideEffectsCall();
        boolean boolean8 = node5.isNew();
        node5.setSourceEncodedPosition((int) (short) 100);
        node5.setVarArgs(true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19731");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node21.isDelProp();
        boolean boolean23 = node21.isInc();
        com.google.javascript.rhino.Node node24 = node21.getLastSibling();
        boolean boolean25 = node24.isExprResult();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test19732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19732");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean9 = node3.isContinue();
        boolean boolean10 = node3.isTry();
        boolean boolean11 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19733");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        boolean boolean19 = node1.isStringKey();
        int int20 = node1.getCharno();
        boolean boolean21 = node1.isCase();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        int int27 = node23.getCharno();
        boolean boolean28 = node23.isName();
        boolean boolean29 = node23.isNE();
        boolean boolean30 = node23.isIn();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node36 = node34.getParent();
        boolean boolean37 = node36.isDefaultCase();
        int int38 = node23.getIndexOfChild(node36);
        node23.setSourceEncodedPosition(4095);
        boolean boolean41 = node23.isAssign();
        node1.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        node50.putIntProp((int) (short) 0, 38);
        node46.addChildToBack(node50);
        boolean boolean58 = node50.isNE();
        boolean boolean59 = node50.isIf();
        boolean boolean60 = node50.isTry();
        node50.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING OR [jsdoc_info: JSDocInfo] 4\n\n\nTree2:\nBITXOR 0\n    OR\n        OR\n    OR\n        OR\n\n\nSubtree1: STRING OR [jsdoc_info: JSDocInfo] 4\n\n\nSubtree2: BITXOR 0\n    OR\n        OR\n    OR\n        OR\n");
        int int63 = node1.getIndexOfChild(node50);
        boolean boolean64 = node1.isNew();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test19734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19734");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        boolean boolean13 = node3.isParamList();
        node3.setWasEmptyNode(false);
        boolean boolean16 = node3.isRegExp();
        com.google.javascript.rhino.Node node17 = node3.cloneTree();
        boolean boolean18 = node3.isCatch();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test19735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19735");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(6, (int) (short) 10, 50);
        com.google.javascript.rhino.Node node4 = node3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node4.getCharno();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test19736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19736");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        boolean boolean4 = node1.isVarArgs();
        int int5 = node1.getChildCount();
        com.google.javascript.rhino.Node node6 = node1.getLastSibling();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        java.util.Set<java.lang.String> strSet12 = node10.getDirectives();
        com.google.javascript.rhino.Node node13 = node6.srcref(node10);
        int int14 = node6.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasBaseType();
        jSDocInfo15.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int19 = jSDocInfo15.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo15.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo15.getParameterNames();
        boolean boolean22 = jSDocInfo15.hasType();
        int int23 = jSDocInfo15.getExtendedInterfacesCount();
        node6.setJSDocInfo(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test19737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19737");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        boolean boolean12 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node3.setStaticSourceFile(staticSourceFile13);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        int int20 = node16.getCharno();
        boolean boolean21 = node16.isName();
        boolean boolean22 = node16.isNE();
        boolean boolean23 = node16.isIn();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node29 = node27.getParent();
        boolean boolean30 = node29.isDefaultCase();
        int int31 = node16.getIndexOfChild(node29);
        node29.setWasEmptyNode(false);
        boolean boolean34 = node29.isAssign();
        com.google.javascript.rhino.InputId inputId35 = null;
        node29.setInputId(inputId35);
        com.google.javascript.rhino.Node node37 = node3.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean38 = node3.isTypeOf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test19738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19738");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.children();
        boolean boolean9 = node2.isObjectLit();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isReturn();
        com.google.javascript.rhino.InputId inputId16 = node11.getInputId();
        boolean boolean17 = node11.isArrayLit();
        boolean boolean18 = node11.isInc();
        com.google.javascript.rhino.Node node19 = node2.srcrefTree(node11);
        node19.setIsSyntheticBlock(false);
        boolean boolean22 = node19.isHook();
        boolean boolean23 = node19.isVar();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 100, node19, 49, 42);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        int int32 = node30.getType();
        com.google.javascript.rhino.InputId inputId33 = node30.getInputId();
        com.google.javascript.rhino.Node node34 = node30.getParent();
        boolean boolean35 = node34.isGetterDef();
        com.google.javascript.rhino.Node node36 = node19.useSourceInfoFrom(node34);
        boolean boolean37 = node36.isInc();
        com.google.javascript.rhino.Node node38 = node36.detachFromParent();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test19739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19739");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        node9.setStaticSourceFile(staticSourceFile12);
        boolean boolean14 = node9.isComma();
        node9.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node18.children();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean25 = node18.isName();
        java.lang.String str26 = node9.checkTreeEquals(node18);
        boolean boolean27 = node18.isInc();
        node18.setType((int) (short) -1);
        node1.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node37.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFromForTree(node37);
        boolean boolean44 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.isVarArgs();
        boolean boolean52 = node46.isIn();
        node37.addChildToFront(node46);
        node46.removeProp(48);
        com.google.javascript.rhino.Node node57 = node46.getAncestor(0);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node60 = node1.useSourceInfoFromForTree(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node59.children();
        boolean boolean62 = node59.isGetElem();
        boolean boolean63 = node59.isThis();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node65 = node59.getChildAtIndex(7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str26, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test19740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19740");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        boolean boolean15 = node6.isOr();
        node6.putIntProp(2, 0);
        com.google.javascript.rhino.jstype.JSType jSType19 = node6.getJSType();
        boolean boolean20 = node6.isCatch();
        boolean boolean21 = node6.isNull();
        node6.setVarArgs(false);
        int int24 = node6.getChildCount();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test19741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19741");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.String str8 = node2.getSourceFileName();
        boolean boolean9 = node2.isGetElem();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(31, node2, 0, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasBaseType();
        jSDocInfo13.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int17 = jSDocInfo13.getParameterCount();
        boolean boolean18 = jSDocInfo13.isNoSideEffects();
        node12.setJSDocInfo(jSDocInfo13);
        boolean boolean20 = jSDocInfo13.isExterns();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo13.getImplementedInterfaces();
        boolean boolean22 = jSDocInfo13.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo13.getExtendedInterfaces();
        com.google.javascript.rhino.Node node24 = null;
        jSDocInfo13.setAssociatedNode(node24);
        java.util.Set<java.lang.String> strSet26 = jSDocInfo13.getModifies();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test19742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19742");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node13 = jSTypeExpression9.getRoot();
        com.google.javascript.rhino.Node node14 = jSTypeExpression9.getRoot();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.wasEmptyNode();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isTypeOf();
        boolean boolean28 = node23.isDelProp();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node34 = node32.getParent();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node32.setJSType(jSType35);
        java.lang.String str37 = node32.toString();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        node39.setStaticSourceFile(staticSourceFile42);
        boolean boolean44 = node39.isComma();
        node39.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList47 = com.google.common.collect.ImmutableList.of(node16, node23, node32, node39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isNot();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = node49.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isNot();
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoFrom(node58);
        boolean boolean64 = node16.isEquivalentToTyped(node63);
        boolean boolean65 = node16.isRegExp();
        boolean boolean66 = jSTypeExpression9.equals((java.lang.Object) node16);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node68.addChildrenToFront(node70);
        boolean boolean72 = node68.isReturn();
        com.google.javascript.rhino.InputId inputId73 = node68.getInputId();
        boolean boolean74 = node68.isAdd();
        boolean boolean75 = node68.isVoid();
        boolean boolean76 = node16.isEquivalentTo(node68);
        boolean boolean77 = node16.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR" + "'", str37, "OR");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(inputId73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test19743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19743");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.wasEmptyNode();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.isDelProp();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node18.setJSType(jSType21);
        java.lang.String str23 = node18.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node25.setStaticSourceFile(staticSourceFile28);
        boolean boolean30 = node25.isComma();
        node25.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList33 = com.google.common.collect.ImmutableList.of(node2, node9, node18, node25);
        boolean boolean34 = node9.isComma();
        boolean boolean35 = node9.isContinue();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        com.google.javascript.rhino.Node node41 = node39.getParent();
        boolean boolean42 = node41.isDefaultCase();
        boolean boolean43 = node41.isNoSideEffectsCall();
        boolean boolean44 = node41.isAssignAdd();
        boolean boolean45 = node41.isNoSideEffectsCall();
        boolean boolean46 = node41.isFromExterns();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node48.isNot();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = node48.copyInformationFromForTree(node54);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        boolean boolean61 = node57.isNot();
        com.google.javascript.rhino.Node node62 = node55.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node node63 = node57.getLastSibling();
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node9, node41, node63, (int) (byte) 10, 50);
        boolean boolean68 = node67.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR" + "'", str23, "OR");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test19744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19744");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        boolean boolean57 = jSDocInfo52.isNoTypeCheck();
        boolean boolean58 = jSDocInfo52.isExterns();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo52.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection60 = jSDocInfo52.getAuthors();
        boolean boolean61 = jSDocInfo52.isNoAlias();
        boolean boolean62 = jSDocInfo52.isExterns();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertNull(strCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test19745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19745");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(43);
    }

    @Test
    public void test19746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19746");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        boolean boolean9 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test19747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19747");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        node15.removeProp(48);
        com.google.javascript.rhino.Node node26 = node15.getAncestor(0);
        boolean boolean27 = node15.isUnscopedQualifiedName();
        java.lang.String str28 = node15.toString();
        com.google.javascript.rhino.Node node29 = node15.removeFirstChild();
        java.lang.String str30 = node15.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isTypeOf();
        boolean boolean37 = node32.wasEmptyNode();
        boolean boolean38 = node32.isLabelName();
        node32.removeProp(49);
        boolean boolean41 = node32.isCall();
        com.google.javascript.rhino.Node node42 = node15.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.InputId inputId43 = null;
        node15.setInputId(inputId43);
        boolean boolean45 = node15.isScript();
        boolean boolean46 = node15.isTry();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR" + "'", str28, "OR");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test19748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19748");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        boolean boolean17 = node10.isNew();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isReturn();
        com.google.javascript.rhino.InputId inputId24 = node19.getInputId();
        boolean boolean25 = node19.isArrayLit();
        boolean boolean26 = node19.isInc();
        boolean boolean27 = node19.isAssign();
        java.lang.String str28 = node19.getSourceFileName();
        boolean boolean29 = node19.isSetterDef();
        boolean boolean30 = node19.isGetProp();
        com.google.javascript.rhino.Node node31 = node10.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        node33.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node42.children();
        com.google.javascript.rhino.InputId inputId47 = null;
        node42.setInputId(inputId47);
        boolean boolean49 = node42.isName();
        java.lang.String str50 = node33.checkTreeEquals(node42);
        boolean boolean51 = node42.isInc();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isNot();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = node53.copyInformationFromForTree(node59);
        com.google.javascript.rhino.InputId inputId61 = node53.getInputId();
        node42.addChildrenToFront(node53);
        node53.putBooleanProp(43, true);
        boolean boolean66 = node53.isParamList();
        boolean boolean67 = node53.isInc();
        com.google.javascript.rhino.Node node68 = node19.srcrefTree(node53);
        boolean boolean69 = node68.isOr();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str50, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(inputId61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test19749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19749");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int26 = strList17.size();
        boolean boolean27 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList17);
        boolean boolean28 = strList17.isEmpty();
        java.lang.String str29 = strList17.toString();
        java.lang.String[] strArray43 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        java.lang.String[] strArray49 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray50 = strSet44.toArray((java.lang.Comparable<java.lang.String>[]) strArray49);
        boolean boolean51 = strList17.containsAll((java.util.Collection<java.lang.String>) strSet44);
        java.util.stream.Stream<java.lang.String> strStream52 = strSet44.parallelStream();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str29, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strComparableArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strStream52);
    }

    @Test
    public void test19750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19750");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        boolean boolean14 = node9.isName();
        boolean boolean15 = node9.isNE();
        boolean boolean16 = node9.isIn();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        boolean boolean23 = node22.isDefaultCase();
        int int24 = node9.getIndexOfChild(node22);
        boolean boolean25 = node22.isLabelName();
        boolean boolean26 = node1.isEquivalentTo(node22);
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean32 = node31.isName();
        node31.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node35 = node22.useSourceInfoIfMissingFrom(node31);
        boolean boolean36 = node22.isDefaultCase();
        boolean boolean37 = node22.isQualifiedName();
        node22.setCharno(35);
        boolean boolean40 = node22.isInc();
        boolean boolean41 = node22.isIf();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test19751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19751");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(8);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test19752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19752");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        boolean boolean19 = node7.isNot();
        boolean boolean20 = node7.isQuotedString();
        boolean boolean21 = node7.isNot();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node39 = node37.getParent();
        com.google.javascript.rhino.Node node40 = node30.useSourceInfoFromForTree(node37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node42.setStaticSourceFile(staticSourceFile45);
        boolean boolean47 = node42.isComma();
        node42.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node51.children();
        com.google.javascript.rhino.InputId inputId56 = null;
        node51.setInputId(inputId56);
        boolean boolean58 = node51.isName();
        java.lang.String str59 = node42.checkTreeEquals(node51);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] { node24, node30, node51 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(nodeArray60);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray60);
        boolean boolean63 = node62.hasMoreThanOneChild();
        node62.setType((int) (byte) 100);
        java.lang.Object obj67 = node62.getProp((-1));
        com.google.javascript.rhino.Node node68 = node7.useSourceInfoFrom(node62);
        boolean boolean69 = node68.isFromExterns();
        boolean boolean70 = node68.isUnscopedQualifiedName();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str33, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str59, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test19753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19753");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        boolean boolean8 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node19 = node15.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node10.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFrom(node15);
        boolean boolean23 = node22.isDelProp();
        boolean boolean24 = node22.isDec();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isNot();
        boolean boolean36 = node31.isIf();
        com.google.javascript.rhino.Node node37 = node28.copyInformationFromForTree(node31);
        boolean boolean38 = node31.isInc();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node31.getJSDocInfo();
        java.lang.String str40 = node22.checkTreeEquals(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node31.siblings();
        com.google.javascript.rhino.Node node42 = node31.getLastChild();
        boolean boolean43 = node31.isThrow();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 0, node31, (int) (byte) 10, 33);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str40, "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test19754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19754");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node.FileLevelJsDocBuilder> fileLevelJsDocBuilderBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node.FileLevelJsDocBuilder>();
    }

    @Test
    public void test19755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19755");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isInc();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        node23.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node44 = node3.useSourceInfoFromForTree(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node node58 = node47.copyInformationFromForTree(node52);
        int int59 = node58.getSideEffectFlags();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        java.lang.String str64 = node61.toString();
        com.google.javascript.rhino.Node node65 = node61.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node61.getStaticSourceFile();
        boolean boolean67 = node61.isLocalResultCall();
        node61.setVarArgs(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str71 = jSDocInfo70.getFileOverview();
        java.lang.String str72 = jSDocInfo70.getFileOverview();
        boolean boolean73 = jSDocInfo70.isConstant();
        jSDocInfo70.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo70.setVisibility(visibility76);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo70.getParameterType("Not declared as a type name");
        node61.setJSDocInfo(jSDocInfo70);
        boolean boolean81 = node61.isScript();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        node83.addChildrenToFront(node85);
        int int87 = node83.getCharno();
        boolean boolean88 = node83.isName();
        boolean boolean89 = node83.isDefaultCase();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(0, node58, node61, node83, 30, 8);
        boolean boolean93 = node83.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            node44.addChildToFront(node83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str64, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + visibility76 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility76.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test19756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19756");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node3.addChildrenToFront(node5);
        boolean boolean7 = node3.isTypeOf();
        boolean boolean8 = node3.isDelProp();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] { node3, node10 };
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray15);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(40, nodeArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(nodeArray15);
    }

    @Test
    public void test19757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19757");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.util.Iterator<java.lang.String> strItor24 = strList13.iterator();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags25 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int26 = sideEffectFlags25.valueOf();
        sideEffectFlags25.clearSideEffectFlags();
        sideEffectFlags25.setThrows();
        sideEffectFlags25.setMutatesThis();
        boolean boolean30 = strList13.contains((java.lang.Object) sideEffectFlags25);
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = strList13.asList();
        java.lang.Object[] objArray32 = strList13.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = strList13.reverse();
        // The following exception was thrown during execution in test generation
        try {
            strList13.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test19758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19758");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = node2.removeChildren();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, node2);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node11.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node11.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isNot();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = node18.copyInformationFromForTree(node24);
        boolean boolean26 = node25.isExprResult();
        boolean boolean27 = node25.isDefaultCase();
        node11.addChildrenToBack(node25);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node39 = node37.getParent();
        com.google.javascript.rhino.Node node40 = node30.useSourceInfoFromForTree(node37);
        boolean boolean41 = node40.isSetterDef();
        com.google.javascript.rhino.Node node42 = node40.getLastChild();
        boolean boolean43 = node40.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node44 = node25.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node45 = node9.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean46 = node44.isArrayLit();
        int int47 = node44.getType();
        boolean boolean48 = node44.isNew();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str33, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test19759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19759");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node24.isFor();
        com.google.javascript.rhino.Node node34 = node24.getFirstChild();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        int int40 = node36.getCharno();
        boolean boolean41 = node36.isName();
        boolean boolean42 = node36.isNE();
        boolean boolean43 = node36.isIn();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node49 = node47.getParent();
        boolean boolean50 = node49.isDefaultCase();
        int int51 = node36.getIndexOfChild(node49);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        node36.setStaticSourceFile(staticSourceFile52);
        node24.addChildToBack(node36);
        boolean boolean55 = node24.isNumber();
        boolean boolean56 = node24.isGetterDef();
        com.google.javascript.rhino.Node node57 = node24.getLastSibling();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        com.google.javascript.rhino.Node node63 = node61.getParent();
        boolean boolean64 = node63.isDefaultCase();
        boolean boolean65 = node63.isNoSideEffectsCall();
        java.lang.String str69 = node63.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean71 = jSDocInfo70.hasTypedefType();
        java.lang.String str72 = jSDocInfo70.toString();
        node63.setJSDocInfo(jSDocInfo70);
        com.google.javascript.rhino.Node node74 = node63.cloneTree();
        int int75 = node63.getSourcePosition();
        int int76 = node63.getType();
        com.google.javascript.rhino.Node node77 = node57.useSourceInfoIfMissingFromForTree(node63);
        com.google.javascript.rhino.Node node78 = null;
        // The following exception was thrown during execution in test generation
        try {
            node63.addChildToBack(node78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "OR" + "'", str69, "OR");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "JSDocInfo" + "'", str72, "JSDocInfo");
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(node77);
    }

    @Test
    public void test19760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19760");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        boolean boolean14 = node9.isName();
        boolean boolean15 = node9.isNE();
        boolean boolean16 = node9.isIn();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        boolean boolean23 = node22.isDefaultCase();
        int int24 = node9.getIndexOfChild(node22);
        boolean boolean25 = node22.isLabelName();
        boolean boolean26 = node1.isEquivalentTo(node22);
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean32 = node31.isName();
        node31.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node35 = node22.useSourceInfoIfMissingFrom(node31);
        boolean boolean36 = node22.isDefaultCase();
        boolean boolean37 = node22.isBreak();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node40.setStaticSourceFile(staticSourceFile43);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node55 = node53.getParent();
        com.google.javascript.rhino.Node node56 = node46.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node58.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        node58.setStaticSourceFile(staticSourceFile61);
        boolean boolean63 = node58.isComma();
        node58.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node67.children();
        com.google.javascript.rhino.InputId inputId72 = null;
        node67.setInputId(inputId72);
        boolean boolean74 = node67.isName();
        java.lang.String str75 = node58.checkTreeEquals(node67);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node40, node46, node67 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList77 = com.google.common.collect.ImmutableList.of(nodeArray76);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray76);
        boolean boolean79 = node78.hasMoreThanOneChild();
        node78.setType((int) (byte) 100);
        boolean boolean82 = node78.isScript();
        node78.setSourceEncodedPositionForTree(4095);
        com.google.javascript.rhino.Node node85 = node22.clonePropsFrom(node78);
        boolean boolean86 = node85.isVar();
        java.lang.String str90 = node85.toString(true, true, false);
        boolean boolean91 = node85.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str75, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "OR 52" + "'", str90, "OR 52");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test19761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19761");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        java.util.Iterator<java.lang.String> strItor54 = strList43.iterator();
        boolean boolean55 = strList13.containsAll((java.util.Collection<java.lang.String>) strList43);
        java.lang.Object[] objArray56 = strList13.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean58 = jSDocInfo57.hasBaseType();
        jSDocInfo57.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo57.getTypedefType();
        boolean boolean62 = jSDocInfo57.isNoSideEffects();
        boolean boolean64 = jSDocInfo57.hasDescriptionForParameter("JSDocInfo");
        boolean boolean65 = jSDocInfo57.isConstant();
        jSDocInfo57.addSuppression("(Unknown class name)");
        boolean boolean68 = jSDocInfo57.hasType();
        boolean boolean69 = jSDocInfo57.isImplicitCast();
        int int70 = strList13.lastIndexOf((java.lang.Object) jSDocInfo57);
        java.lang.String str71 = jSDocInfo57.getMeaning();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test19762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19762");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(36);
        boolean boolean2 = node1.isWhile();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = null;
        node4.setStaticSourceFile(staticSourceFile7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.Node node20 = node10.useSourceInfoFromForTree(node17);
        boolean boolean21 = node4.hasChild(node10);
        boolean boolean22 = node4.isStringKey();
        int int23 = node4.getCharno();
        boolean boolean24 = node4.isCase();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        int int30 = node26.getCharno();
        boolean boolean31 = node26.isName();
        boolean boolean32 = node26.isNE();
        boolean boolean33 = node26.isIn();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node39 = node37.getParent();
        boolean boolean40 = node39.isDefaultCase();
        int int41 = node26.getIndexOfChild(node39);
        node26.setSourceEncodedPosition(4095);
        boolean boolean44 = node26.isAssign();
        node4.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        node53.putIntProp((int) (short) 0, 38);
        node49.addChildToBack(node53);
        boolean boolean61 = node53.isNE();
        boolean boolean62 = node53.isIf();
        boolean boolean63 = node53.isTry();
        node53.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING OR [jsdoc_info: JSDocInfo] 4\n\n\nTree2:\nBITXOR 0\n    OR\n        OR\n    OR\n        OR\n\n\nSubtree1: STRING OR [jsdoc_info: JSDocInfo] 4\n\n\nSubtree2: BITXOR 0\n    OR\n        OR\n    OR\n        OR\n");
        int int66 = node4.getIndexOfChild(node53);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenToFront(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test19763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19763");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int8 = stringPosition0.getPositionOnStartLine();
        int int9 = stringPosition0.getEndLine();
        int int10 = stringPosition0.getStartLine();
        stringPosition0.setPositionInformation(0, 24, (int) (short) 100, 48);
        java.lang.String str16 = stringPosition0.getItem();
        java.lang.String str17 = stringPosition0.getItem();
        int int18 = stringPosition0.getPositionOnStartLine();
        int int19 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 4.0 1\n" + "'", str16, "NUMBER 4.0 1\n");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 4.0 1\n" + "'", str17, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test19764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19764");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        node36.setCharno(4095);
        boolean boolean43 = node36.isDo();
        boolean boolean44 = node36.isDo();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.wasEmptyNode();
        boolean boolean52 = node46.isLabelName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node46.siblings();
        node46.putIntProp(0, 0);
        boolean boolean57 = node46.isHook();
        int int59 = node46.getIntProp(30);
        com.google.javascript.rhino.Node node60 = node36.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        int int66 = node62.getCharno();
        boolean boolean67 = node62.isName();
        boolean boolean68 = node62.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression70);
        boolean boolean73 = jSTypeExpression70.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node74 = jSTypeExpression70.getRoot();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node76.addSuppression("");
        java.lang.String str79 = node76.toString();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        node81.addChildrenToFront(node83);
        com.google.javascript.rhino.Node node85 = node83.getParent();
        com.google.javascript.rhino.Node node86 = node76.useSourceInfoFromForTree(node83);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = new com.google.javascript.rhino.JSTypeExpression(node86, "Not declared as a constructor");
        boolean boolean89 = jSTypeExpression70.equals((java.lang.Object) node86);
        boolean boolean90 = node86.isNoSideEffectsCall();
        boolean boolean91 = node86.isGetProp();
        com.google.javascript.rhino.Node node92 = node86.cloneNode();
        com.google.javascript.rhino.Node node93 = node60.copyInformationFrom(node86);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str79, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test19765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19765");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isDo();
        boolean boolean6 = node3.isAssignAdd();
        int int7 = node3.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test19766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19766");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        java.util.Set<java.lang.String> strSet28 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasBaseType();
        jSDocInfo29.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo29.getBaseType();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo29.getParameterNames();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        int int40 = node36.getCharno();
        boolean boolean41 = node36.isContinue();
        boolean boolean42 = strSet34.equals((java.lang.Object) node36);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean57 = strList49.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.util.Spliterator<java.lang.String> strSpliterator58 = strList49.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = strList49.asList();
        boolean boolean60 = strSet34.contains((java.lang.Object) strList59);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        boolean boolean66 = node62.isReturn();
        com.google.javascript.rhino.InputId inputId67 = node62.getInputId();
        boolean boolean68 = node62.isAdd();
        boolean boolean69 = node62.isQuotedString();
        int int71 = node62.getIntProp((int) (byte) 1);
        boolean boolean72 = node62.isVarArgs();
        boolean boolean73 = strList59.contains((java.lang.Object) boolean72);
        boolean boolean74 = strSet28.containsAll((java.util.Collection<java.lang.String>) strList59);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        node76.addChildrenToFront(node78);
        com.google.javascript.rhino.Node node80 = node78.getParent();
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        node78.setJSType(jSType81);
        java.lang.String str83 = node78.getSourceFileName();
        boolean boolean84 = node78.hasOneChild();
        boolean boolean85 = node78.isInc();
        boolean boolean86 = node78.isVoid();
        boolean boolean88 = node78.getBooleanProp((int) (short) 10);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable89 = node78.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor90 = ancestorIterable89.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor91 = ancestorIterable89.iterator();
        boolean boolean92 = strList59.contains((java.lang.Object) ancestorIterable89);
        java.util.Spliterator<java.lang.String> strSpliterator93 = strList59.spliterator();
        java.lang.String str94 = strList59.toString();
        java.lang.Object[] objArray95 = strList59.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strSpliterator58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(inputId67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(ancestorIterable89);
        org.junit.Assert.assertNotNull(nodeItor90);
        org.junit.Assert.assertNotNull(nodeItor91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSpliterator93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str94, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test19767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19767");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "Node tree inequality:\nTree1:\nERROR [synthetic: 1]\n\n\nTree2:\nOR [opt_arg: 1]\n\n\nSubtree1: ERROR [synthetic: 1]\n\n\nSubtree2: OR [opt_arg: 1]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19768");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor27 = strList26.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList26.asList();
        java.lang.Object[] objArray29 = strList28.toArray();
        int int30 = strList28.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo31.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = strList33.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList42 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.String>) strList41);
        java.util.stream.Stream<java.lang.String> strStream43 = strList41.stream();
        boolean boolean44 = strList34.containsAll((java.util.Collection<java.lang.String>) strList41);
        java.lang.Object[] objArray45 = strList34.toArray();
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList46 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.String>) strList34);
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = strList34.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean62 = strList54.containsAll((java.util.Collection<java.lang.String>) strList61);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor63 = strList61.iterator();
        boolean boolean64 = strList61.isEmpty();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        int int70 = node66.getCharno();
        boolean boolean71 = strList61.equals((java.lang.Object) node66);
        java.lang.String str72 = strList61.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = strList61.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = strList73.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = strList74.asList();
        boolean boolean76 = strList47.containsAll((java.util.Collection<java.lang.String>) strList75);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean78 = jSDocInfo77.isNoShadow();
        boolean boolean79 = jSDocInfo77.isNoShadow();
        boolean boolean80 = jSDocInfo77.hasModifies();
        boolean boolean81 = jSDocInfo77.isExterns();
        boolean boolean82 = jSDocInfo77.hasType();
        boolean boolean83 = jSDocInfo77.isDefine();
        java.util.Collection<java.lang.String> strCollection84 = jSDocInfo77.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo77.getThisType();
        int int86 = jSDocInfo77.getExtendedInterfacesCount();
        boolean boolean87 = jSDocInfo77.isJavaDispatch();
        jSDocInfo77.addSuppression("(OR \n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = jSDocInfo77.getTemplateTypeNames();
        boolean boolean91 = strList75.containsAll((java.util.Collection<java.lang.String>) strList90);
        boolean boolean92 = strList28.containsAll((java.util.Collection<java.lang.String>) strList90);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(charSequenceList42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(charSequenceList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str72, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(strCollection84);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test19769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19769");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(6, "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        com.google.javascript.rhino.Node node3 = node2.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = node3.cloneTree();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test19770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19770");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        boolean boolean4 = node3.isComma();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder6 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] { node8 };
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node16 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] { node24 };
        com.google.javascript.rhino.Node[][] nodeArray31 = new com.google.javascript.rhino.Node[][] { nodeArray14, nodeArray22, nodeArray30 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder32 = nodeArrayBuilder6.add(nodeArray31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isObjectLit();
        int int40 = node36.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] { node36 };
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node45.isLabel();
        boolean boolean48 = node45.isObjectLit();
        int int49 = node45.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] { node45 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node54.isLabel();
        boolean boolean57 = node54.isObjectLit();
        int int58 = node54.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node54 };
        com.google.javascript.rhino.Node[][] nodeArray60 = new com.google.javascript.rhino.Node[][] { nodeArray41, nodeArray50, nodeArray59 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder61 = nodeArrayBuilder32.add(nodeArray60);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        boolean boolean68 = node64.isTypeOf();
        boolean boolean69 = node64.isDelProp();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node71.addChildrenToFront(node73);
        int int75 = node71.getCharno();
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node64, node71 };
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray76);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder78 = nodeArrayBuilder32.add(nodeArray76);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder79 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder81 = nodeArrayBuilder79.add(nodeArray80);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder82 = nodeArrayBuilder32.add(nodeArray80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(46, nodeArray80, 50, (int) (short) -1);
        com.google.javascript.rhino.Node node86 = node3.copyInformationFrom(node85);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(43, node1, node85, 3, 43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArrayBuilder32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArrayBuilder61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeArrayBuilder78);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(nodeArrayBuilder81);
        org.junit.Assert.assertNotNull(nodeArrayBuilder82);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test19771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19771");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isTypeOf();
        boolean boolean37 = node32.isDelProp();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        int int43 = node39.getCharno();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node32, node39 };
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray44);
        int int46 = strList13.indexOf((java.lang.Object) node45);
        java.util.Iterator<java.lang.String> strItor47 = strList13.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        boolean boolean59 = strList13.containsAll((java.util.Collection<java.lang.String>) strList58);
        int int60 = strList58.size();
        java.lang.String str61 = strList58.toString();
        boolean boolean62 = strList58.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean77 = strList69.containsAll((java.util.Collection<java.lang.String>) strList76);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor78 = strList76.iterator();
        int int79 = strList76.size();
        boolean boolean80 = strList76.isEmpty();
        int int81 = strList76.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor82 = strList76.iterator();
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        boolean boolean92 = strList85.retainAll((java.util.Collection<java.lang.String>) strList90);
        java.util.ListIterator<java.lang.String> strItor93 = strList85.listIterator();
        boolean boolean94 = strList76.containsAll((java.util.Collection<java.lang.String>) strList85);
        int int95 = strList76.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = strList58.addAll((java.util.Collection<java.lang.String>) strList76);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]" + "'", str61, "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strItor78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 6 + "'", int79 == 6);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
        org.junit.Assert.assertNotNull(strItor82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strItor93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 6 + "'", int95 == 6);
    }

    @Test
    public void test19772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19772");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        boolean boolean2 = jSDocInfo0.isConstant();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test19773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19773");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isTypeOf();
        boolean boolean37 = node32.isDelProp();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        int int43 = node39.getCharno();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node32, node39 };
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray44);
        int int46 = strList13.indexOf((java.lang.Object) node45);
        java.util.Iterator<java.lang.String> strItor47 = strList13.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        boolean boolean59 = strList13.containsAll((java.util.Collection<java.lang.String>) strList58);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList60 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList13);
        java.lang.String[] strArray63 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isTypeOf();
        boolean boolean72 = node67.wasEmptyNode();
        int int73 = strList64.indexOf((java.lang.Object) boolean72);
        boolean boolean74 = strList13.containsAll((java.util.Collection<java.lang.String>) strList64);
        java.lang.Object[] objArray75 = strList64.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.isNoShadow();
        boolean boolean78 = jSDocInfo76.hasFileOverview();
        boolean boolean79 = jSDocInfo76.isNoTypeCheck();
        boolean boolean80 = strList64.remove((java.lang.Object) jSDocInfo76);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strIterableList60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test19774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19774");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        java.util.Iterator<java.lang.String> strItor54 = strList43.iterator();
        boolean boolean55 = strList13.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition56 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int57 = stringPosition56.getStartLine();
        stringPosition56.setItem("(NUMBER 1.0 37\n)");
        stringPosition56.setItem("(OR)");
        int int62 = strList13.lastIndexOf((java.lang.Object) "(OR)");
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = strList13.asList();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor65 = strList13.listIterator(2);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = strList13.reverse();
        // The following exception was thrown during execution in test generation
        try {
            strList66.add(16, "(true)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test19775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19775");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR [directives: []]\n    OR\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setItem("NUMBER 4.0 1\n");
        stringPosition12.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition12.setPositionInformation((int) '#', 44, 51, 50);
        int int25 = stringPosition12.getEndLine();
        stringPosition12.setItem("Unknown class name");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition28.setItem("NUMBER 4.0 1\n");
        stringPosition28.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition28.setPositionInformation((int) '#', 44, 51, 50);
        int int41 = stringPosition28.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition42.setItem("NUMBER 4.0 1\n");
        stringPosition42.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int50 = stringPosition42.getEndLine();
        int int51 = stringPosition42.getPositionOnStartLine();
        stringPosition42.setPositionInformation((int) ' ', 49, 51, 38);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int58 = stringPosition57.getEndLine();
        int int59 = stringPosition57.getEndLine();
        stringPosition57.setItem("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition62 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition62.setItem("NUMBER 4.0 1\n");
        stringPosition62.setItem("unknown");
        stringPosition62.setItem("(OR)");
        stringPosition62.setItem("OR \n");
        int int71 = stringPosition62.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int73 = stringPosition72.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition12, stringPosition28, stringPosition42, stringPosition57, stringPosition62, stringPosition72);
        stringPosition12.setPositionInformation((int) (byte) 10, 52, 35, 0);
        int int80 = stringPosition12.getPositionOnStartLine();
        java.lang.String str81 = stringPosition12.getItem();
        stringPosition12.setPositionInformation(3, 41, (int) (byte) 100, (int) '4');
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 51 + "'", int25 == 51);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51 + "'", int41 == 51);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Unknown class name" + "'", str81, "Unknown class name");
    }

    @Test
    public void test19776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19776");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test19777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19777");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isExport();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isHidden();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19778");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        node17.setIsSyntheticBlock(true);
        boolean boolean22 = node17.isContinue();
        boolean boolean23 = strSet5.equals((java.lang.Object) node17);
        int int24 = strSet5.size();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList33 = com.google.common.collect.ImmutableList.of(typePosition25, typePosition26, typePosition27, typePosition28, typePosition29, typePosition30, typePosition31, typePosition32);
        typePosition32.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        java.lang.String str43 = node40.toString();
        boolean boolean44 = node40.hasChildren();
        typePosition32.setItem(node40);
        int int46 = typePosition32.getStartLine();
        boolean boolean47 = strSet5.equals((java.lang.Object) typePosition32);
        boolean boolean48 = typePosition32.hasBrackets();
        int int49 = typePosition32.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(typePositionList33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str43, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 48 + "'", int49 == 48);
    }

    @Test
    public void test19779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19779");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str9 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("OR 2 [jsdoc_info: JSDocInfo]");
        java.lang.String str12 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test19780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19780");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean12 = jSDocInfo0.hasParameter("(OR)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getTypedefType();
        java.lang.String str14 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test19781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19781");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 54, 0, (int) '4');
        boolean boolean4 = node3.isSwitch();
        boolean boolean5 = node3.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test19782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19782");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isArrayLit();
        boolean boolean8 = node1.isInc();
        boolean boolean9 = node1.isAssign();
        java.lang.String str10 = node1.getSourceFileName();
        node1.removeProp(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test19783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19783");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
    }

    @Test
    public void test19784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19784");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isImplicitCast();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test19785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19785");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isExprResult();
        boolean boolean10 = node8.isNE();
        boolean boolean11 = node8.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19786");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition0.hasBrackets();
        boolean boolean10 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        boolean boolean17 = node16.isDefaultCase();
        boolean boolean18 = node16.isNoSideEffectsCall();
        boolean boolean19 = node16.wasEmptyNode();
        boolean boolean20 = node16.isInc();
        typePosition0.setItem(node16);
        int int22 = node16.getCharno();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node26.setJSType(jSType29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node26.children();
        java.lang.Object obj33 = null;
        node26.putProp((int) (byte) 10, obj33);
        java.lang.Object obj36 = null;
        node26.putProp(46, obj36);
        boolean boolean38 = node26.isSyntheticBlock();
        node26.setSourceEncodedPosition((-1));
        boolean boolean41 = node16.isEquivalentTo(node26);
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test19787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19787");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.children();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node2.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node16.getStaticSourceFile();
        boolean boolean22 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node36 = node16.useSourceInfoFrom(node29);
        boolean boolean37 = node29.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node39.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node39.getStaticSourceFile();
        boolean boolean45 = node39.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node node58 = node47.copyInformationFromForTree(node52);
        com.google.javascript.rhino.Node node59 = node39.useSourceInfoFrom(node52);
        boolean boolean60 = node52.isNot();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(44, node10, node29, node52);
        int int63 = node61.getIntProp(0);
        java.util.Set<java.lang.String> strSet64 = node61.getDirectives();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(strSet64);
    }

    @Test
    public void test19788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19788");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isFalse();
        boolean boolean14 = node9.isParamList();
        node1.addChildToFront(node9);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node9.getJsDocBuilderForNode();
        node9.addSuppression("");
        boolean boolean19 = node9.isGetProp();
        java.lang.String str20 = node9.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
    }

    @Test
    public void test19789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19789");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isObjectLit();
        node1.setSourceEncodedPosition(15);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(43, "NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node17.isLabel();
        boolean boolean20 = node17.isContinue();
        node17.setVarArgs(false);
        boolean boolean23 = node17.isVoid();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFrom(node17);
        node17.setWasEmptyNode(true);
        boolean boolean27 = node17.isNot();
        boolean boolean28 = node17.isLocalResultCall();
        boolean boolean29 = node17.hasChildren();
        com.google.javascript.rhino.Node node30 = node1.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition31.setItem(node33);
        int int35 = node33.getSourceOffset();
        node1.addChildrenToBack(node33);
        int int37 = node33.getChildCount();
        boolean boolean38 = node33.wasEmptyNode();
        boolean boolean39 = node33.isComma();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test19790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19790");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node24 = node15.detachFromParent();
        boolean boolean25 = node24.isTrue();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test19791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19791");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        boolean boolean7 = node3.isInstanceOf();
        java.lang.String str8 = node3.toString();
        boolean boolean9 = node3.isCatch();
        boolean boolean10 = node3.isOnlyModifiesThisCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR" + "'", str8, "OR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19792");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        node1.setType((int) '4');
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        int int19 = node17.getType();
        boolean boolean20 = node17.isOptionalArg();
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node17);
        boolean boolean22 = node1.isSwitch();
        node1.putBooleanProp(45, true);
        boolean boolean26 = node1.isIn();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node28.copyInformationFromForTree(node33);
        node33.setOptionalArg(false);
        node33.setSourceEncodedPositionForTree((int) (short) -1);
        node33.setVarArgs(false);
        boolean boolean46 = node33.isQuotedString();
        boolean boolean47 = node1.hasChild(node33);
        node33.setLength(213044);
        com.google.javascript.rhino.Node node50 = node33.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test19793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19793");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str6 = jSDocInfo0.getVersion();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test19794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19794");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("JSDocInfo");
        jSDocInfo0.setLicense("Unknown class name");
        java.lang.String str10 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test19795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19795");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.hasOneChild();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(29);
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(213092, "Node tree inequality:\nTree1:\nSTRING OR\n\n\nTree2:\nIN 10\n\n\nSubtree1: STRING OR\n\n\nSubtree2: IN 10\n");
        com.google.javascript.rhino.Node node20 = node15.useSourceInfoFromForTree(node19);
        int int21 = node15.getSourcePosition();
        boolean boolean22 = node15.isAssignAdd();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test19796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19796");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        int int5 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test19797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19797");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        node6.setSourceEncodedPositionForTree((int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isGetterDef();
        java.util.Set<java.lang.String> strSet23 = node18.getDirectives();
        boolean boolean24 = node18.isDebugger();
        com.google.javascript.rhino.Node node25 = node6.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isReturn();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        com.google.javascript.rhino.Node node42 = node40.getParent();
        com.google.javascript.rhino.Node node43 = node33.useSourceInfoFromForTree(node40);
        boolean boolean44 = node43.isArrayLit();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node46.copyInformationFromForTree(node51);
        java.lang.String str58 = node57.getSourceFileName();
        com.google.javascript.rhino.Node node59 = node43.copyInformationFromForTree(node57);
        boolean boolean60 = node27.hasChild(node59);
        node25.addChildToBack(node59);
        boolean boolean62 = node25.isNE();
        node25.setOptionalArg(false);
        com.google.javascript.rhino.Node node65 = node25.getLastSibling();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test19798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19798");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str31 = ternaryValue30.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean34 = ternaryValue32.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str36 = ternaryValue35.toString();
        boolean boolean38 = ternaryValue35.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue32.and(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue39.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue30.or(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue30.not();
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean57 = strList49.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.util.Spliterator<java.lang.String> strSpliterator58 = strList49.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = strList49.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor60 = strList49.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean63 = ternaryValue61.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean66 = ternaryValue64.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str68 = ternaryValue67.toString();
        boolean boolean70 = ternaryValue67.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue64.and(ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue61.and(ternaryValue67);
        int int73 = strList49.indexOf((java.lang.Object) ternaryValue72);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue72.xor(ternaryValue74);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue42.and(ternaryValue74);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = ternaryValue77.xor(ternaryValue78);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = ternaryValue42.and(ternaryValue77);
        boolean boolean81 = jSTypeExpression9.equals((java.lang.Object) ternaryValue77);
        boolean boolean82 = jSTypeExpression9.isVarArgs();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "unknown" + "'", str31, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "unknown" + "'", str36, "unknown");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strSpliterator58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "unknown" + "'", str68, "unknown");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test19799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19799");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test19800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19800");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node13 = node11.getLastChild();
        boolean boolean14 = node11.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(6, (int) (short) 0, 0);
        com.google.javascript.rhino.Node node19 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node21.hasMoreThanOneChild();
        boolean boolean27 = node21.isFunction();
        com.google.javascript.rhino.Node node28 = node21.getFirstChild();
        com.google.javascript.rhino.Node node29 = node19.srcrefTree(node21);
        boolean boolean30 = node19.isVar();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(37, 37, (int) (short) 100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        com.google.javascript.rhino.Node node40 = node38.getParent();
        node38.setIsSyntheticBlock(true);
        boolean boolean43 = node38.isContinue();
        boolean boolean44 = node38.isParamList();
        node38.setSourceEncodedPositionForTree(54);
        int int47 = node38.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node38.siblings();
        com.google.javascript.rhino.Node node49 = node34.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node51.children();
        node51.putIntProp(8, (int) '4');
        boolean boolean59 = node51.isInstanceOf();
        int int60 = node51.getSourcePosition();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable61 = node51.getAncestors();
        boolean boolean62 = node51.isExprResult();
        node51.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node65 = node38.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node66 = node19.copyInformationFrom(node51);
        boolean boolean67 = node19.isBlock();
        boolean boolean68 = node19.isSyntheticBlock();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test19801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19801");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        java.util.stream.Stream<java.lang.String> strStream71 = strList48.parallelStream();
        java.util.ListIterator<java.lang.String> strItor73 = strList48.listIterator(0);
        java.lang.Object[] objArray74 = strList48.toArray();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[unknown]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[unknown]");
    }

    @Test
    public void test19802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19802");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("((OR))");
        boolean boolean6 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.hasParameter("[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test19803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19803");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        com.google.javascript.rhino.Node node16 = node7.copyInformationFromForTree(node10);
        jSDocInfo1.setAssociatedNode(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node10.children();
        boolean boolean19 = node10.isAssign();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, node10, 45, (int) (byte) 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node10.siblings();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node28 = node10.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d);
        com.google.javascript.rhino.Node node31 = node30.removeFirstChild();
        com.google.javascript.rhino.Node node32 = node28.useSourceInfoFrom(node30);
        boolean boolean33 = node32.hasChildren();
        com.google.javascript.rhino.Node node34 = node32.cloneNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node34, "false");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node34, "Node tree inequality:\nTree1:\nOR [opt_arg: 1]\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR [opt_arg: 1]\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test19804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19804");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = node7.removeChildren();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, node7);
        jSDocInfo0.setAssociatedNode(node7);
        int int16 = jSDocInfo0.getParameterCount();
        boolean boolean17 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo0.getSuppressions();
        boolean boolean19 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test19805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19805");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test19806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19806");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        node1.detachChildren();
        boolean boolean9 = node1.isQuotedString();
        node1.setOptionalArg(false);
        com.google.javascript.rhino.Node node12 = node1.cloneTree();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test19807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19807");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        int int16 = strList6.lastIndexOf((java.lang.Object) 1L);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor17 = strList6.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strList6.add((int) (short) -1, "Node tree inequality:\nTree1:\nSTRING OR\n\n\nTree2:\nIN 10\n\n\nSubtree1: STRING OR\n\n\nSubtree2: IN 10\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(strItor17);
    }

    @Test
    public void test19808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19808");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isDefaultCase();
        boolean boolean8 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        boolean boolean16 = node10.isNE();
        boolean boolean17 = node10.isEmpty();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        boolean boolean23 = node19.hasChildren();
        com.google.javascript.rhino.Node node24 = node10.srcrefTree(node19);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        node26.setStaticSourceFile(staticSourceFile29);
        boolean boolean31 = node26.isComma();
        boolean boolean32 = node26.isBlock();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = node34.cloneNode();
        com.google.javascript.rhino.Node node36 = node26.copyInformationFromForTree(node35);
        int int37 = node35.getLength();
        int int38 = node10.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node39 = node35.removeChildren();
        com.google.javascript.rhino.Node node40 = node1.clonePropsFrom(node35);
        boolean boolean41 = node1.isThis();
        node1.addSuppression("NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node1.new FileLevelJsDocBuilder();
        node1.setSourceEncodedPosition(51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test19809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19809");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasThisType();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str11 = strList10.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        boolean boolean18 = node13.isComma();
        node13.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node22.children();
        com.google.javascript.rhino.InputId inputId27 = null;
        node22.setInputId(inputId27);
        boolean boolean29 = node22.isName();
        java.lang.String str30 = node13.checkTreeEquals(node22);
        boolean boolean31 = node22.isInc();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        node22.addChildrenToFront(node33);
        boolean boolean43 = node22.isGetterDef();
        boolean boolean44 = node22.isScript();
        int int45 = strList10.indexOf((java.lang.Object) node22);
        com.google.javascript.rhino.Node node46 = node22.cloneNode();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node48.addSuppression("");
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node57 = node55.getParent();
        com.google.javascript.rhino.Node node58 = node48.useSourceInfoFromForTree(node55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.hasBaseType();
        jSDocInfo59.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo59.getBaseType();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo59.getParameterNames();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        int int70 = node66.getCharno();
        boolean boolean71 = node66.isContinue();
        boolean boolean72 = strSet64.equals((java.lang.Object) node66);
        node58.setDirectives(strSet64);
        java.util.Iterator<java.lang.String> strItor74 = strSet64.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator75 = strSet64.spliterator();
        node46.setDirectives(strSet64);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = strSet64.add("((OR [jsdoc_info: JSDocInfo] [length: 46]))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str30, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str51, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertNotNull(strSpliterator75);
    }

    @Test
    public void test19810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19810");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        node3.putBooleanProp(1, false);
        boolean boolean13 = node3.isDo();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        int int20 = node17.getLength();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        node17.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        com.google.javascript.rhino.Node node42 = node40.getParent();
        com.google.javascript.rhino.Node node43 = node33.useSourceInfoFromForTree(node40);
        boolean boolean44 = node27.hasChild(node33);
        boolean boolean45 = node27.isStringKey();
        com.google.javascript.rhino.Node node46 = node17.useSourceInfoFromForTree(node27);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node48.addSuppression("");
        com.google.javascript.rhino.Node node51 = node46.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node52 = node3.copyInformationFrom(node51);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test19811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19811");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.lang.String str7 = jSDocInfo5.getMeaning();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo5.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags10.setReturnsTainted();
        int int12 = sideEffectFlags10.valueOf();
        boolean boolean13 = strSet8.remove((java.lang.Object) sideEffectFlags10);
        sideEffectFlags10.setReturnsTainted();
        sideEffectFlags10.setMutatesThis();
        sideEffectFlags10.setMutatesArguments();
        sideEffectFlags10.setMutatesArguments();
        sideEffectFlags10.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags20 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags20.setReturnsTainted();
        int int22 = sideEffectFlags20.valueOf();
        sideEffectFlags20.setThrows();
        sideEffectFlags20.clearAllFlags();
        int int25 = sideEffectFlags20.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags27 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags27.setReturnsTainted();
        int int29 = sideEffectFlags27.valueOf();
        sideEffectFlags27.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags32 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags32.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int35 = sideEffectFlags34.valueOf();
        sideEffectFlags34.clearSideEffectFlags();
        sideEffectFlags34.setThrows();
        sideEffectFlags34.setThrows();
        sideEffectFlags34.clearAllFlags();
        sideEffectFlags34.clearSideEffectFlags();
        sideEffectFlags34.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags43 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags43.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags46 = new com.google.javascript.rhino.Node.SideEffectFlags(53);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags47 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int48 = sideEffectFlags47.valueOf();
        sideEffectFlags47.clearSideEffectFlags();
        sideEffectFlags47.setThrows();
        sideEffectFlags47.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags53 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags53.setAllFlags();
        sideEffectFlags53.setThrows();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList56 = com.google.common.collect.ImmutableList.of(sideEffectFlags27, sideEffectFlags32, sideEffectFlags34, sideEffectFlags43, sideEffectFlags46, sideEffectFlags47, sideEffectFlags53);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags58 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags58.setReturnsTainted();
        sideEffectFlags58.setMutatesGlobalState();
        int int61 = sideEffectFlags58.valueOf();
        sideEffectFlags58.setMutatesThis();
        sideEffectFlags58.setAllFlags();
        sideEffectFlags58.setMutatesThis();
        boolean boolean65 = sideEffectFlags58.areAllFlagsSet();
        sideEffectFlags58.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags68 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags68.setReturnsTainted();
        sideEffectFlags68.clearAllFlags();
        boolean boolean71 = sideEffectFlags68.areAllFlagsSet();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList72 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags10, sideEffectFlags20, sideEffectFlags34, sideEffectFlags58, sideEffectFlags68);
        sideEffectFlags20.setMutatesGlobalState();
        sideEffectFlags20.setReturnsTainted();
        int int75 = sideEffectFlags20.valueOf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 32 + "'", int61 == 32);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
    }

    @Test
    public void test19812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19812");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray19 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean29 = strList20.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean30 = strList20.isEmpty();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strList33.retainAll((java.util.Collection<java.lang.String>) strList38);
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean55 = strList47.containsAll((java.util.Collection<java.lang.String>) strList54);
        java.lang.String[] strArray57 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        boolean boolean79 = strList72.retainAll((java.util.Collection<java.lang.String>) strList77);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList80 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList16, (java.util.List<java.lang.String>) strList20, (java.util.List<java.lang.String>) strList38, (java.util.List<java.lang.String>) strList47, (java.util.List<java.lang.String>) strList58, (java.util.List<java.lang.String>) strList62, (java.util.List<java.lang.String>) strList72);
        boolean boolean81 = strSet7.removeAll((java.util.Collection<java.lang.String>) strList38);
        int int82 = strSet7.size();
        int int83 = strSet7.size();
        int int84 = strSet7.size();
        java.util.stream.Stream<java.lang.String> strStream85 = strSet7.parallelStream();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strListList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertNotNull(strStream85);
    }

    @Test
    public void test19813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19813");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        boolean boolean12 = node3.isCall();
        boolean boolean13 = node3.isVarArgs();
        boolean boolean14 = node3.isNull();
        node3.putBooleanProp(36, true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19814");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean8 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19815");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isNot();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = node8.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isExprResult();
        boolean boolean17 = node15.isDefaultCase();
        node1.addChildrenToBack(node15);
        node15.removeProp(42);
        com.google.javascript.rhino.Node node21 = node15.getLastSibling();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node25.isLabel();
        boolean boolean28 = node25.isContinue();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        int int35 = node31.getCharno();
        com.google.javascript.rhino.Node node36 = node25.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        node41.setLength(1);
        com.google.javascript.rhino.Node node44 = node25.useSourceInfoFrom(node41);
        node41.setSourceEncodedPosition((int) (short) 1);
        boolean boolean47 = node41.isObjectLit();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder48 = node41.new FileLevelJsDocBuilder();
        int int50 = node41.getIntProp(49);
        int int51 = node15.getIndexOfChild(node41);
        boolean boolean52 = node15.isInc();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test19816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19816");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        boolean boolean7 = node6.isDefaultCase();
        boolean boolean8 = node6.isNoSideEffectsCall();
        boolean boolean9 = node6.isNew();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean12 = node11.isString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(43, node6, node11);
        boolean boolean14 = node6.isOptionalArg();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node6.children();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
    }

    @Test
    public void test19817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19817");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node12.isParamList();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = new com.google.javascript.rhino.JSTypeExpression(node12, "OR [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        boolean boolean23 = node17.isBlock();
        com.google.javascript.rhino.Node node24 = node17.getLastSibling();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node26.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node26.getStaticSourceFile();
        boolean boolean32 = node26.isVarArgs();
        node17.addChildrenToFront(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean35 = jSDocInfo34.hasBaseType();
        jSDocInfo34.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getTypedefType();
        boolean boolean39 = jSDocInfo34.isNoSideEffects();
        com.google.javascript.rhino.Node node40 = jSDocInfo34.getAssociatedNode();
        boolean boolean41 = jSDocInfo34.isConstructor();
        boolean boolean42 = jSDocInfo34.isExport();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo34.getSuppressions();
        node26.setDirectives(strSet43);
        boolean boolean45 = jSTypeExpression15.equals((java.lang.Object) strSet43);
        boolean boolean46 = jSTypeExpression15.isOptionalArg();
        java.lang.Object obj47 = null;
        boolean boolean48 = jSTypeExpression15.equals(obj47);
        boolean boolean49 = jSTypeExpression15.isOptionalArg();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getParameterNames();
        boolean boolean52 = jSDocInfo50.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList53 = jSDocInfo50.getThrownTypes();
        boolean boolean54 = jSDocInfo50.hasReturnType();
        boolean boolean55 = jSDocInfo50.hasBaseType();
        java.util.Collection<java.lang.String> strCollection56 = jSDocInfo50.getAuthors();
        boolean boolean57 = jSDocInfo50.isExterns();
        boolean boolean58 = jSTypeExpression15.equals((java.lang.Object) boolean57);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str29, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strCollection56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test19818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19818");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList13.asList();
        java.util.Iterator<java.lang.String> strItor18 = strList13.iterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
    }

    @Test
    public void test19819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19819");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.isHidden();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.hasType();
        java.lang.String str9 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test19820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19820");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(54, "(OR 0 [jsdoc_info: JSDocInfo]\n)", 48, 31);
        com.google.javascript.rhino.Node node6 = node4.getAncestor(29);
        boolean boolean7 = node4.isThrow();
        boolean boolean8 = node4.isIf();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        node10.putIntProp((int) (short) 0, 38);
        boolean boolean17 = node10.isCall();
        node4.addChildToFront(node10);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test19821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19821");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        node1.putIntProp((int) (short) 0, 38);
        boolean boolean8 = node1.isCall();
        int int9 = node1.getCharno();
        boolean boolean11 = node1.getBooleanProp(41);
        com.google.javascript.rhino.Node node12 = node1.getNext();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test19822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19822");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        java.lang.String str10 = node3.toString(true, false, false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR" + "'", str10, "OR");
    }

    @Test
    public void test19823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19823");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node29.children();
        com.google.javascript.rhino.InputId inputId34 = null;
        node29.setInputId(inputId34);
        boolean boolean36 = node29.isName();
        java.lang.String str37 = node20.checkTreeEquals(node29);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node2, node8, node29 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList39 = com.google.common.collect.ImmutableList.of(nodeArray38);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(50, nodeArray38, 6, 46);
        int int43 = node42.getType();
        boolean boolean44 = node42.isQuotedString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str37, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test19824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19824");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test19825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19825");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        int int4 = jSDocInfo0.getParameterCount();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test19826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19826");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo0.getType();
        boolean boolean29 = jSDocInfo0.isExterns();
        boolean boolean30 = jSDocInfo0.isImplicitCast();
        boolean boolean32 = jSDocInfo0.hasParameter("OR [jsdoc_info: JSDocInfo]");
        java.lang.String str33 = jSDocInfo0.getDeprecationReason();
        boolean boolean34 = jSDocInfo0.hasBaseType();
        boolean boolean35 = jSDocInfo0.isExpose();
        boolean boolean36 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test19827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19827");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        boolean boolean72 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.hasTypedefType();
        java.lang.String str75 = jSDocInfo73.toString();
        boolean boolean77 = jSDocInfo73.hasParameterType("Unknown class name");
        boolean boolean78 = jSDocInfo73.isIdGenerator();
        int int79 = jSDocInfo73.getExtendedInterfacesCount();
        boolean boolean80 = jSDocInfo73.hasThisType();
        boolean boolean81 = jSDocInfo73.isJavaDispatch();
        int int82 = strList6.indexOf((java.lang.Object) jSDocInfo73);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(100);
        node84.addChildrenToFront(node86);
        boolean boolean88 = node84.isTypeOf();
        boolean boolean89 = node84.isDelProp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node84, "Unknown class name");
        boolean boolean92 = strList6.contains((java.lang.Object) jSTypeExpression91);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression91);
        com.google.javascript.rhino.Node node94 = jSTypeExpression93.getRoot();
        boolean boolean95 = jSTypeExpression93.isOptionalArg();
        boolean boolean96 = jSTypeExpression93.isOptionalArg();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "JSDocInfo" + "'", str75, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test19828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19828");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        boolean boolean16 = node6.hasMoreThanOneChild();
        boolean boolean17 = node6.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node6);
        jSDocInfo0.addSuppression("(OR \n)");
        boolean boolean21 = jSDocInfo0.isNoCompile();
        java.lang.String str22 = jSDocInfo0.getMeaning();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strCollection23);
    }

    @Test
    public void test19829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19829");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        boolean boolean7 = strSet6.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.stream();
        strSet6.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
    }

    @Test
    public void test19830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19830");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        boolean boolean13 = node3.isParamList();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node3.children();
        boolean boolean16 = node3.isAdd();
        com.google.javascript.rhino.InputId inputId17 = node3.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder18 = node3.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder18);
    }

    @Test
    public void test19831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19831");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node16.isLabel();
        boolean boolean19 = node16.isContinue();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        com.google.javascript.rhino.Node node27 = node16.useSourceInfoIfMissingFrom(node22);
        boolean boolean28 = node3.isEquivalentTo(node22);
        com.google.javascript.rhino.InputId inputId29 = null;
        node22.setInputId(inputId29);
        boolean boolean31 = node22.isNumber();
        boolean boolean32 = node22.isStringKey();
        java.lang.Object obj34 = node22.getProp((int) '4');
        int int35 = node22.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node22.cloneTree();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node44 = node38.removeChildren();
        boolean boolean45 = node38.isReturn();
        com.google.javascript.rhino.Node node47 = node38.getAncestor(59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo49.getParameterNames();
        boolean boolean51 = jSDocInfo49.isOverride();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isNot();
        boolean boolean63 = node58.isIf();
        com.google.javascript.rhino.Node node64 = node55.copyInformationFromForTree(node58);
        jSDocInfo49.setAssociatedNode(node58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node58.children();
        boolean boolean67 = node58.isAssign();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(50, node58, 45, (int) (byte) 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable71 = node58.getAncestors();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node73.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = null;
        node73.setStaticSourceFile(staticSourceFile76);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node79.addSuppression("");
        java.lang.String str82 = node79.toString();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(100);
        node84.addChildrenToFront(node86);
        com.google.javascript.rhino.Node node88 = node86.getParent();
        com.google.javascript.rhino.Node node89 = node79.useSourceInfoFromForTree(node86);
        boolean boolean90 = node73.hasChild(node79);
        boolean boolean91 = node79.isNot();
        boolean boolean92 = node79.isQuotedString();
        boolean boolean93 = node79.isNot();
        node58.addChildrenToFront(node79);
        com.google.javascript.rhino.Node node95 = node38.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node96 = node36.useSourceInfoFromForTree(node38);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(ancestorIterable71);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str82, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test19832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19832");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(27, nodeArray1, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19833");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition0.setItem(node2);
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        int int5 = typePosition0.getEndLine();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test19834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19834");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        boolean boolean30 = strList19.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream31 = strList19.stream();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags33 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags33.setReturnsTainted();
        sideEffectFlags33.setMutatesGlobalState();
        int int36 = sideEffectFlags33.valueOf();
        sideEffectFlags33.setMutatesThis();
        boolean boolean38 = sideEffectFlags33.areAllFlagsSet();
        sideEffectFlags33.setThrows();
        sideEffectFlags33.setMutatesThis();
        int int41 = strList19.indexOf((java.lang.Object) sideEffectFlags33);
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean56 = strList48.containsAll((java.util.Collection<java.lang.String>) strList55);
        java.util.Spliterator<java.lang.String> strSpliterator57 = strList48.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = strList48.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet60.union(booleanLiteralSet61);
        boolean boolean63 = strList58.equals((java.lang.Object) booleanLiteralSet60);
        java.lang.Object obj64 = null;
        boolean boolean65 = strList58.equals(obj64);
        boolean boolean66 = strList19.containsAll((java.util.Collection<java.lang.String>) strList58);
        java.lang.Object[] objArray67 = strList58.toArray();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test19835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19835");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = new com.google.javascript.rhino.JSTypeExpression(node3, "");
        boolean boolean9 = jSTypeExpression8.isOptionalArg();
        com.google.javascript.rhino.Node node10 = jSTypeExpression8.getRoot();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node12.setStaticSourceFile(staticSourceFile15);
        boolean boolean17 = node12.isComma();
        boolean boolean18 = node12.isBlock();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node12.copyInformationFromForTree(node21);
        boolean boolean23 = node12.isNew();
        node10.addChildrenToBack(node12);
        boolean boolean25 = node10.isContinue();
        boolean boolean26 = node10.isDebugger();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test19836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19836");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node1.isDelProp();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node39 = node37.getParent();
        node37.setIsSyntheticBlock(true);
        boolean boolean42 = node37.isContinue();
        java.lang.String str43 = node37.getQualifiedName();
        boolean boolean44 = node37.isSwitch();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.wasEmptyNode();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isTypeOf();
        boolean boolean58 = node53.isDelProp();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node62.setJSType(jSType65);
        java.lang.String str67 = node62.toString();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node69.setStaticSourceFile(staticSourceFile72);
        boolean boolean74 = node69.isComma();
        node69.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList77 = com.google.common.collect.ImmutableList.of(node46, node53, node62, node69);
        boolean boolean78 = node37.hasChild(node46);
        boolean boolean79 = node1.hasChild(node37);
        node1.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node82 = node1.getLastSibling();
        boolean boolean83 = node1.isInstanceOf();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR" + "'", str67, "OR");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test19837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19837");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node64.setStaticSourceFile(staticSourceFile66);
        int int68 = node64.getSourceOffset();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        int int74 = node70.getCharno();
        boolean boolean75 = node70.isName();
        boolean boolean76 = node70.isDefaultCase();
        boolean boolean77 = node70.isLocalResultCall();
        boolean boolean78 = node70.isInstanceOf();
        node64.addChildrenToFront(node70);
        boolean boolean80 = node64.isNew();
        boolean boolean81 = node64.isString();
        java.lang.String str82 = node64.getSourceFileName();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test19838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19838");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.isInterface();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        boolean boolean12 = jSDocInfo0.isJavaDispatch();
        boolean boolean14 = jSDocInfo0.hasDescriptionForParameter("OR [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getParameterType("((Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n))");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
    }

    @Test
    public void test19839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19839");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = strList2.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList11 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.String>) strList10);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        boolean boolean13 = strList3.containsAll((java.util.Collection<java.lang.String>) strList10);
        java.lang.Object[] objArray14 = strList3.toArray();
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList15 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.String>) strList3);
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList3.reverse();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node23.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node18.copyInformationFromForTree(node23);
        boolean boolean30 = node18.isReturn();
        boolean boolean31 = node18.isParamList();
        boolean boolean32 = node18.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = strList3.remove((java.lang.Object) node18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(charSequenceList11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceList15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test19840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19840");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test19841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19841");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.JSType jSType15 = node5.getJSType();
        com.google.javascript.rhino.Node node16 = node5.getLastSibling();
        boolean boolean17 = node16.isParamList();
        com.google.javascript.rhino.Node node18 = node16.getLastSibling();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test19842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19842");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        int int12 = strList3.indexOf((java.lang.Object) boolean11);
        java.lang.Object[] objArray13 = strList3.toArray();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node15.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node15.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.children();
        boolean boolean22 = node15.isObjectLit();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node24.isReturn();
        com.google.javascript.rhino.InputId inputId29 = node24.getInputId();
        boolean boolean30 = node24.isArrayLit();
        boolean boolean31 = node24.isInc();
        com.google.javascript.rhino.Node node32 = node15.srcrefTree(node24);
        boolean boolean33 = strList3.equals((java.lang.Object) node32);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        java.lang.String str38 = node35.toString();
        com.google.javascript.rhino.Node node39 = node35.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node35.getStaticSourceFile();
        boolean boolean41 = node35.isLocalResultCall();
        boolean boolean42 = node35.isArrayLit();
        boolean boolean43 = node35.isCase();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFrom(node35);
        boolean boolean45 = node35.isGetterDef();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str38, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test19843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19843");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19844");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test19845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19845");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.xor(ternaryValue1);
        boolean boolean4 = ternaryValue0.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean10 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str12 = ternaryValue11.toString();
        boolean boolean14 = ternaryValue11.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue8.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue5.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue0.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue18.xor(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue16.xor(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue16.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue22.xor(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue24.not();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "unknown" + "'", str12, "unknown");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
    }

    @Test
    public void test19846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19846");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isNot();
        boolean boolean12 = node7.isLocalResultCall();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.Node node17 = node7.copyInformationFromForTree(node14);
        boolean boolean18 = node17.isAssignAdd();
        boolean boolean19 = node17.hasOneChild();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node25 = node23.getParent();
        node23.setIsSyntheticBlock(true);
        boolean boolean28 = node23.isContinue();
        java.lang.String str29 = node23.getQualifiedName();
        boolean boolean30 = node23.isSwitch();
        node23.removeProp((int) '4');
        boolean boolean33 = node23.isParamList();
        node23.setWasEmptyNode(false);
        boolean boolean36 = node23.isRegExp();
        com.google.javascript.rhino.Node node37 = node23.cloneTree();
        boolean boolean38 = node17.isEquivalentTo(node23);
        boolean boolean39 = node3.isEquivalentToTyped(node17);
        boolean boolean40 = node17.wasEmptyNode();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test19847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19847");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        node5.setSourceFileForTesting("(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)");
        node5.setType(48);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test19848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19848");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int6 = node5.getSideEffectFlags();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node13.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node8.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node5, node8, (int) '4', (int) (byte) 100);
        node22.removeProp(4);
        boolean boolean25 = node22.isLabel();
        boolean boolean26 = node22.isWhile();
        boolean boolean27 = node22.isBreak();
        boolean boolean28 = node22.isNew();
        boolean boolean29 = node22.isTypeOf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test19849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19849");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean7 = jSDocInfo0.hasParameter("[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean9 = jSDocInfo0.hasParameter("OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n");
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        boolean boolean11 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19850");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition0.hasBrackets();
        int int10 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        com.google.javascript.rhino.Node node22 = node12.useSourceInfoFromForTree(node19);
        boolean boolean23 = node22.isSetterDef();
        com.google.javascript.rhino.Node node24 = node22.getLastChild();
        boolean boolean25 = node22.isNoSideEffectsCall();
        boolean boolean27 = node22.getBooleanProp((int) '4');
        typePosition0.setItem(node22);
        boolean boolean29 = node22.isReturn();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str15, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test19851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19851");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean5 = node4.isExprResult();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node9.isLabel();
        boolean boolean12 = node4.isEquivalentTo(node9);
        boolean boolean13 = node4.isFromExterns();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        boolean boolean24 = node20.isNot();
        boolean boolean25 = node20.isIf();
        com.google.javascript.rhino.Node node26 = node17.copyInformationFromForTree(node20);
        boolean boolean27 = node20.isAssignAdd();
        node4.addChildrenToBack(node20);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node4.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable29);
    }

    @Test
    public void test19852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19852");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        boolean boolean17 = node14.isLabelName();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType30 = node25.getJSType();
        boolean boolean31 = node25.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = node23.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int38 = node37.getSideEffectFlags();
        com.google.javascript.rhino.Node node39 = node25.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node41.children();
        com.google.javascript.rhino.InputId inputId46 = null;
        node41.setInputId(inputId46);
        boolean boolean48 = node41.isName();
        boolean boolean49 = node41.isFunction();
        com.google.javascript.rhino.Node node50 = node39.srcref(node41);
        node14.addChildToBack(node41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.hasBaseType();
        jSDocInfo52.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo52.setLicense("Not declared as a type name");
        java.lang.String str58 = jSDocInfo52.getDescription();
        java.lang.String str59 = jSDocInfo52.getReturnDescription();
        node14.setJSDocInfo(jSDocInfo52);
        boolean boolean61 = node14.isHook();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test19853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19853");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        int int4 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.isNoShadow();
        boolean boolean9 = jSDocInfo7.isNoShadow();
        boolean boolean10 = jSDocInfo7.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList14 = com.google.common.collect.ImmutableList.of(visibility11, visibility12, visibility13);
        jSDocInfo7.setVisibility(visibility13);
        boolean boolean16 = jSDocInfo7.containsDeclaration();
        jSDocInfo7.setLicense("OR [jsdoc_info: JSDocInfo]");
        java.util.Set<java.lang.String> strSet19 = jSDocInfo7.getSuppressions();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection20 = jSDocInfo7.getTypeNodes();
        boolean boolean21 = jSDocInfo7.hasBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = jSDocInfo7.getVisibility();
        jSDocInfo0.setVisibility(visibility22);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(nodeCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
    }

    @Test
    public void test19854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean10 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test19855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19855");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(31, "OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n", 37, 49);
        boolean boolean5 = node4.hasOneChild();
        boolean boolean6 = node4.isBreak();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test19856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19856");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        boolean boolean7 = node6.isDefaultCase();
        boolean boolean8 = node6.isStringKey();
        boolean boolean9 = node6.isScript();
        com.google.javascript.rhino.InputId inputId10 = null;
        node6.setInputId(inputId10);
        boolean boolean12 = node6.isBlock();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        com.google.javascript.rhino.InputId inputId32 = node14.getInputId();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int39 = node38.getSideEffectFlags();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node46.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node46.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node41.copyInformationFromForTree(node46);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(30, node38, node41, (int) '4', (int) (byte) 100);
        boolean boolean56 = node14.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(29, node6, node14, 9, 15);
        java.lang.String str60 = node6.getQualifiedName();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test19857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19857");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList6.asList();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        node19.setStaticSourceFile(staticSourceFile22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node34 = node32.getParent();
        com.google.javascript.rhino.Node node35 = node25.useSourceInfoFromForTree(node32);
        boolean boolean36 = node19.hasChild(node25);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        int int42 = node38.getChildCount();
        boolean boolean43 = node38.isGetProp();
        boolean boolean44 = node19.isEquivalentTo(node38);
        int int45 = strList6.indexOf((java.lang.Object) node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isNoShadow();
        boolean boolean48 = jSDocInfo46.hasFileOverview();
        int int49 = jSDocInfo46.getParameterCount();
        boolean boolean50 = jSDocInfo46.hasEnumParameterType();
        int int51 = jSDocInfo46.getImplementedInterfaceCount();
        boolean boolean53 = jSDocInfo46.hasParameter("OR\n    OR\n");
        boolean boolean54 = strList6.equals((java.lang.Object) boolean53);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node56.addSuppression("");
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node56.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node56.getStaticSourceFile();
        boolean boolean62 = node56.isLocalResultCall();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node64.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        node64.setStaticSourceFile(staticSourceFile67);
        boolean boolean69 = node64.isComma();
        node64.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node73.children();
        com.google.javascript.rhino.InputId inputId78 = null;
        node73.setInputId(inputId78);
        boolean boolean80 = node73.isName();
        java.lang.String str81 = node64.checkTreeEquals(node73);
        boolean boolean82 = node73.isInc();
        node73.setType((int) (short) -1);
        node56.addChildrenToFront(node73);
        boolean boolean86 = node73.isCatch();
        int int87 = strList6.indexOf((java.lang.Object) node73);
        node73.setSourceFileForTesting("Node tree inequality:\nTree1:\nOR [synthetic: 1]\n\n\nTree2:\nSTRING OR 52\n    OR\n 35\n\n\nSubtree1: OR [synthetic: 1]\n\n\nSubtree2: STRING OR 52\n    OR\n 35\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = node73.getJSDocInfo();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str59, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str81, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNull(jSDocInfo90);
    }

    @Test
    public void test19858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19858");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        boolean boolean36 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isVarArgs();
        boolean boolean44 = node38.isIn();
        node29.addChildToFront(node38);
        node38.removeProp(48);
        boolean boolean48 = node38.isAssign();
        boolean boolean49 = node38.isTrue();
        boolean boolean50 = node6.isEquivalentToTyped(node38);
        int int51 = node38.getSourceOffset();
        boolean boolean52 = node38.isCase();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(6, (int) (short) 10, 50);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        com.google.javascript.rhino.Node node62 = node60.getParent();
        boolean boolean63 = node62.isDefaultCase();
        boolean boolean64 = node62.isNoSideEffectsCall();
        boolean boolean65 = node62.isNew();
        com.google.javascript.rhino.Node node66 = node56.copyInformationFromForTree(node62);
        boolean boolean67 = node38.hasChild(node66);
        boolean boolean68 = node38.isDec();
        com.google.javascript.rhino.Node node70 = node38.getAncestor(11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(node70);
    }

    @Test
    public void test19859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19859");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        int int6 = node2.getCharno();
        boolean boolean7 = node2.isName();
        boolean boolean8 = node2.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = new com.google.javascript.rhino.JSTypeExpression(node2, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression10);
        boolean boolean13 = jSTypeExpression10.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node14 = jSTypeExpression10.getRoot();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isNot();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = node16.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoFrom(node25);
        boolean boolean31 = jSTypeExpression10.equals((java.lang.Object) node25);
        boolean boolean32 = node25.isBreak();
        boolean boolean33 = node25.isCall();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node25);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder35 = node25.getJsDocBuilderForNode();
        fileLevelJsDocBuilder35.append("(unknown)");
        fileLevelJsDocBuilder35.append("OR 0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder35);
    }

    @Test
    public void test19860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19860");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.isInterface();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        java.util.Iterator<java.lang.String> strItor13 = strSet12.iterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strItor13);
    }

    @Test
    public void test19861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19861");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isObjectLit();
        boolean boolean10 = node8.isInc();
        java.lang.String str14 = node8.toString(false, true, false);
        boolean boolean15 = node8.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node17.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node17.getStaticSourceFile();
        boolean boolean23 = node17.isLocalResultCall();
        boolean boolean24 = node17.isArrayLit();
        boolean boolean25 = node17.isAssign();
        boolean boolean26 = node17.isVoid();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = node28.cloneNode();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isTypeOf();
        boolean boolean36 = node31.wasEmptyNode();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isDelProp();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node49 = node47.getParent();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node47.setJSType(jSType50);
        java.lang.String str52 = node47.toString();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        node54.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList62 = com.google.common.collect.ImmutableList.of(node31, node38, node47, node54);
        com.google.javascript.rhino.Node node63 = node29.copyInformationFrom(node54);
        node63.putIntProp((int) ' ', 45);
        boolean boolean67 = node63.isInstanceOf();
        boolean boolean68 = node63.isName();
        // The following exception was thrown during execution in test generation
        try {
            node8.replaceChildAfter(node17, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR" + "'", str14, "OR");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR" + "'", str52, "OR");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeList62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test19862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19862");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.isInterface();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        boolean boolean12 = jSDocInfo0.isInterface();
        boolean boolean13 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getParameterType("NUMBER 0.0 44");
        boolean boolean16 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test19863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19863");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test19864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19864");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test19865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19865");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        com.google.javascript.rhino.Node node18 = node16.getParent();
        com.google.javascript.rhino.Node node19 = node9.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node21.isComma();
        node21.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node30.children();
        com.google.javascript.rhino.InputId inputId35 = null;
        node30.setInputId(inputId35);
        boolean boolean37 = node30.isName();
        java.lang.String str38 = node21.checkTreeEquals(node30);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] { node3, node9, node30 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(nodeArray39);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray39);
        java.lang.String str42 = node41.getQualifiedName();
        boolean boolean43 = node41.hasOneChild();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node49 = node45.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node45.getStaticSourceFile();
        boolean boolean51 = node45.isRegExp();
        com.google.javascript.rhino.jstype.JSType jSType52 = node45.getJSType();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(0, node41, node45);
        boolean boolean54 = node45.isThrow();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str38, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test19866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19866");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node29.children();
        com.google.javascript.rhino.InputId inputId34 = null;
        node29.setInputId(inputId34);
        boolean boolean36 = node29.isName();
        java.lang.String str37 = node20.checkTreeEquals(node29);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node2, node8, node29 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList39 = com.google.common.collect.ImmutableList.of(nodeArray38);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(4095, nodeArray38);
        boolean boolean41 = node40.isTry();
        boolean boolean42 = node40.isCase();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node45.setStaticSourceFile(staticSourceFile48);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        com.google.javascript.rhino.Node node61 = node51.useSourceInfoFromForTree(node58);
        boolean boolean62 = node45.hasChild(node51);
        boolean boolean63 = node51.hasMoreThanOneChild();
        boolean boolean65 = node51.getBooleanProp(51);
        com.google.javascript.rhino.Node node66 = node51.getLastChild();
        boolean boolean67 = node51.isAssign();
        boolean boolean68 = node51.isExprResult();
        boolean boolean69 = node51.isScript();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) '#', node51, 54, 44);
        com.google.javascript.rhino.Node node73 = node40.useSourceInfoFrom(node72);
        int int75 = node40.getIntProp(0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str37, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test19867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19867");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        int int3 = strList2.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.isNoShadow();
        boolean boolean6 = jSDocInfo4.isNoShadow();
        boolean boolean7 = jSDocInfo4.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo4.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo4.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo4.getTemplateTypeNames();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node14.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node14.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node14.children();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node14.clonePropsFrom(node22);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node32 = node28.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node28.getStaticSourceFile();
        boolean boolean34 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node45 = node41.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node41.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node36.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node48 = node28.useSourceInfoFrom(node41);
        boolean boolean49 = node41.isNot();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        boolean boolean57 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node64.addSuppression("");
        java.lang.String str67 = node64.toString();
        com.google.javascript.rhino.Node node68 = node64.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node59.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = node51.useSourceInfoFrom(node64);
        boolean boolean72 = node64.isNot();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(44, node22, node41, node64);
        boolean boolean74 = node73.isBlock();
        boolean boolean75 = strList11.contains((java.lang.Object) boolean74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str62, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str67, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test19868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19868");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("OR [empty_block: 1]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(OR [empty_block: 1])" + "'", str1, "(OR [empty_block: 1])");
    }

    @Test
    public void test19869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19869");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isNoSideEffectsCall();
        java.lang.String str11 = node5.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasTypedefType();
        java.lang.String str14 = jSDocInfo12.toString();
        node5.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.Node node16 = node5.cloneTree();
        int int17 = node5.getSourcePosition();
        int int18 = node5.getType();
        com.google.javascript.rhino.Node node19 = node5.cloneTree();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR" + "'", str11, "OR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSDocInfo" + "'", str14, "JSDocInfo");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test19870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19870");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        node1.putIntProp((int) (short) 0, 38);
        boolean boolean8 = node1.isCall();
        int int9 = node1.getCharno();
        boolean boolean11 = node1.getBooleanProp(41);
        boolean boolean12 = node1.isScript();
        boolean boolean13 = node1.isNE();
        boolean boolean14 = node1.isCase();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19871");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test19872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19872");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        int int2 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test19873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19873");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean13 = strSet7.isEmpty();
        int int14 = strSet7.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isNoShadow();
        java.lang.String str17 = jSDocInfo15.getMeaning();
        boolean boolean18 = jSDocInfo15.hasReturnType();
        boolean boolean19 = jSDocInfo15.isDeprecated();
        boolean boolean20 = jSDocInfo15.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo15.getParameterNames();
        java.util.Collection<java.lang.String> strCollection22 = jSDocInfo15.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo15.getTemplateTypeNames();
        java.lang.String[] strArray30 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        java.lang.Object[] objArray33 = strSet31.toArray();
        strSet31.clear();
        java.util.Iterator<java.lang.String> strItor35 = strSet31.iterator();
        int int36 = strSet31.size();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        int int42 = node38.getCharno();
        boolean boolean43 = node38.isName();
        boolean boolean44 = node38.isNE();
        boolean boolean45 = node38.isEmpty();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        boolean boolean51 = node47.hasChildren();
        com.google.javascript.rhino.Node node52 = node38.srcrefTree(node47);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node47.children();
        boolean boolean54 = strSet31.remove((java.lang.Object) node47);
        java.util.Iterator<java.lang.String> strItor55 = strSet31.iterator();
        boolean boolean56 = strList23.containsAll((java.util.Collection<java.lang.String>) strSet31);
        boolean boolean57 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet31);
        boolean boolean58 = strSet31.isEmpty();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(strCollection22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test19874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19874");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        node3.setLength(1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node10.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node10.getStaticSourceFile();
        boolean boolean16 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node23.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node18.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = node10.useSourceInfoFrom(node23);
        boolean boolean31 = node23.isWhile();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.isLabel();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node39.cloneNode();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node42.isNot();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = node42.copyInformationFromForTree(node48);
        com.google.javascript.rhino.InputId inputId50 = node42.getInputId();
        com.google.javascript.rhino.Node node51 = node42.getNext();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        boolean boolean58 = node53.isComma();
        boolean boolean59 = node53.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList60 = com.google.common.collect.ImmutableList.of(node23, node35, node40, node42, node53);
        boolean boolean61 = node23.isNot();
        java.lang.Object obj63 = node23.getProp(44);
        boolean boolean64 = node3.isEquivalentToTyped(node23);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(inputId50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test19875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19875");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isNot();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = node8.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isExprResult();
        boolean boolean17 = node15.isDefaultCase();
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node29 = node27.getParent();
        com.google.javascript.rhino.Node node30 = node20.useSourceInfoFromForTree(node27);
        boolean boolean31 = node30.isSetterDef();
        com.google.javascript.rhino.Node node32 = node30.getLastChild();
        boolean boolean33 = node30.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node34 = node15.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node36.getStaticSourceFile();
        boolean boolean42 = node36.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isNot();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = node44.copyInformationFromForTree(node50);
        com.google.javascript.rhino.InputId inputId52 = node44.getInputId();
        boolean boolean53 = node44.isIn();
        boolean boolean54 = node36.isEquivalentToTyped(node44);
        boolean boolean55 = node44.isQuotedString();
        com.google.javascript.rhino.Node node56 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int62 = node61.getSideEffectFlags();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        int int68 = node64.getCharno();
        boolean boolean69 = node64.isName();
        boolean boolean70 = node64.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node64, "Unknown class name");
        node61.addChildrenToFront(node64);
        java.lang.String str74 = node64.getSourceFileName();
        int int75 = node64.getLength();
        int int76 = node64.getType();
        java.lang.String str77 = node64.toString();
        boolean boolean78 = node44.isEquivalentToTyped(node64);
        boolean boolean79 = node44.isStringKey();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder80 = node44.new FileLevelJsDocBuilder();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "OR" + "'", str77, "OR");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test19876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19876");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        node1.removeProp(44);
        boolean boolean21 = node1.isIf();
        boolean boolean22 = node1.isString();
        com.google.javascript.rhino.Node node23 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isReturn();
        com.google.javascript.rhino.InputId inputId30 = node25.getInputId();
        boolean boolean31 = node25.isArrayLit();
        boolean boolean32 = node25.isObjectLit();
        node1.addChildrenToFront(node25);
        com.google.javascript.rhino.jstype.JSType jSType34 = node25.getJSType();
        com.google.javascript.rhino.InputId inputId35 = null;
        node25.setInputId(inputId35);
        boolean boolean37 = node25.isName();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test19877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19877");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition0.setItem(node2);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition4.setItem(node6);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList16 = com.google.common.collect.ImmutableList.of(typePosition8, typePosition9, typePosition10, typePosition11, typePosition12, typePosition13, typePosition14, typePosition15);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList25 = com.google.common.collect.ImmutableList.of(typePosition17, typePosition18, typePosition19, typePosition20, typePosition21, typePosition22, typePosition23, typePosition24);
        typePosition24.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList39 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition32, typePosition33, typePosition34, typePosition35, typePosition36, typePosition37, typePosition38);
        int int40 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList49 = com.google.common.collect.ImmutableList.of(typePosition41, typePosition42, typePosition43, typePosition44, typePosition45, typePosition46, typePosition47, typePosition48);
        int int50 = typePosition47.getPositionOnEndLine();
        int int51 = typePosition47.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList60 = com.google.common.collect.ImmutableList.of(typePosition52, typePosition53, typePosition54, typePosition55, typePosition56, typePosition57, typePosition58, typePosition59);
        int int61 = typePosition55.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition62 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition63 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition64 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition65 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition66 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition67 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition68 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList70 = com.google.common.collect.ImmutableList.of(typePosition62, typePosition63, typePosition64, typePosition65, typePosition66, typePosition67, typePosition68, typePosition69);
        int int71 = typePosition62.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition73 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition74 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition78 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList80 = com.google.common.collect.ImmutableList.of(typePosition72, typePosition73, typePosition74, typePosition75, typePosition76, typePosition77, typePosition78, typePosition79);
        int int81 = typePosition72.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition82 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList83 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition4, typePosition10, typePosition24, typePosition36, typePosition47, typePosition55, typePosition62, typePosition72, typePosition82);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition84 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int85 = typePosition84.getPositionOnEndLine();
        boolean boolean86 = typePosition84.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList87 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition62, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition84);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(100);
        node89.addChildrenToFront(node91);
        boolean boolean93 = node89.isFalse();
        boolean boolean94 = node89.isParamList();
        boolean boolean95 = node89.isQualifiedName();
        boolean boolean96 = node89.isAnd();
        typePosition84.setItem(node89);
        int int98 = typePosition84.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(typePositionList16);
        org.junit.Assert.assertNotNull(typePositionList25);
        org.junit.Assert.assertNotNull(typePositionList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(typePositionList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(typePositionList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(typePositionList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(typePositionList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(typePositionList83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList87);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test19878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19878");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        boolean boolean15 = node6.isNoSideEffectsCall();
        boolean boolean16 = node6.isVoid();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        boolean boolean23 = node22.isDefaultCase();
        com.google.javascript.rhino.Node node24 = node6.useSourceInfoFrom(node22);
        node22.putIntProp((int) (short) 1, 10);
        boolean boolean28 = node22.isNoSideEffectsCall();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test19879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19879");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        boolean boolean8 = node2.isLocalResultCall();
        boolean boolean9 = node2.isArrayLit();
        boolean boolean10 = node2.isAssign();
        boolean boolean11 = node2.isAssign();
        boolean boolean12 = node2.isReturn();
        int int13 = node2.getLineno();
        boolean boolean14 = node2.isVar();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        int int20 = node16.getCharno();
        boolean boolean21 = node16.isName();
        boolean boolean22 = node16.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node16, "Unknown class name");
        boolean boolean25 = node16.isNumber();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 1, node2, node16);
        int int27 = node16.getCharno();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        boolean boolean33 = node29.isReturn();
        com.google.javascript.rhino.InputId inputId34 = node29.getInputId();
        boolean boolean35 = node29.isAdd();
        boolean boolean36 = node29.isQuotedString();
        int int38 = node29.getIntProp((int) (byte) 1);
        boolean boolean39 = node29.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            node16.removeChild(node29);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(inputId34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test19880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19880");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList19.asList();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        boolean boolean38 = node32.isBlock();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node40.cloneNode();
        com.google.javascript.rhino.Node node42 = node32.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean48 = node47.isExprResult();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        boolean boolean54 = node52.isLabel();
        boolean boolean55 = node47.isEquivalentTo(node52);
        com.google.javascript.rhino.Node node56 = node41.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node58.children();
        node58.putIntProp(8, (int) '4');
        node41.addChildrenToBack(node58);
        boolean boolean67 = strList19.contains((java.lang.Object) node58);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor68 = strList19.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList82 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean83 = strList75.containsAll((java.util.Collection<java.lang.String>) strList82);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor84 = strList75.listIterator();
        int int85 = strList75.size();
        boolean boolean86 = strList75.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int88 = strList75.lastIndexOf((java.lang.Object) visibility87);
        java.util.stream.Stream<java.lang.String> strStream89 = strList75.parallelStream();
        java.util.Iterator<java.lang.String> strItor90 = strList75.iterator();
        int int91 = strList75.size();
        boolean boolean92 = strList75.isEmpty();
        boolean boolean93 = strList19.containsAll((java.util.Collection<java.lang.String>) strList75);
        java.util.Spliterator<java.lang.String> strSpliterator94 = strList19.spliterator();
        java.lang.Object[] objArray95 = strList19.toArray();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(strStream89);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 6 + "'", int91 == 6);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(strSpliterator94);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test19881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19881");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        int int21 = node19.getType();
        com.google.javascript.rhino.InputId inputId22 = node19.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = null;
        node19.setJSDocInfo(jSDocInfo23);
        boolean boolean25 = node19.isDo();
        boolean boolean26 = strList6.equals((java.lang.Object) node19);
        com.google.javascript.rhino.Node node27 = node19.cloneTree();
        boolean boolean28 = node27.isInstanceOf();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test19882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19882");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        jSDocInfo0.setAssociatedNode(node5);
        java.lang.String str27 = jSDocInfo0.getFileOverview();
        boolean boolean28 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isNot();
        boolean boolean36 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        com.google.javascript.rhino.Node node41 = node31.copyInformationFromForTree(node38);
        boolean boolean42 = node41.isAssignAdd();
        boolean boolean43 = node41.hasOneChild();
        node41.setIsSyntheticBlock(true);
        boolean boolean46 = strSet29.equals((java.lang.Object) node41);
        boolean boolean47 = node41.wasEmptyNode();
        com.google.javascript.rhino.Node node48 = node41.getLastChild();
        boolean boolean49 = node41.isLabelName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test19883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19883");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        node4.setIsSyntheticBlock(true);
        boolean boolean9 = node4.isContinue();
        boolean boolean10 = node4.isParamList();
        node4.setSourceEncodedPositionForTree(54);
        boolean boolean13 = node4.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node4.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node4.isName();
        boolean boolean17 = node4.isSwitch();
        node4.setVarArgs(false);
        com.google.javascript.rhino.Node node20 = node4.cloneTree();
        boolean boolean21 = node20.isTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean36 = strList28.containsAll((java.util.Collection<java.lang.String>) strList35);
        java.lang.String[] strArray39 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isTypeOf();
        boolean boolean48 = node43.wasEmptyNode();
        int int49 = strList40.indexOf((java.lang.Object) boolean48);
        int int50 = strList35.indexOf((java.lang.Object) boolean48);
        boolean boolean51 = strList35.isEmpty();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isTypeOf();
        boolean boolean59 = node54.isDelProp();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        int int65 = node61.getCharno();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] { node54, node61 };
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray66);
        int int68 = strList35.indexOf((java.lang.Object) node67);
        boolean boolean69 = node67.isAnd();
        boolean boolean70 = node67.isFromExterns();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (short) 1, 37, 0);
        java.lang.String str75 = node74.toStringTree();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(1, node20, node67, node74);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder77 = node76.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER 1.0 37\n" + "'", str75, "NUMBER 1.0 37\n");
    }

    @Test
    public void test19884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19884");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        boolean boolean7 = node1.isFunction();
        boolean boolean8 = node1.isThrow();
        node1.addSuppression("");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node12.getStaticSourceFile();
        boolean boolean18 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node20.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = node12.useSourceInfoFrom(node25);
        boolean boolean33 = node32.isDelProp();
        boolean boolean34 = node32.isDec();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isNot();
        boolean boolean46 = node41.isIf();
        com.google.javascript.rhino.Node node47 = node38.copyInformationFromForTree(node41);
        boolean boolean48 = node41.isInc();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node41.getJSDocInfo();
        java.lang.String str50 = node32.checkTreeEquals(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node41.siblings();
        com.google.javascript.rhino.Node node52 = node41.getLastChild();
        com.google.javascript.rhino.Node node53 = node1.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        node41.setJSType(jSType54);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str15, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str50, "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test19885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19885");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        node9.setCharno(36);
        boolean boolean19 = node9.isWhile();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node9.setJSType(jSType20);
        boolean boolean22 = node9.isCatch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        java.lang.String str27 = node26.toStringTree();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        boolean boolean39 = node34.isIf();
        com.google.javascript.rhino.Node node40 = node31.copyInformationFromForTree(node34);
        boolean boolean41 = node31.isEmpty();
        int int42 = node26.getIndexOfChild(node31);
        boolean boolean43 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node31.detachFromParent();
        com.google.javascript.rhino.Node node45 = node9.useSourceInfoFromForTree(node44);
        int int46 = node44.getCharno();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node44.siblings();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 4.0 1\n" + "'", str27, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable47);
    }

    @Test
    public void test19886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19886");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.siblings();
        int int3 = node1.getSourcePosition();
        boolean boolean4 = node1.isDefaultCase();
        boolean boolean5 = node1.isNull();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node7.setStaticSourceFile(staticSourceFile10);
        boolean boolean12 = node7.isComma();
        node7.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node16.children();
        com.google.javascript.rhino.InputId inputId21 = null;
        node16.setInputId(inputId21);
        boolean boolean23 = node16.isName();
        java.lang.String str24 = node7.checkTreeEquals(node16);
        boolean boolean25 = node16.isInc();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isNot();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = node27.copyInformationFromForTree(node33);
        com.google.javascript.rhino.InputId inputId35 = node27.getInputId();
        node16.addChildrenToFront(node27);
        node27.putBooleanProp(43, true);
        boolean boolean40 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node41 = node27.getLastChild();
        com.google.javascript.rhino.jstype.JSType jSType42 = node41.getJSType();
        com.google.javascript.rhino.Node node43 = node1.srcref(node41);
        boolean boolean44 = node1.isCall();
        node1.setSourceEncodedPosition(7);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str24, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test19887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19887");
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo2.getParameterNames();
        boolean boolean4 = jSDocInfo2.isOverride();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        boolean boolean16 = node11.isIf();
        com.google.javascript.rhino.Node node17 = node8.copyInformationFromForTree(node11);
        jSDocInfo2.setAssociatedNode(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node11.children();
        boolean boolean20 = node11.isAssign();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(50, node11, 45, (int) (byte) 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node11.getAncestors();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        node26.setStaticSourceFile(staticSourceFile29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        com.google.javascript.rhino.Node node41 = node39.getParent();
        com.google.javascript.rhino.Node node42 = node32.useSourceInfoFromForTree(node39);
        boolean boolean43 = node26.hasChild(node32);
        boolean boolean44 = node32.isNot();
        boolean boolean45 = node32.isQuotedString();
        boolean boolean46 = node32.isNot();
        node11.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        int int54 = node51.getLength();
        node51.setSourceEncodedPositionForTree(1);
        boolean boolean57 = node51.isContinue();
        boolean boolean58 = node51.isTry();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(48, node11, node51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test19888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19888");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        boolean boolean15 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node17.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node17.getStaticSourceFile();
        boolean boolean23 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node30.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node25.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node37 = node17.useSourceInfoFrom(node30);
        boolean boolean38 = node30.isWhile();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node42.isLabel();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node46.cloneNode();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isNot();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = node49.copyInformationFromForTree(node55);
        com.google.javascript.rhino.InputId inputId57 = node49.getInputId();
        com.google.javascript.rhino.Node node58 = node49.getNext();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node60.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node60.setStaticSourceFile(staticSourceFile63);
        boolean boolean65 = node60.isComma();
        boolean boolean66 = node60.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList67 = com.google.common.collect.ImmutableList.of(node30, node42, node47, node49, node60);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node69.setStaticSourceFile(staticSourceFile72);
        com.google.javascript.rhino.Node node74 = node49.copyInformationFromForTree(node69);
        boolean boolean75 = node14.isEquivalentToTyped(node74);
        boolean boolean76 = node74.isCatch();
        com.google.javascript.rhino.Node node77 = node74.getNext();
        com.google.javascript.rhino.Node node78 = node74.removeFirstChild();
        boolean boolean79 = node78.isSetterDef();
        com.google.javascript.rhino.Node node80 = node78.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            double double81 = node78.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str33, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test19889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19889");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isNot();
        boolean boolean18 = node13.isIf();
        com.google.javascript.rhino.Node node19 = node10.copyInformationFromForTree(node13);
        boolean boolean20 = node10.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node22.isReturn();
        com.google.javascript.rhino.InputId inputId27 = node22.getInputId();
        boolean boolean28 = node22.isAdd();
        node10.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        boolean boolean31 = strSet6.contains((java.lang.Object) node30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str33 = jSDocInfo32.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = jSDocInfo32.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection37 = jSDocInfo35.getAuthors();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isNot();
        boolean boolean49 = node44.isIf();
        com.google.javascript.rhino.Node node50 = node41.copyInformationFromForTree(node44);
        boolean boolean51 = node41.hasMoreThanOneChild();
        boolean boolean52 = node41.isDefaultCase();
        jSDocInfo35.setAssociatedNode(node41);
        int int54 = strList34.lastIndexOf((java.lang.Object) node41);
        boolean boolean55 = strSet6.contains((java.lang.Object) node41);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(12, "OR [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.Node node59 = node58.getLastSibling();
        com.google.javascript.rhino.Node node60 = node58.getLastChild();
        boolean boolean61 = node58.isOptionalArg();
        boolean boolean62 = node58.isGetProp();
        boolean boolean63 = node41.isEquivalentTo(node58);
        boolean boolean64 = node58.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strCollection37);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test19890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19890");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        int int6 = node2.getCharno();
        boolean boolean7 = node2.isParamList();
        com.google.javascript.rhino.Node node8 = node2.getParent();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, 0, (int) (short) 0);
        boolean boolean12 = node2.hasOneChild();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test19891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19891");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isParamList();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node12 = node3.cloneTree();
        boolean boolean13 = node12.isThrow();
        boolean boolean14 = node12.isDebugger();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = node12.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR [synthetic: 1] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19892");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition6.getPositionOnEndLine();
        int int10 = typePosition6.getStartLine();
        int int11 = typePosition6.getPositionOnEndLine();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isReturn();
        com.google.javascript.rhino.InputId inputId19 = node14.getInputId();
        boolean boolean20 = node14.isAdd();
        boolean boolean21 = node14.isQuotedString();
        int int23 = node14.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        boolean boolean30 = node25.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.Node node35 = node25.copyInformationFromForTree(node32);
        node25.setOptionalArg(true);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.Node node50 = node48.getParent();
        com.google.javascript.rhino.Node node51 = node41.useSourceInfoFromForTree(node48);
        boolean boolean52 = node51.isSetterDef();
        com.google.javascript.rhino.Node node53 = node51.getLastChild();
        boolean boolean54 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(1, node14, node25, node39, node51);
        boolean boolean56 = node51.isAssign();
        boolean boolean57 = node51.wasEmptyNode();
        boolean boolean58 = node51.isIn();
        typePosition6.setItem(node51);
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test19893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19893");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        boolean boolean61 = node27.isGetterDef();
        boolean boolean62 = node27.isVoid();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node27.setJSType(jSType63);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test19894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19894");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        boolean boolean16 = node6.hasMoreThanOneChild();
        boolean boolean17 = node6.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node6);
        jSDocInfo0.addSuppression("(OR \n)");
        boolean boolean21 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node24.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node24.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.children();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node36 = node24.clonePropsFrom(node32);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node38.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node38.getStaticSourceFile();
        boolean boolean44 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node46.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node58 = node38.useSourceInfoFrom(node51);
        boolean boolean59 = node51.isNot();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        java.lang.String str64 = node61.toString();
        com.google.javascript.rhino.Node node65 = node61.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node61.getStaticSourceFile();
        boolean boolean67 = node61.isLocalResultCall();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node74.addSuppression("");
        java.lang.String str77 = node74.toString();
        com.google.javascript.rhino.Node node78 = node74.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = node74.getStaticSourceFile();
        com.google.javascript.rhino.Node node80 = node69.copyInformationFromForTree(node74);
        com.google.javascript.rhino.Node node81 = node61.useSourceInfoFrom(node74);
        boolean boolean82 = node74.isNot();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(44, node32, node51, node74);
        com.google.javascript.rhino.InputId inputId84 = null;
        node83.setInputId(inputId84);
        node83.removeProp((int) (short) -1);
        boolean boolean88 = node83.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node83);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder90 = node83.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node91 = node83.getFirstChild();
        boolean boolean92 = node91.isDo();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str64, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str77, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNull(staticSourceFile79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test19895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19895");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        int int4 = jSDocInfo0.getParameterCount();
        java.lang.String str5 = jSDocInfo0.getDescription();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getLicense();
        boolean boolean8 = jSDocInfo0.isConstructor();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test19896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19896");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node29.children();
        com.google.javascript.rhino.InputId inputId34 = null;
        node29.setInputId(inputId34);
        boolean boolean36 = node29.isName();
        java.lang.String str37 = node20.checkTreeEquals(node29);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node2, node8, node29 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList39 = com.google.common.collect.ImmutableList.of(nodeArray38);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) '#', nodeArray38);
        boolean boolean41 = node40.isString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getFileOverview();
        java.lang.String str44 = jSDocInfo42.getFileOverview();
        java.lang.String str45 = jSDocInfo42.getMeaning();
        boolean boolean46 = jSDocInfo42.isDefine();
        boolean boolean47 = jSDocInfo42.isNoAlias();
        java.util.Set<java.lang.String> strSet48 = jSDocInfo42.getSuppressions();
        node40.setDirectives(strSet48);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str37, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test19897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19897");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder6 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder8 = nodeArrayBuilder6.add(nodeArray7);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray7, 2, (int) '4');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) '4', nodeArray7, 50, 15);
        boolean boolean15 = node14.isLabelName();
        jSDocInfo0.setAssociatedNode(node14);
        boolean boolean18 = jSDocInfo0.hasParameterType("TRUE\n");
        boolean boolean19 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArrayBuilder8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test19898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19898");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isIf();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        boolean boolean10 = node9.isParamList();
        com.google.javascript.rhino.Node node11 = node2.useSourceInfoIfMissingFrom(node9);
        boolean boolean12 = node9.isComma();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.Node node25 = node15.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasBaseType();
        jSDocInfo26.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo26.getBaseType();
        node25.setJSDocInfo(jSDocInfo26);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 1, node25, 38, (int) '4');
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isReturn();
        boolean boolean42 = node37.isContinue();
        com.google.javascript.rhino.Node node43 = node34.srcref(node37);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isNot();
        boolean boolean50 = node45.isIf();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        boolean boolean53 = node52.isParamList();
        com.google.javascript.rhino.Node node54 = node45.useSourceInfoIfMissingFrom(node52);
        boolean boolean55 = node52.isComma();
        java.lang.String str56 = node52.getSourceFileName();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(47, node9, node34, node52, 41, 43);
        boolean boolean60 = node52.isArrayLit();
        boolean boolean61 = node52.isFor();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test19899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19899");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor27 = strList26.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList26.asList();
        java.util.Iterator<java.lang.String> strItor29 = strList26.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList43.reverse();
        boolean boolean55 = strList54.isEmpty();
        java.util.Iterator<java.lang.String> strItor56 = strList54.iterator();
        boolean boolean57 = strList26.equals((java.lang.Object) strItor56);
        java.util.Iterator<java.lang.String> strItor58 = strList26.iterator();
        int int59 = strList26.size();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strItor58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
    }

    @Test
    public void test19900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19900");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo7.getParameterNames();
        boolean boolean9 = jSDocInfo7.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo7.getThrownTypes();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        boolean boolean24 = node19.isDelProp();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.Node node30 = node28.getParent();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node28.setJSType(jSType31);
        java.lang.String str33 = node28.toString();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node35.setStaticSourceFile(staticSourceFile38);
        boolean boolean40 = node35.isComma();
        node35.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList43 = com.google.common.collect.ImmutableList.of(node12, node19, node28, node35);
        boolean boolean44 = node35.isComma();
        boolean boolean45 = node35.isCase();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int51 = node50.getSideEffectFlags();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node57 = node55.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str59 = jSDocInfo58.getFileOverview();
        java.lang.String str60 = jSDocInfo58.getFileOverview();
        boolean boolean61 = jSDocInfo58.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList62 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo7, (java.lang.Object) node35, (java.lang.Object) node50, (java.lang.Object) node55, (java.lang.Object) jSDocInfo58);
        node3.addChildrenToBack(node50);
        int int65 = node3.getIntProp(45);
        com.google.javascript.rhino.Node node66 = node3.removeChildren();
        boolean boolean67 = node66.isFor();
        boolean boolean68 = node66.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR" + "'", str33, "OR");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test19901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19901");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair7 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType5, jSType6);
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair7.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair11 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType9, jSType10);
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair11.typeB;
        com.google.javascript.rhino.jstype.JSType jSType14 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType15 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType16 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType17 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType18 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType19 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType20 = typePair11.typeA;
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair23 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType21, jSType22);
        com.google.javascript.rhino.jstype.JSType jSType24 = typePair23.typeA;
        com.google.javascript.rhino.jstype.JSType jSType25 = typePair23.typeB;
        com.google.javascript.rhino.jstype.JSType jSType26 = typePair23.typeA;
        com.google.javascript.rhino.jstype.JSType jSType27 = typePair23.typeA;
        com.google.javascript.rhino.jstype.JSType jSType28 = typePair23.typeB;
        com.google.javascript.rhino.jstype.JSType jSType29 = typePair23.typeA;
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair32 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType30, jSType31);
        com.google.javascript.rhino.jstype.JSType jSType33 = typePair32.typeA;
        com.google.javascript.rhino.jstype.JSType jSType34 = typePair32.typeA;
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair37 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType35, jSType36);
        com.google.javascript.rhino.jstype.JSType jSType38 = typePair37.typeA;
        com.google.javascript.rhino.jstype.JSType jSType39 = typePair37.typeB;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList40 = com.google.common.collect.ImmutableList.of(typePair2, typePair7, typePair11, typePair23, typePair32, typePair37);
        com.google.javascript.rhino.jstype.JSType jSType41 = typePair7.typeA;
        com.google.javascript.rhino.jstype.JSType jSType42 = typePair7.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertNull(jSType16);
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertNull(jSType18);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertNull(jSType20);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNull(jSType33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertNotNull(typePairList40);
        org.junit.Assert.assertNull(jSType41);
        org.junit.Assert.assertNull(jSType42);
    }

    @Test
    public void test19902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19902");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        boolean boolean71 = strList37.isEmpty();
        java.lang.Object[] objArray72 = strList37.toArray();
        java.lang.Object[] objArray73 = strList37.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = strList37.reverse();
        java.lang.String str75 = strList74.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = strList74.set(6, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]" + "'", str75, "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
    }

    @Test
    public void test19903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19903");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        boolean boolean11 = node4.isEmpty();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.hasChildren();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node13);
        int int19 = strList2.indexOf((java.lang.Object) node4);
        boolean boolean20 = strList2.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node24.getParent();
        node24.setIsSyntheticBlock(true);
        boolean boolean29 = node24.isContinue();
        boolean boolean30 = node24.isParamList();
        node24.setSourceEncodedPositionForTree(54);
        boolean boolean33 = node24.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node24.setStaticSourceFile(staticSourceFile34);
        boolean boolean36 = node24.isName();
        boolean boolean37 = strList2.equals((java.lang.Object) boolean36);
        java.lang.String str38 = strList2.toString();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node40.setStaticSourceFile(staticSourceFile43);
        boolean boolean45 = node40.hasMoreThanOneChild();
        boolean boolean46 = node40.isFunction();
        boolean boolean47 = node40.isThrow();
        com.google.javascript.rhino.Node node48 = node40.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = strList2.remove((java.lang.Object) node48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test19904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19904");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("((NUMBER 1.0 37\n))", (-1), 213044);
        boolean boolean4 = node3.isAssign();
        node3.setType(54);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test19905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19905");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList9 = strList6.subList((int) '#', 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (35) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test19906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19906");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str6 = ternaryValue5.toString();
        boolean boolean8 = ternaryValue5.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue2.and(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue0.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str13 = ternaryValue12.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean16 = ternaryValue14.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str18 = ternaryValue17.toString();
        boolean boolean20 = ternaryValue17.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue14.and(ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue12.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue9.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue25.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue12.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue29.xor(ternaryValue30);
        boolean boolean33 = ternaryValue29.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean39 = ternaryValue37.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str41 = ternaryValue40.toString();
        boolean boolean43 = ternaryValue40.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue37.and(ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue34.and(ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue29.or(ternaryValue45);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue47.xor(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue45.xor(ternaryValue49);
        boolean boolean52 = ternaryValue50.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue50.not();
        boolean boolean55 = ternaryValue53.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue28.or(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "unknown" + "'", str6, "unknown");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "unknown" + "'", str13, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "unknown" + "'", str18, "unknown");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "unknown" + "'", str41, "unknown");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(ternaryValue56);
    }

    @Test
    public void test19907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19907");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        int int7 = node4.getLength();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        node4.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node29 = node27.getParent();
        com.google.javascript.rhino.Node node30 = node20.useSourceInfoFromForTree(node27);
        boolean boolean31 = node14.hasChild(node20);
        boolean boolean32 = node14.isStringKey();
        com.google.javascript.rhino.Node node33 = node4.useSourceInfoFromForTree(node14);
        boolean boolean34 = node33.isLabel();
        boolean boolean35 = node33.isSetterDef();
        boolean boolean36 = node33.isArrayLit();
        boolean boolean37 = node33.isCase();
        boolean boolean38 = node33.isWith();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node33.getStaticSourceFile();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(213092, node33, (int) (byte) 1, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
    }

    @Test
    public void test19908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19908");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("((OR))");
        boolean boolean3 = node2.isLabelName();
        com.google.javascript.rhino.Node node4 = node2.cloneTree();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(8, node2);
        java.lang.String str6 = node2.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test19909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19909");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder4 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node22 };
        com.google.javascript.rhino.Node[][] nodeArray29 = new com.google.javascript.rhino.Node[][] { nodeArray12, nodeArray20, nodeArray28 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder4.add(nodeArray29);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder33 = nodeArrayBuilder31.add(nodeArray32);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder34 = nodeArrayBuilder30.add(nodeArray32);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, nodeArray32);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(43, nodeArray32, 12, 41);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray32, 4095, (int) (byte) 10);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(48, nodeArray32);
        boolean boolean43 = node42.isArrayLit();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArrayBuilder33);
        org.junit.Assert.assertNotNull(nodeArrayBuilder34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test19910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19910");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor27 = strList26.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = strList26.add("((Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strItor27);
    }

    @Test
    public void test19911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19911");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isHidden();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19912");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        boolean boolean24 = node19.isDelProp();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.Node node30 = node28.getParent();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node28.setJSType(jSType31);
        java.lang.String str33 = node28.toString();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node35.setStaticSourceFile(staticSourceFile38);
        boolean boolean40 = node35.isComma();
        node35.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList43 = com.google.common.collect.ImmutableList.of(node12, node19, node28, node35);
        boolean boolean44 = node3.hasChild(node12);
        boolean boolean45 = node12.isNumber();
        boolean boolean46 = node12.isSetterDef();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR" + "'", str33, "OR");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test19913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19913");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        boolean boolean17 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getParameterNames();
        boolean boolean21 = jSDocInfo19.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo19.getThrownTypes();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node24.isTypeOf();
        boolean boolean29 = node24.wasEmptyNode();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isTypeOf();
        boolean boolean36 = node31.isDelProp();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        com.google.javascript.rhino.Node node42 = node40.getParent();
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node40.setJSType(jSType43);
        java.lang.String str45 = node40.toString();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        node47.setStaticSourceFile(staticSourceFile50);
        boolean boolean52 = node47.isComma();
        node47.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList55 = com.google.common.collect.ImmutableList.of(node24, node31, node40, node47);
        boolean boolean56 = node47.isComma();
        boolean boolean57 = node47.isCase();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int63 = node62.getSideEffectFlags();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        com.google.javascript.rhino.Node node69 = node67.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str71 = jSDocInfo70.getFileOverview();
        java.lang.String str72 = jSDocInfo70.getFileOverview();
        boolean boolean73 = jSDocInfo70.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList74 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo19, (java.lang.Object) node47, (java.lang.Object) node62, (java.lang.Object) node67, (java.lang.Object) jSDocInfo70);
        boolean boolean75 = jSDocInfo19.isConstant();
        boolean boolean76 = jSDocInfo19.hasReturnType();
        int int77 = strList6.indexOf((java.lang.Object) jSDocInfo19);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = strList6.add("(OR [synthetic: 1])");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR" + "'", str45, "OR");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test19914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19914");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 32, 35);
        java.lang.String str4 = node3.toStringTree();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node11 = node7.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node7.getStaticSourceFile();
        boolean boolean13 = node7.isLocalResultCall();
        boolean boolean14 = node7.isArrayLit();
        boolean boolean15 = node7.isAssign();
        boolean boolean16 = node7.isAssign();
        boolean boolean17 = node7.isReturn();
        int int18 = node7.getLineno();
        boolean boolean19 = node7.isVar();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        int int25 = node21.getCharno();
        boolean boolean26 = node21.isName();
        boolean boolean27 = node21.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node21, "Unknown class name");
        boolean boolean30 = node21.isNumber();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 1, node7, node21);
        boolean boolean32 = node3.hasChild(node7);
        int int33 = node7.getLength();
        int int34 = node7.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "STRING  32\n" + "'", str4, "STRING  32\n");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test19915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19915");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19916");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        node12.setIsSyntheticBlock(true);
        boolean boolean17 = node12.isContinue();
        java.lang.String str18 = node12.getQualifiedName();
        boolean boolean19 = node12.isSetterDef();
        typePosition3.setItem(node12);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node22.children();
        boolean boolean27 = node22.isVoid();
        boolean boolean28 = node22.isFor();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node22.getAncestors();
        boolean boolean30 = node22.isVoid();
        boolean boolean31 = node22.isNull();
        typePosition3.setItem(node22);
        int int33 = typePosition3.getEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ancestorIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test19917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19917");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.Node node20 = node10.getAncestor(38);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = node20.removeChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test19918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19918");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean14 = strSet7.equals((java.lang.Object) 1.0d);
        java.util.stream.Stream<java.lang.String> strStream15 = strSet7.parallelStream();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setIsSyntheticBlock(true);
        int int24 = node19.getType();
        boolean boolean25 = node19.isObjectLit();
        boolean boolean26 = node19.isCase();
        boolean boolean27 = strSet7.equals((java.lang.Object) boolean26);
        boolean boolean28 = strSet7.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet7.stream();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet7.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator31 = strSet7.spliterator();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strSpliterator31);
    }

    @Test
    public void test19919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19919");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 0);
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test19920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19920");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasBaseType();
        java.lang.String str55 = jSDocInfo53.getFileOverview();
        int int56 = jSDocInfo53.getParameterCount();
        boolean boolean57 = jSDocInfo53.isConstant();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo53.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.hasBaseType();
        jSDocInfo59.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo59.getTypedefType();
        boolean boolean64 = jSDocInfo59.isNoSideEffects();
        com.google.javascript.rhino.Node node65 = jSDocInfo59.getAssociatedNode();
        java.util.Set<java.lang.String> strSet66 = jSDocInfo59.getSuppressions();
        strSet66.clear();
        int int68 = strSet66.size();
        boolean boolean69 = strSet58.containsAll((java.util.Collection<java.lang.String>) strSet66);
        node33.setDirectives(strSet66);
        boolean boolean71 = node33.isObjectLit();
        com.google.javascript.rhino.Node node72 = node33.getLastChild();
        boolean boolean73 = node33.isVoid();
        int int74 = node33.getSourcePosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test19921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19921");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("OR 36\n    OR\n", 4, 59);
        boolean boolean12 = node1.hasChild(node11);
        node11.setString("(((OR)))");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test19922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19922");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        com.google.javascript.rhino.Node node58 = node33.copyInformationFromForTree(node53);
        boolean boolean59 = node33.isBlock();
        boolean boolean60 = node33.isAssign();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test19923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19923");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        node49.setIsSyntheticBlock(false);
        int int59 = node49.getSideEffectFlags();
        boolean boolean60 = node49.isName();
        java.util.Set<java.lang.String> strSet61 = node49.getDirectives();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
    }

    @Test
    public void test19924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19924");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.JSType.TypePair[]> typePairArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(typePairArrayBuilder0);
    }

    @Test
    public void test19925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19925");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameterType("(OR \n)");
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19926");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor8 = strList7.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = strList7.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = strList9.asList();
        java.lang.String[] strArray24 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.String[] strArray30 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray31 = strSet25.toArray((java.lang.Comparable<java.lang.String>[]) strArray30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isNoShadow();
        boolean boolean34 = jSDocInfo32.isNoShadow();
        boolean boolean35 = jSDocInfo32.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo32.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = jSDocInfo32.getTemplateTypeNames();
        boolean boolean40 = strSet25.removeAll((java.util.Collection<java.lang.String>) strList39);
        java.lang.String[] strArray47 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.lang.Object[] objArray50 = strSet48.toArray();
        strSet48.clear();
        java.util.Iterator<java.lang.String> strItor52 = strSet48.iterator();
        int int53 = strSet48.size();
        boolean boolean54 = strSet48.isEmpty();
        int int55 = strSet48.size();
        boolean boolean56 = strSet25.containsAll((java.util.Collection<java.lang.String>) strSet48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean58 = jSDocInfo57.hasTypedefType();
        java.lang.String str59 = jSDocInfo57.toString();
        boolean boolean61 = jSDocInfo57.hasParameterType("Unknown class name");
        boolean boolean62 = jSDocInfo57.isIdGenerator();
        int int63 = jSDocInfo57.getExtendedInterfacesCount();
        boolean boolean64 = jSDocInfo57.hasThisType();
        int int65 = jSDocInfo57.getExtendedInterfacesCount();
        java.lang.String str66 = jSDocInfo57.getDeprecationReason();
        com.google.common.collect.ImmutableList<java.lang.String> strList67 = jSDocInfo57.getTemplateTypeNames();
        java.lang.String str68 = strList67.toString();
        boolean boolean69 = strSet48.containsAll((java.util.Collection<java.lang.String>) strList67);
        boolean boolean70 = strList9.containsAll((java.util.Collection<java.lang.String>) strSet48);
        boolean boolean71 = strList9.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strComparableArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "JSDocInfo" + "'", str59, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test19927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19927");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str6 = jSDocInfo0.toString();
        java.lang.String str7 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test19928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19928");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.hasMoreThanOneChild();
        boolean boolean8 = node2.isFunction();
        boolean boolean9 = node2.isThrow();
        java.lang.String str10 = node2.toStringTree();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(155648, node2);
        boolean boolean12 = node11.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str10, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test19929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19929");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.xor(ternaryValue1);
        boolean boolean4 = ternaryValue0.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean10 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str12 = ternaryValue11.toString();
        boolean boolean14 = ternaryValue11.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue8.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue5.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue0.or(ternaryValue16);
        java.lang.String str18 = ternaryValue16.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean21 = ternaryValue19.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue16.xor(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue19.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue25.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue27.xor(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue25.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue31.xor(ternaryValue32);
        boolean boolean35 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue31.not();
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean51 = strList43.containsAll((java.util.Collection<java.lang.String>) strList50);
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList43.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = strList43.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor54 = strList43.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean57 = ternaryValue55.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean60 = ternaryValue58.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str62 = ternaryValue61.toString();
        boolean boolean64 = ternaryValue61.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = ternaryValue58.and(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue55.and(ternaryValue61);
        int int67 = strList43.indexOf((java.lang.Object) ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue66.xor(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = ternaryValue66.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue31.and(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue29.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = ternaryValue23.and(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "unknown" + "'", str12, "unknown");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "unknown" + "'", str18, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "unknown" + "'", str62, "unknown");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
    }

    @Test
    public void test19930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19930");
        java.lang.Object[] objArray0 = null;
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean15 = strList7.containsAll((java.util.Collection<java.lang.String>) strList14);
        java.lang.String[] strArray18 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node22.isTypeOf();
        boolean boolean27 = node22.wasEmptyNode();
        int int28 = strList19.indexOf((java.lang.Object) boolean27);
        int int29 = strList14.indexOf((java.lang.Object) boolean27);
        boolean boolean30 = strList14.isEmpty();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.isDelProp();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        int int44 = node40.getCharno();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node33, node40 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray45);
        int int47 = strList14.indexOf((java.lang.Object) node46);
        java.util.Iterator<java.lang.String> strItor48 = strList14.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        boolean boolean60 = strList14.containsAll((java.util.Collection<java.lang.String>) strList59);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList61 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList14);
        java.lang.String[] strArray64 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node68.addChildrenToFront(node70);
        boolean boolean72 = node68.isTypeOf();
        boolean boolean73 = node68.wasEmptyNode();
        int int74 = strList65.indexOf((java.lang.Object) boolean73);
        boolean boolean75 = strList14.containsAll((java.util.Collection<java.lang.String>) strList65);
        java.lang.Object[] objArray76 = strList65.toArray();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Object[]> objArrayList77 = com.google.common.collect.ImmutableList.of(objArray0, objArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strIterableList61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test19931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19931");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        node14.setWasEmptyNode(false);
        boolean boolean19 = node14.isCatch();
        node14.setCharno(6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo23.getParameterNames();
        boolean boolean25 = jSDocInfo23.isOverride();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isNot();
        boolean boolean37 = node32.isIf();
        com.google.javascript.rhino.Node node38 = node29.copyInformationFromForTree(node32);
        jSDocInfo23.setAssociatedNode(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node32.children();
        boolean boolean41 = node32.isAssign();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(50, node32, 45, (int) (byte) 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node32.siblings();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node50 = node32.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d);
        com.google.javascript.rhino.Node node53 = node52.removeFirstChild();
        com.google.javascript.rhino.Node node54 = node50.useSourceInfoFrom(node52);
        boolean boolean55 = node54.hasChildren();
        com.google.javascript.rhino.Node node56 = node14.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 1);
        node58.setIsSyntheticBlock(true);
        boolean boolean61 = node54.hasChild(node58);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test19932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19932");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(43, "NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        boolean boolean8 = node6.isLabel();
        boolean boolean9 = node6.isContinue();
        node6.setVarArgs(false);
        boolean boolean12 = node6.isVoid();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node6);
        node6.setVarArgs(true);
        node6.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable18 = node6.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor19 = ancestorIterable18.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(ancestorIterable18);
        org.junit.Assert.assertNotNull(nodeItor19);
    }

    @Test
    public void test19933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19933");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = com.google.common.collect.ImmutableList.of(jSTypeExpression9, jSTypeExpression23);
        boolean boolean27 = jSTypeExpression23.isOptionalArg();
        com.google.javascript.rhino.Node node28 = jSTypeExpression23.getRoot();
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean43 = strList35.containsAll((java.util.Collection<java.lang.String>) strList42);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor44 = strList42.iterator();
        boolean boolean45 = strList42.isEmpty();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        int int51 = node47.getCharno();
        boolean boolean52 = strList42.equals((java.lang.Object) node47);
        boolean boolean53 = jSTypeExpression23.equals((java.lang.Object) strList42);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression23);
        boolean boolean55 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression23);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression56);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression56);
        org.junit.Assert.assertNotNull(jSTypeExpression57);
    }

    @Test
    public void test19934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19934");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(4, "(Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n)", 3, 204841);
        boolean boolean5 = node4.isAssignAdd();
        int int6 = node4.getSourcePosition();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16383 + "'", int6 == 16383);
    }

    @Test
    public void test19935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19935");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = marker7.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker7.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition27 = marker7.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker7.getAnnotation();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(stringPosition24);
        org.junit.Assert.assertNull(typePosition25);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(nodeSourcePosition27);
        org.junit.Assert.assertNull(stringPosition28);
    }

    @Test
    public void test19936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19936");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = com.google.common.collect.ImmutableList.of("(OR\n    OR\n)", "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n    ERROR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: ERROR\n    OR\n", "(Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n)", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "OR 52\n    OR\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasBaseType();
        jSDocInfo6.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getBaseType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo6.getParameterNames();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        int int17 = node13.getCharno();
        boolean boolean18 = node13.isContinue();
        boolean boolean19 = strSet11.equals((java.lang.Object) node13);
        boolean boolean20 = node13.isSetterDef();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        node22.setStaticSourceFile(staticSourceFile25);
        boolean boolean27 = node22.isComma();
        node22.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node31.children();
        com.google.javascript.rhino.InputId inputId36 = null;
        node31.setInputId(inputId36);
        boolean boolean38 = node31.isName();
        java.lang.String str39 = node22.checkTreeEquals(node31);
        boolean boolean40 = node31.isInc();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node31);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean44 = node43.wasEmptyNode();
        com.google.javascript.rhino.Node node45 = node13.clonePropsFrom(node43);
        boolean boolean47 = node13.getBooleanProp(51);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isTypeOf();
        boolean boolean54 = node49.wasEmptyNode();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        boolean boolean60 = node56.isTypeOf();
        boolean boolean61 = node56.isDelProp();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        com.google.javascript.rhino.Node node67 = node65.getParent();
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        node65.setJSType(jSType68);
        java.lang.String str70 = node65.toString();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node72.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = null;
        node72.setStaticSourceFile(staticSourceFile75);
        boolean boolean77 = node72.isComma();
        node72.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList80 = com.google.common.collect.ImmutableList.of(node49, node56, node65, node72);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(100);
        node82.addChildrenToFront(node84);
        boolean boolean86 = node84.isLabel();
        boolean boolean87 = node84.isContinue();
        com.google.javascript.rhino.Node node88 = node56.copyInformationFrom(node84);
        node84.setIsSyntheticBlock(false);
        boolean boolean91 = node84.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node92 = node13.clonePropsFrom(node84);
        int int93 = strList5.indexOf((java.lang.Object) node92);
        java.util.Set<java.lang.String> strSet94 = null;
        node92.setDirectives(strSet94);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str39, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "OR" + "'", str70, "OR");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeList80);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test19937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19937");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.isConstant();
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test19938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19938");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, 15, 0);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 0, node4);
        boolean boolean7 = node6.isBlock();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = node6.getExistingIntProp(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 36");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19939");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node11 = node7.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFromForTree(node7);
        boolean boolean14 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isVarArgs();
        boolean boolean22 = node16.isIn();
        node7.addChildToFront(node16);
        node16.removeProp(48);
        com.google.javascript.rhino.Node node27 = node16.getAncestor(0);
        boolean boolean28 = node16.isUnscopedQualifiedName();
        java.lang.String str29 = node16.toString();
        com.google.javascript.rhino.Node node30 = node16.removeFirstChild();
        java.lang.String str31 = node16.toString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.wasEmptyNode();
        boolean boolean39 = node33.isLabelName();
        node33.removeProp(49);
        boolean boolean42 = node33.isCall();
        com.google.javascript.rhino.Node node43 = node16.useSourceInfoFromForTree(node33);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isTypeOf();
        boolean boolean50 = node45.isDelProp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node45, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression52);
        com.google.javascript.rhino.Node node54 = jSTypeExpression53.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(16, node43, node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR" + "'", str29, "OR");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR" + "'", str31, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression53);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test19940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19940");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node21.isDelProp();
        boolean boolean23 = node21.isInc();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = node21.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test19941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19941");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR [directives: []]\n    OR\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setItem("NUMBER 4.0 1\n");
        stringPosition12.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition12.setPositionInformation((int) '#', 44, 51, 50);
        int int25 = stringPosition12.getEndLine();
        stringPosition12.setItem("Unknown class name");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition28.setItem("NUMBER 4.0 1\n");
        stringPosition28.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition28.setPositionInformation((int) '#', 44, 51, 50);
        int int41 = stringPosition28.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition42.setItem("NUMBER 4.0 1\n");
        stringPosition42.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int50 = stringPosition42.getEndLine();
        int int51 = stringPosition42.getPositionOnStartLine();
        stringPosition42.setPositionInformation((int) ' ', 49, 51, 38);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int58 = stringPosition57.getEndLine();
        int int59 = stringPosition57.getEndLine();
        stringPosition57.setItem("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition62 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition62.setItem("NUMBER 4.0 1\n");
        stringPosition62.setItem("unknown");
        stringPosition62.setItem("(OR)");
        stringPosition62.setItem("OR \n");
        int int71 = stringPosition62.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int73 = stringPosition72.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition12, stringPosition28, stringPosition42, stringPosition57, stringPosition62, stringPosition72);
        int int75 = stringPosition42.getPositionOnStartLine();
        int int76 = stringPosition42.getPositionOnStartLine();
        int int77 = stringPosition42.getPositionOnEndLine();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 51 + "'", int25 == 51);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51 + "'", int41 == 51);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 49 + "'", int75 == 49);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 49 + "'", int76 == 49);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 38 + "'", int77 == 38);
    }

    @Test
    public void test19942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19942");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        boolean boolean17 = node10.isNew();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isReturn();
        com.google.javascript.rhino.InputId inputId24 = node19.getInputId();
        boolean boolean25 = node19.isArrayLit();
        boolean boolean26 = node19.isInc();
        boolean boolean27 = node19.isAssign();
        java.lang.String str28 = node19.getSourceFileName();
        boolean boolean29 = node19.isSetterDef();
        boolean boolean30 = node19.isGetProp();
        com.google.javascript.rhino.Node node31 = node10.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        node33.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node42.children();
        com.google.javascript.rhino.InputId inputId47 = null;
        node42.setInputId(inputId47);
        boolean boolean49 = node42.isName();
        java.lang.String str50 = node33.checkTreeEquals(node42);
        boolean boolean51 = node42.isInc();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isNot();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = node53.copyInformationFromForTree(node59);
        com.google.javascript.rhino.InputId inputId61 = node53.getInputId();
        node42.addChildrenToFront(node53);
        node53.putBooleanProp(43, true);
        boolean boolean66 = node53.isParamList();
        boolean boolean67 = node53.isInc();
        com.google.javascript.rhino.Node node68 = node19.srcrefTree(node53);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean72 = node70.getBooleanProp(1);
        com.google.javascript.rhino.Node node73 = node68.copyInformationFrom(node70);
        int int74 = node70.getLength();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str50, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(inputId61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test19943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19943");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasBaseType();
        jSDocInfo6.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getTypedefType();
        boolean boolean11 = jSDocInfo6.isNoSideEffects();
        com.google.javascript.rhino.Node node12 = jSDocInfo6.getAssociatedNode();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo6.getSuppressions();
        strSet13.clear();
        int int15 = strSet13.size();
        boolean boolean16 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean31 = strList23.containsAll((java.util.Collection<java.lang.String>) strList30);
        java.util.Spliterator<java.lang.String> strSpliterator32 = strList23.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = strList23.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet35.union(booleanLiteralSet36);
        boolean boolean38 = strList33.equals((java.lang.Object) booleanLiteralSet35);
        java.lang.Object obj39 = null;
        boolean boolean40 = strList33.equals(obj39);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node42.isReturn();
        com.google.javascript.rhino.InputId inputId47 = node42.getInputId();
        boolean boolean48 = node42.isArrayLit();
        boolean boolean49 = node42.isInc();
        boolean boolean50 = strList33.contains((java.lang.Object) node42);
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = strList33.reverse();
        boolean boolean52 = strSet13.remove((java.lang.Object) strList33);
        java.util.Iterator<java.lang.String> strItor53 = strList33.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor55 = strList33.listIterator(839028746);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (839028746) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strItor53);
    }

    @Test
    public void test19944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19944");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        node14.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node14.getAncestors();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(48, "Unknown class name", (-1), 42);
        boolean boolean26 = node25.wasEmptyNode();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        node28.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node37.children();
        com.google.javascript.rhino.InputId inputId42 = null;
        node37.setInputId(inputId42);
        boolean boolean44 = node37.isName();
        java.lang.String str45 = node28.checkTreeEquals(node37);
        boolean boolean46 = node37.isStringKey();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node52 = node50.getParent();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType59 = node54.getJSType();
        boolean boolean60 = node54.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node61 = node52.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int67 = node66.getSideEffectFlags();
        com.google.javascript.rhino.Node node68 = node54.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node70.children();
        com.google.javascript.rhino.InputId inputId75 = null;
        node70.setInputId(inputId75);
        boolean boolean77 = node70.isName();
        boolean boolean78 = node70.isFunction();
        com.google.javascript.rhino.Node node79 = node68.srcref(node70);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, node25, node37, node70, (int) (byte) 10, 49);
        boolean boolean83 = node82.isVoid();
        com.google.javascript.rhino.Node node84 = node14.useSourceInfoFromForTree(node82);
        boolean boolean85 = node14.isVar();
        boolean boolean86 = node14.isThis();
        boolean boolean87 = node14.isAnd();
        boolean boolean88 = node14.isLocalResultCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = node14.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str45, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSDocInfo89);
    }

    @Test
    public void test19945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19945");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("NUMBER 1.0 37\n");
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test19946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19946");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        java.lang.String str4 = jSDocInfo0.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test19947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19947");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        boolean boolean30 = strList13.isEmpty();
        java.lang.Object[] objArray31 = strList13.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str33 = jSDocInfo32.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = jSDocInfo32.getTemplateTypeNames();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        int int40 = node36.getCharno();
        boolean boolean41 = node36.isName();
        boolean boolean42 = node36.isNE();
        boolean boolean43 = node36.isEmpty();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        boolean boolean49 = node45.hasChildren();
        com.google.javascript.rhino.Node node50 = node36.srcrefTree(node45);
        int int51 = strList34.indexOf((java.lang.Object) node36);
        java.util.stream.Stream<java.lang.String> strStream52 = strList34.stream();
        boolean boolean53 = strList34.isEmpty();
        boolean boolean54 = strList13.containsAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean55 = strList34.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = strList34.set(6, "(OR \n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test19948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19948");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        int int10 = stringPosition0.getPositionOnStartLine();
        int int11 = stringPosition0.getStartLine();
        int int12 = stringPosition0.getStartLine();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test19949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19949");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        com.google.javascript.rhino.Node node16 = node7.copyInformationFromForTree(node10);
        jSDocInfo1.setAssociatedNode(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node10.children();
        boolean boolean19 = node10.isAssign();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, node10, 45, (int) (byte) 0);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node24.children();
        com.google.javascript.rhino.InputId inputId29 = null;
        node24.setInputId(inputId29);
        boolean boolean31 = node24.isName();
        boolean boolean32 = node24.isDo();
        boolean boolean33 = node10.isEquivalentToTyped(node24);
        boolean boolean34 = node24.isContinue();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test19950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19950");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition1.getPositionOnEndLine();
        int int10 = typePosition1.getEndLine();
        boolean boolean11 = typePosition1.hasBrackets();
        int int12 = typePosition1.getPositionOnEndLine();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node14.children();
        com.google.javascript.rhino.InputId inputId19 = null;
        node14.setInputId(inputId19);
        boolean boolean21 = node14.isName();
        node14.putIntProp((int) (byte) 10, 0);
        typePosition1.setItem(node14);
        com.google.javascript.rhino.Node node26 = typePosition1.getItem();
        com.google.javascript.rhino.Node node27 = typePosition1.getItem();
        int int28 = typePosition1.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test19951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19951");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        java.lang.String str8 = jSDocInfo0.getLendsName();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean11 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19952");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isIf();
        boolean boolean8 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node10.setStaticSourceFile(staticSourceFile13);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node25 = node23.getParent();
        com.google.javascript.rhino.Node node26 = node16.useSourceInfoFromForTree(node23);
        boolean boolean27 = node10.hasChild(node16);
        node2.addChildToBack(node16);
        boolean boolean29 = node2.isTrue();
        boolean boolean30 = node2.isInc();
        com.google.javascript.rhino.Node node31 = node2.getLastSibling();
        int int32 = node2.getSideEffectFlags();
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean47 = strList39.containsAll((java.util.Collection<java.lang.String>) strList46);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor48 = strList46.iterator();
        boolean boolean49 = strList46.isEmpty();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        int int55 = node51.getCharno();
        boolean boolean56 = strList46.equals((java.lang.Object) node51);
        java.lang.String str57 = strList46.toString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        boolean boolean63 = node59.isNot();
        boolean boolean64 = node59.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node66.addSuppression("");
        com.google.javascript.rhino.Node node69 = node59.copyInformationFromForTree(node66);
        java.lang.Object obj71 = node69.getProp(38);
        node69.setCharno(2);
        boolean boolean74 = node69.isInstanceOf();
        boolean boolean75 = strList46.equals((java.lang.Object) node69);
        boolean boolean76 = node69.isContinue();
        int int77 = node69.getSideEffectFlags();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(42, node2, node69);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str57, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test19953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19953");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        java.lang.String str41 = node36.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.children();
        boolean boolean43 = node36.isDebugger();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.isNoShadow();
        boolean boolean46 = jSDocInfo44.isNoShadow();
        boolean boolean47 = jSDocInfo44.isIdGenerator();
        java.lang.String str48 = jSDocInfo44.getVersion();
        java.util.Collection<java.lang.String> strCollection49 = jSDocInfo44.getAuthors();
        boolean boolean50 = jSDocInfo44.isNoTypeCheck();
        node36.setJSDocInfo(jSDocInfo44);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = jSDocInfo44.getVisibility();
        boolean boolean53 = jSDocInfo44.isJavaDispatch();
        java.lang.String str54 = jSDocInfo44.getVersion();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strCollection49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(visibility52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test19954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19954");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 53, 46, 39);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        com.google.javascript.rhino.Node node16 = node7.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node18.setStaticSourceFile(staticSourceFile21);
        boolean boolean23 = node18.isComma();
        node18.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.children();
        com.google.javascript.rhino.InputId inputId32 = null;
        node27.setInputId(inputId32);
        boolean boolean34 = node27.isName();
        java.lang.String str35 = node18.checkTreeEquals(node27);
        boolean boolean36 = node27.isInc();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isNot();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = node38.copyInformationFromForTree(node44);
        com.google.javascript.rhino.InputId inputId46 = node38.getInputId();
        node27.addChildrenToFront(node38);
        com.google.javascript.rhino.Node node48 = node7.useSourceInfoFromForTree(node27);
        java.lang.Object obj50 = node7.getProp(42);
        boolean boolean51 = node7.isIn();
        boolean boolean52 = node7.isStringKey();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable53 = node7.getAncestors();
        node7.setCharno((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType56 = node7.getJSType();
        boolean boolean57 = node7.isVarArgs();
        com.google.javascript.rhino.Node node58 = node3.clonePropsFrom(node7);
        boolean boolean59 = node7.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str35, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(inputId46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(ancestorIterable53);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test19955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        int int3 = jSDocInfo0.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test19956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19956");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.isNoShadow();
        boolean boolean3 = jSDocInfo1.isNoTypeCheck();
        boolean boolean4 = jSDocInfo1.isNoShadow();
        boolean boolean5 = jSDocInfo1.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node8.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node8.isComma();
        boolean boolean14 = node8.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = new com.google.javascript.rhino.JSTypeExpression(node8, "unknown");
        int int17 = node8.getChildCount();
        jSDocInfo1.setAssociatedNode(node8);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        int int24 = node20.getCharno();
        boolean boolean25 = node20.isNoSideEffectsCall();
        node20.setVarArgs(false);
        com.google.javascript.rhino.Node node28 = node8.srcrefTree(node20);
        node28.setLength(37);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(30, "OR [synthetic: 1]");
        java.lang.String str34 = node33.getSourceFileName();
        int int35 = node33.getLineno();
        com.google.javascript.rhino.Node node36 = node33.removeFirstChild();
        com.google.javascript.rhino.Node node37 = node28.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(24, node37);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test19957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19957");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        boolean boolean14 = node7.isSetterDef();
        int int16 = node7.getIntProp(8);
        boolean boolean17 = node7.isFromExterns();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node19.copyInformationFromForTree(node24);
        boolean boolean31 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.isVarArgs();
        boolean boolean39 = node33.isIn();
        node24.addChildToFront(node33);
        node33.removeProp(48);
        node33.addSuppression("OR [jsdoc_info: JSDocInfo]\n");
        boolean boolean45 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node46 = node7.clonePropsFrom(node33);
        boolean boolean47 = node33.isCatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test19958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19958");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, (-1), 42);
        node3.setVarArgs(true);
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = new com.google.javascript.rhino.JSTypeExpression(node3, "OR 0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test19959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19959");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Iterator<java.lang.String> strItor15 = strList6.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strList6.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo17.getParameterNames();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo17.getVisibility();
        java.lang.String str22 = jSDocInfo17.getDescriptionForParameter("Not declared as a type name");
        boolean boolean23 = jSDocInfo17.isOverride();
        java.lang.String str25 = jSDocInfo17.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str26 = jSDocInfo17.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo17.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList27.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor29 = strList28.listIterator();
        boolean boolean30 = strList6.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.Object[] objArray31 = strList6.toArray();
        java.lang.String str32 = strList6.toString();
        java.util.stream.Stream<java.lang.String> strStream33 = strList6.stream();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList6.replaceAll(strUnaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(visibility20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str32, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strStream33);
    }

    @Test
    public void test19960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19960");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 0);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.hasChildren();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        boolean boolean9 = node5.isTypeOf();
        boolean boolean10 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.isDelProp();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node21.setJSType(jSType24);
        java.lang.String str26 = node21.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        node28.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList36 = com.google.common.collect.ImmutableList.of(node5, node12, node21, node28);
        boolean boolean37 = node28.isFor();
        com.google.javascript.rhino.Node node38 = node28.getFirstChild();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        int int44 = node40.getCharno();
        boolean boolean45 = node40.isName();
        boolean boolean46 = node40.isNE();
        boolean boolean47 = node40.isIn();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        boolean boolean54 = node53.isDefaultCase();
        int int55 = node40.getIndexOfChild(node53);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node40.setStaticSourceFile(staticSourceFile56);
        node28.addChildToBack(node40);
        boolean boolean59 = node28.isNumber();
        boolean boolean60 = node28.isGetterDef();
        com.google.javascript.rhino.Node node61 = node28.getLastSibling();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        com.google.javascript.rhino.Node node67 = node65.getParent();
        boolean boolean68 = node67.isDefaultCase();
        boolean boolean69 = node67.isNoSideEffectsCall();
        java.lang.String str73 = node67.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasTypedefType();
        java.lang.String str76 = jSDocInfo74.toString();
        node67.setJSDocInfo(jSDocInfo74);
        com.google.javascript.rhino.Node node78 = node67.cloneTree();
        int int79 = node67.getSourcePosition();
        int int80 = node67.getType();
        com.google.javascript.rhino.Node node81 = node61.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node82 = node1.copyInformationFromForTree(node61);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR" + "'", str26, "OR");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "OR" + "'", str73, "OR");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "JSDocInfo" + "'", str76, "JSDocInfo");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test19961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19961");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        node8.setIsSyntheticBlock(false);
        boolean boolean35 = node8.isFunction();
        boolean boolean36 = node8.isRegExp();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        int int42 = node40.getType();
        com.google.javascript.rhino.InputId inputId43 = node40.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node40, "");
        com.google.javascript.rhino.Node node46 = jSTypeExpression45.getRoot();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node48.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = null;
        node48.setStaticSourceFile(staticSourceFile51);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        com.google.javascript.rhino.Node node63 = node61.getParent();
        com.google.javascript.rhino.Node node64 = node54.useSourceInfoFromForTree(node61);
        boolean boolean65 = node48.hasChild(node54);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node48.siblings();
        node46.addChildToFront(node48);
        node46.addSuppression("OR [jsdoc_info: JSDocInfo] [length: 46]");
        boolean boolean70 = node46.isDebugger();
        boolean boolean71 = node8.hasChild(node46);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNull(inputId43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str57, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test19962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19962");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("(OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n)");
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection10 = jSDocInfo0.getMarkers();
        boolean boolean11 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(markerCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19963");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        boolean boolean15 = node14.isLocalResultCall();
        java.lang.Object obj17 = node14.getProp(51);
        boolean boolean18 = node14.isWhile();
        boolean boolean19 = node14.isNot();
        node14.setVarArgs(false);
        boolean boolean22 = node14.isInstanceOf();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test19964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19964");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        boolean boolean8 = node4.isTypeOf();
        boolean boolean9 = node4.wasEmptyNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isTypeOf();
        boolean boolean16 = node11.isDelProp();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node20.setJSType(jSType23);
        java.lang.String str25 = node20.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        node27.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList35 = com.google.common.collect.ImmutableList.of(node4, node11, node20, node27);
        com.google.javascript.rhino.Node node36 = node2.copyInformationFrom(node27);
        boolean boolean37 = node2.isIn();
        int int38 = node2.getSideEffectFlags();
        node2.removeProp((int) 'a');
        boolean boolean41 = node2.isTry();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node47 = node45.getParent();
        node45.setIsSyntheticBlock(true);
        boolean boolean50 = node45.isContinue();
        java.lang.String str51 = node45.getQualifiedName();
        boolean boolean52 = node45.isSwitch();
        node45.removeProp((int) '4');
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        boolean boolean60 = node58.isLabel();
        boolean boolean61 = node58.isContinue();
        com.google.javascript.rhino.Node node62 = node58.removeFirstChild();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        int int68 = node64.getCharno();
        com.google.javascript.rhino.Node node69 = node58.useSourceInfoIfMissingFrom(node64);
        boolean boolean70 = node45.isEquivalentTo(node64);
        com.google.javascript.rhino.InputId inputId71 = null;
        node64.setInputId(inputId71);
        boolean boolean73 = node64.isNumber();
        boolean boolean74 = node64.isStringKey();
        boolean boolean75 = node64.isDec();
        com.google.javascript.rhino.Node node76 = node2.useSourceInfoIfMissingFrom(node64);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR" + "'", str25, "OR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test19965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19965");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 0);
        boolean boolean14 = node13.isGetProp();
        boolean boolean15 = node13.isAnd();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        int int21 = node17.getCharno();
        boolean boolean22 = node17.isName();
        boolean boolean23 = node17.isDefaultCase();
        boolean boolean24 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        int int30 = node26.getCharno();
        boolean boolean31 = node26.isName();
        boolean boolean32 = node26.isNE();
        boolean boolean33 = node26.isEmpty();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        java.lang.String str38 = node35.toString();
        boolean boolean39 = node35.hasChildren();
        com.google.javascript.rhino.Node node40 = node26.srcrefTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node42.setStaticSourceFile(staticSourceFile45);
        boolean boolean47 = node42.isComma();
        boolean boolean48 = node42.isBlock();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = node50.cloneNode();
        com.google.javascript.rhino.Node node52 = node42.copyInformationFromForTree(node51);
        int int53 = node51.getLength();
        int int54 = node26.getIndexOfChild(node51);
        com.google.javascript.rhino.Node node55 = node51.removeChildren();
        com.google.javascript.rhino.Node node56 = node17.clonePropsFrom(node51);
        boolean boolean57 = node51.isName();
        com.google.javascript.rhino.Node node58 = node13.useSourceInfoIfMissingFrom(node51);
        node58.setVarArgs(true);
        boolean boolean61 = node11.isEquivalentToTyped(node58);
        int int62 = node58.getSourceOffset();
        boolean boolean63 = node58.isIf();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str38, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test19966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19966");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isNoSideEffectsCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node5.children();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isTypeOf();
        boolean boolean16 = node11.isOnlyModifiesThisCall();
        boolean boolean17 = node11.isDelProp();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        node19.setStaticSourceFile(staticSourceFile22);
        boolean boolean24 = node19.isComma();
        boolean boolean25 = node19.isBlock();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node27.cloneNode();
        com.google.javascript.rhino.Node node29 = node19.copyInformationFromForTree(node28);
        node19.setType((int) '4');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        int int37 = node35.getType();
        boolean boolean38 = node35.isOptionalArg();
        com.google.javascript.rhino.Node node39 = node19.useSourceInfoFrom(node35);
        boolean boolean40 = node19.isSwitch();
        com.google.javascript.rhino.Node node41 = node19.getNext();
        boolean boolean42 = node19.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.hasBaseType();
        jSDocInfo43.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo43.getBaseType();
        java.util.Set<java.lang.String> strSet48 = jSDocInfo43.getParameterNames();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        int int54 = node50.getCharno();
        boolean boolean55 = node50.isContinue();
        boolean boolean56 = strSet48.equals((java.lang.Object) node50);
        boolean boolean57 = node50.isSetterDef();
        node50.setSourceFileForTesting("NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        boolean boolean64 = node61.isVarArgs();
        int int65 = node61.getChildCount();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isNot();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = node67.copyInformationFromForTree(node73);
        com.google.javascript.rhino.Node node75 = node61.useSourceInfoFromForTree(node73);
        node75.setCharno(16);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(29, node11, node19, node50, node75, 51, 16);
        com.google.javascript.rhino.Node node81 = node5.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node82 = node19.getLastSibling();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(47);
        // The following exception was thrown during execution in test generation
        try {
            node19.removeChild(node84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test19967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19967");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isArrayLit();
        java.lang.String str13 = node11.toString();
        boolean boolean14 = node11.isLabel();
        boolean boolean15 = node11.isDebugger();
        // The following exception was thrown during execution in test generation
        try {
            node11.setSideEffectFlags((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test19968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19968");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        boolean boolean31 = node10.isGetterDef();
        boolean boolean32 = node10.isScript();
        com.google.javascript.rhino.Node node33 = node10.getNext();
        node10.setSourceFileForTesting("(OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n)");
        boolean boolean37 = node10.getBooleanProp(7);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test19969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19969");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        java.lang.String str8 = jSDocInfo0.getLendsName();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test19970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19970");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        boolean boolean8 = node1.isName();
        boolean boolean9 = node1.isDo();
        boolean boolean10 = node1.isDec();
        boolean boolean11 = node1.isNot();
        com.google.javascript.rhino.Node node12 = node1.getFirstChild();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isNot();
        boolean boolean20 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        com.google.javascript.rhino.Node node25 = node15.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        boolean boolean33 = node27.isBlock();
        java.lang.String str34 = node27.toStringTree();
        boolean boolean35 = node27.isDec();
        node27.setWasEmptyNode(false);
        boolean boolean38 = node27.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node40.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node40.getStaticSourceFile();
        boolean boolean46 = node40.isVarArgs();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(40, node25, node27, node40);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isNot();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = node49.copyInformationFromForTree(node55);
        com.google.javascript.rhino.InputId inputId57 = node49.getInputId();
        boolean boolean58 = node49.isFromExterns();
        boolean boolean59 = node27.hasChild(node49);
        java.util.Set<java.lang.String> strSet60 = node49.getDirectives();
        node1.addChildrenToFront(node49);
        boolean boolean62 = node1.isContinue();
        boolean boolean64 = node1.getBooleanProp(40);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str34, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str43, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test19971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19971");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType14 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertNull(jSType14);
    }

    @Test
    public void test19972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19972");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = strList5.isEmpty();
        int int8 = strList5.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray9 = new com.google.javascript.rhino.JSTypeExpression[][] {};
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray10 = strList5.toArray(jSTypeExpressionArray9);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean12 = jSDocInfo11.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo11.getImplementedInterfaces();
        boolean boolean15 = jSDocInfo11.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = jSDocInfo11.getTemplateTypeNames();
        boolean boolean17 = strList16.isEmpty();
        int int19 = strList16.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray20 = new com.google.javascript.rhino.JSTypeExpression[][] {};
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray21 = strList16.toArray(jSTypeExpressionArray20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo22.getImplementedInterfaces();
        boolean boolean26 = jSDocInfo22.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo22.getTemplateTypeNames();
        boolean boolean28 = strList27.isEmpty();
        int int30 = strList27.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray31 = new com.google.javascript.rhino.JSTypeExpression[][] {};
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray32 = strList27.toArray(jSTypeExpressionArray31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo33.getImplementedInterfaces();
        boolean boolean37 = jSDocInfo33.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = jSDocInfo33.getTemplateTypeNames();
        boolean boolean39 = strList38.isEmpty();
        int int41 = strList38.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray42 = new com.google.javascript.rhino.JSTypeExpression[][] {};
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray43 = strList38.toArray(jSTypeExpressionArray42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo44.getImplementedInterfaces();
        boolean boolean48 = jSDocInfo44.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = jSDocInfo44.getTemplateTypeNames();
        boolean boolean50 = strList49.isEmpty();
        int int52 = strList49.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray53 = new com.google.javascript.rhino.JSTypeExpression[][] {};
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray54 = strList49.toArray(jSTypeExpressionArray53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList57 = jSDocInfo55.getImplementedInterfaces();
        boolean boolean59 = jSDocInfo55.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = jSDocInfo55.getTemplateTypeNames();
        boolean boolean61 = strList60.isEmpty();
        int int63 = strList60.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray64 = new com.google.javascript.rhino.JSTypeExpression[][] {};
        com.google.javascript.rhino.JSTypeExpression[][] jSTypeExpressionArray65 = strList60.toArray(jSTypeExpressionArray64);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression[][]> jSTypeExpressionArrayList66 = com.google.common.collect.ImmutableList.of(jSTypeExpressionArray9, jSTypeExpressionArray20, jSTypeExpressionArray31, jSTypeExpressionArray42, jSTypeExpressionArray54, jSTypeExpressionArray64);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression[]> jSTypeExpressionArrayList67 = com.google.common.collect.ImmutableList.of(jSTypeExpressionArray54);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionArray9);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionArray20);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionArray31);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionArray42);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionArray53);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionArray64);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray65);
        org.junit.Assert.assertNotNull(jSTypeExpressionArrayList66);
        org.junit.Assert.assertNotNull(jSTypeExpressionArrayList67);
    }

    @Test
    public void test19973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19973");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        java.util.Set<java.lang.String> strSet28 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasBaseType();
        jSDocInfo29.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo29.getBaseType();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo29.getParameterNames();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        int int40 = node36.getCharno();
        boolean boolean41 = node36.isContinue();
        boolean boolean42 = strSet34.equals((java.lang.Object) node36);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean57 = strList49.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.util.Spliterator<java.lang.String> strSpliterator58 = strList49.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = strList49.asList();
        boolean boolean60 = strSet34.contains((java.lang.Object) strList59);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        boolean boolean66 = node62.isReturn();
        com.google.javascript.rhino.InputId inputId67 = node62.getInputId();
        boolean boolean68 = node62.isAdd();
        boolean boolean69 = node62.isQuotedString();
        int int71 = node62.getIntProp((int) (byte) 1);
        boolean boolean72 = node62.isVarArgs();
        boolean boolean73 = strList59.contains((java.lang.Object) boolean72);
        boolean boolean74 = strSet28.containsAll((java.util.Collection<java.lang.String>) strList59);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        node76.addChildrenToFront(node78);
        com.google.javascript.rhino.Node node80 = node78.getParent();
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        node78.setJSType(jSType81);
        java.lang.String str83 = node78.getSourceFileName();
        boolean boolean84 = node78.hasOneChild();
        boolean boolean85 = node78.isInc();
        boolean boolean86 = node78.isVoid();
        boolean boolean88 = node78.getBooleanProp((int) (short) 10);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable89 = node78.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor90 = ancestorIterable89.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor91 = ancestorIterable89.iterator();
        boolean boolean92 = strList59.contains((java.lang.Object) ancestorIterable89);
        java.util.Spliterator<java.lang.String> strSpliterator93 = strList59.spliterator();
        int int94 = strList59.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strSpliterator58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(inputId67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(ancestorIterable89);
        org.junit.Assert.assertNotNull(nodeItor90);
        org.junit.Assert.assertNotNull(nodeItor91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSpliterator93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 6 + "'", int94 == 6);
    }

    @Test
    public void test19974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19974");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition0.setPositionInformation((int) '#', 44, 51, 50);
        int int13 = stringPosition0.getEndLine();
        int int14 = stringPosition0.getPositionOnStartLine();
        java.lang.String str15 = stringPosition0.getItem();
        int int16 = stringPosition0.getPositionOnStartLine();
        int int17 = stringPosition0.getPositionOnStartLine();
        int int18 = stringPosition0.getStartLine();
        int int19 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(0, 16383, 409600, 204841);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 44 + "'", int14 == 44);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 4.0 1\n" + "'", str15, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 44 + "'", int16 == 44);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
    }

    @Test
    public void test19975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19975");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        boolean boolean11 = node4.isEmpty();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.hasChildren();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node13);
        int int19 = strList2.indexOf((java.lang.Object) node4);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor20 = strList2.listIterator();
        java.lang.String[] strArray27 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.lang.Object[] objArray30 = strSet28.toArray();
        strSet28.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean46 = strList38.containsAll((java.util.Collection<java.lang.String>) strList45);
        int int47 = strList38.size();
        boolean boolean48 = strSet28.retainAll((java.util.Collection<java.lang.String>) strList38);
        boolean boolean49 = strList38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.isNoShadow();
        boolean boolean52 = jSDocInfo50.isNoShadow();
        boolean boolean53 = jSDocInfo50.hasModifies();
        boolean boolean54 = jSDocInfo50.isExterns();
        boolean boolean55 = jSDocInfo50.hasType();
        boolean boolean56 = jSDocInfo50.isDefine();
        java.util.Collection<java.lang.String> strCollection57 = jSDocInfo50.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = jSDocInfo50.getTemplateTypeNames();
        boolean boolean59 = strList38.containsAll((java.util.Collection<java.lang.String>) strList58);
        boolean boolean60 = strList2.containsAll((java.util.Collection<java.lang.String>) strList38);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node62.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = null;
        node62.setStaticSourceFile(staticSourceFile65);
        boolean boolean67 = node62.isComma();
        boolean boolean68 = node62.isBlock();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node71 = node70.cloneNode();
        com.google.javascript.rhino.Node node72 = node62.copyInformationFromForTree(node71);
        boolean boolean73 = node71.isUnscopedQualifiedName();
        int int74 = node71.getSourcePosition();
        boolean boolean75 = strList38.contains((java.lang.Object) node71);
        com.google.javascript.rhino.InputId inputId76 = null;
        node71.setInputId(inputId76);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(strCollection57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test19976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19976");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo7.getParameterNames();
        boolean boolean9 = jSDocInfo7.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo7.getThrownTypes();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        boolean boolean24 = node19.isDelProp();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.Node node30 = node28.getParent();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node28.setJSType(jSType31);
        java.lang.String str33 = node28.toString();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node35.setStaticSourceFile(staticSourceFile38);
        boolean boolean40 = node35.isComma();
        node35.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList43 = com.google.common.collect.ImmutableList.of(node12, node19, node28, node35);
        boolean boolean44 = node35.isComma();
        boolean boolean45 = node35.isCase();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int51 = node50.getSideEffectFlags();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node57 = node55.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str59 = jSDocInfo58.getFileOverview();
        java.lang.String str60 = jSDocInfo58.getFileOverview();
        boolean boolean61 = jSDocInfo58.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList62 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo7, (java.lang.Object) node35, (java.lang.Object) node50, (java.lang.Object) node55, (java.lang.Object) jSDocInfo58);
        node3.addChildrenToBack(node50);
        int int65 = node3.getIntProp(45);
        boolean boolean66 = node3.isAnd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder67 = node3.new FileLevelJsDocBuilder();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR" + "'", str33, "OR");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test19977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19977");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        boolean boolean8 = node6.isLabel();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo10.getParameterNames();
        boolean boolean12 = jSDocInfo10.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo10.getThrownTypes();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node22.isTypeOf();
        boolean boolean27 = node22.isDelProp();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.Node node33 = node31.getParent();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node31.setJSType(jSType34);
        java.lang.String str36 = node31.toString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node38.setStaticSourceFile(staticSourceFile41);
        boolean boolean43 = node38.isComma();
        node38.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList46 = com.google.common.collect.ImmutableList.of(node15, node22, node31, node38);
        boolean boolean47 = node38.isComma();
        boolean boolean48 = node38.isCase();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int54 = node53.getSideEffectFlags();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str62 = jSDocInfo61.getFileOverview();
        java.lang.String str63 = jSDocInfo61.getFileOverview();
        boolean boolean64 = jSDocInfo61.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList65 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo10, (java.lang.Object) node38, (java.lang.Object) node53, (java.lang.Object) node58, (java.lang.Object) jSDocInfo61);
        node6.addChildrenToBack(node53);
        boolean boolean67 = node53.isNumber();
        typePosition0.setItem(node53);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable69 = node53.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor70 = ancestorIterable69.iterator();
        java.lang.Class<?> wildcardClass71 = ancestorIterable69.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR" + "'", str36, "OR");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(ancestorIterable69);
        org.junit.Assert.assertNotNull(nodeItor70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test19978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19978");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isInterface();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(OR\n)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19979");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition2.hasBrackets();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node11.children();
        node11.putIntProp(8, (int) '4');
        boolean boolean19 = node11.isInstanceOf();
        int int20 = node11.getSourcePosition();
        typePosition2.setItem(node11);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition2);
        int int23 = typePosition2.getPositionOnStartLine();
        int int24 = typePosition2.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test19980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19980");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 53, 46, 39);
        boolean boolean4 = node3.isGetterDef();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        java.util.Set<java.lang.String> strSet6 = node5.getDirectives();
        boolean boolean7 = node5.isLabelName();
        boolean boolean8 = node5.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19981");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        boolean boolean14 = node9.isName();
        boolean boolean15 = node9.isDefaultCase();
        node1.addChildToFront(node9);
        int int17 = node1.getType();
        boolean boolean18 = node1.isName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        boolean boolean30 = node25.isIf();
        com.google.javascript.rhino.Node node31 = node22.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        node33.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node42.children();
        com.google.javascript.rhino.InputId inputId47 = null;
        node42.setInputId(inputId47);
        boolean boolean49 = node42.isName();
        java.lang.String str50 = node33.checkTreeEquals(node42);
        boolean boolean51 = node42.isInc();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isNot();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = node53.copyInformationFromForTree(node59);
        com.google.javascript.rhino.InputId inputId61 = node53.getInputId();
        node42.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node63 = node22.useSourceInfoFromForTree(node42);
        java.lang.Object obj65 = node22.getProp(42);
        boolean boolean66 = node22.isIn();
        boolean boolean67 = node22.isStringKey();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable68 = node22.getAncestors();
        node22.setCharno((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType71 = node22.getJSType();
        node22.setCharno((int) '4');
        boolean boolean74 = node22.isBreak();
        java.lang.String str75 = node22.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenToFront(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str50, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(inputId61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(ancestorIterable68);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test19982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19982");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(STRING OR)");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test19983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19983");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("OR 0 [jsdoc_info: JSDocInfo]\n");
        java.lang.String str13 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test19984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19984");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean11 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19985");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isBlock();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = node10.cloneNode();
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node11);
        boolean boolean13 = node11.isUnscopedQualifiedName();
        int int14 = node11.getSourcePosition();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(32, node11, 8, 49);
        boolean boolean18 = node11.isSyntheticBlock();
        node11.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test19986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19986");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        boolean boolean6 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isReturn();
        com.google.javascript.rhino.InputId inputId13 = node8.getInputId();
        boolean boolean14 = node8.isAdd();
        boolean boolean15 = node8.isQuotedString();
        int int17 = node8.getIntProp((int) (byte) 1);
        boolean boolean18 = node8.isVarArgs();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        boolean boolean24 = node20.isTypeOf();
        boolean boolean25 = node20.wasEmptyNode();
        boolean boolean26 = node8.isEquivalentTo(node20);
        node3.addChildToBack(node20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputId13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test19987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19987");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        jSDocInfo0.addSuppression("NUMBER 1.0 37\n");
        boolean boolean9 = jSDocInfo0.isNoShadow();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo0.getMarkers();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        int int13 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(markerCollection11);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test19988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19988");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor21 = strList12.listIterator();
        boolean boolean22 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getFileOverview();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        boolean boolean26 = strList12.contains((java.lang.Object) str25);
        java.util.stream.Stream<java.lang.String> strStream27 = strList12.stream();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        boolean boolean35 = node29.isLocalResultCall();
        boolean boolean36 = node29.isArrayLit();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        int int42 = node38.getCharno();
        boolean boolean43 = node38.isName();
        com.google.javascript.rhino.Node node44 = node29.srcrefTree(node38);
        com.google.javascript.rhino.Node node45 = node44.getNext();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node44.children();
        int int47 = strList12.indexOf((java.lang.Object) node44);
        boolean boolean48 = node44.isName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test19989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19989");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isFalse();
        boolean boolean13 = node8.isParamList();
        com.google.javascript.rhino.Node node14 = node1.useSourceInfoIfMissingFrom(node8);
        boolean boolean15 = node1.hasOneChild();
        com.google.javascript.rhino.Node node16 = node1.cloneNode();
        boolean boolean17 = node16.isScript();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test19990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19990");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node15.isDec();
        boolean boolean24 = node15.hasOneChild();
        boolean boolean25 = node15.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str27 = jSDocInfo26.getFileOverview();
        java.lang.String str28 = jSDocInfo26.getFileOverview();
        boolean boolean29 = jSDocInfo26.isConstant();
        jSDocInfo26.setDeprecated(true);
        boolean boolean32 = jSDocInfo26.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo26.getTemplateTypeNames();
        boolean boolean35 = jSDocInfo26.hasParameterType("OR");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo26.getBaseType();
        boolean boolean37 = jSDocInfo26.isNoCompile();
        node15.setJSDocInfo(jSDocInfo26);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isTypeOf();
        boolean boolean45 = node40.isOnlyModifiesThisCall();
        boolean boolean46 = node40.isOptionalArg();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node48.isTypeOf();
        boolean boolean53 = node48.wasEmptyNode();
        boolean boolean54 = node48.isLabelName();
        boolean boolean55 = node48.isDec();
        boolean boolean56 = node48.isAssignAdd();
        com.google.javascript.rhino.Node node57 = node40.srcref(node48);
        int int58 = node15.getIndexOfChild(node40);
        boolean boolean59 = node40.isHook();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test19991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19991");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "unknown");
        java.lang.Object obj10 = null;
        boolean boolean11 = jSTypeExpression9.equals(obj10);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        com.google.javascript.rhino.Node node29 = node19.useSourceInfoFromForTree(node26);
        boolean boolean30 = node13.hasChild(node19);
        node13.removeProp(44);
        boolean boolean33 = node13.isDo();
        com.google.javascript.rhino.InputId inputId34 = null;
        node13.setInputId(inputId34);
        java.lang.String str36 = node13.getQualifiedName();
        boolean boolean37 = jSTypeExpression9.equals((java.lang.Object) str36);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test19992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19992");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet7.spliterator();
        java.lang.Object[] objArray9 = strSet7.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strSet7.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(strSpliterator10);
    }

    @Test
    public void test19993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19993");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(213092, "OR [length: 45]");
        node2.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test19994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19994");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        boolean boolean14 = node7.isSetterDef();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node16.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node16.isComma();
        node16.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node25.children();
        com.google.javascript.rhino.InputId inputId30 = null;
        node25.setInputId(inputId30);
        boolean boolean32 = node25.isName();
        java.lang.String str33 = node16.checkTreeEquals(node25);
        boolean boolean34 = node25.isInc();
        com.google.javascript.rhino.Node node35 = node7.srcrefTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node7.clonePropsFrom(node37);
        com.google.javascript.rhino.Node node40 = node7.removeFirstChild();
        java.lang.String str41 = node40.getQualifiedName();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isFalse();
        boolean boolean48 = node43.isParamList();
        boolean boolean49 = node43.isQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node56.addSuppression("");
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node56.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node56.getStaticSourceFile();
        com.google.javascript.rhino.Node node62 = node51.copyInformationFromForTree(node56);
        int int63 = node62.getSideEffectFlags();
        node43.addChildrenToBack(node62);
        com.google.javascript.rhino.jstype.JSType jSType65 = node62.getJSType();
        java.lang.String str66 = node40.checkTreeEquals(node62);
        int int68 = node62.getIntProp((int) (byte) -1);
        boolean boolean69 = node62.isVoid();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str33, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str59, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test19995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19995");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        boolean boolean6 = node3.isVarArgs();
        int int7 = node3.getChildCount();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node17 = node3.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoFromForTree(node17);
        boolean boolean19 = node1.isSetterDef();
        node1.putBooleanProp(49, true);
        com.google.javascript.rhino.Node node23 = node1.cloneNode();
        boolean boolean24 = node1.isWhile();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test19996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19996");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        boolean boolean11 = jSDocInfo0.isOverride();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        int int13 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test19997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19997");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor34 = strList25.listIterator();
        int int35 = strList25.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList25.asList();
        java.lang.Object[] objArray37 = strList36.toArray();
        boolean boolean38 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList36);
        java.util.Spliterator<java.lang.String> strSpliterator39 = strList36.spliterator();
        java.util.Iterator<java.lang.String> strItor40 = strList36.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo41.getParameterNames();
        boolean boolean43 = jSDocInfo41.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = jSDocInfo41.getVisibility();
        java.lang.String str46 = jSDocInfo41.getDescriptionForParameter("Not declared as a type name");
        boolean boolean47 = jSDocInfo41.isOverride();
        java.lang.String str49 = jSDocInfo41.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str50 = jSDocInfo41.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = jSDocInfo41.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.hasBaseType();
        jSDocInfo52.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo52.getTypedefType();
        boolean boolean57 = jSDocInfo52.isNoSideEffects();
        boolean boolean59 = jSDocInfo52.hasDescriptionForParameter("JSDocInfo");
        boolean boolean60 = jSDocInfo52.isConstant();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection61 = jSDocInfo52.getTypeNodes();
        int int62 = strList51.indexOf((java.lang.Object) nodeCollection61);
        java.lang.Object[] objArray63 = strList51.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean65 = jSDocInfo64.hasTypedefType();
        java.lang.String str66 = jSDocInfo64.toString();
        boolean boolean68 = jSDocInfo64.hasParameterType("Unknown class name");
        boolean boolean69 = jSDocInfo64.isIdGenerator();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo64.getModifies();
        boolean boolean71 = strList51.contains((java.lang.Object) strSet70);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = strList36.addAll((java.util.Collection<java.lang.String>) strSet70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(visibility44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeCollection61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JSDocInfo" + "'", str66, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test19998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19998");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.wasEmptyNode();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node46.setJSType(jSType49);
        java.lang.String str51 = node46.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        boolean boolean58 = node53.isComma();
        node53.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node30, node37, node46, node53);
        boolean boolean62 = node53.isComma();
        boolean boolean63 = node7.isEquivalentToTyped(node53);
        boolean boolean64 = node7.isOnlyModifiesThisCall();
        boolean boolean65 = node7.isWith();
        boolean boolean66 = node7.isInstanceOf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test19999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19999");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.AncestorIterable> ancestorIterableList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(ancestorIterableList0);
    }

    @Test
    public void test20000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test20000");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.String str8 = node3.getSourceFileName();
        boolean boolean9 = node3.hasOneChild();
        boolean boolean10 = node3.isInc();
        boolean boolean11 = node3.isVoid();
        boolean boolean12 = node3.hasChildren();
        int int13 = node3.getSourcePosition();
        int int14 = node3.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        node17.setIsSyntheticBlock(true);
        boolean boolean22 = node17.isContinue();
        boolean boolean23 = strSet5.equals((java.lang.Object) node17);
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        boolean boolean25 = node17.isHook();
        com.google.javascript.rhino.Node node27 = node17.getAncestor(6);
        boolean boolean28 = node17.isObjectLit();
        boolean boolean29 = node17.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 10, 4);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node8.isLabel();
        boolean boolean11 = node8.isContinue();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        com.google.javascript.rhino.Node node19 = node8.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node20 = node14.getFirstChild();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean22 = node20.wasEmptyNode();
        boolean boolean23 = node20.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        java.lang.String[] strArray36 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.String[] strArray42 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray43 = strSet37.toArray((java.lang.Comparable<java.lang.String>[]) strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "NUMBER 4.0 1\n" };
        java.lang.String[] strArray60 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.String[] strArray66 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray67 = strSet61.toArray((java.lang.Comparable<java.lang.String>[]) strArray66);
        java.lang.String[] strArray70 = new java.lang.String[] { "unknown", "Not declared as a type name" };
        java.lang.String[] strArray75 = new java.lang.String[] { "OR 0 [jsdoc_info: JSDocInfo]\n", "(Named type with empty name component)", "OR", "OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n" };
        com.google.common.collect.ImmutableList<java.lang.String[]> strArrayList76 = com.google.common.collect.ImmutableList.of(strArray42, strArray46, strArray66, strArray70, strArray75);
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = com.google.common.collect.ImmutableList.of("[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]", "OR", "OR 0 [jsdoc_info: JSDocInfo]\n", "(Not declared as a type name)", "Not declared as a constructor", "", "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n", "NUMBER -1.0\n", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "NUMBER 4.0 1\n", "OR [jsdoc_info: JSDocInfo]\n", "Not declared as a constructor", strArray42);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList78 = com.google.common.collect.ImmutableList.copyOf((java.lang.Comparable<java.lang.String>[]) strArray42);
        java.lang.Comparable<java.lang.String>[] strComparableArray79 = strSet10.toArray((java.lang.Comparable<java.lang.String>[]) strArray42);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strComparableArray43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strComparableArray67);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArrayList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strComparableList78);
        org.junit.Assert.assertNotNull(strComparableArray79);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 43, 33, 33);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("(OR 0)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "((OR 0))" + "'", str1, "((OR 0))");
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int27 = strList17.lastIndexOf((java.lang.Object) 1L);
        boolean boolean28 = strList17.isEmpty();
        boolean boolean29 = strSet10.removeAll((java.util.Collection<java.lang.String>) strList17);
        java.util.stream.Stream<java.lang.String> strStream30 = strList17.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor32 = strList17.listIterator((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strStream30);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        java.util.Iterator<java.lang.String> strItor7 = strSet5.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet5.spliterator();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node10.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node10.isComma();
        boolean boolean16 = node10.isBlock();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = node18.cloneNode();
        com.google.javascript.rhino.Node node20 = node10.copyInformationFromForTree(node19);
        boolean boolean21 = node19.isUnscopedQualifiedName();
        int int22 = node19.getSourcePosition();
        java.util.Set<java.lang.String> strSet23 = node19.getDirectives();
        boolean boolean24 = strSet5.equals((java.lang.Object) strSet23);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = strSet23.size();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        java.util.Iterator<java.lang.String> strItor71 = strList10.iterator();
        java.util.Iterator<java.lang.String> strItor72 = strList10.iterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(strItor72);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = node2.cloneNode();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        boolean boolean9 = node5.isTypeOf();
        boolean boolean10 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.isDelProp();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node21.setJSType(jSType24);
        java.lang.String str26 = node21.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        node28.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList36 = com.google.common.collect.ImmutableList.of(node5, node12, node21, node28);
        com.google.javascript.rhino.Node node37 = node3.copyInformationFrom(node28);
        boolean boolean38 = node3.isIn();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(35, node3);
        com.google.javascript.rhino.Node node40 = node3.getLastSibling();
        com.google.javascript.rhino.jstype.JSType jSType41 = node40.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR" + "'", str26, "OR");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(jSType41);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean6 = jSDocInfo0.hasThisType();
        boolean boolean7 = jSDocInfo0.isDefine();
        jSDocInfo0.setLicense("(OR)");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean11 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean4 = node3.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        boolean boolean11 = node10.isDefaultCase();
        boolean boolean12 = node10.isNoSideEffectsCall();
        java.lang.String str16 = node10.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.hasTypedefType();
        java.lang.String str19 = jSDocInfo17.toString();
        node10.setJSDocInfo(jSDocInfo17);
        boolean boolean21 = node10.isGetProp();
        node3.addChildToBack(node10);
        boolean boolean23 = node10.isNot();
        boolean boolean24 = node10.isQuotedString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR" + "'", str16, "OR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        node17.setIsSyntheticBlock(true);
        boolean boolean22 = node17.isContinue();
        boolean boolean23 = strSet5.equals((java.lang.Object) node17);
        int int24 = strSet5.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isNoShadow();
        java.lang.String str27 = jSDocInfo25.getMeaning();
        com.google.javascript.rhino.Node node28 = jSDocInfo25.getAssociatedNode();
        java.lang.String str29 = jSDocInfo25.getLicense();
        java.lang.String str30 = jSDocInfo25.getSourceName();
        java.lang.String str31 = jSDocInfo25.getSourceName();
        boolean boolean32 = jSDocInfo25.isNoAlias();
        boolean boolean33 = jSDocInfo25.hasReturnType();
        boolean boolean34 = strSet5.contains((java.lang.Object) boolean33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str36 = jSDocInfo35.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = jSDocInfo35.getTemplateTypeNames();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray38 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray39 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray40 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray41 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray42 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray43 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray44 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray38, fileLevelJsDocBuilderArray39, fileLevelJsDocBuilderArray40, fileLevelJsDocBuilderArray41, fileLevelJsDocBuilderArray42, fileLevelJsDocBuilderArray43 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray45 = strList37.toArray(fileLevelJsDocBuilderArray44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray46 = strSet5.toArray(fileLevelJsDocBuilderArray44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str48 = jSDocInfo47.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = jSDocInfo47.getTemplateTypeNames();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray50 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray51 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray52 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray53 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray54 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray55 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray56 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray50, fileLevelJsDocBuilderArray51, fileLevelJsDocBuilderArray52, fileLevelJsDocBuilderArray53, fileLevelJsDocBuilderArray54, fileLevelJsDocBuilderArray55 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray57 = strList49.toArray(fileLevelJsDocBuilderArray56);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][]> fileLevelJsDocBuilderArrayList58 = com.google.common.collect.ImmutableList.of(fileLevelJsDocBuilderArray46, fileLevelJsDocBuilderArray57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray38);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray39);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray40);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray41);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray42);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray43);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray44);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray45);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray50);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray52);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray53);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray54);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray55);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray56);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray57);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArrayList58);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor17 = strList6.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean20 = ternaryValue18.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str25 = ternaryValue24.toString();
        boolean boolean27 = ternaryValue24.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue21.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue18.and(ternaryValue24);
        int int30 = strList6.indexOf((java.lang.Object) ternaryValue29);
        java.lang.String str31 = strList6.toString();
        int int32 = strList6.size();
        boolean boolean33 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo34.getParameterNames();
        boolean boolean36 = jSDocInfo34.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = jSDocInfo34.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getTypedefType();
        java.lang.String str39 = jSDocInfo34.getOriginalCommentString();
        java.lang.String str40 = jSDocInfo34.getSourceName();
        boolean boolean41 = jSDocInfo34.containsDeclaration();
        boolean boolean42 = jSDocInfo34.isNoCompile();
        int int43 = jSDocInfo34.getExtendedInterfacesCount();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = strList6.remove((java.lang.Object) int43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "unknown" + "'", str25, "unknown");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str31, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(visibility37);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isNot();
        boolean boolean17 = node12.isIf();
        com.google.javascript.rhino.Node node18 = node9.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node29.children();
        com.google.javascript.rhino.InputId inputId34 = null;
        node29.setInputId(inputId34);
        boolean boolean36 = node29.isName();
        java.lang.String str37 = node20.checkTreeEquals(node29);
        boolean boolean38 = node29.isInc();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node40.copyInformationFromForTree(node46);
        com.google.javascript.rhino.InputId inputId48 = node40.getInputId();
        node29.addChildrenToFront(node40);
        com.google.javascript.rhino.Node node50 = node9.useSourceInfoFromForTree(node29);
        java.lang.Object obj52 = node9.getProp(42);
        boolean boolean53 = node9.isIn();
        boolean boolean54 = node9.isStringKey();
        boolean boolean55 = node9.isCase();
        boolean boolean56 = node9.isThrow();
        jSDocInfo0.setAssociatedNode(node9);
        boolean boolean58 = node9.isContinue();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str37, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor21 = strList12.listIterator();
        boolean boolean22 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList12);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node33.children();
        com.google.javascript.rhino.InputId inputId38 = null;
        node33.setInputId(inputId38);
        boolean boolean40 = node33.isName();
        java.lang.String str41 = node24.checkTreeEquals(node33);
        boolean boolean42 = node33.isInc();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isNot();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = node44.copyInformationFromForTree(node50);
        com.google.javascript.rhino.InputId inputId52 = node44.getInputId();
        node33.addChildrenToFront(node44);
        boolean boolean54 = strList12.equals((java.lang.Object) node44);
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = strList12.reverse();
        int int56 = strList55.size();
        java.util.Iterator<java.lang.String> strItor57 = strList55.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = strList55.reverse();
        // The following exception was thrown during execution in test generation
        try {
            strList58.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str41, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strList58);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition0.hasBrackets();
        boolean boolean10 = typePosition0.hasBrackets();
        boolean boolean11 = typePosition0.hasBrackets();
        int int12 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node13 = typePosition0.getItem();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = new com.google.javascript.rhino.JSTypeExpression(node4, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression12);
        boolean boolean15 = jSTypeExpression12.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node16 = jSTypeExpression12.getRoot();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isNot();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = node18.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isNot();
        com.google.javascript.rhino.Node node32 = node25.useSourceInfoFrom(node27);
        boolean boolean33 = jSTypeExpression12.equals((java.lang.Object) node27);
        boolean boolean34 = node27.isCall();
        namePosition0.setItem(node27);
        com.google.javascript.rhino.Node node36 = node27.getParent();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isFalse();
        boolean boolean17 = node7.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int24 = node23.getSideEffectFlags();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node31.addSuppression("");
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node31.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node26.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(30, node23, node26, (int) '4', (int) (byte) 100);
        node40.removeProp(4);
        boolean boolean43 = node40.isNE();
        boolean boolean44 = node40.isFunction();
        com.google.javascript.rhino.Node node45 = node7.useSourceInfoFrom(node40);
        com.google.javascript.rhino.Node node46 = node45.removeFirstChild();
        int int47 = node45.getSourcePosition();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str29, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str34, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 213092 + "'", int47 == 213092);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        boolean boolean6 = node1.isVoid();
        boolean boolean7 = node1.isFor();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int13 = node12.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType26 = node21.getJSType();
        boolean boolean27 = node21.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node28 = node19.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int34 = node33.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = node21.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node37 = node12.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node38.getJSDocInfo();
        boolean boolean40 = node38.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = strList6.retainAll((java.util.Collection<java.lang.String>) strList11);
        int int14 = strList6.size();
        boolean boolean15 = strList3.containsAll((java.util.Collection<java.lang.String>) strList6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo17.getImplementedInterfaces();
        boolean boolean21 = jSDocInfo17.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = jSDocInfo17.getTemplateTypeNames();
        java.lang.String[] strArray29 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        strSet30.clear();
        boolean boolean34 = strList22.containsAll((java.util.Collection<java.lang.String>) strSet30);
        boolean boolean35 = strList6.addAll(0, (java.util.Collection<java.lang.String>) strList22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasBaseType();
        jSDocInfo36.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo36.getBaseType();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo36.getParameterNames();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        int int47 = node43.getCharno();
        boolean boolean48 = node43.isContinue();
        boolean boolean49 = strSet41.equals((java.lang.Object) node43);
        boolean boolean50 = node43.isSetterDef();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node52.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node52.isComma();
        node52.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node61.children();
        com.google.javascript.rhino.InputId inputId66 = null;
        node61.setInputId(inputId66);
        boolean boolean68 = node61.isName();
        java.lang.String str69 = node52.checkTreeEquals(node61);
        boolean boolean70 = node61.isInc();
        com.google.javascript.rhino.Node node71 = node43.srcrefTree(node61);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean74 = node73.wasEmptyNode();
        com.google.javascript.rhino.Node node75 = node43.clonePropsFrom(node73);
        boolean boolean76 = strList6.contains((java.lang.Object) node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node73.getJSDocInfo();
        boolean boolean78 = node73.isGetProp();
        int int79 = node73.getChildCount();
        java.lang.String str80 = node73.getQualifiedName();
        node73.putIntProp(15, (-1));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str69, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean12 = strList3.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean13 = strList3.isEmpty();
        boolean boolean15 = strList3.add("OR [synthetic: 1]");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node24.getParent();
        com.google.javascript.rhino.Node node27 = node17.useSourceInfoFromForTree(node24);
        boolean boolean28 = node27.isSetterDef();
        com.google.javascript.rhino.Node node29 = node27.getLastChild();
        boolean boolean30 = node27.isNoSideEffectsCall();
        node27.detachChildren();
        java.lang.String str32 = node27.getSourceFileName();
        boolean boolean33 = node27.isObjectLit();
        int int34 = strList3.indexOf((java.lang.Object) node27);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.siblings();
        int int3 = node1.getSourcePosition();
        boolean boolean4 = node1.isDefaultCase();
        boolean boolean5 = node1.isNull();
        boolean boolean6 = node1.isDec();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("((OR))");
        boolean boolean9 = node1.isEquivalentTo(node8);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node11.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node11.isComma();
        boolean boolean17 = node11.isFalse();
        boolean boolean18 = node11.isSwitch();
        node11.setSourceEncodedPosition(47);
        // The following exception was thrown during execution in test generation
        try {
            node8.removeChild(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder1 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder3 = nodeArrayBuilder1.add(nodeArray2);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder4 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node22 };
        com.google.javascript.rhino.Node[][] nodeArray29 = new com.google.javascript.rhino.Node[][] { nodeArray12, nodeArray20, nodeArray28 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder4.add(nodeArray29);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.isDelProp();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        int int44 = node40.getCharno();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node33, node40 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray45);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder47 = nodeArrayBuilder30.add(nodeArray45);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder48 = nodeArrayBuilder3.add(nodeArray45);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node57.addSuppression("");
        java.lang.String str60 = node57.toString();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        com.google.javascript.rhino.Node node66 = node64.getParent();
        com.google.javascript.rhino.Node node67 = node57.useSourceInfoFromForTree(node64);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node69.setStaticSourceFile(staticSourceFile72);
        boolean boolean74 = node69.isComma();
        node69.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node78.children();
        com.google.javascript.rhino.InputId inputId83 = null;
        node78.setInputId(inputId83);
        boolean boolean85 = node78.isName();
        java.lang.String str86 = node69.checkTreeEquals(node78);
        com.google.javascript.rhino.Node[] nodeArray87 = new com.google.javascript.rhino.Node[] { node51, node57, node78 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList88 = com.google.common.collect.ImmutableList.of(nodeArray87);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray87);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder90 = nodeArrayBuilder48.add(nodeArray87);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray87, (int) '#', 38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArrayBuilder3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArrayBuilder47);
        org.junit.Assert.assertNotNull(nodeArrayBuilder48);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str60, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str86, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray87);
        org.junit.Assert.assertNotNull(nodeList88);
        org.junit.Assert.assertNotNull(nodeArrayBuilder90);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        boolean boolean5 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.hasMoreThanOneChild();
        boolean boolean14 = node3.isNew();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        int int20 = node18.getType();
        com.google.javascript.rhino.InputId inputId21 = node18.getInputId();
        com.google.javascript.rhino.Node node22 = node3.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node18.isString();
        boolean boolean24 = node18.isUnscopedQualifiedName();
        boolean boolean25 = node18.isDo();
        // The following exception was thrown during execution in test generation
        try {
            node18.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.isInterface();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        java.lang.String str12 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str12, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        boolean boolean13 = node3.isParamList();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node3.children();
        boolean boolean16 = node3.isDo();
        com.google.javascript.rhino.Node node17 = node3.cloneNode();
        java.util.Set<java.lang.String> strSet18 = node3.getDirectives();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.isExpose();
        java.lang.String str7 = jSDocInfo0.getLicense();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isGetterDef();
        java.util.Set<java.lang.String> strSet7 = node2.getDirectives();
        boolean boolean8 = node2.isDebugger();
        com.google.javascript.rhino.Node node9 = node2.getNext();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) '4', node2, 3, 41);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean21 = node20.isRegExp();
        boolean boolean22 = node20.isName();
        com.google.javascript.rhino.Node node23 = node9.useSourceInfoFromForTree(node20);
        node20.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList13.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = strList17.subList(0, 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str22 = jSDocInfo21.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo21.getTemplateTypeNames();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        int int29 = node25.getCharno();
        boolean boolean30 = node25.isName();
        boolean boolean31 = node25.isNE();
        boolean boolean32 = node25.isEmpty();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        boolean boolean38 = node34.hasChildren();
        com.google.javascript.rhino.Node node39 = node25.srcrefTree(node34);
        int int40 = strList23.indexOf((java.lang.Object) node25);
        int int41 = strList20.lastIndexOf((java.lang.Object) node25);
        java.lang.String str42 = strList20.toString();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[OR [jsdoc_info: JSDocInfo]]" + "'", str42, "[OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isBlock();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = node10.cloneNode();
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node11);
        node2.setType((int) '4');
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        int int20 = node18.getType();
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFrom(node18);
        boolean boolean23 = node2.isSwitch();
        com.google.javascript.rhino.Node node24 = node2.getNext();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node2, 0, 4);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.hasMoreThanOneChild();
        java.lang.String str38 = node29.toString(true, true, true);
        boolean boolean39 = node29.isFunction();
        boolean boolean40 = node29.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node2.srcref(node29);
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean56 = strList48.containsAll((java.util.Collection<java.lang.String>) strList55);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor57 = strList48.listIterator();
        int int58 = strList48.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = strList48.asList();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        node61.setStaticSourceFile(staticSourceFile64);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node67.addSuppression("");
        java.lang.String str70 = node67.toString();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node72.addChildrenToFront(node74);
        com.google.javascript.rhino.Node node76 = node74.getParent();
        com.google.javascript.rhino.Node node77 = node67.useSourceInfoFromForTree(node74);
        boolean boolean78 = node61.hasChild(node67);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node80.addSuppression("");
        java.lang.String str83 = node80.toString();
        int int84 = node80.getChildCount();
        boolean boolean85 = node80.isGetProp();
        boolean boolean86 = node61.isEquivalentTo(node80);
        int int87 = strList48.indexOf((java.lang.Object) node61);
        boolean boolean88 = node61.isUnscopedQualifiedName();
        boolean boolean89 = node41.hasChild(node61);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str38, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str70, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str83, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition7.getStartLine();
        typePosition7.setPositionInformation(33, (int) '4', (int) (byte) 100, 9);
        // The following exception was thrown during execution in test generation
        try {
            typePosition7.setPositionInformation(409600, 4096, (int) '4', 213044);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 409600?end-line: 52");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(41, "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nINSTANCEOF 50\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: INSTANCEOF 50\n", 40, 204841);
        boolean boolean5 = node4.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        int int25 = node23.getType();
        com.google.javascript.rhino.InputId inputId26 = node23.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node23.setJSDocInfo(jSDocInfo27);
        com.google.javascript.rhino.Node node29 = node10.srcref(node23);
        boolean boolean30 = node10.isNoSideEffectsCall();
        boolean boolean31 = node10.isThrow();
        boolean boolean32 = node10.isTypeOf();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo6.getParameterNames();
        boolean boolean8 = jSDocInfo6.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo6.getThrownTypes();
        boolean boolean10 = jSDocInfo6.isIdGenerator();
        boolean boolean11 = jSDocInfo6.hasEnumParameterType();
        boolean boolean12 = strSet5.remove((java.lang.Object) jSDocInfo6);
        boolean boolean13 = jSDocInfo6.isExpose();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo6.getModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        node15.removeProp(48);
        com.google.javascript.rhino.Node node26 = node15.getAncestor(0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasBaseType();
        jSDocInfo27.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo27.getBaseType();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo27.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean47 = strList39.containsAll((java.util.Collection<java.lang.String>) strList46);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor48 = strList39.listIterator();
        boolean boolean49 = strSet32.containsAll((java.util.Collection<java.lang.String>) strList39);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        node51.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node60.children();
        com.google.javascript.rhino.InputId inputId65 = null;
        node60.setInputId(inputId65);
        boolean boolean67 = node60.isName();
        java.lang.String str68 = node51.checkTreeEquals(node60);
        boolean boolean69 = node60.isInc();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node71.addChildrenToFront(node73);
        boolean boolean75 = node71.isNot();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = node71.copyInformationFromForTree(node77);
        com.google.javascript.rhino.InputId inputId79 = node71.getInputId();
        node60.addChildrenToFront(node71);
        boolean boolean81 = strList39.equals((java.lang.Object) node71);
        com.google.javascript.rhino.Node node82 = node26.useSourceInfoIfMissingFrom(node71);
        // The following exception was thrown during execution in test generation
        try {
            node82.setSideEffectFlags((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str68, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(inputId79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "GETELEM", (java.lang.Comparable<java.lang.String>) "JSDocInfo", (java.lang.Comparable<java.lang.String>) "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n    ERROR\n        OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n    ERROR\n        OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n", (java.lang.Comparable<java.lang.String>) "ASSIGN_MOD  [jsdoc_info: JSDocInfo]", (java.lang.Comparable<java.lang.String>) "CALL unknown 100", (java.lang.Comparable<java.lang.String>) "OR 52\n    OR\n", (java.lang.Comparable<java.lang.String>) "OR [jsdoc_info: JSDocInfo] [synthetic: 1]", (java.lang.Comparable<java.lang.String>) "((OR 0\n))", (java.lang.Comparable<java.lang.String>) "OR [empty_block: 1]", (java.lang.Comparable<java.lang.String>) "OR 0\n", (java.lang.Comparable<java.lang.String>) "THIS 0\n");
        org.junit.Assert.assertNotNull(strComparableList11);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node11 = node9.getParent();
        com.google.javascript.rhino.Node node12 = node2.useSourceInfoFromForTree(node9);
        node12.setOptionalArg(false);
        boolean boolean15 = node12.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node24.getParent();
        com.google.javascript.rhino.Node node27 = node17.useSourceInfoFromForTree(node24);
        boolean boolean28 = node27.isSetterDef();
        com.google.javascript.rhino.Node node29 = node27.getLastChild();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(24, node12, node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node12.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node12.setJSType(jSType32);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(jSDocInfo31);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node27.setJSType(jSType61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("OR");
        node64.addSuppression("NUMBER 4.0 1\n");
        node27.addChildrenToFront(node64);
        boolean boolean68 = node27.isNE();
        boolean boolean69 = node27.isGetProp();
        node27.setIsSyntheticBlock(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean73 = jSDocInfo72.isNoShadow();
        boolean boolean74 = jSDocInfo72.hasFileOverview();
        boolean boolean75 = jSDocInfo72.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection76 = jSDocInfo72.getMarkers();
        node27.setJSDocInfo(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(markerCollection76);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        int int77 = node75.getType();
        com.google.javascript.rhino.InputId inputId78 = node75.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node75, "");
        boolean boolean81 = strList71.contains((java.lang.Object) node75);
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList71.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        int int84 = jSDocInfo83.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList85 = jSDocInfo83.getExtendedInterfaces();
        boolean boolean86 = strList71.equals((java.lang.Object) jSTypeExpressionList85);
        java.util.Iterator<java.lang.String> strItor87 = strList71.iterator();
        int int88 = strList71.size();
        java.util.Iterator<java.lang.String> strItor89 = strList71.iterator();
        java.util.ListIterator<java.lang.String> strItor90 = strList71.listIterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNull(inputId78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strItor87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertNotNull(strItor89);
        org.junit.Assert.assertNotNull(strItor90);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor27 = strList26.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList26.asList();
        java.util.Iterator<java.lang.String> strItor29 = strList26.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList43.reverse();
        boolean boolean55 = strList54.isEmpty();
        java.util.Iterator<java.lang.String> strItor56 = strList54.iterator();
        boolean boolean57 = strList26.equals((java.lang.Object) strItor56);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor58 = strList26.listIterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strItor58);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        boolean boolean11 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean8 = strList7.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.hasBaseType();
        jSDocInfo1.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo1.getBaseType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo1.getParameterNames();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        int int12 = node8.getCharno();
        boolean boolean13 = node8.isContinue();
        boolean boolean14 = strSet6.equals((java.lang.Object) node8);
        boolean boolean15 = node8.isSetterDef();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        node17.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node26.children();
        com.google.javascript.rhino.InputId inputId31 = null;
        node26.setInputId(inputId31);
        boolean boolean33 = node26.isName();
        java.lang.String str34 = node17.checkTreeEquals(node26);
        boolean boolean35 = node26.isInc();
        com.google.javascript.rhino.Node node36 = node8.srcrefTree(node26);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node38.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node38.siblings();
        boolean boolean44 = node38.isInstanceOf();
        boolean boolean45 = node38.isParamList();
        node38.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        boolean boolean54 = node51.isHook();
        java.util.Set<java.lang.String> strSet55 = node51.getDirectives();
        boolean boolean56 = node38.hasChild(node51);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isNot();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = node58.copyInformationFromForTree(node64);
        boolean boolean66 = node65.isExprResult();
        boolean boolean67 = node65.isDefaultCase();
        com.google.javascript.rhino.Node node68 = node65.getNext();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(46, node26, node38, node65, 0, (int) (short) 100);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node73.addSuppression("");
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        com.google.javascript.rhino.Node node82 = node80.getParent();
        com.google.javascript.rhino.Node node83 = node73.useSourceInfoFromForTree(node80);
        boolean boolean84 = node83.isSetterDef();
        com.google.javascript.rhino.Node node85 = node83.getLastChild();
        node83.putIntProp(42, 4095);
        int int89 = node83.getSideEffectFlags();
        com.google.javascript.rhino.Node node90 = node71.srcrefTree(node83);
        boolean boolean91 = node90.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str34, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str76, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4095 + "'", int89 == 4095);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node1.wasEmptyNode();
        java.util.Set<java.lang.String> strSet20 = node1.getDirectives();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.isHidden();
        java.lang.String str7 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR 0");
        java.lang.String str10 = jSDocInfo0.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node12.getStaticSourceFile();
        boolean boolean18 = node12.isLocalResultCall();
        boolean boolean19 = node12.isArrayLit();
        boolean boolean20 = node12.isAssign();
        boolean boolean21 = node12.isUnscopedQualifiedName();
        node12.putBooleanProp(36, true);
        boolean boolean25 = node12.isInstanceOf();
        boolean boolean26 = node12.isString();
        int int27 = node12.getType();
        boolean boolean29 = node12.getBooleanProp(38);
        jSDocInfo0.setAssociatedNode(node12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str7, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str15, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasModifies();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("OR [var_args_name: 1]");
        boolean boolean11 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isSetterDef();
        boolean boolean17 = node7.isName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        node15.removeProp(48);
        com.google.javascript.rhino.Node node26 = node15.getAncestor(0);
        node26.setSourceEncodedPositionForTree(4);
        int int29 = node26.getCharno();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        node12.setIsSyntheticBlock(true);
        boolean boolean17 = node12.isContinue();
        java.lang.String str18 = node12.getQualifiedName();
        boolean boolean19 = node12.isSetterDef();
        typePosition3.setItem(node12);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node23.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node23.getStaticSourceFile();
        boolean boolean29 = node23.isVar();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node31.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node31.setStaticSourceFile(staticSourceFile34);
        boolean boolean36 = node31.isComma();
        boolean boolean37 = node31.isBlock();
        com.google.javascript.rhino.Node node38 = node31.getLastSibling();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node40.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node40.getStaticSourceFile();
        boolean boolean46 = node40.isVarArgs();
        node31.addChildrenToFront(node40);
        node31.setSourceEncodedPositionForTree(51);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(50, node23, node31);
        boolean boolean51 = node50.isSetterDef();
        node12.addChildrenToFront(node50);
        java.lang.Appendable appendable53 = null;
        // The following exception was thrown during execution in test generation
        try {
            node12.appendStringTree(appendable53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str43, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        int int6 = node1.getIntProp(4);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node1.setJSType(jSType7);
        // The following exception was thrown during execution in test generation
        try {
            node1.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isQualifiedName();
        boolean boolean9 = node1.isFromExterns();
        com.google.javascript.rhino.Node node10 = node1.removeFirstChild();
        node10.putIntProp(1, 44);
        com.google.javascript.rhino.Node node14 = node10.getFirstChild();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node64.setStaticSourceFile(staticSourceFile66);
        int int68 = node64.getSourceOffset();
        boolean boolean69 = node64.isNumber();
        java.lang.String str73 = node64.toString(true, false, false);
        node64.putIntProp(31, 10);
        // The following exception was thrown during execution in test generation
        try {
            node64.setSideEffectFlags((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "OR" + "'", str73, "OR");
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isTypeOf();
        boolean boolean37 = node32.isDelProp();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        int int43 = node39.getCharno();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node32, node39 };
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray44);
        int int46 = strList13.indexOf((java.lang.Object) node45);
        java.util.Iterator<java.lang.String> strItor47 = strList13.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        boolean boolean59 = strList13.containsAll((java.util.Collection<java.lang.String>) strList58);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        int int61 = strList13.indexOf((java.lang.Object) booleanLiteralSet60);
        boolean boolean62 = strList13.isEmpty();
        java.util.ListIterator<java.lang.String> strItor64 = strList13.listIterator((int) (short) 1);
        java.lang.Object obj65 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = strList13.remove(obj65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strItor64);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor11 = ancestorIterable10.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor12 = ancestorIterable10.iterator();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertNotNull(nodeItor11);
        org.junit.Assert.assertNotNull(nodeItor12);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        boolean boolean2 = node1.isTry();
        java.util.Set<java.lang.String> strSet3 = node1.getDirectives();
        node1.setSourceEncodedPositionForTree(6);
        boolean boolean6 = node1.isCase();
        int int7 = node1.getSideEffectFlags();
        node1.setCharno(16);
        com.google.javascript.rhino.InputId inputId10 = null;
        node1.setInputId(inputId10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.String str8 = node2.getSourceFileName();
        boolean boolean9 = node2.isGetElem();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(31, node2, 0, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasBaseType();
        jSDocInfo13.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int17 = jSDocInfo13.getParameterCount();
        boolean boolean18 = jSDocInfo13.isNoSideEffects();
        node12.setJSDocInfo(jSDocInfo13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasBaseType();
        java.lang.String str22 = jSDocInfo20.getFileOverview();
        int int23 = jSDocInfo20.getParameterCount();
        node12.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node25 = node12.cloneNode();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isGetterDef();
        java.util.Set<java.lang.String> strSet32 = node27.getDirectives();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isFalse();
        boolean boolean39 = node34.isParamList();
        com.google.javascript.rhino.Node node40 = node27.useSourceInfoIfMissingFrom(node34);
        java.util.Set<java.lang.String> strSet41 = node34.getDirectives();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = node25.removeChildAfter(node34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(strSet41);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node11 = node7.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFromForTree(node7);
        node7.setOptionalArg(false);
        boolean boolean16 = node7.isOr();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean22 = node21.isExprResult();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        boolean boolean29 = node21.isEquivalentTo(node26);
        boolean boolean30 = node21.isString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(35, node7, node21, 3, 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        boolean boolean17 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int19 = strList6.lastIndexOf((java.lang.Object) visibility18);
        java.util.stream.Stream<java.lang.String> strStream20 = strList6.parallelStream();
        java.util.Iterator<java.lang.String> strItor21 = strList6.iterator();
        int int22 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = strList6.asList();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, 5, 51);
        boolean boolean28 = strList23.equals((java.lang.Object) 51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = jSDocInfo29.getTemplateTypeNames();
        int int32 = strList31.size();
        boolean boolean33 = strList31.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = strList23.addAll((java.util.Collection<java.lang.String>) strList31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isArrayLit();
        boolean boolean6 = node3.isTrue();
        boolean boolean7 = node3.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isAssign();
        boolean boolean11 = node1.isNot();
        node1.putIntProp(1, 4095);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node3.addChildrenToFront(node5);
        boolean boolean7 = node3.isNot();
        boolean boolean8 = node3.isDefaultCase();
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        int int15 = node11.getCharno();
        boolean boolean16 = node11.isName();
        boolean boolean17 = node11.isNE();
        boolean boolean18 = node11.isIn();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        boolean boolean25 = node24.isDefaultCase();
        int int26 = node11.getIndexOfChild(node24);
        boolean boolean27 = node24.isLabelName();
        boolean boolean28 = node3.isEquivalentTo(node24);
        boolean boolean29 = node24.isTypeOf();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean34 = node33.isName();
        node33.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 10);
        com.google.javascript.rhino.Node node40 = node39.cloneNode();
        boolean boolean41 = node40.isIf();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isNot();
        boolean boolean48 = node43.isIf();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        boolean boolean51 = node50.isParamList();
        com.google.javascript.rhino.Node node52 = node43.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = node54.cloneNode();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        boolean boolean61 = node57.isTypeOf();
        boolean boolean62 = node57.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        boolean boolean68 = node64.isTypeOf();
        boolean boolean69 = node64.isDelProp();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node71.addChildrenToFront(node73);
        com.google.javascript.rhino.Node node75 = node73.getParent();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node73.setJSType(jSType76);
        java.lang.String str78 = node73.toString();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node80.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile83 = null;
        node80.setStaticSourceFile(staticSourceFile83);
        boolean boolean85 = node80.isComma();
        node80.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList88 = com.google.common.collect.ImmutableList.of(node57, node64, node73, node80);
        com.google.javascript.rhino.Node node89 = node55.copyInformationFrom(node80);
        node89.putIntProp((int) ' ', 45);
        boolean boolean93 = node89.isGetProp();
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(12, node24, node40, node43, node89, (int) (short) 1, (int) (short) 100);
        boolean boolean97 = node24.isOr();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node(33, node24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "OR" + "'", str78, "OR");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(nodeList88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(43, 29, 35);
        node3.removeProp(24);
        boolean boolean7 = node3.getBooleanProp(12);
        node3.setLineno((-1));
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList18 = com.google.common.collect.ImmutableList.of(typePosition10, typePosition11, typePosition12, typePosition13, typePosition14, typePosition15, typePosition16, typePosition17);
        int int19 = typePosition11.getPositionOnStartLine();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node25 = node23.getParent();
        node23.setIsSyntheticBlock(true);
        boolean boolean28 = node23.isContinue();
        boolean boolean29 = node23.isParamList();
        node23.setSourceEncodedPositionForTree(54);
        boolean boolean32 = node23.isCall();
        boolean boolean33 = node23.isVarArgs();
        boolean boolean34 = node23.isNull();
        boolean boolean35 = node23.isThis();
        typePosition11.setItem(node23);
        boolean boolean37 = node23.isSwitch();
        com.google.javascript.rhino.Node node38 = node3.srcrefTree(node23);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node23.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(staticSourceFile39);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isVarArgs();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        int int15 = node12.getLength();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        node12.addChildrenToFront(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node12.getJSDocInfo();
        boolean boolean22 = node12.isName();
        node1.putProp(100, (java.lang.Object) node12);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node25.setStaticSourceFile(staticSourceFile28);
        boolean boolean30 = node25.isComma();
        boolean boolean31 = node25.isBlock();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = node33.cloneNode();
        com.google.javascript.rhino.Node node35 = node25.copyInformationFromForTree(node34);
        boolean boolean36 = node34.isUnscopedQualifiedName();
        node1.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node40.setStaticSourceFile(staticSourceFile43);
        boolean boolean45 = node40.isComma();
        boolean boolean46 = node40.isBlock();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = node48.cloneNode();
        com.google.javascript.rhino.Node node50 = node40.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) '4');
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node50, node52);
        com.google.javascript.rhino.Node node54 = node34.copyInformationFrom(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node52.children();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet10.stream();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType24 = node19.getJSType();
        boolean boolean25 = node19.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node26 = node17.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int32 = node31.getSideEffectFlags();
        com.google.javascript.rhino.Node node33 = node19.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node31.getJsDocBuilderForNode();
        boolean boolean35 = node31.isBreak();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node31.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node31.getJSDocInfo();
        boolean boolean38 = node31.isString();
        boolean boolean39 = strSet10.contains((java.lang.Object) node31);
        com.google.javascript.rhino.Node node40 = node31.getNext();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strList2.retainAll((java.util.Collection<java.lang.String>) strList7);
        int int10 = strList2.size();
        java.lang.String[] strArray12 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strList13.isEmpty();
        boolean boolean16 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean31 = strList23.containsAll((java.util.Collection<java.lang.String>) strList30);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor32 = strList23.listIterator();
        int int33 = strList23.size();
        boolean boolean34 = strList23.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int36 = strList23.lastIndexOf((java.lang.Object) visibility35);
        boolean boolean37 = strList2.addAll((java.util.Collection<java.lang.String>) strList23);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isTypeOf();
        boolean boolean44 = node39.wasEmptyNode();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.isDelProp();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node57 = node55.getParent();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node55.setJSType(jSType58);
        java.lang.String str60 = node55.toString();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node62.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = null;
        node62.setStaticSourceFile(staticSourceFile65);
        boolean boolean67 = node62.isComma();
        node62.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList70 = com.google.common.collect.ImmutableList.of(node39, node46, node55, node62);
        boolean boolean72 = node55.getBooleanProp(41);
        com.google.javascript.rhino.Node node73 = node55.removeFirstChild();
        boolean boolean74 = strList2.equals((java.lang.Object) node73);
        java.lang.Object[] objArray75 = strList2.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.hasBaseType();
        java.lang.String str78 = jSDocInfo76.getFileOverview();
        int int79 = jSDocInfo76.getParameterCount();
        boolean boolean80 = jSDocInfo76.isConstant();
        java.lang.String str81 = jSDocInfo76.getSourceName();
        boolean boolean82 = jSDocInfo76.isImplicitCast();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo76.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator84 = strSet83.spliterator();
        boolean boolean85 = strList2.addAll((java.util.Collection<java.lang.String>) strSet83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = strList2.set(24, "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR 37\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR 37\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 24, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR" + "'", str60, "OR");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strSpliterator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition7.getPositionOnEndLine();
        com.google.javascript.rhino.Node node10 = typePosition7.getItem();
        int int11 = typePosition7.getPositionOnStartLine();
        com.google.javascript.rhino.Node node12 = typePosition7.getItem();
        boolean boolean13 = typePosition7.hasBrackets();
        int int14 = typePosition7.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(30, "OR [synthetic: 1]");
        java.lang.String str4 = node3.getSourceFileName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(42, 0, (int) (byte) 1);
        boolean boolean9 = node8.isDec();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node8.setStaticSourceFile(staticSourceFile10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(52, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", 30, (int) (byte) 10);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 1, node3, node8, node16, 10, 54);
        int int20 = node19.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("JSDocInfo");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strSet9.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSpliterator10);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        boolean boolean11 = jSDocInfo0.isHidden();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getParameterType("(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)");
        boolean boolean16 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray19 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean29 = strList20.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean30 = strList20.isEmpty();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strList33.retainAll((java.util.Collection<java.lang.String>) strList38);
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean55 = strList47.containsAll((java.util.Collection<java.lang.String>) strList54);
        java.lang.String[] strArray57 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        boolean boolean79 = strList72.retainAll((java.util.Collection<java.lang.String>) strList77);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList80 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList16, (java.util.List<java.lang.String>) strList20, (java.util.List<java.lang.String>) strList38, (java.util.List<java.lang.String>) strList47, (java.util.List<java.lang.String>) strList58, (java.util.List<java.lang.String>) strList62, (java.util.List<java.lang.String>) strList72);
        boolean boolean81 = strSet7.removeAll((java.util.Collection<java.lang.String>) strList38);
        java.util.Iterator<java.lang.String> strItor82 = strSet7.iterator();
        java.util.stream.Stream<java.lang.String> strStream83 = strSet7.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str85 = jSDocInfo84.getFileOverview();
        java.lang.String str86 = jSDocInfo84.getFileOverview();
        boolean boolean87 = jSDocInfo84.isConstant();
        jSDocInfo84.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo84.setVisibility(visibility90);
        java.util.Set<java.lang.String> strSet92 = jSDocInfo84.getParameterNames();
        int int93 = strSet92.size();
        boolean boolean94 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet92);
        java.lang.Class<?> wildcardClass95 = strSet92.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strListList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strItor82);
        org.junit.Assert.assertNotNull(strStream83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isVarArgs();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        int int15 = node12.getLength();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        node12.addChildrenToFront(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node12.getJSDocInfo();
        boolean boolean22 = node12.isName();
        node1.putProp(100, (java.lang.Object) node12);
        java.util.Set<java.lang.String> strSet24 = node1.getDirectives();
        boolean boolean25 = node1.isSetterDef();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isNot();
        boolean boolean32 = node27.isDefaultCase();
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        int int39 = node35.getCharno();
        boolean boolean40 = node35.isName();
        boolean boolean41 = node35.isNE();
        boolean boolean42 = node35.isIn();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        boolean boolean49 = node48.isDefaultCase();
        int int50 = node35.getIndexOfChild(node48);
        boolean boolean51 = node48.isLabelName();
        boolean boolean52 = node27.isEquivalentTo(node48);
        boolean boolean53 = node48.isTypeOf();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean58 = node57.isName();
        node57.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node61 = node48.useSourceInfoIfMissingFrom(node57);
        boolean boolean62 = node48.isDefaultCase();
        boolean boolean63 = node48.isQualifiedName();
        java.lang.String str67 = node48.toString(true, false, false);
        boolean boolean68 = node48.isInc();
        node1.addChildrenToFront(node48);
        boolean boolean70 = node1.isInc();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR 52" + "'", str67, "OR 52");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isNoSideEffects();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.isExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        boolean boolean36 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isVarArgs();
        boolean boolean44 = node38.isIn();
        node29.addChildToFront(node38);
        node38.removeProp(48);
        boolean boolean48 = node38.isAssign();
        boolean boolean49 = node38.isTrue();
        boolean boolean50 = node6.isEquivalentToTyped(node38);
        int int51 = node38.getSourceOffset();
        boolean boolean52 = node38.isCase();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(6, (int) (short) 10, 50);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        com.google.javascript.rhino.Node node62 = node60.getParent();
        boolean boolean63 = node62.isDefaultCase();
        boolean boolean64 = node62.isNoSideEffectsCall();
        boolean boolean65 = node62.isNew();
        com.google.javascript.rhino.Node node66 = node56.copyInformationFromForTree(node62);
        boolean boolean67 = node38.hasChild(node66);
        node38.setLineno(37);
        int int70 = node38.getSourceOffset();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        boolean boolean16 = node15.isFunction();
        int int17 = node15.getCharno();
        java.lang.Class<?> wildcardClass18 = node15.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor17 = strList6.iterator();
        boolean boolean18 = strList6.isEmpty();
        java.lang.Object[] objArray19 = strList6.toArray();
        int int20 = strList6.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = strList6.set(15, "Node tree inequality:\nTree1:\nOR [synthetic: 1]\n    OR\n\n\nTree2:\nDIV (((OR [jsdoc_info: JSDocInfo] [length: 46])))\n\n\nSubtree1: OR [synthetic: 1]\n    OR\n\n\nSubtree2: DIV (((OR [jsdoc_info: JSDocInfo] [length: 46])))\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        boolean boolean8 = node1.isNoSideEffectsCall();
        boolean boolean9 = node1.isWith();
        java.util.Set<java.lang.String> strSet10 = node1.getDirectives();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node1.new FileLevelJsDocBuilder();
        boolean boolean12 = node1.isGetterDef();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (short) 1, 37, 0);
        boolean boolean17 = node16.isName();
        boolean boolean18 = node1.hasChild(node16);
        java.lang.Appendable appendable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node1.isQuotedString();
        boolean boolean34 = node1.isNumber();
        boolean boolean35 = node1.isNoSideEffectsCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str37 = jSDocInfo36.getFileOverview();
        java.lang.String str38 = jSDocInfo36.getFileOverview();
        boolean boolean39 = jSDocInfo36.isConstant();
        jSDocInfo36.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo36.setVisibility(visibility42);
        java.util.Set<java.lang.String> strSet44 = jSDocInfo36.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet44.spliterator();
        node1.setDirectives(strSet44);
        boolean boolean47 = node1.isVar();
        boolean boolean48 = node1.isParamList();
        boolean boolean49 = node1.isParamList();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.getJsDocBuilderForNode();
        boolean boolean53 = node33.hasOneChild();
        com.google.javascript.rhino.Node node54 = node33.cloneTree();
        boolean boolean55 = node33.isParamList();
        boolean boolean56 = node33.isAnd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node33.new FileLevelJsDocBuilder();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isGetProp();
        boolean boolean14 = node11.isNumber();
        node11.addSuppression("OR 0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isStringKey();
        boolean boolean8 = node5.isScript();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node9 = node5.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.InputId inputId19 = node1.getInputId();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int26 = node25.getSideEffectFlags();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node28.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(30, node25, node28, (int) '4', (int) (byte) 100);
        boolean boolean43 = node1.isEquivalentToTyped(node25);
        boolean boolean44 = node1.isScript();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isFalse();
        boolean boolean51 = node46.isOr();
        com.google.javascript.rhino.Node node52 = node1.copyInformationFromForTree(node46);
        // The following exception was thrown during execution in test generation
        try {
            node52.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder17 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node19 };
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node31 = node27.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node27.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] { node27 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        java.lang.String str38 = node35.toString();
        com.google.javascript.rhino.Node node39 = node35.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node[][] nodeArray42 = new com.google.javascript.rhino.Node[][] { nodeArray25, nodeArray33, nodeArray41 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder43 = nodeArrayBuilder17.add(nodeArray42);
        int int44 = strList6.lastIndexOf((java.lang.Object) nodeArray42);
        java.lang.String[] strArray47 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        boolean boolean55 = node51.isTypeOf();
        boolean boolean56 = node51.wasEmptyNode();
        int int57 = strList48.indexOf((java.lang.Object) boolean56);
        java.lang.Object[] objArray58 = strList48.toArray();
        int int59 = strList6.lastIndexOf((java.lang.Object) strList48);
        int int60 = strList48.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = strList48.get(131072);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 131072, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str30, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str38, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArrayBuilder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder3 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] { node5 };
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node13.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] { node13 };
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] { node21 };
        com.google.javascript.rhino.Node[][] nodeArray28 = new com.google.javascript.rhino.Node[][] { nodeArray11, nodeArray19, nodeArray27 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder29 = nodeArrayBuilder3.add(nodeArray28);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder32 = nodeArrayBuilder30.add(nodeArray31);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder33 = nodeArrayBuilder29.add(nodeArray31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(4095, nodeArray31);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(35, nodeArray31, 31, 42);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(15, nodeArray31, 48, 45);
        boolean boolean41 = node40.isEmpty();
        boolean boolean42 = node40.isAnd();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArrayBuilder29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArrayBuilder32);
        org.junit.Assert.assertNotNull(nodeArrayBuilder33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4096, "Unknown class name");
        boolean boolean3 = node2.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility7);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("(OR [synthetic: 1])");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean28 = strList20.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList20.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList20.asList();
        boolean boolean31 = strSet5.contains((java.lang.Object) strList30);
        boolean boolean32 = strList30.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor33 = strList30.iterator();
        boolean boolean34 = strList30.isEmpty();
        boolean boolean35 = strList30.isEmpty();
        java.lang.Object[] objArray36 = strList30.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = strList30.add("NUMBER 40.0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node11 = node7.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node7.getStaticSourceFile();
        boolean boolean13 = node7.isLocalResultCall();
        boolean boolean14 = node7.isArrayLit();
        boolean boolean15 = node7.isAssign();
        boolean boolean16 = node7.isAssign();
        boolean boolean17 = node7.isReturn();
        com.google.javascript.rhino.Node node18 = node1.clonePropsFrom(node7);
        boolean boolean19 = node1.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        node3.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        com.google.javascript.rhino.Node node29 = node19.useSourceInfoFromForTree(node26);
        boolean boolean30 = node13.hasChild(node19);
        boolean boolean31 = node13.isStringKey();
        com.google.javascript.rhino.Node node32 = node3.useSourceInfoFromForTree(node13);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        com.google.javascript.rhino.Node node37 = node32.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(43, "NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node45.isLabel();
        boolean boolean48 = node45.isContinue();
        node45.setVarArgs(false);
        boolean boolean51 = node45.isVoid();
        com.google.javascript.rhino.Node node52 = node41.copyInformationFrom(node45);
        boolean boolean53 = node38.isEquivalentToTyped(node41);
        boolean boolean54 = node38.hasChildren();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = com.google.common.collect.ImmutableList.of("JSDocInfo", "GETELEM", "NUMBER -1.0\n", "Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n", "NUMBER 1.0 37\n", "", "OR\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "", "(OR \n)", "OR\n    OR\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray21 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean31 = strList22.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean32 = strList22.isEmpty();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        boolean boolean42 = strList35.retainAll((java.util.Collection<java.lang.String>) strList40);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean57 = strList49.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.lang.String[] strArray59 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        boolean boolean71 = strList64.retainAll((java.util.Collection<java.lang.String>) strList69);
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        boolean boolean81 = strList74.retainAll((java.util.Collection<java.lang.String>) strList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList82 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList18, (java.util.List<java.lang.String>) strList22, (java.util.List<java.lang.String>) strList40, (java.util.List<java.lang.String>) strList49, (java.util.List<java.lang.String>) strList60, (java.util.List<java.lang.String>) strList64, (java.util.List<java.lang.String>) strList74);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        int int87 = strList18.indexOf((java.lang.Object) '4');
        java.util.Spliterator<java.lang.String> strSpliterator88 = strList18.spliterator();
        boolean boolean89 = strList11.contains((java.lang.Object) strSpliterator88);
        java.lang.String str90 = strList11.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList91 = strList11.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = strList11.set(51, "OR [synthetic: 1]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strListList82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[JSDocInfo, GETELEM, NUMBER -1.0\n, Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n, NUMBER 1.0 37\n, , OR\n, OR 0 [jsdoc_info: JSDocInfo]\n, , (OR \n), OR\n    OR\n]" + "'", str90, "[JSDocInfo, GETELEM, NUMBER -1.0\n, Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n, NUMBER 1.0 37\n, , OR\n, OR 0 [jsdoc_info: JSDocInfo]\n, , (OR \n), OR\n    OR\n]");
        org.junit.Assert.assertNotNull(strList91);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        boolean boolean12 = node10.isUnscopedQualifiedName();
        int int13 = node10.getSourcePosition();
        boolean boolean14 = node10.isInstanceOf();
        node10.setOptionalArg(true);
        boolean boolean17 = node10.isWhile();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isBlock();
        java.lang.String str21 = node14.toStringTree();
        boolean boolean22 = node14.isDec();
        node14.setWasEmptyNode(false);
        boolean boolean25 = node14.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node31 = node27.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node27.getStaticSourceFile();
        boolean boolean33 = node27.isVarArgs();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(40, node12, node14, node27);
        com.google.javascript.rhino.Node node35 = node14.detachFromParent();
        java.lang.Appendable appendable36 = null;
        // The following exception was thrown during execution in test generation
        try {
            node35.appendStringTree(appendable36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str21, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str30, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        node8.putIntProp((int) (short) 0, 38);
        node4.addChildToBack(node8);
        boolean boolean16 = node8.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isNot();
        boolean boolean23 = node18.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        com.google.javascript.rhino.Node node28 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node29 = node8.srcref(node25);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isTypeOf();
        boolean boolean36 = node31.wasEmptyNode();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isDelProp();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node49 = node47.getParent();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node47.setJSType(jSType50);
        java.lang.String str52 = node47.toString();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        node54.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList62 = com.google.common.collect.ImmutableList.of(node31, node38, node47, node54);
        boolean boolean63 = node54.isComma();
        boolean boolean64 = node8.isEquivalentToTyped(node54);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        node68.setIsSyntheticBlock(true);
        boolean boolean73 = node68.isContinue();
        java.lang.String str74 = node68.getQualifiedName();
        node68.putBooleanProp(1, false);
        com.google.javascript.rhino.Node node78 = node54.useSourceInfoIfMissingFromForTree(node68);
        boolean boolean79 = node78.isBlock();
        boolean boolean80 = node78.isDefaultCase();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(1, node78, 43, 53);
        int int85 = node78.getIntProp(15);
        node78.setLineno((int) ' ');
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR" + "'", str52, "OR");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        boolean boolean15 = node14.isLocalResultCall();
        java.lang.Object obj17 = node14.getProp(51);
        boolean boolean18 = node14.isWhile();
        boolean boolean19 = node14.isNot();
        java.lang.Appendable appendable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            node14.appendStringTree(appendable20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 1, 31, 0);
        boolean boolean4 = node3.isFunction();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        java.lang.String str52 = node44.getQualifiedName();
        boolean boolean53 = node44.isFunction();
        boolean boolean54 = node44.isReturn();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        boolean boolean16 = node6.hasMoreThanOneChild();
        boolean boolean17 = node6.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node6);
        boolean boolean19 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        boolean boolean19 = node7.isNot();
        boolean boolean20 = node7.isBlock();
        boolean boolean21 = node7.isVarArgs();
        com.google.javascript.rhino.Node node22 = node7.getParent();
        // The following exception was thrown during execution in test generation
        try {
            node22.setLineno(31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor34 = strList25.listIterator();
        int int35 = strList25.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList25.asList();
        java.lang.Object[] objArray37 = strList36.toArray();
        boolean boolean38 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList36);
        java.util.Iterator<java.lang.String> strItor39 = strList36.iterator();
        boolean boolean40 = strList36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasBaseType();
        jSDocInfo41.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo41.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection46 = jSDocInfo41.getTypeNodes();
        boolean boolean47 = jSDocInfo41.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo41.getImplementedInterfaces();
        boolean boolean49 = strList36.equals((java.lang.Object) jSTypeExpressionList48);
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean64 = strList56.containsAll((java.util.Collection<java.lang.String>) strList63);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor65 = strList63.iterator();
        boolean boolean66 = strList63.isEmpty();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node68.addChildrenToFront(node70);
        int int72 = node68.getCharno();
        boolean boolean73 = strList63.equals((java.lang.Object) node68);
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = strList63.reverse();
        java.lang.String str75 = strList63.toString();
        boolean boolean76 = strList36.containsAll((java.util.Collection<java.lang.String>) strList63);
        java.util.Iterator<java.lang.String> strItor77 = strList36.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = strList36.add("(Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertNotNull(nodeCollection46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str75, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strItor77);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo0.getType();
        boolean boolean29 = jSDocInfo0.isExterns();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean32 = jSDocInfo31.hasBaseType();
        jSDocInfo31.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo31.getBaseType();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo31.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean51 = strList43.containsAll((java.util.Collection<java.lang.String>) strList50);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor52 = strList43.listIterator();
        boolean boolean53 = strSet36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor54 = strList43.listIterator();
        boolean boolean55 = strSet30.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean70 = strList62.containsAll((java.util.Collection<java.lang.String>) strList69);
        int int72 = strList62.lastIndexOf((java.lang.Object) 1L);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 1.0f);
        int int75 = strList62.lastIndexOf((java.lang.Object) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = strList43.retainAll((java.util.Collection<java.lang.String>) strList62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder2 = nodeArrayBuilder0.add(nodeArray1);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList3 = nodeArrayBuilder2.build();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean18 = strList10.containsAll((java.util.Collection<java.lang.String>) strList17);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor19 = strList10.listIterator();
        int int20 = strList10.size();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder21 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node23.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] { node23 };
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node31.addSuppression("");
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node31.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node31 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node39.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node39 };
        com.google.javascript.rhino.Node[][] nodeArray46 = new com.google.javascript.rhino.Node[][] { nodeArray29, nodeArray37, nodeArray45 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder47 = nodeArrayBuilder21.add(nodeArray46);
        int int48 = strList10.lastIndexOf((java.lang.Object) nodeArray46);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder49 = nodeArrayBuilder2.add(nodeArray46);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder52 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node58 = node54.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node54.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] { node54 };
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node62.addSuppression("");
        java.lang.String str65 = node62.toString();
        com.google.javascript.rhino.Node node66 = node62.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node62.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node62 };
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node70.addSuppression("");
        java.lang.String str73 = node70.toString();
        com.google.javascript.rhino.Node node74 = node70.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node70.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node70 };
        com.google.javascript.rhino.Node[][] nodeArray77 = new com.google.javascript.rhino.Node[][] { nodeArray60, nodeArray68, nodeArray76 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder78 = nodeArrayBuilder52.add(nodeArray77);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder79 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder81 = nodeArrayBuilder79.add(nodeArray80);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder82 = nodeArrayBuilder78.add(nodeArray80);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(4095, nodeArray80);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(35, nodeArray80, 31, 42);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder87 = nodeArrayBuilder2.add(nodeArray80);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList88 = nodeArrayBuilder87.build();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArrayBuilder2);
        org.junit.Assert.assertNotNull(nodeArrayList3);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str34, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArrayBuilder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(nodeArrayBuilder49);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str57, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str65, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str73, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(staticSourceFile75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(nodeArrayBuilder78);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(nodeArrayBuilder81);
        org.junit.Assert.assertNotNull(nodeArrayBuilder82);
        org.junit.Assert.assertNotNull(nodeArrayBuilder87);
        org.junit.Assert.assertNotNull(nodeArrayList88);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        boolean boolean29 = node24.isHook();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = new com.google.javascript.rhino.JSTypeExpression(node24, "OR\n    OR\n");
        boolean boolean32 = jSTypeExpression31.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression31);
        com.google.javascript.rhino.Node node34 = jSTypeExpression31.getRoot();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node36.setStaticSourceFile(staticSourceFile39);
        boolean boolean41 = node36.hasMoreThanOneChild();
        boolean boolean42 = node36.isFunction();
        com.google.javascript.rhino.Node node43 = node36.getFirstChild();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("OR\n", 24, 35);
        node47.setLength((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            node34.addChildrenAfter(node36, node47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isDefaultCase();
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        boolean boolean16 = node10.isNE();
        boolean boolean17 = node10.isIn();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        boolean boolean24 = node23.isDefaultCase();
        int int25 = node10.getIndexOfChild(node23);
        boolean boolean26 = node23.isLabelName();
        boolean boolean27 = node2.isEquivalentTo(node23);
        boolean boolean28 = node23.isTypeOf();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean33 = node32.isName();
        node32.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 10);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        boolean boolean40 = node39.isIf();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node42.isNot();
        boolean boolean47 = node42.isIf();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        boolean boolean50 = node49.isParamList();
        com.google.javascript.rhino.Node node51 = node42.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = node53.cloneNode();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        boolean boolean60 = node56.isTypeOf();
        boolean boolean61 = node56.wasEmptyNode();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        boolean boolean67 = node63.isTypeOf();
        boolean boolean68 = node63.isDelProp();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        com.google.javascript.rhino.Node node74 = node72.getParent();
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node72.setJSType(jSType75);
        java.lang.String str77 = node72.toString();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node79.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = null;
        node79.setStaticSourceFile(staticSourceFile82);
        boolean boolean84 = node79.isComma();
        node79.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList87 = com.google.common.collect.ImmutableList.of(node56, node63, node72, node79);
        com.google.javascript.rhino.Node node88 = node54.copyInformationFrom(node79);
        node88.putIntProp((int) ' ', 45);
        boolean boolean92 = node88.isGetProp();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(12, node23, node39, node42, node88, (int) (short) 1, (int) (short) 100);
        int int96 = node23.getSourcePosition();
        java.lang.String str97 = node23.getQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "OR" + "'", str77, "OR");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(nodeList87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 213044 + "'", int96 == 213044);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags6.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int9 = sideEffectFlags8.valueOf();
        sideEffectFlags8.clearSideEffectFlags();
        sideEffectFlags8.setThrows();
        sideEffectFlags8.setThrows();
        sideEffectFlags8.clearAllFlags();
        sideEffectFlags8.clearSideEffectFlags();
        sideEffectFlags8.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags17 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags17.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags20 = new com.google.javascript.rhino.Node.SideEffectFlags(53);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags21 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int22 = sideEffectFlags21.valueOf();
        sideEffectFlags21.clearSideEffectFlags();
        sideEffectFlags21.setThrows();
        sideEffectFlags21.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags27 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags27.setAllFlags();
        sideEffectFlags27.setThrows();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList30 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags6, sideEffectFlags8, sideEffectFlags17, sideEffectFlags20, sideEffectFlags21, sideEffectFlags27);
        int int31 = sideEffectFlags6.valueOf();
        sideEffectFlags6.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition1.getPositionOnEndLine();
        int int10 = typePosition1.getEndLine();
        boolean boolean11 = typePosition1.hasBrackets();
        int int12 = typePosition1.getPositionOnEndLine();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node14.children();
        com.google.javascript.rhino.InputId inputId19 = null;
        node14.setInputId(inputId19);
        boolean boolean21 = node14.isName();
        node14.putIntProp((int) (byte) 10, 0);
        typePosition1.setItem(node14);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        node27.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node36.children();
        com.google.javascript.rhino.InputId inputId41 = null;
        node36.setInputId(inputId41);
        boolean boolean43 = node36.isName();
        java.lang.String str44 = node27.checkTreeEquals(node36);
        boolean boolean45 = node36.isStringKey();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        int int51 = node49.getType();
        com.google.javascript.rhino.InputId inputId52 = node49.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node49.setJSDocInfo(jSDocInfo53);
        com.google.javascript.rhino.Node node55 = node36.srcref(node49);
        boolean boolean56 = node49.isReturn();
        com.google.javascript.rhino.Node node57 = node14.useSourceInfoFromForTree(node49);
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str44, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.lang.Object[] objArray11 = strSet7.toArray();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray12 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray13 = strSet7.toArray(fileLevelJsDocBuilderArray12);
        java.lang.String[] strArray20 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.lang.Object[] objArray23 = strSet21.toArray();
        int int24 = strSet21.size();
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet21.spliterator();
        boolean boolean27 = strSet21.add("OR [synthetic: 1]");
        boolean boolean28 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.Iterator<java.lang.String> strItor29 = strSet21.iterator();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node31.addSuppression("");
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node node42 = node31.copyInformationFromForTree(node36);
        boolean boolean43 = node36.isAssignAdd();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isTypeOf();
        boolean boolean50 = node45.isVarArgs();
        boolean boolean51 = node45.isIn();
        node36.addChildToFront(node45);
        java.lang.String str53 = node36.toStringTree();
        int int54 = node36.getSourcePosition();
        com.google.javascript.rhino.Node node55 = node36.removeChildren();
        boolean boolean56 = strSet21.contains((java.lang.Object) node36);
        boolean boolean57 = node36.isNumber();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray12);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str34, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n" + "'", str53, "OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = com.google.common.collect.ImmutableList.of(jSTypeExpression9, jSTypeExpression23);
        boolean boolean27 = jSTypeExpression23.isOptionalArg();
        com.google.javascript.rhino.Node node28 = jSTypeExpression23.getRoot();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.wasEmptyNode();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node46.setJSType(jSType49);
        java.lang.String str51 = node46.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        boolean boolean58 = node53.isComma();
        node53.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node30, node37, node46, node53);
        boolean boolean62 = node46.isLabelName();
        boolean boolean63 = jSTypeExpression23.equals((java.lang.Object) boolean62);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition64 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition64.setItem("NUMBER 4.0 1\n");
        stringPosition64.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str72 = stringPosition64.getItem();
        int int73 = stringPosition64.getEndLine();
        int int74 = stringPosition64.getPositionOnStartLine();
        int int75 = stringPosition64.getPositionOnEndLine();
        stringPosition64.setItem("DELPROP OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n 37");
        int int78 = stringPosition64.getPositionOnStartLine();
        boolean boolean79 = jSTypeExpression23.equals((java.lang.Object) stringPosition64);
        boolean boolean80 = jSTypeExpression23.isOptionalArg();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 4.0 1\n" + "'", str72, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo0.getModifies();
        java.lang.String str30 = jSDocInfo0.getMeaning();
        boolean boolean31 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        boolean boolean8 = jSDocInfo0.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node11.siblings();
        node11.detachChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node11.getJsDocBuilderForNode();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node11.setJSType(jSType16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node11.getStaticSourceFile();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder15);
        org.junit.Assert.assertNull(staticSourceFile18);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        int int6 = node4.getType();
        com.google.javascript.rhino.InputId inputId7 = node4.getInputId();
        com.google.javascript.rhino.Node node8 = node4.getParent();
        boolean boolean9 = node8.isTry();
        boolean boolean10 = node8.isNot();
        boolean boolean11 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(0, node8);
        boolean boolean13 = node8.isInstanceOf();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder18 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node20.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node20 };
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node32 = node28.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] { node28 };
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node36 };
        com.google.javascript.rhino.Node[][] nodeArray43 = new com.google.javascript.rhino.Node[][] { nodeArray26, nodeArray34, nodeArray42 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder44 = nodeArrayBuilder18.add(nodeArray43);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder45 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder47 = nodeArrayBuilder45.add(nodeArray46);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder48 = nodeArrayBuilder44.add(nodeArray46);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(4095, nodeArray46);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(43, nodeArray46, 12, 41);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray46, 4095, (int) (byte) 10);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(48, nodeArray46);
        boolean boolean58 = node56.getBooleanProp((int) (byte) 100);
        boolean boolean59 = node8.isEquivalentTo(node56);
        boolean boolean60 = node8.isNew();
        boolean boolean61 = node8.isDefaultCase();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArrayBuilder44);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArrayBuilder47);
        org.junit.Assert.assertNotNull(nodeArrayBuilder48);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isBlock();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = node10.cloneNode();
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node11);
        node2.setType((int) '4');
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        int int20 = node18.getType();
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFrom(node18);
        boolean boolean23 = node2.isSwitch();
        com.google.javascript.rhino.Node node24 = node2.getNext();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node2, 0, 4);
        boolean boolean28 = node2.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) -1, "Node tree inequality:\nTree1:\nSTRING OR\n\n\nTree2:\nIN 10\n\n\nSubtree1: STRING OR\n\n\nSubtree2: IN 10\n");
        boolean boolean4 = node3.isVoid();
        boolean boolean5 = node3.isTry();
        boolean boolean6 = node3.isIf();
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.wasEmptyNode();
        int int19 = strList10.indexOf((java.lang.Object) boolean18);
        boolean boolean20 = strList10.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        node22.setStaticSourceFile(staticSourceFile25);
        boolean boolean27 = node22.isComma();
        node22.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node31.children();
        com.google.javascript.rhino.InputId inputId36 = null;
        node31.setInputId(inputId36);
        boolean boolean38 = node31.isName();
        java.lang.String str39 = node22.checkTreeEquals(node31);
        com.google.javascript.rhino.InputId inputId40 = null;
        node31.setInputId(inputId40);
        boolean boolean42 = node31.isBlock();
        int int43 = strList10.lastIndexOf((java.lang.Object) node31);
        boolean boolean44 = node31.isCase();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isGetterDef();
        java.util.Set<java.lang.String> strSet51 = node46.getDirectives();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isFalse();
        boolean boolean58 = node53.isParamList();
        com.google.javascript.rhino.Node node59 = node46.useSourceInfoIfMissingFrom(node53);
        node59.setLength(45);
        boolean boolean62 = node59.isStringKey();
        node59.setVarArgs(false);
        boolean boolean65 = node59.hasMoreThanOneChild();
        boolean boolean66 = node59.isFalse();
        com.google.javascript.rhino.Node node67 = node59.removeFirstChild();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node73 = node69.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node69.getStaticSourceFile();
        boolean boolean75 = node69.isLocalResultCall();
        boolean boolean76 = node69.isArrayLit();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        int int82 = node78.getCharno();
        boolean boolean83 = node78.isName();
        com.google.javascript.rhino.Node node84 = node69.srcrefTree(node78);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node69.getJSDocInfo();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(2, node3, node31, node67, node69, (int) (byte) 10, 36);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str39, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(jSDocInfo85);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node23 = node15.getLastChild();
        node15.setWasEmptyNode(true);
        boolean boolean26 = node15.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node15.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        boolean boolean15 = node6.isNoSideEffectsCall();
        int int16 = node6.getChildCount();
        boolean boolean17 = node6.isUnscopedQualifiedName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getTypedefType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.lang.String str5 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int26 = strList17.size();
        boolean boolean27 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList17);
        boolean boolean28 = strList17.isEmpty();
        java.util.ListIterator<java.lang.String> strItor29 = strList17.listIterator();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strList17.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = strList17.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strSpliterator30);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((-1), "RETURN ()\n");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        boolean boolean10 = node9.isDefaultCase();
        boolean boolean11 = node9.isNoSideEffectsCall();
        java.lang.String str15 = node9.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo16.hasTypedefType();
        java.lang.String str18 = jSDocInfo16.toString();
        node9.setJSDocInfo(jSDocInfo16);
        com.google.javascript.rhino.Node node20 = node9.cloneTree();
        boolean boolean21 = node20.isThis();
        node20.setCharno((int) (short) -1);
        boolean boolean24 = node20.isBlock();
        boolean boolean25 = node3.hasChild(node20);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(16);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(36, node20, node27, (int) (byte) -1, 11);
        boolean boolean31 = node20.isIn();
        boolean boolean32 = node20.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR" + "'", str15, "OR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JSDocInfo" + "'", str18, "JSDocInfo");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        boolean boolean8 = node1.isNoSideEffectsCall();
        boolean boolean9 = node1.isWith();
        node1.setOptionalArg(false);
        boolean boolean12 = node1.isTypeOf();
        node1.setSourceFileForTesting("unknown");
        node1.setLength(40999);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean5 = jSDocInfo0.hasModifies();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean7 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node13 = jSTypeExpression9.getRoot();
        com.google.javascript.rhino.Node node14 = jSTypeExpression9.getRoot();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isReturn();
        com.google.javascript.rhino.InputId inputId22 = node17.getInputId();
        boolean boolean23 = node17.isAdd();
        boolean boolean24 = node17.isQuotedString();
        int int26 = node17.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        boolean boolean32 = node28.isNot();
        boolean boolean33 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        com.google.javascript.rhino.Node node38 = node28.copyInformationFromForTree(node35);
        node28.setOptionalArg(true);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        com.google.javascript.rhino.Node node54 = node44.useSourceInfoFromForTree(node51);
        boolean boolean55 = node54.isSetterDef();
        com.google.javascript.rhino.Node node56 = node54.getLastChild();
        boolean boolean57 = node54.isLocalResultCall();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(1, node17, node28, node42, node54);
        boolean boolean59 = node54.isVoid();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node60 = node14.removeChildAfter(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet10.stream();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet12.union(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet17.union(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet21.union(booleanLiteralSet22);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet17.union(booleanLiteralSet21);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet14.union(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet25.union(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = booleanLiteralSet29.union(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet27.union(booleanLiteralSet31);
        boolean boolean34 = strSet10.contains((java.lang.Object) booleanLiteralSet31);
        int int35 = strSet10.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean50 = strList42.containsAll((java.util.Collection<java.lang.String>) strList49);
        java.lang.String[] strArray53 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        boolean boolean61 = node57.isTypeOf();
        boolean boolean62 = node57.wasEmptyNode();
        int int63 = strList54.indexOf((java.lang.Object) boolean62);
        int int64 = strList49.indexOf((java.lang.Object) boolean62);
        boolean boolean65 = strList49.isEmpty();
        int int66 = strList49.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList67 = strList49.reverse();
        java.lang.String str68 = strList67.toString();
        boolean boolean69 = strSet10.removeAll((java.util.Collection<java.lang.String>) strList67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]" + "'", str68, "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        java.util.stream.Stream<java.lang.String> strStream71 = strList48.parallelStream();
        java.lang.String str73 = strList48.remove((int) (byte) 0);
        java.util.ListIterator<java.lang.String> strItor74 = strList48.listIterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "unknown" + "'", str73, "unknown");
        org.junit.Assert.assertNotNull(strItor74);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        int int15 = node11.getCharno();
        boolean boolean16 = node11.isName();
        boolean boolean17 = node11.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node11, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression19);
        com.google.javascript.rhino.Node node21 = jSTypeExpression20.getRoot();
        boolean boolean22 = jSTypeExpression20.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean24 = jSTypeExpression20.equals((java.lang.Object) visibility23);
        com.google.javascript.rhino.Node node25 = jSTypeExpression20.getRoot();
        node1.addChildrenToFront(node25);
        boolean boolean27 = node25.isString();
        com.google.javascript.rhino.Node node28 = node25.detachFromParent();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = node25.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: EQUALS is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        boolean boolean35 = jSDocInfo27.hasDescriptionForParameter("hi!");
        java.lang.String str36 = jSDocInfo27.getBlockDescription();
        boolean boolean37 = jSDocInfo27.isJavaDispatch();
        java.lang.String str38 = jSDocInfo27.getVersion();
        jSDocInfo27.setLicense("Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setLineno(37);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node17 = node3.srcref(node9);
        boolean boolean18 = node9.isEmpty();
        node9.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        int int4 = node3.getLength();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        boolean boolean6 = node5.isNew();
        boolean boolean7 = node5.isDelProp();
        boolean boolean8 = node5.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        java.lang.String str41 = node36.toString();
        com.google.javascript.rhino.Node node42 = node36.detachFromParent();
        boolean boolean43 = node36.isAdd();
        boolean boolean44 = node36.isWith();
        boolean boolean45 = node36.isAnd();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        boolean boolean4 = node1.isVarArgs();
        int int5 = node1.getChildCount();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isNot();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = node7.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node15 = node1.useSourceInfoFromForTree(node13);
        node15.setCharno(16);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(1.0d);
        boolean boolean2 = node1.hasOneChild();
        boolean boolean3 = node1.isInc();
        boolean boolean4 = node1.isCase();
        boolean boolean5 = node1.isOr();
        com.google.javascript.rhino.Node node6 = node1.cloneTree();
        node1.setLineno((int) ' ');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isInc();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        node23.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node44 = node3.useSourceInfoFromForTree(node23);
        java.lang.Object obj46 = node3.getProp(42);
        boolean boolean47 = node3.isIn();
        boolean boolean48 = node3.isStringKey();
        int int49 = node3.getCharno();
        com.google.javascript.rhino.Node node50 = node3.detachFromParent();
        boolean boolean51 = node3.isVoid();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet4.union(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet0.intersection(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet9.union(booleanLiteralSet10);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet12.union(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet11.union(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = booleanLiteralSet5.union(booleanLiteralSet11);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.intersection(booleanLiteralSet19);
        boolean boolean22 = booleanLiteralSet20.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet17.union(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet28.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet24.intersection(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = booleanLiteralSet32.union(booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = booleanLiteralSet37.union(booleanLiteralSet38);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet41.union(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet37.union(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet34.union(booleanLiteralSet44);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet31.union(booleanLiteralSet45);
        boolean boolean48 = booleanLiteralSet45.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = booleanLiteralSet20.intersection(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = booleanLiteralSet50.union(booleanLiteralSet52);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet55.union(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet59.union(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet55.union(booleanLiteralSet59);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet52.union(booleanLiteralSet62);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean67 = booleanLiteralSet65.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = booleanLiteralSet62.intersection(booleanLiteralSet65);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = booleanLiteralSet70.union(booleanLiteralSet71);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = booleanLiteralSet73.union(booleanLiteralSet75);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = booleanLiteralSet72.union(booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet81 = booleanLiteralSet78.union(booleanLiteralSet80);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet85 = booleanLiteralSet83.union(booleanLiteralSet84);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet89 = booleanLiteralSet87.union(booleanLiteralSet88);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet90 = booleanLiteralSet83.union(booleanLiteralSet87);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet91 = booleanLiteralSet80.union(booleanLiteralSet90);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet92 = booleanLiteralSet72.union(booleanLiteralSet90);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet95 = booleanLiteralSet72.intersection(booleanLiteralSet94);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet96 = booleanLiteralSet65.union(booleanLiteralSet95);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet97 = booleanLiteralSet45.intersection(booleanLiteralSet65);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet81 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet81.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet84 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet84.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet85 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet85.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet89 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet89.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet90 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet90.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet91 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet91.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet92 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet92.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet95 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet95.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet96 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet96.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet97 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet97.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        boolean boolean20 = node17.isVarArgs();
        int int21 = node17.getChildCount();
        int int22 = strList6.lastIndexOf((java.lang.Object) int21);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = strList6.asList();
        com.google.javascript.rhino.JSDocInfo.Marker marker24 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = marker24.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker24.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker27 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker27.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = marker27.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList30 = com.google.common.collect.ImmutableList.of(marker24, marker27);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = marker24.getType();
        int int32 = strList23.indexOf((java.lang.Object) marker24);
        boolean boolean33 = strList23.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strList23.add(59, "OR [jsdoc_info: JSDocInfo]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(typePosition25);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(stringPosition28);
        org.junit.Assert.assertNull(typePosition29);
        org.junit.Assert.assertNotNull(markerList30);
        org.junit.Assert.assertNull(typePosition31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        node14.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.JSType jSType25 = node14.getJSType();
        node14.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node38 = node36.getParent();
        com.google.javascript.rhino.Node node39 = node29.useSourceInfoFromForTree(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.hasBaseType();
        jSDocInfo40.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo40.getBaseType();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo40.getParameterNames();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        int int51 = node47.getCharno();
        boolean boolean52 = node47.isContinue();
        boolean boolean53 = strSet45.equals((java.lang.Object) node47);
        node39.setDirectives(strSet45);
        node39.setSourceEncodedPosition(49);
        boolean boolean57 = node39.isQuotedString();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(43, "OR [jsdoc_info: JSDocInfo]", 39, 49);
        boolean boolean63 = node39.isEquivalentToTyped(node62);
        boolean boolean64 = node39.isEmpty();
        boolean boolean65 = node39.isVar();
        boolean boolean66 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node68.setStaticSourceFile(staticSourceFile71);
        boolean boolean73 = node68.isComma();
        boolean boolean74 = node68.isBlock();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = node76.cloneNode();
        com.google.javascript.rhino.Node node78 = node68.copyInformationFromForTree(node77);
        boolean boolean79 = node77.isOnlyModifiesThisCall();
        boolean boolean80 = node77.isLocalResultCall();
        int int81 = node39.getIndexOfChild(node77);
        com.google.javascript.rhino.Node node82 = node14.useSourceInfoFrom(node39);
        boolean boolean83 = node14.isDelProp();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("(OR)");
        int int12 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection14 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNotNull(markerCollection14);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo0.getType();
        boolean boolean29 = jSDocInfo0.isExterns();
        boolean boolean30 = jSDocInfo0.isImplicitCast();
        boolean boolean32 = jSDocInfo0.hasParameter("OR [jsdoc_info: JSDocInfo]");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection33 = jSDocInfo0.getMarkers();
        boolean boolean34 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(markerCollection33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.isVarArgs();
        boolean boolean7 = node1.isIn();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node44.isLabel();
        boolean boolean47 = node44.isContinue();
        com.google.javascript.rhino.Node node48 = node16.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node49 = node1.srcref(node44);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = node51.cloneNode();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        node51.addChildrenToBack(node54);
        boolean boolean61 = node49.isEquivalentTo(node54);
        node54.detachChildren();
        int int63 = node54.getLength();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(37);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        boolean boolean52 = node31.isWith();
        boolean boolean53 = node31.hasChildren();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int59 = node58.getSideEffectFlags();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        int int65 = node61.getCharno();
        boolean boolean66 = node61.isName();
        boolean boolean67 = node61.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = new com.google.javascript.rhino.JSTypeExpression(node61, "Unknown class name");
        node58.addChildrenToFront(node61);
        boolean boolean71 = node31.hasChild(node61);
        boolean boolean72 = node31.isOnlyModifiesThisCall();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.isVarArgs();
        boolean boolean7 = node1.isIn();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node44.isLabel();
        boolean boolean47 = node44.isContinue();
        com.google.javascript.rhino.Node node48 = node16.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node49 = node1.srcref(node44);
        node49.setType(6);
        node49.removeProp(6);
        boolean boolean54 = node49.isFunction();
        boolean boolean55 = node49.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean17 = node16.isExprResult();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node21.isLabel();
        boolean boolean24 = node16.isEquivalentTo(node21);
        com.google.javascript.rhino.Node node25 = node10.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.children();
        node27.putIntProp(8, (int) '4');
        node10.addChildrenToBack(node27);
        node27.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(213028, "OR [jsdoc_info: JSDocInfo] [length: 46]", 59, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = node27.getChildBefore(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 53, 46, 39);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        boolean boolean16 = node11.isIf();
        com.google.javascript.rhino.Node node17 = node8.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        node19.setStaticSourceFile(staticSourceFile22);
        boolean boolean24 = node19.isComma();
        node19.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node28.children();
        com.google.javascript.rhino.InputId inputId33 = null;
        node28.setInputId(inputId33);
        boolean boolean35 = node28.isName();
        java.lang.String str36 = node19.checkTreeEquals(node28);
        boolean boolean37 = node28.isInc();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isNot();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = node39.copyInformationFromForTree(node45);
        com.google.javascript.rhino.InputId inputId47 = node39.getInputId();
        node28.addChildrenToFront(node39);
        com.google.javascript.rhino.Node node49 = node8.useSourceInfoFromForTree(node28);
        java.lang.Object obj51 = node8.getProp(42);
        boolean boolean52 = node8.isIn();
        boolean boolean53 = node8.isStringKey();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node8.getAncestors();
        node8.setCharno((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType57 = node8.getJSType();
        boolean boolean58 = node8.isVarArgs();
        com.google.javascript.rhino.Node node59 = node4.clonePropsFrom(node8);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        boolean boolean65 = node61.isTypeOf();
        boolean boolean66 = node61.wasEmptyNode();
        com.google.javascript.rhino.Node node67 = node61.removeChildren();
        boolean boolean68 = node61.isReturn();
        boolean boolean69 = node61.isGetElem();
        boolean boolean70 = node61.isDelProp();
        boolean boolean71 = node61.isThrow();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(49, node4, node61);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = node72.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: THROW is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str36, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.InputId inputId19 = node1.getInputId();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int26 = node25.getSideEffectFlags();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node28.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(30, node25, node28, (int) '4', (int) (byte) 100);
        boolean boolean43 = node1.isEquivalentToTyped(node25);
        boolean boolean44 = node1.isScript();
        node1.setOptionalArg(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        java.lang.String str16 = node11.toString(true, true, true);
        boolean boolean17 = node11.isBreak();
        boolean boolean18 = node11.isQualifiedName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        boolean boolean17 = node14.isLabelName();
        boolean boolean18 = node14.wasEmptyNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        boolean boolean20 = node14.hasOneChild();
        boolean boolean21 = node14.isScript();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor17 = strList6.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean20 = ternaryValue18.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str25 = ternaryValue24.toString();
        boolean boolean27 = ternaryValue24.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue21.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue18.and(ternaryValue24);
        int int30 = strList6.indexOf((java.lang.Object) ternaryValue29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean32 = jSDocInfo31.hasBaseType();
        jSDocInfo31.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo31.getBaseType();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo31.getParameterNames();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        int int42 = node38.getCharno();
        boolean boolean43 = node38.isContinue();
        boolean boolean44 = strSet36.equals((java.lang.Object) node38);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.Node node50 = node48.getParent();
        node48.setIsSyntheticBlock(true);
        boolean boolean53 = node48.isContinue();
        boolean boolean54 = strSet36.equals((java.lang.Object) node48);
        java.lang.Object[] objArray55 = strSet36.toArray();
        java.lang.Object[] objArray56 = strSet36.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator57 = strSet36.spliterator();
        boolean boolean58 = strList6.containsAll((java.util.Collection<java.lang.String>) strSet36);
        java.lang.Object[] objArray59 = strList6.toArray();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "unknown" + "'", str25, "unknown");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(12, "OR [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.Node node3 = node2.getLastSibling();
        boolean boolean4 = node2.isScript();
        boolean boolean5 = node2.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isObjectLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isReturn();
        com.google.javascript.rhino.InputId inputId15 = node10.getInputId();
        boolean boolean16 = node10.isArrayLit();
        boolean boolean17 = node10.isInc();
        com.google.javascript.rhino.Node node18 = node1.srcrefTree(node10);
        node18.setIsSyntheticBlock(false);
        boolean boolean21 = node18.isHook();
        boolean boolean22 = node18.isVar();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.Node node33 = node31.getParent();
        com.google.javascript.rhino.Node node34 = node24.useSourceInfoFromForTree(node31);
        boolean boolean35 = node34.isSetterDef();
        com.google.javascript.rhino.Node node36 = node34.getLastChild();
        boolean boolean37 = node34.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(6, (int) (short) 0, 0);
        com.google.javascript.rhino.Node node42 = node34.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node43 = node18.srcrefTree(node34);
        boolean boolean44 = node18.isParamList();
        boolean boolean45 = node18.isNot();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node3 = typePosition0.getItem();
        int int4 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        int int20 = node10.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node10.children();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.isComma();
        boolean boolean29 = node23.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = new com.google.javascript.rhino.JSTypeExpression(node23, "unknown");
        int int32 = node23.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str34 = jSDocInfo33.getFileOverview();
        java.lang.String str35 = jSDocInfo33.getFileOverview();
        java.lang.String str36 = jSDocInfo33.getMeaning();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node38.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node38.getStaticSourceFile();
        boolean boolean44 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node46.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node58 = node38.useSourceInfoFrom(node51);
        jSDocInfo33.setAssociatedNode(node38);
        boolean boolean60 = node23.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node61 = node10.copyInformationFrom(node23);
        boolean boolean62 = node61.isNew();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node61.getJsDocBuilderForNode();
        boolean boolean64 = node61.isLabel();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        boolean boolean52 = node14.isUnscopedQualifiedName();
        boolean boolean53 = node14.isFromExterns();
        boolean boolean54 = node14.isNew();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        boolean boolean61 = node60.isDefaultCase();
        boolean boolean62 = node60.isRegExp();
        int int63 = node14.getIndexOfChild(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean65 = jSDocInfo64.isNoShadow();
        java.lang.String str66 = jSDocInfo64.getMeaning();
        com.google.javascript.rhino.Node node67 = jSDocInfo64.getAssociatedNode();
        java.lang.String str68 = jSDocInfo64.getLicense();
        java.lang.String str69 = jSDocInfo64.getSourceName();
        jSDocInfo64.setLicense("((OR))");
        boolean boolean73 = jSDocInfo64.hasParameter("");
        boolean boolean74 = jSDocInfo64.isImplicitCast();
        boolean boolean76 = jSDocInfo64.hasParameterType("Unknown class name");
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        int int82 = node78.getCharno();
        boolean boolean83 = node78.isName();
        boolean boolean84 = node78.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = new com.google.javascript.rhino.JSTypeExpression(node78, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression86);
        com.google.javascript.rhino.Node node88 = jSTypeExpression87.getRoot();
        boolean boolean89 = jSTypeExpression87.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean91 = jSTypeExpression87.equals((java.lang.Object) visibility90);
        jSDocInfo64.setVisibility(visibility90);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = jSDocInfo64.getReturnType();
        boolean boolean94 = jSDocInfo64.shouldPreserveTry();
        int int95 = jSDocInfo64.getExtendedInterfacesCount();
        node14.setJSDocInfo(jSDocInfo64);
        java.lang.String str97 = jSDocInfo64.getLicense();
        java.lang.String str98 = jSDocInfo64.getSourceName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(jSTypeExpression93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "((OR))" + "'", str97, "((OR))");
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet4.intersection(booleanLiteralSet5);
        boolean boolean8 = booleanLiteralSet4.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = booleanLiteralSet9.union(booleanLiteralSet11);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet14.union(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.union(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet14.union(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet11.union(booleanLiteralSet21);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean26 = booleanLiteralSet24.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet21.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet28.union(booleanLiteralSet30);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = booleanLiteralSet24.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet4.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet1.union(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = booleanLiteralSet31.union(booleanLiteralSet35);
        boolean boolean38 = booleanLiteralSet36.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Iterator<java.lang.String> strItor15 = strList6.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strList6.iterator();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("GETELEM", (int) '4', 4095);
        int int21 = strList6.lastIndexOf((java.lang.Object) 4095);
        java.lang.String str22 = strList6.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = strList6.set(47, "TRUE");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str22, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node27.setJSType(jSType61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("OR");
        node64.addSuppression("NUMBER 4.0 1\n");
        node27.addChildrenToFront(node64);
        boolean boolean68 = node64.isNoSideEffectsCall();
        int int69 = node64.getChildCount();
        boolean boolean70 = node64.isTypeOf();
        boolean boolean71 = node64.isCase();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        java.lang.String[] strArray13 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray19 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray20 = strSet14.toArray((java.lang.Comparable<java.lang.String>[]) strArray19);
        strSet14.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean36 = strList28.containsAll((java.util.Collection<java.lang.String>) strList35);
        java.util.Spliterator<java.lang.String> strSpliterator37 = strList28.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList28.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean43 = strList38.containsAll((java.util.Collection<java.lang.String>) strList42);
        java.util.Iterator<java.lang.String> strItor44 = strList38.iterator();
        java.lang.Object[] objArray45 = strList38.toArray();
        boolean boolean46 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList38);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node52 = node50.getParent();
        boolean boolean53 = node50.isAssignAdd();
        int int54 = strList38.lastIndexOf((java.lang.Object) boolean53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strList38.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str57 = jSDocInfo56.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = jSDocInfo56.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = strList58.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList67 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.String>) strList66);
        java.util.stream.Stream<java.lang.String> strStream68 = strList66.stream();
        boolean boolean69 = strList59.containsAll((java.util.Collection<java.lang.String>) strList66);
        boolean boolean70 = strList38.containsAll((java.util.Collection<java.lang.String>) strList66);
        // The following exception was thrown during execution in test generation
        try {
            strList66.add(44, "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n    ERROR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: ERROR\n    OR\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableArray20);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strSpliterator37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(charSequenceList67);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        node21.putBooleanProp(43, true);
        boolean boolean34 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node35 = node21.getLastChild();
        boolean boolean36 = node21.isRegExp();
        boolean boolean37 = node21.isAssign();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.siblings();
        int int3 = node1.getSourcePosition();
        boolean boolean4 = node1.isStringKey();
        boolean boolean5 = node1.isComma();
        boolean boolean6 = node1.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        java.lang.String str57 = jSDocInfo52.getMeaning();
        int int58 = jSDocInfo52.getImplementedInterfaceCount();
        java.lang.String str59 = jSDocInfo52.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo52.getReturnType();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(jSTypeExpression60);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor21 = strList12.listIterator();
        boolean boolean22 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList12);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node33.children();
        com.google.javascript.rhino.InputId inputId38 = null;
        node33.setInputId(inputId38);
        boolean boolean40 = node33.isName();
        java.lang.String str41 = node24.checkTreeEquals(node33);
        boolean boolean42 = node33.isInc();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isNot();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = node44.copyInformationFromForTree(node50);
        com.google.javascript.rhino.InputId inputId52 = node44.getInputId();
        node33.addChildrenToFront(node44);
        boolean boolean54 = strList12.equals((java.lang.Object) node44);
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = strList12.reverse();
        int int56 = strList55.size();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int62 = node61.getSideEffectFlags();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        com.google.javascript.rhino.Node node68 = node66.getParent();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        boolean boolean74 = node70.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType75 = node70.getJSType();
        boolean boolean76 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node77 = node68.useSourceInfoIfMissingFromForTree(node70);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int83 = node82.getSideEffectFlags();
        com.google.javascript.rhino.Node node84 = node70.useSourceInfoIfMissingFrom(node82);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder85 = node82.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node86 = node61.copyInformationFrom(node82);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder87 = node82.getJsDocBuilderForNode();
        boolean boolean88 = strList55.contains((java.lang.Object) node82);
        boolean boolean89 = node82.isSetterDef();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str41, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        java.lang.String[] strArray14 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.lang.Object[] objArray17 = strSet15.toArray();
        strSet15.clear();
        java.util.Iterator<java.lang.String> strItor19 = strSet15.iterator();
        int int20 = strSet15.size();
        java.lang.String[] strArray27 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.lang.Object[] objArray30 = strSet28.toArray();
        strSet28.clear();
        java.util.Iterator<java.lang.String> strItor32 = strSet28.iterator();
        int int33 = strSet28.size();
        boolean boolean35 = strSet28.equals((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList36 = com.google.common.collect.ImmutableList.of(strSet15, strSet28);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet15);
        boolean boolean38 = node1.isVarArgs();
        boolean boolean39 = node1.isQualifiedName();
        boolean boolean40 = node1.isSwitch();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSetList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 4.0", 100, (int) (short) 0);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 0);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = strList6.retainAll((java.util.Collection<java.lang.String>) strList11);
        int int14 = strList6.size();
        boolean boolean15 = strList3.containsAll((java.util.Collection<java.lang.String>) strList6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo17.getImplementedInterfaces();
        boolean boolean21 = jSDocInfo17.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = jSDocInfo17.getTemplateTypeNames();
        java.lang.String[] strArray29 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        strSet30.clear();
        boolean boolean34 = strList22.containsAll((java.util.Collection<java.lang.String>) strSet30);
        boolean boolean35 = strList6.addAll(0, (java.util.Collection<java.lang.String>) strList22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasBaseType();
        jSDocInfo36.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo36.getBaseType();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo36.getParameterNames();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        int int47 = node43.getCharno();
        boolean boolean48 = node43.isContinue();
        boolean boolean49 = strSet41.equals((java.lang.Object) node43);
        boolean boolean50 = node43.isSetterDef();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node52.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node52.isComma();
        node52.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node61.children();
        com.google.javascript.rhino.InputId inputId66 = null;
        node61.setInputId(inputId66);
        boolean boolean68 = node61.isName();
        java.lang.String str69 = node52.checkTreeEquals(node61);
        boolean boolean70 = node61.isInc();
        com.google.javascript.rhino.Node node71 = node43.srcrefTree(node61);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean74 = node73.wasEmptyNode();
        com.google.javascript.rhino.Node node75 = node43.clonePropsFrom(node73);
        boolean boolean76 = strList6.contains((java.lang.Object) node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node73.getJSDocInfo();
        boolean boolean78 = node73.isGetProp();
        int int79 = node73.getChildCount();
        boolean boolean80 = node73.isSwitch();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str69, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        boolean boolean11 = node4.isEmpty();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.hasChildren();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node13);
        int int19 = strList2.indexOf((java.lang.Object) node4);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor20 = strList2.listIterator();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        int int31 = strList23.size();
        java.lang.Object[] objArray32 = strList23.toArray();
        java.util.Iterator<java.lang.String> strItor33 = strList23.iterator();
        boolean boolean34 = strList2.equals((java.lang.Object) strList23);
        java.util.Spliterator<java.lang.String> strSpliterator35 = strList2.spliterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strSpliterator35);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        node15.removeProp(48);
        com.google.javascript.rhino.Node node26 = node15.getAncestor(0);
        boolean boolean27 = node15.isUnscopedQualifiedName();
        java.lang.String str28 = node15.toString();
        com.google.javascript.rhino.Node node29 = node15.removeFirstChild();
        boolean boolean30 = node29.hasChildren();
        boolean boolean31 = node29.isBlock();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR" + "'", str28, "OR");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility6);
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        boolean boolean10 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        com.google.javascript.rhino.InputId inputId17 = node9.getInputId();
        boolean boolean18 = node9.isIn();
        boolean boolean19 = node1.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node21.isComma();
        node21.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node30.children();
        com.google.javascript.rhino.InputId inputId35 = null;
        node30.setInputId(inputId35);
        boolean boolean37 = node30.isName();
        java.lang.String str38 = node21.checkTreeEquals(node30);
        boolean boolean39 = node30.isStringKey();
        boolean boolean40 = node30.isLocalResultCall();
        boolean boolean41 = node30.isParamList();
        java.lang.String str42 = node1.checkTreeEquals(node30);
        boolean boolean43 = node1.isFalse();
        boolean boolean44 = node1.isThis();
        java.lang.String str45 = node1.toString();
        boolean boolean46 = node1.isDefaultCase();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str38, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str42, "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str45, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str6 = ternaryValue5.toString();
        boolean boolean8 = ternaryValue5.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue2.and(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean12 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str14 = ternaryValue13.toString();
        boolean boolean16 = ternaryValue13.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue10.and(ternaryValue13);
        boolean boolean19 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str21 = ternaryValue20.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean24 = ternaryValue22.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str26 = ternaryValue25.toString();
        boolean boolean28 = ternaryValue25.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue22.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue29.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue20.or(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue9, ternaryValue10, ternaryValue31, ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue32.not();
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean49 = strList41.containsAll((java.util.Collection<java.lang.String>) strList48);
        java.util.Spliterator<java.lang.String> strSpliterator50 = strList41.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = strList41.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor52 = strList41.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean55 = ternaryValue53.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean58 = ternaryValue56.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str60 = ternaryValue59.toString();
        boolean boolean62 = ternaryValue59.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue56.and(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue53.and(ternaryValue59);
        int int65 = strList41.indexOf((java.lang.Object) ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue64.xor(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue32.and(ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue69.xor(ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue32.xor(ternaryValue71);
        boolean boolean74 = ternaryValue71.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "unknown" + "'", str6, "unknown");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "unknown" + "'", str14, "unknown");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "unknown" + "'", str21, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "unknown" + "'", str26, "unknown");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "unknown" + "'", str60, "unknown");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        com.google.javascript.rhino.Node node21 = node11.useSourceInfoFromForTree(node18);
        boolean boolean22 = node21.isSetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node21.siblings();
        int int24 = node3.getIndexOfChild(node21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isGetterDef();
        java.util.Set<java.lang.String> strSet31 = node26.getDirectives();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isFalse();
        boolean boolean38 = node33.isParamList();
        com.google.javascript.rhino.Node node39 = node26.useSourceInfoIfMissingFrom(node33);
        node39.setLength(45);
        boolean boolean42 = node39.isStringKey();
        node39.setVarArgs(false);
        com.google.javascript.rhino.Node node45 = node21.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        node47.setStaticSourceFile(staticSourceFile50);
        boolean boolean52 = node47.isComma();
        node47.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node56.children();
        com.google.javascript.rhino.InputId inputId61 = null;
        node56.setInputId(inputId61);
        boolean boolean63 = node56.isName();
        java.lang.String str64 = node47.checkTreeEquals(node56);
        com.google.javascript.rhino.InputId inputId65 = node47.getInputId();
        boolean boolean66 = node47.hasMoreThanOneChild();
        boolean boolean67 = node47.isCall();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node68 = node45.getChildBefore(node47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str64, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.lang.Object obj18 = null;
        boolean boolean19 = strList5.equals(obj18);
        boolean boolean20 = strList5.isEmpty();
        java.util.Iterator<java.lang.String> strItor21 = strList5.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strList5.spliterator();
        java.lang.Object[] objArray23 = strList5.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        java.lang.String[] strArray13 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray19 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray20 = strSet14.toArray((java.lang.Comparable<java.lang.String>[]) strArray19);
        strSet14.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean36 = strList28.containsAll((java.util.Collection<java.lang.String>) strList35);
        java.util.Spliterator<java.lang.String> strSpliterator37 = strList28.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList28.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean43 = strList38.containsAll((java.util.Collection<java.lang.String>) strList42);
        java.util.Iterator<java.lang.String> strItor44 = strList38.iterator();
        java.lang.Object[] objArray45 = strList38.toArray();
        boolean boolean46 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList38);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node52 = node50.getParent();
        boolean boolean53 = node50.isAssignAdd();
        int int54 = strList38.lastIndexOf((java.lang.Object) boolean53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strList38.spliterator();
        boolean boolean56 = strList38.isEmpty();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableArray20);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strSpliterator37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder1 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        java.lang.String str6 = node3.toString();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node3.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] { node11 };
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node19 };
        com.google.javascript.rhino.Node[][] nodeArray26 = new com.google.javascript.rhino.Node[][] { nodeArray9, nodeArray17, nodeArray25 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder27 = nodeArrayBuilder1.add(nodeArray26);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder28.add(nodeArray29);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = nodeArrayBuilder27.add(nodeArray29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, nodeArray29);
        node32.putBooleanProp((int) ' ', true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str6, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArrayBuilder27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertNotNull(nodeArrayBuilder31);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        boolean boolean5 = jSDocInfo0.hasParameter("(NUMBER 10.0)");
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isInterface();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean21 = strList13.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor22 = strList13.listIterator();
        int int23 = strList13.size();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder24 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node26.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node26 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node34.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] { node34 };
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node46 = node42.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] { node42 };
        com.google.javascript.rhino.Node[][] nodeArray49 = new com.google.javascript.rhino.Node[][] { nodeArray32, nodeArray40, nodeArray48 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder50 = nodeArrayBuilder24.add(nodeArray49);
        int int51 = strList13.lastIndexOf((java.lang.Object) nodeArray49);
        java.lang.String[] strArray54 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        int int64 = strList55.indexOf((java.lang.Object) boolean63);
        java.lang.Object[] objArray65 = strList55.toArray();
        int int66 = strList13.lastIndexOf((java.lang.Object) strList55);
        boolean boolean67 = strList55.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList70 = jSDocInfo68.getImplementedInterfaces();
        boolean boolean72 = jSDocInfo68.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = jSDocInfo68.getTemplateTypeNames();
        java.lang.String[] strArray80 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        java.lang.Object[] objArray83 = strSet81.toArray();
        strSet81.clear();
        boolean boolean85 = strList73.containsAll((java.util.Collection<java.lang.String>) strSet81);
        com.google.common.collect.ImmutableList<java.lang.String> strList86 = strList73.reverse();
        boolean boolean87 = strList55.containsAll((java.util.Collection<java.lang.String>) strList86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strList6.retainAll((java.util.Collection<java.lang.String>) strList86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str29, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str45, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArrayBuilder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        boolean boolean6 = jSDocInfo0.hasThisType();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.addSuppression("Node tree inequality:\nTree1:\nSTRING OR\n\n\nTree2:\nIN 10\n\n\nSubtree1: STRING OR\n\n\nSubtree2: IN 10\n");
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("NUMBER 10.0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.String str7 = node1.getSourceFileName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isNot();
        boolean boolean19 = node14.isIf();
        com.google.javascript.rhino.Node node20 = node11.copyInformationFromForTree(node14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        node14.putProp(0, (java.lang.Object) booleanLiteralSet22);
        com.google.javascript.rhino.Node node24 = node1.useSourceInfoFrom(node14);
        boolean boolean25 = node24.isScript();
        boolean boolean26 = node24.isWith();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node12.isInc();
        node12.setOptionalArg(true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node12.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor17 = ancestorIterable16.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor18 = ancestorIterable16.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor19 = ancestorIterable16.iterator();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNotNull(nodeItor19);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("()");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("(Not declared as a type name)");
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setDeprecated(true);
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        int int13 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor8 = strList7.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = strList7.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = strList9.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = strList10.remove(45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasModifies();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("RETURN ()\n");
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isAssign();
        node1.setIsSyntheticBlock(false);
        boolean boolean13 = node1.isReturn();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = new com.google.javascript.rhino.JSTypeExpression(node3, "");
        boolean boolean9 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = node11.cloneNode();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.isDelProp();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node30.setJSType(jSType33);
        java.lang.String str35 = node30.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList45 = com.google.common.collect.ImmutableList.of(node14, node21, node30, node37);
        com.google.javascript.rhino.Node node46 = node12.copyInformationFrom(node37);
        boolean boolean47 = node3.hasChild(node12);
        java.lang.String str51 = node3.toString(false, true, true);
        boolean boolean52 = node3.isAssign();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable53 = node3.getAncestors();
        node3.setSourceEncodedPosition(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR" + "'", str35, "OR");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(ancestorIterable53);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(12);
        com.google.javascript.rhino.Node node2 = node1.getNext();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasBaseType();
        jSDocInfo53.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo53.getBaseType();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo53.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet58.spliterator();
        node33.setDirectives(strSet58);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strSet58.spliterator();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node63.setStaticSourceFile(staticSourceFile66);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        com.google.javascript.rhino.Node node78 = node76.getParent();
        com.google.javascript.rhino.Node node79 = node69.useSourceInfoFromForTree(node76);
        boolean boolean80 = node63.hasChild(node69);
        boolean boolean81 = node69.isNot();
        boolean boolean82 = strSet58.equals((java.lang.Object) node69);
        // The following exception was thrown during execution in test generation
        try {
            strSet58.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        java.lang.Object[] objArray4 = strSet3.toArray();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition2.getPositionOnEndLine();
        int int10 = typePosition2.getPositionOnStartLine();
        com.google.javascript.rhino.Node node11 = null;
        typePosition2.setItem(node11);
        boolean boolean13 = typePosition2.hasBrackets();
        int int14 = typePosition2.getPositionOnStartLine();
        com.google.javascript.rhino.Node node15 = typePosition2.getItem();
        int int16 = typePosition2.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        java.lang.String str4 = jSDocInfo0.getVersion();
        java.lang.String str5 = jSDocInfo0.toString();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        boolean boolean7 = jSDocInfo0.isExpose();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream12 = strSet11.parallelStream();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int18 = node17.getSideEffectFlags();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        int int24 = node20.getCharno();
        boolean boolean25 = node20.isName();
        boolean boolean26 = node20.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node20, "Unknown class name");
        node17.addChildrenToFront(node20);
        boolean boolean30 = node20.isInstanceOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node20.getJsDocBuilderForNode();
        boolean boolean32 = strSet11.contains((java.lang.Object) node20);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = node15.getAncestor(0);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        int int24 = node22.getType();
        com.google.javascript.rhino.InputId inputId25 = node22.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = null;
        node22.setJSDocInfo(jSDocInfo26);
        boolean boolean28 = node22.isDo();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        boolean boolean35 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.Node node40 = node30.copyInformationFromForTree(node37);
        java.lang.Object obj42 = node40.getProp(38);
        com.google.javascript.rhino.Node node43 = node22.srcrefTree(node40);
        node17.putProp(6, (java.lang.Object) node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.hasBaseType();
        jSDocInfo45.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo45.getBaseType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        int int56 = node52.getCharno();
        boolean boolean57 = node52.isContinue();
        boolean boolean58 = strSet50.equals((java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        node62.setIsSyntheticBlock(true);
        boolean boolean67 = node62.isContinue();
        boolean boolean68 = strSet50.equals((java.lang.Object) node62);
        java.lang.Object[] objArray69 = strSet50.toArray();
        java.lang.Object[] objArray70 = strSet50.toArray();
        node22.setDirectives(strSet50);
        java.util.stream.Stream<java.lang.String> strStream72 = strSet50.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator73 = strSet50.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator74 = strSet50.spliterator();
        boolean boolean75 = strSet50.isEmpty();
        boolean boolean76 = strSet50.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int26 = strList17.size();
        boolean boolean27 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList17);
        java.util.stream.Stream<java.lang.String> strStream28 = strList17.stream();
        // The following exception was thrown during execution in test generation
        try {
            strList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strStream28);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        namePosition0.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8, namePosition9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList13 = com.google.common.collect.ImmutableList.of(namePosition11, namePosition12);
        int int14 = namePosition11.getPositionOnEndLine();
        int int15 = namePosition11.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition16, namePosition17);
        int int19 = namePosition16.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList22 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21);
        int int23 = namePosition20.getPositionOnEndLine();
        int int24 = namePosition20.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition25, namePosition26);
        namePosition25.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition33, namePosition34);
        int int36 = namePosition33.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList39 = com.google.common.collect.ImmutableList.of(namePosition37, namePosition38);
        namePosition37.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList47 = com.google.common.collect.ImmutableList.of(namePosition45, namePosition46);
        namePosition45.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList53 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition9, namePosition11, namePosition16, namePosition20, namePosition25, namePosition33, namePosition37, namePosition45);
        int int54 = namePosition25.getEndLine();
        int int55 = namePosition25.getStartLine();
        int int56 = namePosition25.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(namePositionList39);
        org.junit.Assert.assertNotNull(namePositionList47);
        org.junit.Assert.assertNotNull(namePositionList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 29 + "'", int55 == 29);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        java.util.stream.Stream<java.lang.String> strStream71 = strList28.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream72 = strList28.parallelStream();
        java.util.stream.BaseStream[] baseStreamArray74 = new java.util.stream.BaseStream[1];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[] strBaseStreamArray75 = (java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[]) baseStreamArray74;
        strBaseStreamArray75[0] = strStream72;
        com.google.common.collect.ImmutableList<java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>> strBaseStreamList78 = com.google.common.collect.ImmutableList.copyOf(strBaseStreamArray75);
        com.google.common.collect.ImmutableList<java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>> strBaseStreamList79 = com.google.common.collect.ImmutableList.copyOf(strBaseStreamArray75);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertNotNull(baseStreamArray74);
        org.junit.Assert.assertNotNull(strBaseStreamArray75);
        org.junit.Assert.assertNotNull(strBaseStreamList78);
        org.junit.Assert.assertNotNull(strBaseStreamList79);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet4.union(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet3.union(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = booleanLiteralSet9.union(booleanLiteralSet11);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet14.union(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.union(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet14.union(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet11.union(booleanLiteralSet21);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet3.union(booleanLiteralSet21);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet28.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet24.intersection(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = booleanLiteralSet32.union(booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = booleanLiteralSet37.union(booleanLiteralSet38);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet41.union(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet37.union(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet34.union(booleanLiteralSet44);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet31.union(booleanLiteralSet45);
        boolean boolean48 = booleanLiteralSet45.contains(false);
        boolean boolean50 = booleanLiteralSet45.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = booleanLiteralSet51.intersection(booleanLiteralSet52);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean56 = booleanLiteralSet54.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = booleanLiteralSet57.intersection(booleanLiteralSet58);
        boolean boolean61 = booleanLiteralSet59.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet54.intersection(booleanLiteralSet59);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet52.intersection(booleanLiteralSet62);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet64.union(booleanLiteralSet66);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = booleanLiteralSet69.union(booleanLiteralSet70);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = booleanLiteralSet73.union(booleanLiteralSet74);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = booleanLiteralSet69.union(booleanLiteralSet73);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = booleanLiteralSet66.union(booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean81 = booleanLiteralSet79.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = booleanLiteralSet76.intersection(booleanLiteralSet79);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet85 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = booleanLiteralSet83.union(booleanLiteralSet85);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = booleanLiteralSet79.intersection(booleanLiteralSet86);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = booleanLiteralSet62.union(booleanLiteralSet79);
        boolean boolean90 = booleanLiteralSet79.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet91 = booleanLiteralSet45.union(booleanLiteralSet79);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet92 = booleanLiteralSet21.intersection(booleanLiteralSet91);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet85 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet85.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet91 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet91.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet92 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet92.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node3.addChildrenToFront(node5);
        com.google.javascript.rhino.Node node7 = node5.getParent();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        node9.putIntProp((int) (short) 0, 38);
        node5.addChildToBack(node9);
        boolean boolean17 = node9.isNE();
        boolean boolean18 = node9.isFalse();
        boolean boolean19 = node9.isSwitch();
        boolean boolean20 = node9.isBlock();
        com.google.javascript.rhino.Node node21 = node1.clonePropsFrom(node9);
        node9.setIsSyntheticBlock(true);
        boolean boolean24 = node9.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasBaseType();
        jSDocInfo18.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo18.getBaseType();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo18.getParameterNames();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        int int29 = node25.getCharno();
        boolean boolean30 = node25.isContinue();
        boolean boolean31 = strSet23.equals((java.lang.Object) node25);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.setIsSyntheticBlock(true);
        boolean boolean40 = node35.isContinue();
        boolean boolean41 = strSet23.equals((java.lang.Object) node35);
        java.lang.Object[] objArray42 = strSet23.toArray();
        int int43 = strList13.indexOf((java.lang.Object) objArray42);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList13.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.isNoShadow();
        boolean boolean47 = jSDocInfo45.isNoShadow();
        boolean boolean48 = jSDocInfo45.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo45.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo45.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = jSDocInfo45.getTemplateTypeNames();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor53 = strList52.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList52.asList();
        java.lang.Object[] objArray55 = strList54.toArray();
        java.lang.Comparable[][] comparableArray57 = new java.lang.Comparable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray58 = (java.lang.Comparable<java.lang.String>[][]) comparableArray57;
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>[]> strComparableArrayList59 = com.google.common.collect.ImmutableList.of(strComparableArray58);
        java.io.Serializable[] serializableArray60 = strList54.toArray((java.io.Serializable[]) strComparableArray58);
        boolean boolean61 = strList13.contains((java.lang.Object) strList54);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(comparableArray57);
        org.junit.Assert.assertNotNull(strComparableArray58);
        org.junit.Assert.assertNotNull(strComparableArrayList59);
        org.junit.Assert.assertNotNull(serializableArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        boolean boolean7 = node1.isInstanceOf();
        boolean boolean8 = node1.isParamList();
        node1.setWasEmptyNode(true);
        int int11 = node1.getType();
        boolean boolean12 = node1.isGetProp();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation((int) ' ', 49, 51, 38);
        int int15 = stringPosition0.getPositionOnEndLine();
        int int16 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("JSDocInfo");
        int int19 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation((int) '#', (int) (short) 0, 131072, 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 38 + "'", int15 == 38);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 38 + "'", int16 == 38);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 49 + "'", int19 == 49);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node64.setStaticSourceFile(staticSourceFile66);
        int int68 = node64.getSourceOffset();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        int int74 = node70.getCharno();
        boolean boolean75 = node70.isName();
        boolean boolean76 = node70.isDefaultCase();
        boolean boolean77 = node70.isLocalResultCall();
        boolean boolean78 = node70.isInstanceOf();
        node64.addChildrenToFront(node70);
        com.google.javascript.rhino.Node node80 = node70.getLastChild();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition1.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition1.setPositionInformation((int) '4', (int) ' ', 43, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 52?end-line: 43");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "((OR))");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isNoCompile();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nNEG\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: NEG\n)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        boolean boolean7 = node6.isDefaultCase();
        boolean boolean8 = node6.isNoSideEffectsCall();
        java.lang.String str12 = node6.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasTypedefType();
        java.lang.String str15 = jSDocInfo13.toString();
        node6.setJSDocInfo(jSDocInfo13);
        com.google.javascript.rhino.Node node17 = node6.cloneTree();
        boolean boolean18 = node6.isAdd();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        java.lang.String[] strArray36 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isTypeOf();
        boolean boolean45 = node40.wasEmptyNode();
        int int46 = strList37.indexOf((java.lang.Object) boolean45);
        int int47 = strList32.indexOf((java.lang.Object) boolean45);
        boolean boolean48 = strList32.isEmpty();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        boolean boolean55 = node51.isTypeOf();
        boolean boolean56 = node51.isDelProp();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        int int62 = node58.getCharno();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] { node51, node58 };
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray63);
        int int65 = strList32.indexOf((java.lang.Object) node64);
        java.util.Iterator<java.lang.String> strItor66 = strList32.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        boolean boolean78 = strList32.containsAll((java.util.Collection<java.lang.String>) strList77);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node80.addSuppression("");
        java.lang.String str83 = node80.toString();
        com.google.javascript.rhino.Node node84 = node80.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = node80.getStaticSourceFile();
        boolean boolean86 = node80.isLocalResultCall();
        boolean boolean87 = node80.isArrayLit();
        boolean boolean88 = node80.isAssign();
        boolean boolean89 = node80.isNew();
        int int90 = strList32.indexOf((java.lang.Object) node80);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) (byte) 100, node6, node80, 47, (int) '4');
        node80.setLength((int) (short) 10);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR" + "'", str12, "OR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JSDocInfo" + "'", str15, "JSDocInfo");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str83, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(staticSourceFile85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = node2.cloneNode();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        boolean boolean9 = node5.isTypeOf();
        boolean boolean10 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.isDelProp();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node21.setJSType(jSType24);
        java.lang.String str26 = node21.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        node28.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList36 = com.google.common.collect.ImmutableList.of(node5, node12, node21, node28);
        com.google.javascript.rhino.Node node37 = node3.copyInformationFrom(node28);
        boolean boolean38 = node3.isIn();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(35, node3);
        boolean boolean40 = node39.isQuotedString();
        int int41 = node39.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR" + "'", str26, "OR");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor21 = strList12.listIterator();
        boolean boolean22 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList12);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node33.children();
        com.google.javascript.rhino.InputId inputId38 = null;
        node33.setInputId(inputId38);
        boolean boolean40 = node33.isName();
        java.lang.String str41 = node24.checkTreeEquals(node33);
        boolean boolean42 = node33.isInc();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isNot();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = node44.copyInformationFromForTree(node50);
        com.google.javascript.rhino.InputId inputId52 = node44.getInputId();
        node33.addChildrenToFront(node44);
        boolean boolean54 = strList12.equals((java.lang.Object) node44);
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = strList12.reverse();
        int int56 = strList55.size();
        java.util.Iterator<java.lang.String> strItor57 = strList55.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = strList55.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.hasBaseType();
        jSDocInfo59.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo59.getBaseType();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo59.getParameterNames();
        java.util.Set<java.lang.String> strSet65 = jSDocInfo59.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator66 = strSet65.spliterator();
        boolean boolean67 = strSet65.isEmpty();
        boolean boolean68 = strList58.containsAll((java.util.Collection<java.lang.String>) strSet65);
        java.util.stream.Stream<java.lang.String> strStream69 = strList58.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str41, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strStream69);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue15.xor(ternaryValue16);
        boolean boolean19 = ternaryValue15.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue15.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str25 = ternaryValue24.toString();
        boolean boolean27 = ternaryValue24.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue21.and(ternaryValue24);
        boolean boolean30 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue20.and(ternaryValue31);
        boolean boolean33 = strList13.equals((java.lang.Object) ternaryValue31);
        boolean boolean34 = strList13.isEmpty();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "unknown" + "'", str25, "unknown");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        int int12 = node10.getLength();
        int int13 = node10.getSourceOffset();
        boolean boolean14 = node10.isVoid();
        node10.setType(4096);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node16.isLabel();
        boolean boolean19 = node16.isContinue();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        com.google.javascript.rhino.Node node27 = node16.useSourceInfoIfMissingFrom(node22);
        boolean boolean28 = node3.isEquivalentTo(node22);
        com.google.javascript.rhino.InputId inputId29 = null;
        node22.setInputId(inputId29);
        boolean boolean31 = node22.isReturn();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.setIsSyntheticBlock(true);
        boolean boolean40 = node35.isContinue();
        boolean boolean41 = node35.isParamList();
        boolean boolean42 = node35.isParamList();
        com.google.javascript.rhino.Node node43 = node35.cloneTree();
        boolean boolean44 = node43.isIf();
        boolean boolean45 = node22.hasChild(node43);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node43, "(OR \n)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression47);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeExpression48.evaluate(jSTypeStaticScope49, jSTypeRegistry50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression48);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        java.util.stream.Stream<java.lang.String> strStream71 = strList48.parallelStream();
        java.util.ListIterator<java.lang.String> strItor73 = strList48.listIterator(0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.isNoShadow();
        boolean boolean76 = jSDocInfo74.isNoShadow();
        boolean boolean77 = jSDocInfo74.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = jSDocInfo74.getReturnType();
        java.lang.String str79 = jSDocInfo74.getLendsName();
        boolean boolean80 = strList48.remove((java.lang.Object) jSDocInfo74);
        boolean boolean81 = strList48.isEmpty();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSTypeExpression78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = node7.removeChildren();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, node7);
        jSDocInfo0.setAssociatedNode(node7);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = node17.cloneNode();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        boolean boolean24 = node20.isTypeOf();
        boolean boolean25 = node20.wasEmptyNode();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.isDelProp();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node38 = node36.getParent();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node36.setJSType(jSType39);
        java.lang.String str41 = node36.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = null;
        node43.setStaticSourceFile(staticSourceFile46);
        boolean boolean48 = node43.isComma();
        node43.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node20, node27, node36, node43);
        com.google.javascript.rhino.Node node52 = node18.copyInformationFrom(node43);
        java.util.Set<java.lang.String> strSet53 = node52.getDirectives();
        jSDocInfo0.setAssociatedNode(node52);
        boolean boolean55 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(false);
        java.util.Set<java.lang.String> strSet58 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean73 = strList65.containsAll((java.util.Collection<java.lang.String>) strList72);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor74 = strList65.listIterator();
        int int75 = strList65.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = strList65.asList();
        java.util.stream.Stream<java.lang.String> strStream77 = strList76.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = strSet58.addAll((java.util.Collection<java.lang.String>) strList76);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strStream77);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isParamList();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        node11.addSuppression("");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        java.lang.String str5 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("NUMBER 4.0 1\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasBaseType();
        java.lang.String str12 = jSDocInfo10.getFileOverview();
        int int13 = jSDocInfo10.getParameterCount();
        boolean boolean14 = jSDocInfo10.isConstant();
        java.lang.String str15 = jSDocInfo10.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean30 = strList22.containsAll((java.util.Collection<java.lang.String>) strList29);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor31 = strList22.listIterator();
        int int32 = strList22.size();
        boolean boolean33 = strList22.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int35 = strList22.lastIndexOf((java.lang.Object) visibility34);
        jSDocInfo10.setVisibility(visibility34);
        jSDocInfo0.setVisibility(visibility34);
        boolean boolean38 = jSDocInfo0.isExterns();
        boolean boolean39 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.String str8 = node2.getSourceFileName();
        boolean boolean9 = node2.isGetElem();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(31, node2, 0, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasBaseType();
        jSDocInfo13.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int17 = jSDocInfo13.getParameterCount();
        boolean boolean18 = jSDocInfo13.isNoSideEffects();
        node12.setJSDocInfo(jSDocInfo13);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = new com.google.javascript.rhino.JSTypeExpression(node12, "OR [length: 45]");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasBaseType();
        java.lang.String str24 = jSDocInfo22.getFileOverview();
        int int25 = jSDocInfo22.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo22.getBaseType();
        java.lang.String str27 = jSDocInfo22.getMeaning();
        boolean boolean28 = jSDocInfo22.isNoCompile();
        boolean boolean29 = jSDocInfo22.hasFileOverview();
        java.lang.String str30 = jSDocInfo22.getFileOverview();
        boolean boolean31 = jSTypeExpression21.equals((java.lang.Object) jSDocInfo22);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        boolean boolean6 = node3.isVarArgs();
        int int7 = node3.getChildCount();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node17 = node3.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoFromForTree(node17);
        boolean boolean19 = node18.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node18.getJsDocBuilderForNode();
        java.lang.Object obj22 = node18.getProp(6);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        boolean boolean10 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = new com.google.javascript.rhino.JSTypeExpression(node2, "unknown");
        int int11 = node2.getChildCount();
        com.google.javascript.rhino.Node node12 = node2.cloneNode();
        boolean boolean13 = node2.isDo();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        node17.setIsSyntheticBlock(true);
        int int22 = node17.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node17.getJSDocInfo();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("OR 52\n    OR\n", (int) '#', 31);
        java.lang.String str28 = node17.checkTreeEquals(node27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((-1), node2, node17, 9, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Node tree inequality:\nTree1:\nOR [synthetic: 1]\n\n\nTree2:\nSTRING OR 52\n    OR\n 35\n\n\nSubtree1: OR [synthetic: 1]\n\n\nSubtree2: STRING OR 52\n    OR\n 35\n" + "'", str28, "Node tree inequality:\nTree1:\nOR [synthetic: 1]\n\n\nTree2:\nSTRING OR 52\n    OR\n 35\n\n\nSubtree1: OR [synthetic: 1]\n\n\nSubtree2: STRING OR 52\n    OR\n 35\n");
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        java.lang.String str10 = jSDocInfo0.getMeaning();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo0.getMarkers();
        java.lang.String str12 = jSDocInfo0.getDescription();
        boolean boolean13 = jSDocInfo0.isNoSideEffects();
        boolean boolean14 = jSDocInfo0.isExport();
        boolean boolean15 = jSDocInfo0.isDefine();
        boolean boolean16 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(markerCollection11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor30 = strList19.listIterator();
        java.util.Iterator<java.lang.String> strItor31 = strList19.iterator();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = node33.cloneNode();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        boolean boolean40 = node36.isTypeOf();
        boolean boolean41 = node36.wasEmptyNode();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isTypeOf();
        boolean boolean48 = node43.isDelProp();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        com.google.javascript.rhino.Node node54 = node52.getParent();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node52.setJSType(jSType55);
        java.lang.String str57 = node52.toString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node59.setStaticSourceFile(staticSourceFile62);
        boolean boolean64 = node59.isComma();
        node59.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList67 = com.google.common.collect.ImmutableList.of(node36, node43, node52, node59);
        com.google.javascript.rhino.Node node68 = node34.copyInformationFrom(node59);
        node68.putIntProp((int) ' ', 45);
        boolean boolean72 = node68.isGetProp();
        int int73 = strList19.lastIndexOf((java.lang.Object) node68);
        boolean boolean74 = node68.isDebugger();
        boolean boolean75 = node68.isAssign();
        node68.setWasEmptyNode(true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR" + "'", str57, "OR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = null;
        node3.setJSDocInfo(jSDocInfo7);
        boolean boolean9 = node3.isDo();
        boolean boolean10 = node3.isArrayLit();
        boolean boolean11 = node3.isVarArgs();
        boolean boolean12 = node3.isCase();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node14.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node14.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node14.children();
        boolean boolean21 = node14.isObjectLit();
        node14.setSourceEncodedPosition(15);
        boolean boolean24 = node14.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node26.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node26.getStaticSourceFile();
        boolean boolean32 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node39.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node45 = node34.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = node26.useSourceInfoFrom(node39);
        boolean boolean47 = node39.isWhile();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node51.isLabel();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = node55.cloneNode();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isNot();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = node58.copyInformationFromForTree(node64);
        com.google.javascript.rhino.InputId inputId66 = node58.getInputId();
        com.google.javascript.rhino.Node node67 = node58.getNext();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node69.setStaticSourceFile(staticSourceFile72);
        boolean boolean74 = node69.isComma();
        boolean boolean75 = node69.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList76 = com.google.common.collect.ImmutableList.of(node39, node51, node56, node58, node69);
        boolean boolean77 = node39.isUnscopedQualifiedName();
        int int78 = node14.getIndexOfChild(node39);
        com.google.javascript.rhino.Node node79 = node3.useSourceInfoFrom(node39);
        boolean boolean80 = node3.isAssignAdd();
        boolean boolean81 = node3.isVarArgs();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str29, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(inputId66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition0.getEndLine();
        int int10 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isIf();
        com.google.javascript.rhino.Node node23 = node14.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node25.setStaticSourceFile(staticSourceFile28);
        boolean boolean30 = node25.isComma();
        node25.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node34.children();
        com.google.javascript.rhino.InputId inputId39 = null;
        node34.setInputId(inputId39);
        boolean boolean41 = node34.isName();
        java.lang.String str42 = node25.checkTreeEquals(node34);
        boolean boolean43 = node34.isInc();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isNot();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = node45.copyInformationFromForTree(node51);
        com.google.javascript.rhino.InputId inputId53 = node45.getInputId();
        node34.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node55 = node14.useSourceInfoFromForTree(node34);
        java.lang.Object obj57 = node14.getProp(42);
        boolean boolean58 = node14.isIn();
        boolean boolean59 = node14.isStringKey();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable60 = node14.getAncestors();
        node14.setCharno((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType63 = node14.getJSType();
        node14.setCharno((int) '4');
        boolean boolean66 = node14.isBreak();
        typePosition0.setItem(node14);
        int int68 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str42, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(inputId53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(ancestorIterable60);
        org.junit.Assert.assertNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        int int17 = node13.getCharno();
        boolean boolean18 = node13.isName();
        boolean boolean19 = node13.isNE();
        boolean boolean20 = node13.isLabelName();
        boolean boolean21 = node8.isEquivalentToTyped(node13);
        boolean boolean22 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        node26.setIsSyntheticBlock(true);
        boolean boolean31 = node26.isContinue();
        boolean boolean32 = node26.isParamList();
        boolean boolean33 = node26.isParamList();
        boolean boolean34 = node26.isOptionalArg();
        boolean boolean35 = node26.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node46.children();
        com.google.javascript.rhino.InputId inputId51 = null;
        node46.setInputId(inputId51);
        boolean boolean53 = node46.isName();
        java.lang.String str54 = node37.checkTreeEquals(node46);
        boolean boolean55 = node46.isStringKey();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        int int61 = node59.getType();
        com.google.javascript.rhino.InputId inputId62 = node59.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = null;
        node59.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.Node node65 = node46.srcref(node59);
        boolean boolean66 = node26.isEquivalentToTyped(node59);
        com.google.javascript.rhino.Node node67 = node8.copyInformationFrom(node59);
        node67.putBooleanProp((int) (byte) 100, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder71 = node67.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node77.addChildrenToFront(node79);
        com.google.javascript.rhino.Node node81 = node79.getParent();
        boolean boolean82 = node81.isDefaultCase();
        boolean boolean83 = node81.isVoid();
        com.google.javascript.rhino.Node node84 = node75.useSourceInfoIfMissingFromForTree(node81);
        boolean boolean85 = node75.isDebugger();
        com.google.javascript.rhino.Node node86 = node67.useSourceInfoFromForTree(node75);
        boolean boolean87 = node75.isThrow();
        int int88 = node75.getSourceOffset();
        boolean boolean89 = node75.isDo();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str54, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNull(inputId62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        boolean boolean8 = node1.isSwitch();
        node1.setSourceEncodedPosition(47);
        java.lang.String str11 = node1.toStringTree();
        boolean boolean12 = node1.isThrow();
        node1.setLineno(36);
        boolean boolean15 = node1.isReturn();
        boolean boolean16 = node1.isFalse();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR 0 [jsdoc_info: JSDocInfo]\n" + "'", str11, "OR 0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        java.util.Spliterator<java.lang.String> strSpliterator71 = strList28.spliterator();
        strList28.clear();
        strList28.clear();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strSpliterator71);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(markerCollection9);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = strList6.reverse();
        java.lang.Object[] objArray73 = strList72.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = strList72.set(52, "OR [opt_arg: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isNoShadow();
        java.lang.String str10 = jSDocInfo8.getMeaning();
        boolean boolean11 = jSDocInfo8.hasReturnType();
        boolean boolean12 = jSDocInfo8.isDeprecated();
        boolean boolean13 = jSDocInfo8.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo8.getThisType();
        jSDocInfo8.setDeprecated(false);
        boolean boolean17 = jSDocInfo8.isNoAlias();
        boolean boolean18 = strSet7.remove((java.lang.Object) jSDocInfo8);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        boolean boolean26 = node20.isBlock();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = node28.cloneNode();
        com.google.javascript.rhino.Node node30 = node20.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean36 = node35.isExprResult();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node40.isLabel();
        boolean boolean43 = node35.isEquivalentTo(node40);
        com.google.javascript.rhino.Node node44 = node29.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.wasEmptyNode();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isTypeOf();
        boolean boolean58 = node53.isDelProp();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node62.setJSType(jSType65);
        java.lang.String str67 = node62.toString();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node69.setStaticSourceFile(staticSourceFile72);
        boolean boolean74 = node69.isComma();
        node69.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList77 = com.google.common.collect.ImmutableList.of(node46, node53, node62, node69);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node79.addChildrenToFront(node81);
        boolean boolean83 = node81.isLabel();
        boolean boolean84 = node81.isContinue();
        com.google.javascript.rhino.Node node85 = node53.copyInformationFrom(node81);
        boolean boolean86 = node81.isVoid();
        boolean boolean87 = node81.isQualifiedName();
        com.google.javascript.rhino.Node node88 = node81.removeFirstChild();
        int int89 = node44.getIndexOfChild(node81);
        java.lang.String str90 = node81.toString();
        jSDocInfo8.setAssociatedNode(node81);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR" + "'", str67, "OR");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "OR" + "'", str90, "OR");
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node13 = node11.getLastChild();
        boolean boolean14 = node11.isLocalResultCall();
        node11.setCharno(37);
        // The following exception was thrown during execution in test generation
        try {
            node11.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasBaseType();
        jSDocInfo18.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo18.getBaseType();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo18.getParameterNames();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        int int29 = node25.getCharno();
        boolean boolean30 = node25.isContinue();
        boolean boolean31 = strSet23.equals((java.lang.Object) node25);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.setIsSyntheticBlock(true);
        boolean boolean40 = node35.isContinue();
        boolean boolean41 = strSet23.equals((java.lang.Object) node35);
        java.lang.Object[] objArray42 = strSet23.toArray();
        int int43 = strList13.indexOf((java.lang.Object) objArray42);
        boolean boolean44 = strList13.isEmpty();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator45 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList13.replaceAll(strUnaryOperator45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean7 = jSDocInfo0.hasParameter("Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        boolean boolean8 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node19 = node15.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node10.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFrom(node15);
        boolean boolean23 = node15.isWhile();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node27.isLabel();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = node31.cloneNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        com.google.javascript.rhino.Node node43 = node34.getNext();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node45.setStaticSourceFile(staticSourceFile48);
        boolean boolean50 = node45.isComma();
        boolean boolean51 = node45.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList52 = com.google.common.collect.ImmutableList.of(node15, node27, node32, node34, node45);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        com.google.javascript.rhino.Node node59 = node34.copyInformationFromForTree(node54);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        boolean boolean65 = node61.isNot();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = node61.copyInformationFromForTree(node67);
        boolean boolean69 = node34.hasChild(node67);
        boolean boolean70 = node34.isTry();
        boolean boolean71 = node34.isSyntheticBlock();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        boolean boolean77 = node73.isNot();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = node73.copyInformationFromForTree(node79);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(100);
        node82.addChildrenToFront(node84);
        boolean boolean86 = node82.isNot();
        com.google.javascript.rhino.Node node87 = node80.useSourceInfoFrom(node82);
        int int88 = node34.getIndexOfChild(node82);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(3, node34, 0, 0);
        com.google.javascript.rhino.Node node92 = node91.getLastChild();
        node91.setVarArgs(true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        boolean boolean8 = node1.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node12.isLabel();
        boolean boolean15 = node12.isContinue();
        node12.setVarArgs(false);
        com.google.javascript.rhino.Node node18 = node1.srcrefTree(node12);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        boolean boolean30 = node25.isIf();
        com.google.javascript.rhino.Node node31 = node22.copyInformationFromForTree(node25);
        boolean boolean32 = node22.isEmpty();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isReturn();
        com.google.javascript.rhino.InputId inputId39 = node34.getInputId();
        boolean boolean40 = node34.isAdd();
        node22.addChildrenToFront(node34);
        boolean boolean42 = node34.isQualifiedName();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node48 = node44.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node44.getStaticSourceFile();
        boolean boolean50 = node44.isLocalResultCall();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node52.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node52.isComma();
        node52.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node61.children();
        com.google.javascript.rhino.InputId inputId66 = null;
        node61.setInputId(inputId66);
        boolean boolean68 = node61.isName();
        java.lang.String str69 = node52.checkTreeEquals(node61);
        boolean boolean70 = node61.isInc();
        node61.setType((int) (short) -1);
        node44.addChildrenToFront(node61);
        java.lang.String str74 = node44.getSourceFileName();
        node34.addChildToBack(node44);
        com.google.javascript.rhino.Node node76 = node1.useSourceInfoFrom(node34);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str69, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node3.children();
        boolean boolean9 = node3.isName();
        boolean boolean10 = node3.isTypeOf();
        int int11 = node3.getType();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node3.setJSType(jSType12);
        boolean boolean14 = node3.isObjectLit();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(48, "Unknown class name", (-1), 42);
        boolean boolean20 = node19.wasEmptyNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node22.isFalse();
        boolean boolean27 = node22.isOr();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node22);
        boolean boolean29 = node22.isContinue();
        boolean boolean30 = node22.isAssign();
        com.google.javascript.rhino.Node node31 = node3.useSourceInfoFrom(node22);
        boolean boolean32 = node3.isNot();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList6 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "INSTANCEOF 6 [jsdoc_info: JSDocInfo]\n", (java.lang.CharSequence) "OR [length: 45]", (java.lang.CharSequence) "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR 37\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR 37\n", (java.lang.CharSequence) "[JSDocInfo, GETELEM, NUMBER -1.0\n, Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n, NUMBER 1.0 37\n, , OR\n, OR 0 [jsdoc_info: JSDocInfo]\n, , (OR \n), OR\n    OR\n]", (java.lang.CharSequence) "INSTANCEOF 6 [jsdoc_info: JSDocInfo]\n", (java.lang.CharSequence) "()");
        org.junit.Assert.assertNotNull(charSequenceList6);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4, "()");
        java.lang.String str3 = node2.toStringTree();
        com.google.javascript.rhino.InputId inputId4 = node2.getInputId();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        node8.setIsSyntheticBlock(true);
        boolean boolean13 = node8.isContinue();
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isSwitch();
        node8.removeProp((int) '4');
        boolean boolean18 = node8.isParamList();
        node8.setWasEmptyNode(false);
        boolean boolean21 = node8.isBreak();
        boolean boolean22 = node8.isLabelName();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        node26.setIsSyntheticBlock(true);
        boolean boolean31 = node26.isContinue();
        java.lang.String str32 = node26.getQualifiedName();
        boolean boolean33 = node26.isSwitch();
        int int34 = node8.getIndexOfChild(node26);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenToFront(node8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "RETURN ()\n" + "'", str3, "RETURN ()\n");
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        boolean boolean3 = jSDocInfo0.isExport();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.isExport();
        boolean boolean6 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        jSDocInfo0.setLicense("OR 0 [jsdoc_info: JSDocInfo]\n");
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.isNoShadow();
        java.lang.String str8 = jSDocInfo6.getMeaning();
        com.google.javascript.rhino.Node node9 = jSDocInfo6.getAssociatedNode();
        boolean boolean10 = jSDocInfo6.hasEnumParameterType();
        boolean boolean11 = strSet5.remove((java.lang.Object) boolean10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo12.getParameterNames();
        boolean boolean14 = jSDocInfo12.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo12.getVisibility();
        java.lang.String str17 = jSDocInfo12.getDescriptionForParameter("Not declared as a type name");
        boolean boolean18 = jSDocInfo12.isOverride();
        java.lang.String str20 = jSDocInfo12.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = jSDocInfo12.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo23.getParameterNames();
        boolean boolean25 = jSDocInfo23.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo23.getThrownTypes();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        boolean boolean32 = node28.isTypeOf();
        boolean boolean33 = node28.wasEmptyNode();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isTypeOf();
        boolean boolean40 = node35.isDelProp();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        com.google.javascript.rhino.Node node46 = node44.getParent();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node44.setJSType(jSType47);
        java.lang.String str49 = node44.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        node51.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList59 = com.google.common.collect.ImmutableList.of(node28, node35, node44, node51);
        boolean boolean60 = node51.isComma();
        boolean boolean61 = node51.isCase();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int67 = node66.getSideEffectFlags();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        node69.addChildrenToFront(node71);
        com.google.javascript.rhino.Node node73 = node71.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str75 = jSDocInfo74.getFileOverview();
        java.lang.String str76 = jSDocInfo74.getFileOverview();
        boolean boolean77 = jSDocInfo74.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList78 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo23, (java.lang.Object) node51, (java.lang.Object) node66, (java.lang.Object) node71, (java.lang.Object) jSDocInfo74);
        int int79 = strList21.indexOf((java.lang.Object) node66);
        int int80 = strList21.size();
        boolean boolean81 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList21);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        node83.addChildrenToFront(node85);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable87 = node83.children();
        com.google.javascript.rhino.InputId inputId88 = null;
        node83.setInputId(inputId88);
        boolean boolean90 = node83.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node91 = node83.getParent();
        boolean boolean92 = strSet5.contains((java.lang.Object) node91);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(visibility15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR" + "'", str49, "OR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(nodeIterable87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isReturn();
        com.google.javascript.rhino.InputId inputId15 = node10.getInputId();
        boolean boolean16 = node10.isAdd();
        boolean boolean17 = node10.isQuotedString();
        int int19 = node10.getIntProp((int) (byte) 1);
        node1.addChildToFront(node10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = node1.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setLineno(37);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = node25.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node33 = node19.srcref(node25);
        int int34 = strList13.indexOf((java.lang.Object) node33);
        boolean boolean35 = strList13.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor37 = strList13.listIterator(44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (44) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        java.lang.String[] strArray13 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray19 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray20 = strSet14.toArray((java.lang.Comparable<java.lang.String>[]) strArray19);
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean35 = strList27.containsAll((java.util.Collection<java.lang.String>) strList34);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor36 = strList27.listIterator();
        int int37 = strList27.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList27.asList();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node40.setStaticSourceFile(staticSourceFile43);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node55 = node53.getParent();
        com.google.javascript.rhino.Node node56 = node46.useSourceInfoFromForTree(node53);
        boolean boolean57 = node40.hasChild(node46);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        java.lang.String str62 = node59.toString();
        int int63 = node59.getChildCount();
        boolean boolean64 = node59.isGetProp();
        boolean boolean65 = node40.isEquivalentTo(node59);
        int int66 = strList27.indexOf((java.lang.Object) node40);
        boolean boolean67 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList27);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor69 = strList27.listIterator(1);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor70 = strList27.iterator();
        java.util.Iterator<java.lang.String> strItor71 = strList27.iterator();
        boolean boolean72 = strList27.isEmpty();
        java.util.ListIterator<java.lang.String> strItor74 = strList27.listIterator(5);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableArray20);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str62, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strItor74);
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.wasEmptyNode();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node46.setJSType(jSType49);
        java.lang.String str51 = node46.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        boolean boolean58 = node53.isComma();
        node53.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node30, node37, node46, node53);
        boolean boolean62 = node53.isComma();
        boolean boolean63 = node7.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        com.google.javascript.rhino.Node node69 = node67.getParent();
        node67.setIsSyntheticBlock(true);
        boolean boolean72 = node67.isContinue();
        java.lang.String str73 = node67.getQualifiedName();
        node67.putBooleanProp(1, false);
        com.google.javascript.rhino.Node node77 = node53.useSourceInfoIfMissingFromForTree(node67);
        boolean boolean78 = node53.isVoid();
        boolean boolean79 = node53.isAdd();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(213028, (int) (byte) 1, 31);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = strList5.isEmpty();
        int int8 = strList5.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        java.util.Iterator<java.lang.String> strItor9 = strList5.iterator();
        int int10 = strList5.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList13 = strList5.subList((int) (byte) 1, 40999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (1) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node24.isComma();
        boolean boolean34 = node24.isCase();
        int int35 = node24.getChildCount();
        boolean boolean36 = node24.hasOneChild();
        boolean boolean37 = node24.isCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.hasParameterType("NUMBER ");
        boolean boolean10 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet0.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet5.union(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet9.union(booleanLiteralSet10);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = booleanLiteralSet5.union(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet2.union(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet13.union(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet17.intersection(booleanLiteralSet18);
        boolean boolean21 = booleanLiteralSet17.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet15.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean25 = booleanLiteralSet23.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet26.intersection(booleanLiteralSet27);
        boolean boolean30 = booleanLiteralSet28.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet23.intersection(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet32.intersection(booleanLiteralSet33);
        boolean boolean36 = booleanLiteralSet32.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = booleanLiteralSet37.union(booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet42.union(booleanLiteralSet43);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet46.union(booleanLiteralSet47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = booleanLiteralSet42.union(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = booleanLiteralSet39.union(booleanLiteralSet49);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean54 = booleanLiteralSet52.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = booleanLiteralSet49.intersection(booleanLiteralSet52);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = booleanLiteralSet56.union(booleanLiteralSet58);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = booleanLiteralSet52.intersection(booleanLiteralSet59);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet32.intersection(booleanLiteralSet59);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet23.intersection(booleanLiteralSet32);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet17.union(booleanLiteralSet32);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet65.union(booleanLiteralSet66);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = booleanLiteralSet68.union(booleanLiteralSet70);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = booleanLiteralSet73.union(booleanLiteralSet74);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = booleanLiteralSet76.union(booleanLiteralSet78);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = booleanLiteralSet75.union(booleanLiteralSet79);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet81 = booleanLiteralSet71.union(booleanLiteralSet75);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = booleanLiteralSet66.union(booleanLiteralSet75);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet85 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = booleanLiteralSet83.union(booleanLiteralSet85);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet89 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet90 = booleanLiteralSet88.union(booleanLiteralSet89);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet92 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet93 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = booleanLiteralSet92.union(booleanLiteralSet93);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet95 = booleanLiteralSet88.union(booleanLiteralSet92);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet96 = booleanLiteralSet85.union(booleanLiteralSet95);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet97 = booleanLiteralSet75.union(booleanLiteralSet85);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet98 = booleanLiteralSet32.intersection(booleanLiteralSet75);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet81 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet81.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet85 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet85.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet89 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet89.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet90 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet90.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet92 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet92.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet93 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet93.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet95 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet95.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet96 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet96.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet97 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet97.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet98 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet98.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        boolean boolean17 = strList6.isEmpty();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        boolean boolean24 = node19.wasEmptyNode();
        boolean boolean25 = node19.isLabelName();
        node19.removeProp(49);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        boolean boolean33 = node29.isNot();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = node29.copyInformationFromForTree(node35);
        com.google.javascript.rhino.InputId inputId37 = node29.getInputId();
        boolean boolean38 = node29.isIn();
        boolean boolean39 = node29.isContinue();
        com.google.javascript.rhino.Node node40 = node19.copyInformationFromForTree(node29);
        boolean boolean41 = node29.isQualifiedName();
        node29.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(48, "Unknown class name", (-1), 42);
        boolean boolean49 = node48.wasEmptyNode();
        node29.addChildToBack(node48);
        int int51 = strList6.indexOf((java.lang.Object) node48);
        com.google.javascript.rhino.Node node52 = node48.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node52.addSuppression("(Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(inputId37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node52);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        com.google.javascript.rhino.Node node11 = jSTypeExpression10.getRoot();
        boolean boolean12 = jSTypeExpression10.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean14 = jSTypeExpression10.equals((java.lang.Object) visibility13);
        com.google.javascript.rhino.Node node15 = jSTypeExpression10.getRoot();
        com.google.javascript.rhino.Node node16 = jSTypeExpression10.getRoot();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression10);
        boolean boolean18 = jSTypeExpression17.isVarArgs();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeExpression17.evaluate(jSTypeStaticScope19, jSTypeRegistry20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean21 = strList16.containsAll((java.util.Collection<java.lang.String>) strList20);
        java.util.Iterator<java.lang.String> strItor22 = strList16.iterator();
        java.util.Iterator<java.lang.String> strItor23 = strList16.iterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        node1.setVarArgs(true);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node11.copyInformationFromForTree(node16);
        boolean boolean23 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isTypeOf();
        boolean boolean30 = node25.isVarArgs();
        boolean boolean31 = node25.isIn();
        node16.addChildToFront(node25);
        node1.addChildrenToBack(node16);
        int int34 = node1.getSideEffectFlags();
        node1.setWasEmptyNode(false);
        boolean boolean37 = node1.isAnd();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList13.reverse();
        int int18 = strList17.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        java.util.Spliterator<java.lang.String> strSpliterator34 = strList25.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = strList25.asList();
        int int36 = strList25.size();
        boolean boolean37 = strList17.containsAll((java.util.Collection<java.lang.String>) strList25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = strList17.set(44, "OR 0\n    OR\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strSpliterator34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFromForTree(node64);
        boolean boolean66 = node64.isArrayLit();
        boolean boolean67 = node64.isGetterDef();
        boolean boolean68 = node64.isTrue();
        boolean boolean69 = node64.isBreak();
        boolean boolean70 = node64.isName();
        boolean boolean71 = node64.isRegExp();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList19.asList();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags32 = new com.google.javascript.rhino.Node.SideEffectFlags(2);
        boolean boolean33 = sideEffectFlags32.areAllFlagsSet();
        sideEffectFlags32.setAllFlags();
        sideEffectFlags32.clearSideEffectFlags();
        sideEffectFlags32.setMutatesGlobalState();
        boolean boolean37 = strList30.contains((java.lang.Object) sideEffectFlags32);
        sideEffectFlags32.setAllFlags();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        java.lang.String[] strArray13 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray19 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray20 = strSet14.toArray((java.lang.Comparable<java.lang.String>[]) strArray19);
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean35 = strList27.containsAll((java.util.Collection<java.lang.String>) strList34);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor36 = strList27.listIterator();
        int int37 = strList27.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList27.asList();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node40.setStaticSourceFile(staticSourceFile43);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node55 = node53.getParent();
        com.google.javascript.rhino.Node node56 = node46.useSourceInfoFromForTree(node53);
        boolean boolean57 = node40.hasChild(node46);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        java.lang.String str62 = node59.toString();
        int int63 = node59.getChildCount();
        boolean boolean64 = node59.isGetProp();
        boolean boolean65 = node40.isEquivalentTo(node59);
        int int66 = strList27.indexOf((java.lang.Object) node40);
        boolean boolean67 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList27);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor69 = strList27.listIterator(1);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor70 = strList27.iterator();
        java.util.Iterator<java.lang.String> strItor71 = strList27.iterator();
        boolean boolean72 = strList27.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strList27.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableArray20);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str62, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.JSDocInfo.Marker[][][][][]> markerArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(markerArrayBuilder0);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("OR\n    OR\n");
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean12 = jSDocInfo0.hasParameterType("OR 0");
        boolean boolean13 = jSDocInfo0.hasBaseType();
        boolean boolean14 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isFalse();
        boolean boolean14 = node9.isParamList();
        node1.addChildToFront(node9);
        java.lang.Object obj17 = node1.getProp(6);
        boolean boolean18 = node1.hasOneChild();
        boolean boolean19 = node1.isIf();
        boolean boolean20 = node1.isNot();
        com.google.javascript.rhino.Node node21 = node1.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = node1.getExistingIntProp(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 6");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition1.getPositionOnStartLine();
        int int10 = typePosition1.getEndLine();
        int int11 = typePosition1.getStartLine();
        boolean boolean12 = typePosition1.hasBrackets();
        int int13 = typePosition1.getStartLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        java.util.Spliterator<java.lang.String> strSpliterator71 = strList28.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor73 = strList28.listIterator(213044);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 213044");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strSpliterator71);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 38, 4);
        int int4 = node3.getSideEffectFlags();
        boolean boolean5 = node3.isContinue();
        node3.setLength((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node8 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean41 = strList33.containsAll((java.util.Collection<java.lang.String>) strList40);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strList33.spliterator();
        boolean boolean43 = strList25.containsAll((java.util.Collection<java.lang.String>) strList33);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList33.spliterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList33.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strList33.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(strItor45);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder1 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder3 = nodeArrayBuilder1.add(nodeArray2);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder4 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node22 };
        com.google.javascript.rhino.Node[][] nodeArray29 = new com.google.javascript.rhino.Node[][] { nodeArray12, nodeArray20, nodeArray28 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder4.add(nodeArray29);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.isDelProp();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        int int44 = node40.getCharno();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node33, node40 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray45);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder47 = nodeArrayBuilder30.add(nodeArray45);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder48 = nodeArrayBuilder1.add(nodeArray45);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder52 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder54 = nodeArrayBuilder52.add(nodeArray53);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray53, 2, (int) '4');
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) '4', nodeArray53, 50, 15);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(9, nodeArray53);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder62 = nodeArrayBuilder48.add(nodeArray53);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(1, nodeArray53, 59, (int) (short) 100);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArrayBuilder3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArrayBuilder47);
        org.junit.Assert.assertNotNull(nodeArrayBuilder48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArrayBuilder54);
        org.junit.Assert.assertNotNull(nodeArrayBuilder62);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        boolean boolean8 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList19.asList();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        boolean boolean38 = node32.isBlock();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node40.cloneNode();
        com.google.javascript.rhino.Node node42 = node32.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean48 = node47.isExprResult();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        boolean boolean54 = node52.isLabel();
        boolean boolean55 = node47.isEquivalentTo(node52);
        com.google.javascript.rhino.Node node56 = node41.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node58.children();
        node58.putIntProp(8, (int) '4');
        node41.addChildrenToBack(node58);
        boolean boolean67 = strList19.contains((java.lang.Object) node58);
        int int68 = strList19.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = strList19.add("[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition1.getPositionOnEndLine();
        int int10 = typePosition1.getEndLine();
        boolean boolean11 = typePosition1.hasBrackets();
        int int12 = typePosition1.getPositionOnEndLine();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node14.children();
        com.google.javascript.rhino.InputId inputId19 = null;
        node14.setInputId(inputId19);
        boolean boolean21 = node14.isName();
        node14.putIntProp((int) (byte) 10, 0);
        typePosition1.setItem(node14);
        boolean boolean26 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isNot();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = node35.copyInformationFromForTree(node41);
        boolean boolean43 = node42.isExprResult();
        boolean boolean44 = node42.isDefaultCase();
        node28.addChildrenToBack(node42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.Node node56 = node54.getParent();
        com.google.javascript.rhino.Node node57 = node47.useSourceInfoFromForTree(node54);
        boolean boolean58 = node57.isSetterDef();
        com.google.javascript.rhino.Node node59 = node57.getLastChild();
        boolean boolean60 = node57.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node61 = node42.useSourceInfoIfMissingFromForTree(node57);
        typePosition1.setItem(node61);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node61.getAncestors();
        com.google.javascript.rhino.Node node64 = node61.getFirstChild();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        com.google.javascript.rhino.Node node16 = node7.copyInformationFromForTree(node10);
        jSDocInfo1.setAssociatedNode(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node10.children();
        boolean boolean19 = node10.isAssign();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, node10, 45, (int) (byte) 0);
        boolean boolean23 = node22.isContinue();
        boolean boolean25 = node22.getBooleanProp((int) '4');
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR 2 [jsdoc_info: JSDocInfo]\n", 6, 204841);
        node3.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str6 = ternaryValue5.toString();
        boolean boolean8 = ternaryValue5.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue2.and(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue0.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue12.xor(ternaryValue13);
        boolean boolean16 = ternaryValue12.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean19 = ternaryValue17.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean22 = ternaryValue20.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str24 = ternaryValue23.toString();
        boolean boolean26 = ternaryValue23.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue20.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue17.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue12.or(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue29.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue31.xor(ternaryValue32);
        boolean boolean35 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean38 = ternaryValue36.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean41 = ternaryValue39.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str43 = ternaryValue42.toString();
        boolean boolean45 = ternaryValue42.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue39.and(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue36.and(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue31.or(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue30.or(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue49.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue11.and(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue52.xor(ternaryValue53);
        boolean boolean56 = ternaryValue52.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue52.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue57.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue50.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue50.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue60.xor(ternaryValue61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "unknown" + "'", str6, "unknown");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "unknown" + "'", str24, "unknown");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "unknown" + "'", str43, "unknown");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        boolean boolean13 = node3.isParamList();
        node3.setWasEmptyNode(false);
        boolean boolean16 = node3.isAssign();
        boolean boolean17 = node3.isAssignAdd();
        boolean boolean18 = node3.isIn();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        int int17 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean18 = jSDocInfo0.isInterface();
        int int19 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str21 = jSDocInfo0.getDescriptionForParameter("Unknown class name");
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = node23.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isNot();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node38 = node32.getLastSibling();
        jSDocInfo0.setAssociatedNode(node32);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection40 = jSDocInfo0.getMarkers();
        java.lang.String str41 = jSDocInfo0.getMeaning();
        java.lang.String str42 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(markerCollection40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        int int17 = node13.getCharno();
        boolean boolean18 = node13.isName();
        boolean boolean19 = node13.isNE();
        boolean boolean20 = node13.isLabelName();
        boolean boolean21 = node8.isEquivalentToTyped(node13);
        boolean boolean22 = node8.isQualifiedName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node34 = node32.getParent();
        com.google.javascript.rhino.Node node35 = node25.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasBaseType();
        jSDocInfo36.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo36.getBaseType();
        node35.setJSDocInfo(jSDocInfo36);
        java.lang.Object obj43 = node35.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node44 = node8.useSourceInfoIfMissingFromForTree(node35);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        node1.removeProp(44);
        boolean boolean21 = node1.isIf();
        com.google.javascript.rhino.InputId inputId22 = node1.getInputId();
        int int23 = node1.getCharno();
        boolean boolean24 = node1.isHook();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor18 = strList17.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList21 = strList17.subList(15, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (15) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        node15.removeProp(48);
        com.google.javascript.rhino.Node node26 = node15.getAncestor(0);
        boolean boolean27 = node15.isUnscopedQualifiedName();
        boolean boolean28 = node15.isStringKey();
        boolean boolean29 = node15.isScript();
        com.google.javascript.rhino.Node node30 = node15.removeChildren();
        boolean boolean31 = node15.isVoid();
        boolean boolean32 = node15.isBlock();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        boolean boolean4 = node1.isVarArgs();
        java.lang.String str8 = node1.toString(false, true, false);
        boolean boolean9 = node1.isVar();
        boolean boolean10 = node1.isVar();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor12 = ancestorIterable11.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor13 = ancestorIterable11.iterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ancestorIterable11);
        org.junit.Assert.assertNotNull(nodeItor12);
        org.junit.Assert.assertNotNull(nodeItor13);
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 10);
        com.google.javascript.rhino.Node node9 = node8.cloneNode();
        boolean boolean10 = node9.isFor();
        boolean boolean11 = node1.isEquivalentToTyped(node9);
        boolean boolean12 = node1.isVar();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node15.setStaticSourceFile(staticSourceFile18);
        boolean boolean20 = node15.isComma();
        boolean boolean21 = node15.isBlock();
        java.lang.String str22 = node15.toStringTree();
        boolean boolean23 = node15.isDec();
        node15.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node31 = node27.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node27.getStaticSourceFile();
        boolean boolean33 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        java.lang.String str38 = node35.toString();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node40.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node40.getStaticSourceFile();
        com.google.javascript.rhino.Node node46 = node35.copyInformationFromForTree(node40);
        com.google.javascript.rhino.Node node47 = node27.useSourceInfoFrom(node40);
        boolean boolean48 = node40.isWhile();
        node40.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(54, node15, node40);
        com.google.javascript.rhino.Node node52 = node1.useSourceInfoFromForTree(node40);
        boolean boolean53 = node52.isThrow();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node52.getAncestors();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str22, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str30, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str38, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str43, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable54);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        boolean boolean17 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int19 = strList6.lastIndexOf((java.lang.Object) visibility18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getLicense();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo20.getParameterNames();
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "OR [jsdoc_info: JSDocInfo]\n", "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n", "OR [jsdoc_info: JSDocInfo]", "Not declared as a constructor", "OR\n    OR\n" };
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "OR [jsdoc_info: JSDocInfo]\n", "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n", "OR [jsdoc_info: JSDocInfo]", "Not declared as a constructor", "OR\n    OR\n" };
        java.lang.CharSequence[][] charSequenceArray37 = new java.lang.CharSequence[][] { charSequenceArray29, charSequenceArray36 };
        java.lang.CharSequence[][] charSequenceArray38 = strSet22.toArray(charSequenceArray37);
        boolean boolean39 = strList6.containsAll((java.util.Collection<java.lang.String>) strSet22);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor40 = strList6.listIterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasBaseType();
        java.lang.String str43 = jSDocInfo41.getDescription();
        boolean boolean44 = jSDocInfo41.isExpose();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node46.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node46.getStaticSourceFile();
        boolean boolean52 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node59.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node59.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node54.copyInformationFromForTree(node59);
        com.google.javascript.rhino.Node node66 = node46.useSourceInfoFrom(node59);
        boolean boolean67 = node46.isTrue();
        jSDocInfo41.setAssociatedNode(node46);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList69 = jSDocInfo41.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo41.getModifies();
        boolean boolean71 = strList6.containsAll((java.util.Collection<java.lang.String>) strSet70);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertNotNull(charSequenceArray37);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str57, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str62, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strList2.retainAll((java.util.Collection<java.lang.String>) strList7);
        int int10 = strList2.size();
        java.lang.String[] strArray12 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strList13.isEmpty();
        boolean boolean16 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        boolean boolean18 = strList13.add("OR\n");
        boolean boolean20 = strList13.add("");
        boolean boolean22 = strList13.add("OR [jsdoc_info: JSDocInfo]\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean37 = strList29.containsAll((java.util.Collection<java.lang.String>) strList36);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor38 = strList36.iterator();
        boolean boolean39 = strList36.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream40 = strList36.stream();
        boolean boolean41 = strList13.equals((java.lang.Object) strList36);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node47 = node45.getParent();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node45.setJSType(jSType48);
        java.lang.String str50 = node45.getSourceFileName();
        boolean boolean51 = node45.isDelProp();
        boolean boolean52 = node45.isNE();
        boolean boolean53 = node45.isAssign();
        int int54 = strList13.indexOf((java.lang.Object) boolean53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strList13.spliterator();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator55);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        boolean boolean19 = node7.hasMoreThanOneChild();
        boolean boolean21 = node7.getBooleanProp(51);
        com.google.javascript.rhino.Node node22 = node7.getLastChild();
        boolean boolean23 = node7.isAssign();
        boolean boolean24 = node7.isExprResult();
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node7.appendStringTree(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isFalse();
        boolean boolean9 = node2.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        boolean boolean12 = node11.isParamList();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isBreak();
        node16.setLineno(50);
        boolean boolean21 = node16.isDebugger();
        boolean boolean22 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(5, node2, node11, node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node2.siblings();
        boolean boolean25 = node2.isNE();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo12.getParameterNames();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        int int23 = node19.getCharno();
        boolean boolean24 = node19.isContinue();
        boolean boolean25 = strSet17.equals((java.lang.Object) node19);
        node11.setDirectives(strSet17);
        boolean boolean27 = node11.isWith();
        node11.putBooleanProp(9, true);
        int int31 = node11.getChildCount();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition2.getPositionOnEndLine();
        int int10 = typePosition2.getPositionOnStartLine();
        com.google.javascript.rhino.Node node11 = null;
        typePosition2.setItem(node11);
        boolean boolean13 = typePosition2.hasBrackets();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.wasEmptyNode();
        boolean boolean21 = node15.isLabelName();
        typePosition2.setItem(node15);
        com.google.javascript.rhino.Node node23 = node15.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node23.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isIf();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        boolean boolean10 = node9.isParamList();
        com.google.javascript.rhino.Node node11 = node2.useSourceInfoIfMissingFrom(node9);
        boolean boolean12 = node9.isComma();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.Node node25 = node15.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasBaseType();
        jSDocInfo26.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo26.getBaseType();
        node25.setJSDocInfo(jSDocInfo26);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 1, node25, 38, (int) '4');
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isReturn();
        boolean boolean42 = node37.isContinue();
        com.google.javascript.rhino.Node node43 = node34.srcref(node37);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isNot();
        boolean boolean50 = node45.isIf();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        boolean boolean53 = node52.isParamList();
        com.google.javascript.rhino.Node node54 = node45.useSourceInfoIfMissingFrom(node52);
        boolean boolean55 = node52.isComma();
        java.lang.String str56 = node52.getSourceFileName();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(47, node9, node34, node52, 41, 43);
        boolean boolean60 = node52.isBlock();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("OR 6\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 51, (int) '#', 0);
        boolean boolean12 = strList7.equals((java.lang.Object) 51);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor28 = strList19.listIterator();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        boolean boolean33 = node30.isVarArgs();
        int int34 = node30.getChildCount();
        int int35 = strList19.lastIndexOf((java.lang.Object) int34);
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList19.asList();
        boolean boolean37 = strList19.isEmpty();
        boolean boolean38 = strList19.isEmpty();
        boolean boolean39 = strList7.containsAll((java.util.Collection<java.lang.String>) strList19);
        java.lang.Object[] objArray40 = strList19.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 0, 42);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        int int10 = node6.getCharno();
        boolean boolean11 = node6.isName();
        boolean boolean12 = node6.isNE();
        boolean boolean13 = node6.isIn();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        boolean boolean20 = node19.isDefaultCase();
        int int21 = node6.getIndexOfChild(node19);
        node6.setSourceEncodedPosition(4095);
        boolean boolean24 = node6.hasOneChild();
        node6.setWasEmptyNode(false);
        boolean boolean27 = node6.isCase();
        com.google.javascript.rhino.Node node28 = node4.srcref(node6);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 48, 39, (int) ' ');
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node43 = node41.getParent();
        com.google.javascript.rhino.Node node44 = node34.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        int int50 = node46.getCharno();
        boolean boolean51 = node46.isName();
        boolean boolean52 = node46.isNE();
        boolean boolean53 = node46.isLabelName();
        boolean boolean54 = node41.isEquivalentToTyped(node46);
        java.util.Set<java.lang.String> strSet55 = node41.getDirectives();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean60 = node59.isRegExp();
        boolean boolean61 = node59.isName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node59.setJSType(jSType62);
        boolean boolean64 = node59.isBreak();
        boolean boolean65 = node41.isEquivalentTo(node59);
        com.google.javascript.rhino.Node node66 = node32.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(52, node4, node66);
        boolean boolean68 = node66.isParamList();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        com.google.javascript.rhino.InputId inputId17 = node9.getInputId();
        boolean boolean18 = node9.isIn();
        boolean boolean19 = node1.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node25 = node23.getParent();
        node23.setIsSyntheticBlock(true);
        boolean boolean28 = node23.isContinue();
        boolean boolean29 = node23.isParamList();
        boolean boolean30 = node23.isParamList();
        com.google.javascript.rhino.Node node31 = node23.cloneTree();
        com.google.javascript.rhino.Node node32 = node23.cloneTree();
        node1.addChildrenToBack(node32);
        boolean boolean34 = node1.isCall();
        boolean boolean35 = node1.isEmpty();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.wasEmptyNode();
        boolean boolean8 = node2.isLabelName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node2.siblings();
        node2.putIntProp(0, 0);
        boolean boolean13 = node2.isHook();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(29, node2);
        // The following exception was thrown during execution in test generation
        try {
            node14.setString("OR 2 [jsdoc_info: JSDocInfo]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NEG is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.isExpose();
        jSDocInfo0.setLicense("ERROR 52");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasBaseType();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        int int22 = jSDocInfo19.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getEnumParameterType();
        node10.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo19.getTypedefType();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo19.getReferences();
        int int28 = jSDocInfo19.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean28 = strList20.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList20.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList20.asList();
        boolean boolean31 = strSet5.contains((java.lang.Object) strList30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isReturn();
        com.google.javascript.rhino.InputId inputId38 = node33.getInputId();
        boolean boolean39 = node33.isAdd();
        boolean boolean40 = node33.isQuotedString();
        int int42 = node33.getIntProp((int) (byte) 1);
        boolean boolean43 = node33.isVarArgs();
        boolean boolean44 = strList30.contains((java.lang.Object) boolean43);
        boolean boolean45 = strList30.isEmpty();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        boolean boolean51 = node47.isNew();
        java.lang.String str55 = node47.toString(false, false, true);
        boolean boolean56 = node47.isVar();
        boolean boolean57 = strList30.equals((java.lang.Object) node47);
        java.lang.String str61 = node47.toString(true, true, false);
        java.lang.String str62 = node47.toString();
        boolean boolean63 = node47.isTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(inputId38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR" + "'", str55, "OR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "OR" + "'", str61, "OR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR" + "'", str62, "OR");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node29.children();
        com.google.javascript.rhino.InputId inputId34 = null;
        node29.setInputId(inputId34);
        boolean boolean36 = node29.isName();
        java.lang.String str37 = node20.checkTreeEquals(node29);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node2, node8, node29 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList39 = com.google.common.collect.ImmutableList.of(nodeArray38);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray38);
        java.lang.String str41 = node40.getQualifiedName();
        boolean boolean42 = node40.hasOneChild();
        int int43 = node40.getType();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        boolean boolean54 = node50.isNot();
        boolean boolean55 = node50.isIf();
        com.google.javascript.rhino.Node node56 = node47.copyInformationFromForTree(node50);
        boolean boolean57 = node56.isParamList();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = new com.google.javascript.rhino.JSTypeExpression(node56, "OR [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node60 = node56.cloneTree();
        node56.removeProp(50);
        boolean boolean63 = node56.isParamList();
        boolean boolean64 = node40.isEquivalentTo(node56);
        boolean boolean65 = node40.isComma();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str37, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isAdd();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node8.getStaticSourceFile();
        boolean boolean14 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node16.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = node8.useSourceInfoFrom(node21);
        boolean boolean29 = node21.isWhile();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node33.isLabel();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = node37.cloneNode();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node40.copyInformationFromForTree(node46);
        com.google.javascript.rhino.InputId inputId48 = node40.getInputId();
        com.google.javascript.rhino.Node node49 = node40.getNext();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        boolean boolean57 = node51.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node21, node33, node38, node40, node51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node40.getJsDocBuilderForNode();
        boolean boolean60 = node40.hasOneChild();
        com.google.javascript.rhino.Node node61 = node1.copyInformationFrom(node40);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node1.setStaticSourceFile(staticSourceFile62);
        boolean boolean64 = node1.isAdd();
        boolean boolean65 = node1.isAssign();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = new com.google.javascript.rhino.JSTypeExpression(node1, "(Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n    ERROR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: ERROR\n    OR\n)");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeExpression67.evaluate(jSTypeStaticScope68, jSTypeRegistry69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        int int3 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = strList6.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isNot();
        boolean boolean31 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.Node node36 = node26.copyInformationFromForTree(node33);
        java.lang.Object obj38 = node36.getProp(38);
        node36.setCharno(2);
        boolean boolean41 = node36.isInstanceOf();
        boolean boolean42 = strList13.equals((java.lang.Object) node36);
        boolean boolean43 = node36.isContinue();
        node36.addSuppression("NUMBER 1.0 37\n");
        boolean boolean46 = node36.isGetProp();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        boolean boolean30 = strList13.isEmpty();
        java.lang.Object[] objArray31 = strList13.toArray();
        java.lang.String[] strArray39 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        java.lang.Object[] objArray42 = strSet40.toArray();
        strSet40.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList57 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean58 = strList50.containsAll((java.util.Collection<java.lang.String>) strList57);
        int int59 = strList50.size();
        boolean boolean60 = strSet40.retainAll((java.util.Collection<java.lang.String>) strList50);
        java.util.Iterator<java.lang.String> strItor61 = strSet40.iterator();
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        boolean boolean71 = strList64.retainAll((java.util.Collection<java.lang.String>) strList69);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.String>> strCollectionList72 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.String>) strList69);
        boolean boolean73 = strSet40.removeAll((java.util.Collection<java.lang.String>) strList69);
        strList69.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = strList13.addAll(49, (java.util.Collection<java.lang.String>) strList69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strCollectionList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        boolean boolean57 = jSDocInfo1.isConstant();
        boolean boolean58 = jSDocInfo1.isExterns();
        int int59 = jSDocInfo1.getParameterCount();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo1.getParameterNames();
        boolean boolean61 = jSDocInfo1.shouldPreserveTry();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 0, 100);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        node1.setSourceEncodedPosition(4095);
        boolean boolean19 = node1.hasOneChild();
        boolean boolean20 = node1.isDefaultCase();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "", (int) (byte) 10, 10);
        int int5 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node6 = node4.getParent();
        boolean boolean7 = node4.isNot();
        boolean boolean8 = node4.isVar();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isTypeOf();
        boolean boolean15 = node10.isOnlyModifiesThisCall();
        boolean boolean16 = node10.isOptionalArg();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isTypeOf();
        boolean boolean23 = node18.wasEmptyNode();
        boolean boolean24 = node18.isLabelName();
        boolean boolean25 = node18.isDec();
        boolean boolean26 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node10.srcref(node18);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.Node node33 = node31.getParent();
        int int34 = node31.getLength();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        node31.addChildrenToFront(node36);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = new com.google.javascript.rhino.JSTypeExpression(node31, "JSDocInfo");
        boolean boolean42 = node31.isComma();
        com.google.javascript.rhino.Node node43 = node31.detachFromParent();
        boolean boolean44 = node27.isEquivalentTo(node43);
        node4.addChildToFront(node43);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean21 = strList16.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = node30.copyInformationFromForTree(node36);
        boolean boolean38 = node37.isExprResult();
        boolean boolean39 = node37.isDefaultCase();
        node23.addChildrenToBack(node37);
        node23.setSourceEncodedPositionForTree(42);
        boolean boolean43 = node23.isHook();
        boolean boolean44 = node23.isLabelName();
        boolean boolean45 = strList16.equals((java.lang.Object) boolean44);
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator46 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList16.replaceAll(strUnaryOperator46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder2 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        java.lang.String str7 = node4.toString();
        com.google.javascript.rhino.Node node8 = node4.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node4.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] { node12 };
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node20.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node20 };
        com.google.javascript.rhino.Node[][] nodeArray27 = new com.google.javascript.rhino.Node[][] { nodeArray10, nodeArray18, nodeArray26 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = nodeArrayBuilder2.add(nodeArray27);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder29 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = nodeArrayBuilder29.add(nodeArray30);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder32 = nodeArrayBuilder28.add(nodeArray30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(4095, nodeArray30);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(43, nodeArray30, 12, 41);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList46 = com.google.common.collect.ImmutableList.of(typePosition38, typePosition39, typePosition40, typePosition41, typePosition42, typePosition43, typePosition44, typePosition45);
        int int47 = typePosition44.getPositionOnEndLine();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean52 = node51.isLabel();
        typePosition44.setItem(node51);
        boolean boolean54 = node51.isInc();
        node36.putProp(100, (java.lang.Object) node51);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str7, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str15, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArrayBuilder28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArrayBuilder31);
        org.junit.Assert.assertNotNull(nodeArrayBuilder32);
        org.junit.Assert.assertNotNull(typePositionList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        com.google.javascript.rhino.Node node9 = null;
        typePosition1.setItem(node9);
        int int11 = typePosition1.getStartLine();
        int int12 = typePosition1.getPositionOnEndLine();
        boolean boolean13 = typePosition1.hasBrackets();
        int int14 = typePosition1.getStartLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(36, "OR 0 [incrdecr: 45]", (int) (short) 0, (int) (short) -1);
        boolean boolean5 = node4.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder1 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        java.lang.String str6 = node3.toString();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node3.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] { node11 };
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node19 };
        com.google.javascript.rhino.Node[][] nodeArray26 = new com.google.javascript.rhino.Node[][] { nodeArray9, nodeArray17, nodeArray25 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder27 = nodeArrayBuilder1.add(nodeArray26);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.isDelProp();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        int int41 = node37.getCharno();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node30, node37 };
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray42);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder44 = nodeArrayBuilder27.add(nodeArray42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        boolean boolean51 = node47.isTypeOf();
        boolean boolean52 = node47.isDelProp();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        int int58 = node54.getCharno();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node47, node54 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray59);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder61 = nodeArrayBuilder27.add(nodeArray59);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(0, nodeArray59, 9, 213092);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str6, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArrayBuilder27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArrayBuilder44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArrayBuilder61);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags5.setReturnsTainted();
        int int7 = sideEffectFlags5.valueOf();
        boolean boolean8 = strSet3.remove((java.lang.Object) sideEffectFlags5);
        sideEffectFlags5.setMutatesGlobalState();
        sideEffectFlags5.setThrows();
        sideEffectFlags5.clearSideEffectFlags();
        boolean boolean12 = sideEffectFlags5.areAllFlagsSet();
        sideEffectFlags5.setMutatesThis();
        boolean boolean14 = sideEffectFlags5.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(1, 131072, (int) (short) -1);
        boolean boolean4 = node3.isVoid();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setAllFlags();
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        boolean boolean19 = node2.hasChild(node8);
        boolean boolean20 = node8.isNot();
        node8.addSuppression("Not declared as a type name");
        boolean boolean23 = node8.isNumber();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isTypeOf();
        boolean boolean30 = node25.isVarArgs();
        boolean boolean31 = node25.isCatch();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        boolean boolean41 = node40.isExprResult();
        boolean boolean42 = node40.isDefaultCase();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(15, node8, node25, node40);
        com.google.javascript.rhino.Node node44 = node8.detachFromParent();
        node44.setSourceFileForTesting("NUMBER 0.0 44");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        int int3 = jSDocInfo0.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        boolean boolean9 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR [directives: []]\n    OR\n");
        java.lang.String str12 = stringPosition0.getItem();
        stringPosition0.setItem("(OR 0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [directives: []]\n    OR\n" + "'", str12, "OR [directives: []]\n    OR\n");
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        java.lang.String str57 = jSDocInfo52.getMeaning();
        java.lang.String str58 = jSDocInfo52.getFileOverview();
        java.lang.String str59 = jSDocInfo52.getDeprecationReason();
        jSDocInfo52.setLicense("NUMBER 4.0");
        boolean boolean62 = jSDocInfo52.hasThisType();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            strSet9.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING OR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: STRING OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.hasMoreThanOneChild();
        boolean boolean14 = node3.isNew();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        int int20 = node18.getType();
        com.google.javascript.rhino.InputId inputId21 = node18.getInputId();
        com.google.javascript.rhino.Node node22 = node3.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node18.isNE();
        boolean boolean24 = node18.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node72.addChildrenToFront(node74);
        int int76 = node72.getCharno();
        boolean boolean77 = node72.isName();
        boolean boolean78 = node72.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node72, "Unknown class name");
        int int81 = strList62.lastIndexOf((java.lang.Object) "Unknown class name");
        boolean boolean82 = strList62.isEmpty();
        boolean boolean83 = strList62.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = strList62.remove(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 16, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.InputId inputId15 = null;
        node5.setInputId(inputId15);
        boolean boolean17 = node5.isDo();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.isDefine();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isIdGenerator();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList14 = com.google.common.collect.ImmutableList.of(typePosition6, typePosition7, typePosition8, typePosition9, typePosition10, typePosition11, typePosition12, typePosition13);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSetterDef();
        typePosition9.setItem(node18);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        boolean boolean35 = node29.isVar();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        boolean boolean43 = node37.isBlock();
        com.google.javascript.rhino.Node node44 = node37.getLastSibling();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node46.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node46.getStaticSourceFile();
        boolean boolean52 = node46.isVarArgs();
        node37.addChildrenToFront(node46);
        node37.setSourceEncodedPositionForTree(51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(50, node29, node37);
        boolean boolean57 = node56.isSetterDef();
        node18.addChildrenToFront(node56);
        jSDocInfo0.setAssociatedNode(node18);
        boolean boolean60 = jSDocInfo0.isOverride();
        java.lang.String str61 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(typePositionList14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo12.getParameterNames();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        int int23 = node19.getCharno();
        boolean boolean24 = node19.isContinue();
        boolean boolean25 = strSet17.equals((java.lang.Object) node19);
        node11.setDirectives(strSet17);
        boolean boolean27 = strSet17.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        boolean boolean33 = node29.isNot();
        node29.setSourceEncodedPositionForTree(40);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        int int41 = node39.getType();
        com.google.javascript.rhino.InputId inputId42 = node39.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = null;
        node39.setJSDocInfo(jSDocInfo43);
        boolean boolean45 = node39.isDo();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        boolean boolean51 = node47.isNot();
        boolean boolean52 = node47.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.Node node57 = node47.copyInformationFromForTree(node54);
        java.lang.Object obj59 = node57.getProp(38);
        com.google.javascript.rhino.Node node60 = node39.srcrefTree(node57);
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isTry();
        node60.detachChildren();
        boolean boolean65 = node29.isEquivalentTo(node60);
        boolean boolean66 = strSet17.equals((java.lang.Object) boolean65);
        java.util.Iterator<java.lang.String> strItor67 = strSet17.iterator();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strItor67);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 54, 0, (int) '4');
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.InputId inputId6 = null;
        node3.setInputId(inputId6);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isAdd();
        boolean boolean8 = node1.isQuotedString();
        int int10 = node1.getIntProp((int) (byte) 1);
        boolean boolean11 = node1.isVarArgs();
        node1.setVarArgs(true);
        boolean boolean14 = node1.isOr();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isNot();
        boolean boolean31 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.Node node36 = node26.copyInformationFromForTree(node33);
        java.lang.Object obj38 = node36.getProp(38);
        node36.setCharno(2);
        boolean boolean41 = node36.isInstanceOf();
        boolean boolean42 = strList13.equals((java.lang.Object) node36);
        boolean boolean43 = node36.isContinue();
        node36.addSuppression("(())");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node24.isFor();
        node24.setSourceEncodedPosition(40);
        node24.putIntProp(43, 31);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isTypeOf();
        boolean boolean45 = node40.isOnlyModifiesThisCall();
        boolean boolean46 = node40.isDelProp();
        boolean boolean47 = node40.hasChildren();
        boolean boolean48 = node40.isThis();
        boolean boolean49 = node40.isQuotedString();
        com.google.javascript.rhino.Node node50 = node24.useSourceInfoFromForTree(node40);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node24, "RETURN ()\n");
        boolean boolean53 = jSTypeExpression52.isOptionalArg();
        boolean boolean54 = jSTypeExpression52.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        boolean boolean35 = jSDocInfo27.hasDescriptionForParameter("hi!");
        java.lang.String str36 = jSDocInfo27.getBlockDescription();
        int int37 = jSDocInfo27.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo27.getBaseType();
        java.lang.String str39 = jSDocInfo27.getLendsName();
        boolean boolean40 = jSDocInfo27.isImplicitCast();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasThisType();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        java.lang.String str4 = jSDocInfo0.toString();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isVarArgs();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        int int15 = node12.getLength();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        node12.addChildrenToFront(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node12.getJSDocInfo();
        boolean boolean22 = node12.isName();
        node1.putProp(100, (java.lang.Object) node12);
        java.util.Set<java.lang.String> strSet24 = node1.getDirectives();
        boolean boolean25 = node1.isSetterDef();
        node1.setType(213028);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isExport();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.String str8 = node3.getSourceFileName();
        boolean boolean9 = node3.isDelProp();
        boolean boolean10 = node3.isGetElem();
        boolean boolean11 = node3.isWhile();
        int int12 = node3.getSourcePosition();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = jSDocInfo0.isExpose();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isIf();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        boolean boolean9 = node8.isParamList();
        com.google.javascript.rhino.Node node10 = node1.useSourceInfoIfMissingFrom(node8);
        boolean boolean11 = node8.isComma();
        java.lang.String str12 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isBlock();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = node22.cloneNode();
        com.google.javascript.rhino.Node node24 = node14.copyInformationFromForTree(node23);
        boolean boolean25 = node23.isWhile();
        boolean boolean26 = node23.isDo();
        com.google.javascript.rhino.Node node27 = null;
        node8.addChildAfter(node23, node27);
        com.google.javascript.rhino.InputId inputId29 = node8.getInputId();
        boolean boolean31 = node8.getBooleanProp((int) '#');
        boolean boolean32 = node8.isGetterDef();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "NUMBER -1.0\n");
        boolean boolean3 = node2.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        boolean boolean7 = node6.isDefaultCase();
        boolean boolean8 = node6.isNoSideEffectsCall();
        boolean boolean9 = node6.isNew();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean12 = node11.isString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(43, node6, node11);
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isArrayLit();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        boolean boolean17 = node10.isTrue();
        node10.putBooleanProp(45, false);
        boolean boolean21 = node10.isName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = node30.copyInformationFromForTree(node36);
        boolean boolean38 = node37.isExprResult();
        boolean boolean39 = node37.isDefaultCase();
        node23.addChildrenToBack(node37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.Node node52 = node42.useSourceInfoFromForTree(node49);
        boolean boolean53 = node52.isSetterDef();
        com.google.javascript.rhino.Node node54 = node52.getLastChild();
        boolean boolean55 = node52.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node56 = node37.useSourceInfoIfMissingFromForTree(node52);
        int int57 = node37.getSideEffectFlags();
        boolean boolean58 = node37.isContinue();
        boolean boolean59 = node37.isNot();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        int int65 = node61.getCharno();
        boolean boolean66 = node61.isName();
        boolean boolean67 = node61.isNE();
        boolean boolean68 = node61.isEmpty();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node70.addSuppression("");
        java.lang.String str73 = node70.toString();
        boolean boolean74 = node70.hasChildren();
        com.google.javascript.rhino.Node node75 = node61.srcrefTree(node70);
        boolean boolean76 = node75.isExprResult();
        com.google.javascript.rhino.Node node77 = node37.srcref(node75);
        com.google.javascript.rhino.Node node78 = node10.copyInformationFrom(node77);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str45, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str73, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        int int7 = node1.getIntProp(40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet5.union(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet1.union(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet9.intersection(booleanLiteralSet10);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet13.union(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet9.intersection(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet17.union(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet22.union(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet26.union(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet22.union(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet19.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet16.union(booleanLiteralSet30);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = booleanLiteralSet8.intersection(booleanLiteralSet16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet32.union(booleanLiteralSet33);
        boolean boolean36 = booleanLiteralSet34.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesGlobalState();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        int int8 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 47 + "'", int8 == 47);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        java.util.Iterator<java.lang.String> strItor7 = strSet6.iterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strItor7);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node1.getAncestors();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isBreak();
        boolean boolean26 = node21.isScript();
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean29 = node27.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", 51, 51);
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoFrom(node33);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasBaseType();
        jSDocInfo6.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getTypedefType();
        boolean boolean11 = jSDocInfo6.isNoSideEffects();
        com.google.javascript.rhino.Node node12 = jSDocInfo6.getAssociatedNode();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo6.getSuppressions();
        strSet13.clear();
        int int15 = strSet13.size();
        boolean boolean16 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo17.getParameterNames();
        int int19 = jSDocInfo17.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo17.getParameterNames();
        boolean boolean21 = strSet13.equals((java.lang.Object) jSDocInfo17);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int23 = typePosition22.getPositionOnStartLine();
        com.google.javascript.rhino.Node node24 = typePosition22.getItem();
        boolean boolean25 = strSet13.equals((java.lang.Object) node24);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("OR [jsdoc_info: JSDocInfo]\n");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isUnscopedQualifiedName();
        node1.putBooleanProp(36, true);
        boolean boolean14 = node1.isInstanceOf();
        boolean boolean15 = node1.isString();
        node1.setLineno((int) ' ');
        com.google.javascript.rhino.InputId inputId18 = node1.getInputId();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        boolean boolean30 = node25.isIf();
        com.google.javascript.rhino.Node node31 = node22.copyInformationFromForTree(node25);
        boolean boolean32 = node22.isEmpty();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isReturn();
        com.google.javascript.rhino.InputId inputId39 = node34.getInputId();
        boolean boolean40 = node34.isAdd();
        node22.addChildrenToFront(node34);
        int int42 = node22.getType();
        boolean boolean43 = node1.hasChild(node22);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = com.google.common.collect.ImmutableList.of("(Unknown class name)", "(())", "");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = null;
        node5.setStaticSourceFile(staticSourceFile8);
        boolean boolean10 = node5.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isNot();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = node12.copyInformationFromForTree(node18);
        boolean boolean20 = node19.isExprResult();
        boolean boolean21 = node19.isDefaultCase();
        node5.addChildrenToBack(node19);
        node5.setSourceEncodedPositionForTree(42);
        boolean boolean25 = node5.isHook();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node5.setStaticSourceFile(staticSourceFile26);
        int int28 = strList3.indexOf((java.lang.Object) node5);
        java.lang.Object[] objArray29 = strList3.toArray();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        boolean boolean40 = node36.isNot();
        boolean boolean41 = node36.isIf();
        com.google.javascript.rhino.Node node42 = node33.copyInformationFromForTree(node36);
        boolean boolean43 = node33.hasMoreThanOneChild();
        boolean boolean44 = node33.isNumber();
        int int45 = node33.getCharno();
        boolean boolean46 = strList3.contains((java.lang.Object) node33);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[(Unknown class name), (()), ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[(Unknown class name), (()), ]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isOverride();
        boolean boolean3 = jSDocInfo0.isExport();
        java.lang.String str4 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.isNoShadow();
        boolean boolean8 = jSDocInfo6.isNoShadow();
        boolean boolean9 = jSDocInfo6.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList13 = com.google.common.collect.ImmutableList.of(visibility10, visibility11, visibility12);
        jSDocInfo6.setVisibility(visibility12);
        boolean boolean15 = jSDocInfo6.containsDeclaration();
        jSDocInfo6.setLicense("OR [jsdoc_info: JSDocInfo]");
        java.util.Set<java.lang.String> strSet18 = jSDocInfo6.getSuppressions();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection19 = jSDocInfo6.getTypeNodes();
        boolean boolean20 = jSDocInfo6.hasBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = jSDocInfo6.getVisibility();
        jSDocInfo0.setVisibility(visibility21);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(nodeCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = strSet8.add("OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        int int16 = node7.getType();
        boolean boolean17 = node7.isStringKey();
        boolean boolean18 = node7.isThrow();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        int int24 = node20.getCharno();
        boolean boolean25 = node20.isName();
        boolean boolean26 = node20.isDefaultCase();
        boolean boolean27 = node20.isLocalResultCall();
        boolean boolean28 = node20.isInstanceOf();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node7.clonePropsFrom(node20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(6, 12, 50, (int) (short) 10);
        int int15 = stringPosition0.getStartLine();
        java.lang.String str16 = stringPosition0.getItem();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 4.0 1\n" + "'", str16, "NUMBER 4.0 1\n");
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(OR\n    OR\n)");
        boolean boolean9 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isObjectLit();
        node1.setSourceEncodedPosition(15);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(43, "NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node17.isLabel();
        boolean boolean20 = node17.isContinue();
        node17.setVarArgs(false);
        boolean boolean23 = node17.isVoid();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFrom(node17);
        node17.setWasEmptyNode(true);
        boolean boolean27 = node17.isNot();
        boolean boolean28 = node17.isLocalResultCall();
        boolean boolean29 = node17.hasChildren();
        com.google.javascript.rhino.Node node30 = node1.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition31.setItem(node33);
        int int35 = node33.getSourceOffset();
        node1.addChildrenToBack(node33);
        node1.detachChildren();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isAdd();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node8.getStaticSourceFile();
        boolean boolean14 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node16.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = node8.useSourceInfoFrom(node21);
        boolean boolean29 = node21.isWhile();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node33.isLabel();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = node37.cloneNode();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node40.copyInformationFromForTree(node46);
        com.google.javascript.rhino.InputId inputId48 = node40.getInputId();
        com.google.javascript.rhino.Node node49 = node40.getNext();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        boolean boolean57 = node51.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node21, node33, node38, node40, node51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node40.getJsDocBuilderForNode();
        boolean boolean60 = node40.hasOneChild();
        com.google.javascript.rhino.Node node61 = node1.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node62 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildToBack(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        int int25 = node23.getType();
        com.google.javascript.rhino.InputId inputId26 = node23.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node23.setJSDocInfo(jSDocInfo27);
        com.google.javascript.rhino.Node node29 = node10.srcref(node23);
        boolean boolean30 = node23.isReturn();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node36 = node32.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node32.getStaticSourceFile();
        boolean boolean38 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node40.copyInformationFromForTree(node46);
        com.google.javascript.rhino.InputId inputId48 = node40.getInputId();
        boolean boolean49 = node40.isIn();
        boolean boolean50 = node32.isEquivalentToTyped(node40);
        boolean boolean51 = node23.hasChild(node32);
        com.google.javascript.rhino.Node node52 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node53 = node32.copyInformationFrom(node52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition2.hasBrackets();
        int int10 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        int int17 = node14.getLength();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        node14.addChildrenToFront(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node14, "JSDocInfo");
        java.lang.String str28 = node14.toString(true, false, false);
        typePosition2.setItem(node14);
        // The following exception was thrown during execution in test generation
        try {
            node14.setString("Not declared as a constructor");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR" + "'", str28, "OR");
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean34 = node17.getBooleanProp(41);
        boolean boolean35 = node17.isGetProp();
        boolean boolean36 = node17.isLabel();
        node17.setVarArgs(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        node17.detachChildren();
        boolean boolean34 = node17.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        boolean boolean24 = node19.wasEmptyNode();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isTypeOf();
        boolean boolean31 = node26.isDelProp();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node35.setJSType(jSType38);
        java.lang.String str40 = node35.toString();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node42.setStaticSourceFile(staticSourceFile45);
        boolean boolean47 = node42.isComma();
        node42.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList50 = com.google.common.collect.ImmutableList.of(node19, node26, node35, node42);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node54.isLabel();
        boolean boolean57 = node54.isContinue();
        com.google.javascript.rhino.Node node58 = node26.copyInformationFrom(node54);
        java.lang.String str59 = node54.toString();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        com.google.javascript.rhino.Node node65 = node63.getParent();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType72 = node67.getJSType();
        boolean boolean73 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node74 = node65.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int80 = node79.getSideEffectFlags();
        com.google.javascript.rhino.Node node81 = node67.useSourceInfoIfMissingFrom(node79);
        node79.detachChildren();
        com.google.javascript.rhino.Node node83 = node54.srcrefTree(node79);
        boolean boolean84 = strList13.contains((java.lang.Object) node83);
        boolean boolean85 = node83.isGetProp();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(100);
        node87.addChildrenToFront(node89);
        boolean boolean91 = node87.isNot();
        boolean boolean92 = node87.isIf();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(100);
        boolean boolean95 = node94.isParamList();
        com.google.javascript.rhino.Node node96 = node87.useSourceInfoIfMissingFrom(node94);
        node83.addChildrenToFront(node87);
        boolean boolean98 = node87.isInstanceOf();
        com.google.javascript.rhino.Node node99 = node87.getFirstChild();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR" + "'", str40, "OR");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeList50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR" + "'", str59, "OR");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        java.lang.String str8 = node1.toStringTree();
        boolean boolean9 = node1.isDec();
        node1.setWasEmptyNode(false);
        boolean boolean12 = node1.isOnlyModifiesThisCall();
        int int13 = node1.getCharno();
        boolean boolean14 = node1.isScript();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str8, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("((OR))");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = strSet8.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean24 = strList16.containsAll((java.util.Collection<java.lang.String>) strList23);
        java.lang.String[] strArray27 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isTypeOf();
        boolean boolean36 = node31.wasEmptyNode();
        int int37 = strList28.indexOf((java.lang.Object) boolean36);
        int int38 = strList23.indexOf((java.lang.Object) boolean36);
        boolean boolean39 = strList23.isEmpty();
        boolean boolean40 = strList23.isEmpty();
        java.lang.Object[] objArray41 = strList23.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = jSDocInfo42.getTemplateTypeNames();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        int int50 = node46.getCharno();
        boolean boolean51 = node46.isName();
        boolean boolean52 = node46.isNE();
        boolean boolean53 = node46.isEmpty();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        java.lang.String str58 = node55.toString();
        boolean boolean59 = node55.hasChildren();
        com.google.javascript.rhino.Node node60 = node46.srcrefTree(node55);
        int int61 = strList44.indexOf((java.lang.Object) node46);
        java.util.stream.Stream<java.lang.String> strStream62 = strList44.stream();
        boolean boolean63 = strList44.isEmpty();
        boolean boolean64 = strList23.containsAll((java.util.Collection<java.lang.String>) strList44);
        boolean boolean65 = strSet8.addAll((java.util.Collection<java.lang.String>) strList44);
        boolean boolean66 = strList44.isEmpty();
        java.lang.Object[] objArray67 = strList44.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str58, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("OR \n");
        boolean boolean7 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        int int17 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean18 = jSDocInfo0.isInterface();
        int int19 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean20 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo0.getParameterNames();
        java.lang.String str22 = jSDocInfo0.getOriginalCommentString();
        boolean boolean23 = jSDocInfo0.containsDeclaration();
        boolean boolean24 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node11.getType();
        com.google.javascript.rhino.InputId inputId14 = node11.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node11.setJSDocInfo(jSDocInfo15);
        boolean boolean17 = node11.isDo();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isNot();
        boolean boolean24 = node19.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        com.google.javascript.rhino.Node node29 = node19.copyInformationFromForTree(node26);
        java.lang.Object obj31 = node29.getProp(38);
        com.google.javascript.rhino.Node node32 = node11.srcrefTree(node29);
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isTry();
        boolean boolean36 = node3.hasChild(node32);
        java.lang.Object obj38 = node3.getProp((int) (byte) 100);
        boolean boolean39 = node3.isBlock();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isTypeOf();
        boolean boolean46 = node41.wasEmptyNode();
        boolean boolean47 = node41.isLabelName();
        node41.removeProp(49);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        boolean boolean55 = node51.isNot();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = node51.copyInformationFromForTree(node57);
        com.google.javascript.rhino.InputId inputId59 = node51.getInputId();
        boolean boolean60 = node51.isIn();
        boolean boolean61 = node51.isContinue();
        com.google.javascript.rhino.Node node62 = node41.copyInformationFromForTree(node51);
        boolean boolean63 = node51.isQualifiedName();
        node51.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node67.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = null;
        node67.setStaticSourceFile(staticSourceFile70);
        boolean boolean72 = node67.isComma();
        node67.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        node76.addChildrenToFront(node78);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node76.children();
        com.google.javascript.rhino.InputId inputId81 = null;
        node76.setInputId(inputId81);
        boolean boolean83 = node76.isName();
        java.lang.String str84 = node67.checkTreeEquals(node76);
        com.google.javascript.rhino.InputId inputId85 = node67.getInputId();
        boolean boolean86 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node87 = node51.useSourceInfoIfMissingFromForTree(node67);
        boolean boolean88 = node87.isWith();
        com.google.javascript.rhino.Node node89 = node3.clonePropsFrom(node87);
        int int90 = node89.getCharno();
        com.google.javascript.rhino.Node node91 = node89.getFirstChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(inputId59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterable80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str84, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList6.asList();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        node19.setStaticSourceFile(staticSourceFile22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node34 = node32.getParent();
        com.google.javascript.rhino.Node node35 = node25.useSourceInfoFromForTree(node32);
        boolean boolean36 = node19.hasChild(node25);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        int int42 = node38.getChildCount();
        boolean boolean43 = node38.isGetProp();
        boolean boolean44 = node19.isEquivalentTo(node38);
        int int45 = strList6.indexOf((java.lang.Object) node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isNoShadow();
        boolean boolean48 = jSDocInfo46.hasFileOverview();
        int int49 = jSDocInfo46.getParameterCount();
        boolean boolean50 = jSDocInfo46.hasEnumParameterType();
        int int51 = jSDocInfo46.getImplementedInterfaceCount();
        boolean boolean53 = jSDocInfo46.hasParameter("OR\n    OR\n");
        boolean boolean54 = strList6.equals((java.lang.Object) boolean53);
        java.lang.Object[] objArray55 = strList6.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean57 = jSDocInfo56.hasBaseType();
        jSDocInfo56.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo56.getBaseType();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo56.getParameterNames();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        int int67 = node63.getCharno();
        boolean boolean68 = node63.isContinue();
        boolean boolean69 = strSet61.equals((java.lang.Object) node63);
        boolean boolean70 = node63.isSetterDef();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node72.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = null;
        node72.setStaticSourceFile(staticSourceFile75);
        boolean boolean77 = node72.isComma();
        node72.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        node81.addChildrenToFront(node83);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable85 = node81.children();
        com.google.javascript.rhino.InputId inputId86 = null;
        node81.setInputId(inputId86);
        boolean boolean88 = node81.isName();
        java.lang.String str89 = node72.checkTreeEquals(node81);
        boolean boolean90 = node81.isInc();
        com.google.javascript.rhino.Node node91 = node63.srcrefTree(node81);
        com.google.javascript.rhino.Node node93 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean94 = node93.wasEmptyNode();
        com.google.javascript.rhino.Node node95 = node63.clonePropsFrom(node93);
        boolean boolean96 = strList6.contains((java.lang.Object) node63);
        boolean boolean97 = node63.isAssign();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str89, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node10.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] { node10 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node[][] nodeArray25 = new com.google.javascript.rhino.Node[][] { nodeArray8, nodeArray16, nodeArray24 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder26 = nodeArrayBuilder0.add(nodeArray25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        boolean boolean33 = node29.isTypeOf();
        boolean boolean34 = node29.isDelProp();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        int int40 = node36.getCharno();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] { node29, node36 };
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray41);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder43 = nodeArrayBuilder26.add(nodeArray41);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList44 = nodeArrayBuilder43.build();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder45 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node51 = node47.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] { node47 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node59 = node55.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = node55.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] { node55 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        java.lang.String str66 = node63.toString();
        com.google.javascript.rhino.Node node67 = node63.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node63.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node[][] nodeArray70 = new com.google.javascript.rhino.Node[][] { nodeArray53, nodeArray61, nodeArray69 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder71 = nodeArrayBuilder45.add(nodeArray70);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder72 = nodeArrayBuilder43.add(nodeArray70);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList73 = com.google.common.collect.ImmutableList.copyOf(nodeArray70);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArrayBuilder26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArrayBuilder43);
        org.junit.Assert.assertNotNull(nodeArrayList44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str58, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(staticSourceFile60);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str66, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArrayBuilder71);
        org.junit.Assert.assertNotNull(nodeArrayBuilder72);
        org.junit.Assert.assertNotNull(nodeArrayList73);
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray0 = null;
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo1.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo1.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo1.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor7 = strList6.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray8 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray9 = strList6.toArray(annotatedElementArray8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo10.getImplementedInterfaces();
        boolean boolean14 = jSDocInfo10.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo10.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor16 = strList15.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray17 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray18 = strList15.toArray(annotatedElementArray17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo19.getImplementedInterfaces();
        boolean boolean23 = jSDocInfo19.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo19.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor25 = strList24.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray26 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray27 = strList24.toArray(annotatedElementArray26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo28.getImplementedInterfaces();
        boolean boolean32 = jSDocInfo28.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo28.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor34 = strList33.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray35 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray36 = strList33.toArray(annotatedElementArray35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = jSDocInfo37.getImplementedInterfaces();
        boolean boolean41 = jSDocInfo37.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = jSDocInfo37.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor43 = strList42.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray44 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray45 = strList42.toArray(annotatedElementArray44);
        com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement[][]> annotatedElementArrayList46 = com.google.common.collect.ImmutableList.of(annotatedElementArray18, annotatedElementArray26, annotatedElementArray36, annotatedElementArray45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo47.getImplementedInterfaces();
        boolean boolean51 = jSDocInfo47.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = jSDocInfo47.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor53 = strList52.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray54 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray55 = strList52.toArray(annotatedElementArray54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean57 = jSDocInfo56.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList58 = jSDocInfo56.getImplementedInterfaces();
        boolean boolean60 = jSDocInfo56.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = jSDocInfo56.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor62 = strList61.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray63 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray64 = strList61.toArray(annotatedElementArray63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean66 = jSDocInfo65.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList67 = jSDocInfo65.getImplementedInterfaces();
        boolean boolean69 = jSDocInfo65.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = jSDocInfo65.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor71 = strList70.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray72 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray73 = strList70.toArray(annotatedElementArray72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList76 = jSDocInfo74.getImplementedInterfaces();
        boolean boolean78 = jSDocInfo74.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList79 = jSDocInfo74.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor80 = strList79.iterator();
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray81 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray82 = strList79.toArray(annotatedElementArray81);
        com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement[][]> annotatedElementArrayList83 = com.google.common.collect.ImmutableList.of(annotatedElementArray55, annotatedElementArray63, annotatedElementArray73, annotatedElementArray82);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement[][]> annotatedElementArrayList84 = com.google.common.collect.ImmutableList.of(annotatedElementArray0, annotatedElementArray9, annotatedElementArray36, annotatedElementArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(annotatedElementArray8);
        org.junit.Assert.assertNotNull(annotatedElementArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(annotatedElementArray17);
        org.junit.Assert.assertNotNull(annotatedElementArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(annotatedElementArray26);
        org.junit.Assert.assertNotNull(annotatedElementArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(annotatedElementArray35);
        org.junit.Assert.assertNotNull(annotatedElementArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(annotatedElementArray44);
        org.junit.Assert.assertNotNull(annotatedElementArray45);
        org.junit.Assert.assertNotNull(annotatedElementArrayList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(annotatedElementArray54);
        org.junit.Assert.assertNotNull(annotatedElementArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertNotNull(annotatedElementArray63);
        org.junit.Assert.assertNotNull(annotatedElementArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(annotatedElementArray72);
        org.junit.Assert.assertNotNull(annotatedElementArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertNotNull(annotatedElementArray81);
        org.junit.Assert.assertNotNull(annotatedElementArray82);
        org.junit.Assert.assertNotNull(annotatedElementArrayList83);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(6, (int) (short) 10, 50);
        boolean boolean4 = node3.isDelProp();
        int int5 = node3.getSourceOffset();
        boolean boolean6 = node3.isSwitch();
        boolean boolean7 = node3.isScript();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node3.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = com.google.common.collect.ImmutableList.of("INSTANCEOF 6 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(strList1);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int20 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = node7.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node19.getJsDocBuilderForNode();
        boolean boolean23 = node19.isLocalResultCall();
        java.lang.Object obj25 = node19.getProp((int) (short) 0);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node36 = node32.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node38 = node27.copyInformationFromForTree(node32);
        node32.setOptionalArg(false);
        node32.setSourceEncodedPositionForTree((int) (short) -1);
        node32.setVarArgs(false);
        int int45 = node32.getCharno();
        boolean boolean46 = node19.hasChild(node32);
        node32.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 37\n");
        node32.addChildToBack(node50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node32.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str30, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        boolean boolean17 = node10.isNew();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isReturn();
        com.google.javascript.rhino.InputId inputId24 = node19.getInputId();
        boolean boolean25 = node19.isArrayLit();
        boolean boolean26 = node19.isInc();
        boolean boolean27 = node19.isAssign();
        java.lang.String str28 = node19.getSourceFileName();
        boolean boolean29 = node19.isSetterDef();
        boolean boolean30 = node19.isGetProp();
        com.google.javascript.rhino.Node node31 = node10.copyInformationFromForTree(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node10.siblings();
        boolean boolean33 = node10.isNull();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isDefaultCase();
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        boolean boolean16 = node10.isDefaultCase();
        node2.addChildToFront(node10);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 54, 0, (int) '4');
        boolean boolean22 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(40, node2, node21, 47, 16);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node27.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.children();
        com.google.javascript.rhino.Node node34 = node21.srcref(node27);
        boolean boolean35 = node27.isGetProp();
        node27.putIntProp(4100, 50);
        java.lang.String str42 = node27.toString(true, false, false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR" + "'", str42, "OR");
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        node36.setCharno(4095);
        boolean boolean43 = node36.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo0.getType();
        boolean boolean29 = jSDocInfo0.isExterns();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getParameterNames();
        boolean boolean33 = jSDocInfo31.isOverride();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        boolean boolean45 = node40.isIf();
        com.google.javascript.rhino.Node node46 = node37.copyInformationFromForTree(node40);
        jSDocInfo31.setAssociatedNode(node40);
        int int48 = jSDocInfo31.getImplementedInterfaceCount();
        boolean boolean49 = strSet30.remove((java.lang.Object) jSDocInfo31);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.isNoShadow();
        boolean boolean54 = jSDocInfo52.isNoShadow();
        boolean boolean55 = jSDocInfo52.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo52.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo52.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = jSDocInfo52.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList63 = com.google.common.collect.ImmutableList.of(visibility60, visibility61, visibility62);
        jSDocInfo52.setVisibility(visibility62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet66 = jSDocInfo65.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str68 = jSDocInfo67.getFileOverview();
        java.lang.String str69 = jSDocInfo67.getFileOverview();
        boolean boolean70 = jSDocInfo67.isConstant();
        jSDocInfo67.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo67.setVisibility(visibility73);
        jSDocInfo65.setVisibility(visibility73);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node77.addChildrenToFront(node79);
        int int81 = node77.getCharno();
        boolean boolean82 = node77.isName();
        boolean boolean83 = node77.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = new com.google.javascript.rhino.JSTypeExpression(node77, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression85);
        com.google.javascript.rhino.Node node87 = jSTypeExpression86.getRoot();
        boolean boolean88 = jSTypeExpression86.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility89 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean90 = jSTypeExpression86.equals((java.lang.Object) visibility89);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray91 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility50, visibility51, visibility62, visibility73, visibility89 };
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray92 = strSet30.toArray(visibilityArray91);
        com.google.common.collect.ImmutableList[][] immutableListArray94 = new com.google.common.collect.ImmutableList[0][];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList<java.lang.String>[][] strListArray95 = (com.google.common.collect.ImmutableList<java.lang.String>[][]) immutableListArray94;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<java.lang.String>[]> strListArrayList96 = com.google.common.collect.ImmutableList.of(strListArray95);
        java.util.RandomAccess[][] randomAccessArray97 = strSet30.toArray((java.util.RandomAccess[][]) strListArray95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility62 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility62.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList63);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + visibility73 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility73.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + visibility89 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility89.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(visibilityArray91);
        org.junit.Assert.assertNotNull(visibilityArray92);
        org.junit.Assert.assertNotNull(immutableListArray94);
        org.junit.Assert.assertNotNull(strListArray95);
        org.junit.Assert.assertNotNull(strListArrayList96);
        org.junit.Assert.assertNotNull(randomAccessArray97);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        namePosition0.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8, namePosition9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList13 = com.google.common.collect.ImmutableList.of(namePosition11, namePosition12);
        int int14 = namePosition11.getPositionOnEndLine();
        int int15 = namePosition11.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition16, namePosition17);
        int int19 = namePosition16.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList22 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21);
        int int23 = namePosition20.getPositionOnEndLine();
        int int24 = namePosition20.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition25, namePosition26);
        namePosition25.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition33, namePosition34);
        int int36 = namePosition33.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList39 = com.google.common.collect.ImmutableList.of(namePosition37, namePosition38);
        namePosition37.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList47 = com.google.common.collect.ImmutableList.of(namePosition45, namePosition46);
        namePosition45.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList53 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition9, namePosition11, namePosition16, namePosition20, namePosition25, namePosition33, namePosition37, namePosition45);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList54 = com.google.common.collect.ImmutableList.of(namePosition37);
        int int55 = namePosition37.getPositionOnEndLine();
        int int56 = namePosition37.getPositionOnStartLine();
        int int57 = namePosition37.getEndLine();
        int int58 = namePosition37.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(namePositionList39);
        org.junit.Assert.assertNotNull(namePositionList47);
        org.junit.Assert.assertNotNull(namePositionList53);
        org.junit.Assert.assertNotNull(namePositionList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 43 + "'", int55 == 43);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isNoSideEffectsCall();
        java.lang.String str11 = node5.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasTypedefType();
        java.lang.String str14 = jSDocInfo12.toString();
        node5.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.Node node16 = node5.cloneTree();
        boolean boolean17 = node5.isAdd();
        com.google.javascript.rhino.Node node18 = node5.getLastSibling();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node20.copyInformationFromForTree(node25);
        node25.setOptionalArg(false);
        boolean boolean34 = node25.isOr();
        node25.putIntProp(2, 0);
        boolean boolean38 = node25.isFalse();
        java.lang.String str39 = node25.toStringTree();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isTypeOf();
        boolean boolean46 = node41.isVarArgs();
        boolean boolean47 = node41.isCatch();
        boolean boolean48 = node41.isIf();
        // The following exception was thrown during execution in test generation
        try {
            node5.addChildrenAfter(node25, node41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR" + "'", str11, "OR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSDocInfo" + "'", str14, "JSDocInfo");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str39, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node24 = node15.detachFromParent();
        boolean boolean25 = node15.isDo();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition0.setPositionInformation((int) '#', 44, 51, 50);
        int int13 = stringPosition0.getEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nOR 0\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int5 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isName();
        boolean boolean13 = node7.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = new com.google.javascript.rhino.JSTypeExpression(node7, "Unknown class name");
        node4.addChildrenToFront(node7);
        java.lang.String str17 = node7.getSourceFileName();
        com.google.javascript.rhino.Node node18 = node7.getParent();
        boolean boolean19 = node18.isAssignAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("(OR [jsdoc_info: JSDocInfo])");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        boolean boolean10 = jSDocInfo0.hasParameter("[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.children();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node2.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node16.getStaticSourceFile();
        boolean boolean22 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node36 = node16.useSourceInfoFrom(node29);
        boolean boolean37 = node29.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node39.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node39.getStaticSourceFile();
        boolean boolean45 = node39.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node node58 = node47.copyInformationFromForTree(node52);
        com.google.javascript.rhino.Node node59 = node39.useSourceInfoFrom(node52);
        boolean boolean60 = node52.isNot();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(44, node10, node29, node52);
        boolean boolean62 = node10.isSwitch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = new com.google.javascript.rhino.JSTypeExpression(node10, "(NUMBER 10.0\n)");
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean72 = jSDocInfo71.isNoShadow();
        boolean boolean73 = jSDocInfo71.isNoShadow();
        boolean boolean74 = jSDocInfo71.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo71.getReturnType();
        java.lang.String str76 = jSDocInfo71.getLendsName();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo71.getParameterNames();
        int int78 = strList6.indexOf((java.lang.Object) jSDocInfo71);
        java.util.Spliterator<java.lang.String> strSpliterator79 = strList6.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean82 = jSDocInfo81.hasBaseType();
        jSDocInfo81.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        boolean boolean85 = jSDocInfo81.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = jSDocInfo81.getReturnType();
        java.util.Set<java.lang.String> strSet87 = jSDocInfo81.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strList6.addAll(46, (java.util.Collection<java.lang.String>) strSet87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSTypeExpression86);
        org.junit.Assert.assertNotNull(strSet87);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node7.setStaticSourceFile(staticSourceFile10);
        boolean boolean12 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isNot();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = node14.copyInformationFromForTree(node20);
        boolean boolean22 = node21.isExprResult();
        boolean boolean23 = node21.isDefaultCase();
        node7.addChildrenToBack(node21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        com.google.javascript.rhino.Node node35 = node33.getParent();
        com.google.javascript.rhino.Node node36 = node26.useSourceInfoFromForTree(node33);
        boolean boolean37 = node36.isSetterDef();
        com.google.javascript.rhino.Node node38 = node36.getLastChild();
        boolean boolean39 = node36.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node40 = node21.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node46 = node42.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node42.getStaticSourceFile();
        boolean boolean48 = node42.isLocalResultCall();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        boolean boolean54 = node50.isNot();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = node50.copyInformationFromForTree(node56);
        com.google.javascript.rhino.InputId inputId58 = node50.getInputId();
        boolean boolean59 = node50.isIn();
        boolean boolean60 = node42.isEquivalentToTyped(node50);
        boolean boolean61 = node50.isQuotedString();
        com.google.javascript.rhino.Node node62 = node21.useSourceInfoFromForTree(node50);
        jSDocInfo0.setAssociatedNode(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean65 = jSDocInfo64.isNoShadow();
        java.lang.String str66 = jSDocInfo64.getMeaning();
        com.google.javascript.rhino.Node node67 = jSDocInfo64.getAssociatedNode();
        java.lang.String str68 = jSDocInfo64.getLicense();
        java.lang.String str69 = jSDocInfo64.getOriginalCommentString();
        boolean boolean70 = jSDocInfo64.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean72 = jSDocInfo71.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo71.getBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = jSDocInfo71.getVisibility();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str76 = jSDocInfo75.getFileOverview();
        java.lang.String str77 = jSDocInfo75.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo75.getThrownTypes();
        boolean boolean79 = jSDocInfo75.isHidden();
        boolean boolean80 = jSDocInfo75.isOverride();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection81 = jSDocInfo75.getTypeNodes();
        boolean boolean82 = jSDocInfo75.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean84 = jSDocInfo83.isNoShadow();
        boolean boolean85 = jSDocInfo83.isNoShadow();
        boolean boolean86 = jSDocInfo83.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility88 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility89 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList90 = com.google.common.collect.ImmutableList.of(visibility87, visibility88, visibility89);
        jSDocInfo83.setVisibility(visibility89);
        boolean boolean92 = jSDocInfo83.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility93 = jSDocInfo83.getVisibility();
        jSDocInfo75.setVisibility(visibility93);
        jSDocInfo71.setVisibility(visibility93);
        jSDocInfo64.setVisibility(visibility93);
        jSDocInfo0.setVisibility(visibility93);
        boolean boolean98 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str29, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str45, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(inputId58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(visibility74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(nodeCollection81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility88 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility88.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility89 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility89.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + visibility93 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility93.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 0, 42);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        int int10 = node6.getCharno();
        boolean boolean11 = node6.isName();
        boolean boolean12 = node6.isNE();
        boolean boolean13 = node6.isIn();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        boolean boolean20 = node19.isDefaultCase();
        int int21 = node6.getIndexOfChild(node19);
        node6.setSourceEncodedPosition(4095);
        boolean boolean24 = node6.hasOneChild();
        node6.setWasEmptyNode(false);
        boolean boolean27 = node6.isCase();
        com.google.javascript.rhino.Node node28 = node4.srcref(node6);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 0);
        boolean boolean31 = node30.isGetProp();
        boolean boolean32 = node30.isAnd();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        int int38 = node34.getCharno();
        boolean boolean39 = node34.isName();
        boolean boolean40 = node34.isDefaultCase();
        boolean boolean41 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        int int47 = node43.getCharno();
        boolean boolean48 = node43.isName();
        boolean boolean49 = node43.isNE();
        boolean boolean50 = node43.isEmpty();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        boolean boolean56 = node52.hasChildren();
        com.google.javascript.rhino.Node node57 = node43.srcrefTree(node52);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node59.setStaticSourceFile(staticSourceFile62);
        boolean boolean64 = node59.isComma();
        boolean boolean65 = node59.isBlock();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = node67.cloneNode();
        com.google.javascript.rhino.Node node69 = node59.copyInformationFromForTree(node68);
        int int70 = node68.getLength();
        int int71 = node43.getIndexOfChild(node68);
        com.google.javascript.rhino.Node node72 = node68.removeChildren();
        com.google.javascript.rhino.Node node73 = node34.clonePropsFrom(node68);
        boolean boolean74 = node68.isName();
        com.google.javascript.rhino.Node node75 = node30.useSourceInfoIfMissingFrom(node68);
        java.lang.String str76 = node30.getQualifiedName();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, node30, 24613, 5);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 4100, 54, 213044);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        com.google.javascript.rhino.Node node15 = node13.getParent();
        com.google.javascript.rhino.Node node16 = node6.useSourceInfoFromForTree(node13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = node18.isName();
        boolean boolean24 = node18.isNE();
        boolean boolean25 = node18.isLabelName();
        boolean boolean26 = node13.isEquivalentToTyped(node18);
        boolean boolean27 = node13.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.Node node33 = node31.getParent();
        node31.setIsSyntheticBlock(true);
        boolean boolean36 = node31.isContinue();
        boolean boolean37 = node31.isParamList();
        boolean boolean38 = node31.isParamList();
        boolean boolean39 = node31.isOptionalArg();
        boolean boolean40 = node31.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node42.setStaticSourceFile(staticSourceFile45);
        boolean boolean47 = node42.isComma();
        node42.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node51.children();
        com.google.javascript.rhino.InputId inputId56 = null;
        node51.setInputId(inputId56);
        boolean boolean58 = node51.isName();
        java.lang.String str59 = node42.checkTreeEquals(node51);
        boolean boolean60 = node51.isStringKey();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        int int66 = node64.getType();
        com.google.javascript.rhino.InputId inputId67 = node64.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = null;
        node64.setJSDocInfo(jSDocInfo68);
        com.google.javascript.rhino.Node node70 = node51.srcref(node64);
        boolean boolean71 = node31.isEquivalentToTyped(node64);
        com.google.javascript.rhino.Node node72 = node13.copyInformationFrom(node64);
        node72.putBooleanProp((int) (byte) 100, true);
        boolean boolean76 = node72.isLabelName();
        boolean boolean77 = node72.isInstanceOf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = null;
        node72.setStaticSourceFile(staticSourceFile78);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(6, node4, node72, (int) '4', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str59, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNull(inputId67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        node15.removeProp(48);
        com.google.javascript.rhino.Node node26 = node15.getAncestor(0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasBaseType();
        jSDocInfo27.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo27.getBaseType();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo27.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean47 = strList39.containsAll((java.util.Collection<java.lang.String>) strList46);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor48 = strList39.listIterator();
        boolean boolean49 = strSet32.containsAll((java.util.Collection<java.lang.String>) strList39);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        node51.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node60.children();
        com.google.javascript.rhino.InputId inputId65 = null;
        node60.setInputId(inputId65);
        boolean boolean67 = node60.isName();
        java.lang.String str68 = node51.checkTreeEquals(node60);
        boolean boolean69 = node60.isInc();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node71.addChildrenToFront(node73);
        boolean boolean75 = node71.isNot();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = node71.copyInformationFromForTree(node77);
        com.google.javascript.rhino.InputId inputId79 = node71.getInputId();
        node60.addChildrenToFront(node71);
        boolean boolean81 = strList39.equals((java.lang.Object) node71);
        com.google.javascript.rhino.Node node82 = node26.useSourceInfoIfMissingFrom(node71);
        boolean boolean83 = node26.isScript();
        com.google.javascript.rhino.Node node84 = node26.getFirstChild();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str68, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(inputId79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        node1.putIntProp((int) (short) 0, 38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node1.getJsDocBuilderForNode();
        boolean boolean9 = node1.isIf();
        boolean boolean10 = node1.isScript();
        boolean boolean11 = node1.isInc();
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasBaseType();
        jSDocInfo6.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getTypedefType();
        boolean boolean11 = jSDocInfo6.isNoSideEffects();
        com.google.javascript.rhino.Node node12 = jSDocInfo6.getAssociatedNode();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo6.getSuppressions();
        strSet13.clear();
        int int15 = strSet13.size();
        boolean boolean16 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.Iterator<java.lang.String> strItor17 = strSet5.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasBaseType();
        jSDocInfo18.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo18.getBaseType();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo18.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean38 = strList30.containsAll((java.util.Collection<java.lang.String>) strList37);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor39 = strList30.listIterator();
        boolean boolean40 = strSet23.containsAll((java.util.Collection<java.lang.String>) strList30);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node42.setStaticSourceFile(staticSourceFile45);
        boolean boolean47 = node42.isComma();
        node42.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node51.children();
        com.google.javascript.rhino.InputId inputId56 = null;
        node51.setInputId(inputId56);
        boolean boolean58 = node51.isName();
        java.lang.String str59 = node42.checkTreeEquals(node51);
        boolean boolean60 = node51.isInc();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        boolean boolean66 = node62.isNot();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = node62.copyInformationFromForTree(node68);
        com.google.javascript.rhino.InputId inputId70 = node62.getInputId();
        node51.addChildrenToFront(node62);
        boolean boolean72 = strList30.equals((java.lang.Object) node62);
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = strList30.reverse();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        node76.addChildrenToFront(node78);
        boolean boolean80 = node76.isTypeOf();
        boolean boolean81 = node76.wasEmptyNode();
        boolean boolean82 = node76.isLabelName();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(100);
        node84.addChildrenToFront(node86);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable88 = node84.children();
        com.google.javascript.rhino.InputId inputId89 = null;
        node84.setInputId(inputId89);
        boolean boolean91 = node84.isHook();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(29, node76, node84, 50, 41);
        boolean boolean95 = strList73.equals((java.lang.Object) node76);
        com.google.common.collect.ImmutableList<java.lang.String> strList96 = strList73.asList();
        boolean boolean97 = strSet5.retainAll((java.util.Collection<java.lang.String>) strList73);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str59, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(inputId70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeIterable88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR\n    OR\n", 40, 54);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        int int8 = jSDocInfo0.getParameterCount();
        boolean boolean9 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        boolean boolean6 = jSDocInfo0.isHidden();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.lang.Object[] objArray11 = strSet7.toArray();
        boolean boolean13 = strSet7.add("GETELEM");
        java.util.Iterator<java.lang.String> strItor14 = strSet7.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasBaseType();
        jSDocInfo15.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo15.getTypedefType();
        boolean boolean20 = jSDocInfo15.isNoSideEffects();
        boolean boolean21 = jSDocInfo15.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo15.getThisType();
        boolean boolean24 = jSDocInfo15.hasParameter("[]");
        java.util.Collection<java.lang.String> strCollection25 = jSDocInfo15.getAuthors();
        boolean boolean26 = strSet7.equals((java.lang.Object) jSDocInfo15);
        boolean boolean28 = jSDocInfo15.hasParameterType("ASSIGN_MOD  [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        node6.setVarArgs(true);
        boolean boolean25 = node6.isWith();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isNot();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = node8.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isExprResult();
        boolean boolean17 = node15.isDefaultCase();
        node1.addChildrenToBack(node15);
        node1.setSourceEncodedPositionForTree(42);
        boolean boolean21 = node1.isHook();
        node1.addSuppression("NUMBER 1.0 37\n");
        boolean boolean24 = node1.isIf();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        boolean boolean12 = node10.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        com.google.javascript.rhino.Node node18 = node16.getParent();
        node10.addChildrenToBack(node18);
        boolean boolean20 = node18.isNew();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isDo();
        boolean boolean27 = node24.isAssignAdd();
        boolean boolean28 = node18.isEquivalentTo(node24);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isTypeOf();
        boolean boolean36 = node31.isDelProp();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        int int42 = node38.getCharno();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] { node31, node38 };
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray43);
        java.lang.String str45 = node24.checkTreeEquals(node44);
        node44.setLineno(4100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Node tree inequality:\nTree1:\nSTRING OR [jsdoc_info: JSDocInfo] 4\n\n\nTree2:\nBITXOR 0\n    OR\n        OR\n    OR\n        OR\n\n\nSubtree1: STRING OR [jsdoc_info: JSDocInfo] 4\n\n\nSubtree2: BITXOR 0\n    OR\n        OR\n    OR\n        OR\n" + "'", str45, "Node tree inequality:\nTree1:\nSTRING OR [jsdoc_info: JSDocInfo] 4\n\n\nTree2:\nBITXOR 0\n    OR\n        OR\n    OR\n        OR\n\n\nSubtree1: STRING OR [jsdoc_info: JSDocInfo] 4\n\n\nSubtree2: BITXOR 0\n    OR\n        OR\n    OR\n        OR\n");
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        int int12 = node3.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasBaseType();
        jSDocInfo14.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo14.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection19 = jSDocInfo14.getTypeNodes();
        node3.setJSDocInfo(jSDocInfo14);
        com.google.javascript.rhino.Node node21 = node3.getLastSibling();
        boolean boolean22 = node21.isThrow();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        node24.putIntProp((int) (short) 0, 38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node24.getJsDocBuilderForNode();
        boolean boolean32 = node24.isNE();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        int int38 = node34.getCharno();
        boolean boolean39 = node34.isName();
        boolean boolean40 = node34.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = new com.google.javascript.rhino.JSTypeExpression(node34, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression42);
        boolean boolean45 = jSTypeExpression42.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node46 = jSTypeExpression42.getRoot();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node48.isNot();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = node48.copyInformationFromForTree(node54);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        boolean boolean61 = node57.isNot();
        com.google.javascript.rhino.Node node62 = node55.useSourceInfoFrom(node57);
        boolean boolean63 = jSTypeExpression42.equals((java.lang.Object) node57);
        com.google.javascript.rhino.Node node64 = node24.srcrefTree(node57);
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = com.google.common.collect.ImmutableList.of("JSDocInfo", "GETELEM", "NUMBER -1.0\n", "Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n", "NUMBER 1.0 37\n", "", "OR\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "", "(OR \n)", "OR\n    OR\n");
        java.lang.Object[] objArray77 = strList76.toArray();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node79.addSuppression("");
        java.lang.String str82 = node79.toString();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(100);
        node84.addSuppression("");
        java.lang.String str87 = node84.toString();
        com.google.javascript.rhino.Node node88 = node84.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node84.getStaticSourceFile();
        com.google.javascript.rhino.Node node90 = node79.copyInformationFromForTree(node84);
        boolean boolean91 = node79.isReturn();
        boolean boolean92 = node79.isTypeOf();
        boolean boolean93 = strList76.contains((java.lang.Object) node79);
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildAfter(node64, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertNotNull(nodeCollection19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[JSDocInfo, GETELEM, NUMBER -1.0\n, Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n, NUMBER 1.0 37\n, , OR\n, OR 0 [jsdoc_info: JSDocInfo]\n, , (OR \n), OR\n    OR\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[JSDocInfo, GETELEM, NUMBER -1.0\n, Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n, NUMBER 1.0 37\n, , OR\n, OR 0 [jsdoc_info: JSDocInfo]\n, , (OR \n), OR\n    OR\n]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str82, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str87, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node11 = node9.getParent();
        com.google.javascript.rhino.Node node12 = node2.useSourceInfoFromForTree(node9);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasBaseType();
        jSDocInfo13.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo13.getBaseType();
        node12.setJSDocInfo(jSDocInfo13);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 1, node12, 38, (int) '4');
        boolean boolean22 = node21.isThis();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node24.isReturn();
        boolean boolean29 = node24.isContinue();
        com.google.javascript.rhino.Node node30 = node21.srcref(node24);
        com.google.javascript.rhino.Node node31 = node24.getLastSibling();
        boolean boolean32 = node24.isVoid();
        int int33 = node24.getSourcePosition();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        boolean boolean12 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node3.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node3.isName();
        boolean boolean16 = node3.isInstanceOf();
        boolean boolean17 = node3.isAssign();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR 0 [synthetic: 1] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = node7.removeChildren();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, node7);
        jSDocInfo0.setAssociatedNode(node7);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = node17.cloneNode();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        boolean boolean24 = node20.isTypeOf();
        boolean boolean25 = node20.wasEmptyNode();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.isDelProp();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node38 = node36.getParent();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node36.setJSType(jSType39);
        java.lang.String str41 = node36.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = null;
        node43.setStaticSourceFile(staticSourceFile46);
        boolean boolean48 = node43.isComma();
        node43.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node20, node27, node36, node43);
        com.google.javascript.rhino.Node node52 = node18.copyInformationFrom(node43);
        java.util.Set<java.lang.String> strSet53 = node52.getDirectives();
        jSDocInfo0.setAssociatedNode(node52);
        boolean boolean55 = jSDocInfo0.isInterface();
        int int56 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo0.getModifies();
        java.lang.Object[] objArray58 = strSet57.toArray();
        java.lang.Object[] objArray59 = strSet57.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean61 = jSDocInfo60.hasBaseType();
        jSDocInfo60.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo60.getBaseType();
        java.util.Set<java.lang.String> strSet65 = jSDocInfo60.getParameterNames();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        int int71 = node67.getCharno();
        boolean boolean72 = node67.isContinue();
        boolean boolean73 = strSet65.equals((java.lang.Object) node67);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node75.addChildrenToFront(node77);
        com.google.javascript.rhino.Node node79 = node77.getParent();
        node77.setIsSyntheticBlock(true);
        boolean boolean82 = node77.isContinue();
        boolean boolean83 = strSet65.equals((java.lang.Object) node77);
        java.lang.Object[] objArray84 = strSet65.toArray();
        boolean boolean85 = strSet65.isEmpty();
        boolean boolean86 = strSet57.removeAll((java.util.Collection<java.lang.String>) strSet65);
        java.util.Iterator<java.lang.String> strItor87 = strSet65.iterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strItor87);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isExprResult();
        boolean boolean10 = node8.isDefaultCase();
        boolean boolean11 = node8.isTrue();
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        boolean boolean14 = node7.isSetterDef();
        node7.setSourceFileForTesting("NUMBER 4.0 1\n");
        java.lang.String str17 = node7.getSourceFileName();
        java.lang.Object obj19 = node7.getProp(2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 4.0 1\n" + "'", str17, "NUMBER 4.0 1\n");
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int8 = stringPosition0.getPositionOnEndLine();
        int int9 = stringPosition0.getEndLine();
        int int10 = stringPosition0.getStartLine();
        int int11 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isQualifiedName();
        boolean boolean9 = node1.isFromExterns();
        com.google.javascript.rhino.Node node10 = node1.removeFirstChild();
        boolean boolean11 = node10.hasMoreThanOneChild();
        int int12 = node10.getLineno();
        boolean boolean13 = node10.isBreak();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = com.google.common.collect.ImmutableList.of(jSTypeExpression9, jSTypeExpression23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        boolean boolean32 = node28.isTypeOf();
        boolean boolean33 = node28.isDelProp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = new com.google.javascript.rhino.JSTypeExpression(node28, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression35);
        com.google.javascript.rhino.JSTypeExpression[] jSTypeExpressionArray37 = new com.google.javascript.rhino.JSTypeExpression[] { jSTypeExpression23, jSTypeExpression35 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList38 = com.google.common.collect.ImmutableList.copyOf(jSTypeExpressionArray37);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = com.google.common.collect.ImmutableList.copyOf(jSTypeExpressionArray37);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = com.google.common.collect.ImmutableList.copyOf(jSTypeExpressionArray37);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression36);
        org.junit.Assert.assertNotNull(jSTypeExpressionArray37);
        org.junit.Assert.assertNotNull(jSTypeExpressionList38);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        java.lang.String str41 = node36.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node47 = node45.getParent();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType54 = node49.getJSType();
        boolean boolean55 = node49.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node56 = node47.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int62 = node61.getSideEffectFlags();
        com.google.javascript.rhino.Node node63 = node49.useSourceInfoIfMissingFrom(node61);
        node61.detachChildren();
        com.google.javascript.rhino.Node node65 = node36.srcrefTree(node61);
        com.google.javascript.rhino.Node node66 = node36.cloneTree();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node68.addChildrenToFront(node70);
        boolean boolean72 = node68.isGetterDef();
        java.util.Set<java.lang.String> strSet73 = node68.getDirectives();
        boolean boolean74 = node68.isDebugger();
        boolean boolean75 = node68.isBreak();
        boolean boolean76 = node36.hasChild(node68);
        boolean boolean77 = node68.hasMoreThanOneChild();
        java.lang.String str78 = node68.getQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        boolean boolean19 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node25 = node23.getParent();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        node27.putIntProp((int) (short) 0, 38);
        node23.addChildToBack(node27);
        boolean boolean35 = node27.isEmpty();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isNot();
        boolean boolean42 = node37.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.Node node47 = node37.copyInformationFromForTree(node44);
        com.google.javascript.rhino.Node node48 = node27.srcref(node44);
        boolean boolean49 = node27.hasChildren();
        boolean boolean50 = node27.isQualifiedName();
        boolean boolean51 = node27.isContinue();
        node27.removeProp(9);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        boolean boolean64 = node60.isNot();
        boolean boolean65 = node60.isIf();
        com.google.javascript.rhino.Node node66 = node57.copyInformationFromForTree(node60);
        boolean boolean67 = node57.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        node69.addChildrenToFront(node71);
        boolean boolean73 = node69.isReturn();
        com.google.javascript.rhino.InputId inputId74 = node69.getInputId();
        boolean boolean75 = node69.isAdd();
        node57.addChildrenToFront(node69);
        // The following exception was thrown during execution in test generation
        try {
            node7.replaceChildAfter(node27, node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(inputId74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        jSDocInfo0.addSuppression("(OR)");
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isNot();
        boolean boolean17 = node12.isIf();
        com.google.javascript.rhino.Node node18 = node9.copyInformationFromForTree(node12);
        boolean boolean19 = node18.isParamList();
        boolean boolean20 = node18.isTry();
        com.google.javascript.rhino.Node node21 = node18.getParent();
        jSDocInfo0.setAssociatedNode(node18);
        node18.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        boolean boolean23 = node17.isFalse();
        boolean boolean24 = node17.isNoSideEffectsCall();
        java.lang.String str25 = node10.checkTreeEquals(node17);
        node10.setSourceEncodedPosition((int) (short) 10);
        boolean boolean28 = node10.isQuotedString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n" + "'", str25, "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        boolean boolean20 = node17.isVarArgs();
        int int21 = node17.getChildCount();
        int int22 = strList6.lastIndexOf((java.lang.Object) int21);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = strList6.asList();
        boolean boolean24 = strList6.isEmpty();
        java.lang.Class[] classArray26 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray27 = (java.lang.Class<?>[]) classArray26;
        java.lang.Class[] classArray29 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray30 = (java.lang.Class<?>[]) classArray29;
        java.lang.Class[] classArray32 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray33 = (java.lang.Class<?>[]) classArray32;
        java.lang.Class[][] classArray35 = new java.lang.Class[3][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray36 = (java.lang.Class<?>[][]) classArray35;
        wildcardClassArray36[0] = wildcardClassArray27;
        wildcardClassArray36[1] = classArray29;
        wildcardClassArray36[2] = classArray32;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?>[][] wildcardClassArray43 = strList6.toArray(wildcardClassArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(wildcardClassArray27);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClassArray30);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClassArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(wildcardClassArray36);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        int int9 = node7.getType();
        com.google.javascript.rhino.InputId inputId10 = node7.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = null;
        node7.setJSDocInfo(jSDocInfo11);
        boolean boolean13 = node7.isDo();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isNot();
        boolean boolean20 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        com.google.javascript.rhino.Node node25 = node15.copyInformationFromForTree(node22);
        java.lang.Object obj27 = node25.getProp(38);
        com.google.javascript.rhino.Node node28 = node7.srcrefTree(node25);
        com.google.javascript.rhino.Node node29 = node3.copyInformationFromForTree(node7);
        boolean boolean30 = node7.isNumber();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean32 = jSDocInfo31.isNoShadow();
        boolean boolean33 = jSDocInfo31.isNoShadow();
        boolean boolean34 = jSDocInfo31.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo31.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo31.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = jSDocInfo31.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo31.getType();
        java.util.Collection<java.lang.String> strCollection40 = jSDocInfo31.getAuthors();
        int int41 = jSDocInfo31.getParameterCount();
        node7.setJSDocInfo(jSDocInfo31);
        java.lang.String str43 = jSDocInfo31.getFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection44 = jSDocInfo31.getTypeNodes();
        java.lang.String str45 = jSDocInfo31.getVersion();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertNull(strCollection40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(nodeCollection44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        com.google.javascript.rhino.Node node30 = jSTypeExpression9.getRoot();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.isHidden();
        jSDocInfo0.setLicense("(OR [jsdoc_info: JSDocInfo])");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        boolean boolean10 = node1.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node1.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isAdd();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node8.getStaticSourceFile();
        boolean boolean14 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node16.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = node8.useSourceInfoFrom(node21);
        boolean boolean29 = node21.isWhile();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node33.isLabel();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = node37.cloneNode();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node40.copyInformationFromForTree(node46);
        com.google.javascript.rhino.InputId inputId48 = node40.getInputId();
        com.google.javascript.rhino.Node node49 = node40.getNext();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        boolean boolean57 = node51.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node21, node33, node38, node40, node51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node40.getJsDocBuilderForNode();
        boolean boolean60 = node40.hasOneChild();
        com.google.javascript.rhino.Node node61 = node1.copyInformationFrom(node40);
        boolean boolean62 = node40.isGetElem();
        boolean boolean63 = node40.isAdd();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        boolean boolean4 = node1.isVarArgs();
        int int5 = node1.getChildCount();
        com.google.javascript.rhino.Node node6 = node1.getLastSibling();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        java.util.Set<java.lang.String> strSet12 = node10.getDirectives();
        com.google.javascript.rhino.Node node13 = node6.srcref(node10);
        boolean boolean14 = node6.isNot();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(43, "NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        boolean boolean9 = node7.isLabel();
        boolean boolean10 = node7.isContinue();
        node7.setVarArgs(false);
        boolean boolean13 = node7.isVoid();
        com.google.javascript.rhino.Node node14 = node3.copyInformationFrom(node7);
        node7.setVarArgs(true);
        node7.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        node7.addChildToBack(node20);
        node7.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(10, "(OR 6\n    OR\n)", 409600, 4100);
        boolean boolean36 = node35.isSwitch();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        com.google.javascript.rhino.Node node42 = node40.getParent();
        node40.setIsSyntheticBlock(true);
        boolean boolean45 = node40.isContinue();
        java.lang.String str46 = node40.getQualifiedName();
        boolean boolean47 = node40.isSwitch();
        java.util.Set<java.lang.String> strSet48 = node40.getDirectives();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node50.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node50.getStaticSourceFile();
        boolean boolean56 = node50.isLocalResultCall();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isNot();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = node58.copyInformationFromForTree(node64);
        com.google.javascript.rhino.InputId inputId66 = node58.getInputId();
        boolean boolean67 = node58.isIn();
        boolean boolean68 = node50.isEquivalentToTyped(node58);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        boolean boolean74 = node70.isNot();
        boolean boolean75 = node70.isLocalResultCall();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node77.addSuppression("");
        com.google.javascript.rhino.Node node80 = node70.copyInformationFromForTree(node77);
        boolean boolean81 = node80.isAssignAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node80.children();
        boolean boolean83 = node80.isComma();
        boolean boolean84 = node58.isEquivalentTo(node80);
        com.google.javascript.rhino.Node node85 = node40.copyInformationFrom(node80);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) 1, node7, node35, node80, 51, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str53, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(inputId66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        int int17 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(jSTypeExpression19);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isInc();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        node23.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node44 = node3.useSourceInfoFromForTree(node23);
        java.lang.Object obj46 = node3.getProp(42);
        boolean boolean47 = node3.isIn();
        boolean boolean48 = node3.isStringKey();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable49 = node3.getAncestors();
        node3.setCharno((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType52 = node3.getJSType();
        com.google.javascript.rhino.Node node53 = node3.removeChildren();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = node55.cloneNode();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        boolean boolean69 = node65.isTypeOf();
        boolean boolean70 = node65.isDelProp();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node72.addChildrenToFront(node74);
        com.google.javascript.rhino.Node node76 = node74.getParent();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node74.setJSType(jSType77);
        java.lang.String str79 = node74.toString();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node81.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = null;
        node81.setStaticSourceFile(staticSourceFile84);
        boolean boolean86 = node81.isComma();
        node81.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList89 = com.google.common.collect.ImmutableList.of(node58, node65, node74, node81);
        com.google.javascript.rhino.Node node90 = node56.copyInformationFrom(node81);
        node90.putIntProp((int) ' ', 45);
        boolean boolean94 = node90.isInstanceOf();
        int int95 = node90.getSideEffectFlags();
        node90.detachChildren();
        com.google.javascript.rhino.InputId inputId97 = node90.getInputId();
        node3.addChildToBack(node90);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ancestorIterable49);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "OR" + "'", str79, "OR");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeList89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNull(inputId97);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.hasParameter("[]");
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        jSDocInfo0.setDeprecated(false);
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        boolean boolean8 = node1.isHook();
        java.lang.String str9 = node1.toString();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isReturn();
        com.google.javascript.rhino.InputId inputId16 = node11.getInputId();
        boolean boolean17 = node11.isAdd();
        node11.setLineno(6);
        boolean boolean20 = node1.hasChild(node11);
        node1.setOptionalArg(true);
        java.util.Set<java.lang.String> strSet23 = node1.getDirectives();
        boolean boolean24 = node1.isSwitch();
        boolean boolean25 = node1.wasEmptyNode();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR" + "'", str9, "OR");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean7 = node1.getBooleanProp((int) (byte) -1);
        boolean boolean8 = node1.isWith();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        boolean boolean8 = node1.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node12.isLabel();
        boolean boolean15 = node12.isContinue();
        node12.setVarArgs(false);
        com.google.javascript.rhino.Node node18 = node1.srcrefTree(node12);
        boolean boolean19 = node12.isAnd();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node12.setJSType(jSType20);
        node12.addSuppression("(unknown)");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.isDelProp();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node25 = node23.getParent();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node23.setJSType(jSType26);
        java.lang.String str28 = node23.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node30.setStaticSourceFile(staticSourceFile33);
        boolean boolean35 = node30.isComma();
        node30.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList38 = com.google.common.collect.ImmutableList.of(node7, node14, node23, node30);
        boolean boolean39 = node14.isComma();
        boolean boolean40 = strSet5.remove((java.lang.Object) node14);
        java.util.Iterator<java.lang.String> strItor41 = strSet5.iterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR" + "'", str28, "OR");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strItor41);
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        node9.setStaticSourceFile(staticSourceFile12);
        boolean boolean14 = node9.isComma();
        node9.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node18.children();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean25 = node18.isName();
        java.lang.String str26 = node9.checkTreeEquals(node18);
        boolean boolean27 = node18.isInc();
        node18.setType((int) (short) -1);
        node1.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node37.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFromForTree(node37);
        boolean boolean44 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.isVarArgs();
        boolean boolean52 = node46.isIn();
        node37.addChildToFront(node46);
        node46.removeProp(48);
        com.google.javascript.rhino.Node node57 = node46.getAncestor(0);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node60 = node1.useSourceInfoFromForTree(node59);
        boolean boolean61 = node1.isQualifiedName();
        boolean boolean62 = node1.isSwitch();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        com.google.javascript.rhino.Node node68 = node66.getParent();
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node66.setJSType(jSType69);
        java.lang.String str71 = node66.getSourceFileName();
        boolean boolean72 = node66.hasOneChild();
        boolean boolean73 = node66.isInc();
        node66.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node66.setJSType(jSType76);
        int int78 = node66.getLength();
        com.google.javascript.rhino.Node node79 = node66.getLastChild();
        java.lang.String str80 = node66.toString();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(48, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node66, node83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str26, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "OR [opt_arg: 1]" + "'", str80, "OR [opt_arg: 1]");
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue2.xor(ternaryValue3);
        boolean boolean6 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue2.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue7.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue0.or(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue10.xor(ternaryValue11);
        boolean boolean14 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean17 = ternaryValue15.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean20 = ternaryValue18.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str22 = ternaryValue21.toString();
        boolean boolean24 = ternaryValue21.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue18.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue15.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue10.or(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue28.xor(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue27.xor(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue9.or(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "false" + "'", str1, "false");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "unknown" + "'", str22, "unknown");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 37, (int) (short) 100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        node7.setIsSyntheticBlock(true);
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = node7.isParamList();
        node7.setSourceEncodedPositionForTree(54);
        int int16 = node7.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node7.siblings();
        com.google.javascript.rhino.Node node18 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node29 = node27.getParent();
        com.google.javascript.rhino.Node node30 = node20.useSourceInfoFromForTree(node27);
        boolean boolean31 = node30.isArrayLit();
        node30.setSourceEncodedPosition(30);
        boolean boolean34 = node30.isSwitch();
        boolean boolean35 = node30.isTypeOf();
        int int36 = node30.getType();
        boolean boolean37 = node30.isGetterDef();
        node30.setSourceEncodedPosition(35);
        int int40 = node18.getIndexOfChild(node30);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.lang.Object[] objArray11 = strSet7.toArray();
        int int12 = strSet7.size();
        java.util.Spliterator<java.lang.String> strSpliterator13 = strSet7.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasBaseType();
        jSDocInfo14.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo14.getBaseType();
        boolean boolean19 = jSDocInfo14.containsDeclaration();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo14.getTemplateTypeNames();
        boolean boolean21 = strSet7.addAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasBaseType();
        java.lang.String str24 = jSDocInfo22.getFileOverview();
        int int25 = jSDocInfo22.getParameterCount();
        boolean boolean26 = jSDocInfo22.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = jSDocInfo22.getVisibility();
        boolean boolean28 = jSDocInfo22.hasModifies();
        boolean boolean29 = jSDocInfo22.isExterns();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = jSDocInfo22.getVisibility();
        boolean boolean31 = jSDocInfo22.isConsistentIdGenerator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = strList20.remove((java.lang.Object) jSDocInfo22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(visibility27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(visibility30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(44, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        jSDocInfo0.setAssociatedNode(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node5.children();
        boolean boolean28 = node5.isAnd();
        boolean boolean29 = node5.isBlock();
        boolean boolean30 = node5.isDefaultCase();
        boolean boolean31 = node5.isReturn();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node5.getAncestors();
        boolean boolean33 = node5.isOnlyModifiesThisCall();
        java.lang.Object obj35 = node5.getProp(409600);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ancestorIterable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int5 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node11 = node9.getParent();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType18 = node13.getJSType();
        boolean boolean19 = node13.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node20 = node11.useSourceInfoIfMissingFromForTree(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int26 = node25.getSideEffectFlags();
        com.google.javascript.rhino.Node node27 = node13.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder28 = node25.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node29 = node4.copyInformationFrom(node25);
        boolean boolean30 = node4.isDebugger();
        boolean boolean31 = node4.isAnd();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node39.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node45 = node34.copyInformationFromForTree(node39);
        boolean boolean46 = node39.isAssignAdd();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node48.isTypeOf();
        boolean boolean53 = node48.isVarArgs();
        boolean boolean54 = node48.isIn();
        node39.addChildToFront(node48);
        com.google.javascript.rhino.Node node56 = node39.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(32, node39);
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildToBack(node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4, "OR [jsdoc_info: JSDocInfo] [length: 46]");
        boolean boolean3 = node2.isRegExp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        boolean boolean2 = node1.isTry();
        java.util.Set<java.lang.String> strSet3 = node1.getDirectives();
        node1.setSourceEncodedPositionForTree(6);
        boolean boolean6 = node1.isCase();
        int int7 = node1.getSideEffectFlags();
        boolean boolean8 = node1.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        boolean boolean20 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node21 = node10.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        java.lang.String str26 = node25.toStringTree();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        boolean boolean38 = node33.isIf();
        com.google.javascript.rhino.Node node39 = node30.copyInformationFromForTree(node33);
        boolean boolean40 = node30.isEmpty();
        int int41 = node25.getIndexOfChild(node30);
        boolean boolean42 = node10.isEquivalentTo(node30);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isFalse();
        boolean boolean51 = node44.isNoSideEffectsCall();
        boolean boolean52 = node44.isWith();
        node30.addChildToBack(node44);
        boolean boolean54 = node30.isHook();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder55 = node30.new FileLevelJsDocBuilder();
        boolean boolean56 = node30.isNumber();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER 4.0 1\n" + "'", str26, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder2 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        java.lang.String str7 = node4.toString();
        com.google.javascript.rhino.Node node8 = node4.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node4.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] { node12 };
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node20.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node20 };
        com.google.javascript.rhino.Node[][] nodeArray27 = new com.google.javascript.rhino.Node[][] { nodeArray10, nodeArray18, nodeArray26 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = nodeArrayBuilder2.add(nodeArray27);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder29 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node31.addSuppression("");
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node31.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node31 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node39.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node39 };
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node51 = node47.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] { node47 };
        com.google.javascript.rhino.Node[][] nodeArray54 = new com.google.javascript.rhino.Node[][] { nodeArray37, nodeArray45, nodeArray53 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder55 = nodeArrayBuilder29.add(nodeArray54);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder56 = nodeArrayBuilder28.add(nodeArray54);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder57 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder59 = nodeArrayBuilder57.add(nodeArray58);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder60 = nodeArrayBuilder56.add(nodeArray58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(8, nodeArray58, 2, 0);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray58, 48, 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str7, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str15, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArrayBuilder28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str34, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArrayBuilder55);
        org.junit.Assert.assertNotNull(nodeArrayBuilder56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArrayBuilder59);
        org.junit.Assert.assertNotNull(nodeArrayBuilder60);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        namePosition0.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8, namePosition9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList13 = com.google.common.collect.ImmutableList.of(namePosition11, namePosition12);
        int int14 = namePosition11.getPositionOnEndLine();
        int int15 = namePosition11.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition16, namePosition17);
        int int19 = namePosition16.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList22 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21);
        int int23 = namePosition20.getPositionOnEndLine();
        int int24 = namePosition20.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition25, namePosition26);
        namePosition25.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition33, namePosition34);
        int int36 = namePosition33.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList39 = com.google.common.collect.ImmutableList.of(namePosition37, namePosition38);
        namePosition37.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList47 = com.google.common.collect.ImmutableList.of(namePosition45, namePosition46);
        namePosition45.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList53 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition9, namePosition11, namePosition16, namePosition20, namePosition25, namePosition33, namePosition37, namePosition45);
        int int54 = namePosition0.getEndLine();
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(namePositionList39);
        org.junit.Assert.assertNotNull(namePositionList47);
        org.junit.Assert.assertNotNull(namePositionList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        java.lang.String[] strArray13 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray19 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray20 = strSet14.toArray((java.lang.Comparable<java.lang.String>[]) strArray19);
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean35 = strList27.containsAll((java.util.Collection<java.lang.String>) strList34);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor36 = strList27.listIterator();
        int int37 = strList27.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList27.asList();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node40.setStaticSourceFile(staticSourceFile43);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node55 = node53.getParent();
        com.google.javascript.rhino.Node node56 = node46.useSourceInfoFromForTree(node53);
        boolean boolean57 = node40.hasChild(node46);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        java.lang.String str62 = node59.toString();
        int int63 = node59.getChildCount();
        boolean boolean64 = node59.isGetProp();
        boolean boolean65 = node40.isEquivalentTo(node59);
        int int66 = strList27.indexOf((java.lang.Object) node40);
        boolean boolean67 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList27);
        boolean boolean68 = strList27.isEmpty();
        boolean boolean69 = strList27.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor70 = strList27.listIterator();
        java.util.Iterator<java.lang.String> strItor71 = strList27.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strList27.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableArray20);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str62, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strItor71);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        node1.setSourceEncodedPosition(4095);
        boolean boolean19 = node1.hasOneChild();
        node1.setWasEmptyNode(false);
        boolean boolean22 = node1.isTry();
        node1.setVarArgs(true);
        boolean boolean25 = node1.isOptionalArg();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        java.lang.String[] strArray1 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.Iterator<java.lang.String> strItor5 = strList2.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        java.util.Iterator<java.lang.String> strItor17 = strSet13.iterator();
        int int18 = strSet13.size();
        java.lang.String[] strArray25 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        java.lang.Object[] objArray28 = strSet26.toArray();
        strSet26.clear();
        java.util.Iterator<java.lang.String> strItor30 = strSet26.iterator();
        int int31 = strSet26.size();
        boolean boolean33 = strSet26.equals((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList34 = com.google.common.collect.ImmutableList.of(strSet13, strSet26);
        boolean boolean35 = strList2.remove((java.lang.Object) strSet13);
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean50 = strList42.containsAll((java.util.Collection<java.lang.String>) strList49);
        java.util.Spliterator<java.lang.String> strSpliterator51 = strList42.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = strList42.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean57 = strList52.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.util.Iterator<java.lang.String> strItor58 = strList56.iterator();
        boolean boolean59 = strSet13.removeAll((java.util.Collection<java.lang.String>) strList56);
        java.lang.Object obj60 = null;
        int int61 = strList56.lastIndexOf(obj60);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSetList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strSpliterator51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        java.lang.String str11 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        int int22 = node1.getSourcePosition();
        boolean boolean23 = node1.isThis();
        java.lang.String str24 = node1.toString();
        boolean boolean25 = node1.isReturn();
        boolean boolean26 = node1.isNumber();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isExprResult();
        boolean boolean10 = node8.isDefaultCase();
        boolean boolean11 = node8.isTrue();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isBlock();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = node22.cloneNode();
        com.google.javascript.rhino.Node node24 = node14.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean30 = node29.isExprResult();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node34.isLabel();
        boolean boolean37 = node29.isEquivalentTo(node34);
        com.google.javascript.rhino.Node node38 = node23.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node node39 = node8.srcref(node29);
        boolean boolean40 = node29.isLabel();
        com.google.javascript.rhino.InputId inputId41 = node29.getInputId();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(inputId41);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isFalse();
        boolean boolean14 = node9.isParamList();
        node1.addChildToFront(node9);
        node9.putIntProp(38, 35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node9.siblings();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node9.getStaticSourceFile();
        int int21 = node9.getChildCount();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "(OR \n)");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node1.isReturn();
        boolean boolean14 = node1.isTypeOf();
        int int16 = node1.getIntProp(0);
        node1.removeProp((int) (byte) 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameterType("(OR \n)");
        boolean boolean7 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        jSDocInfo0.setAssociatedNode(node5);
        java.lang.String str27 = jSDocInfo0.getFileOverview();
        boolean boolean28 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        int int46 = strList43.size();
        boolean boolean47 = strList43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean49 = jSDocInfo48.hasBaseType();
        jSDocInfo48.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo48.getBaseType();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo48.getParameterNames();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        int int59 = node55.getCharno();
        boolean boolean60 = node55.isContinue();
        boolean boolean61 = strSet53.equals((java.lang.Object) node55);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        com.google.javascript.rhino.Node node67 = node65.getParent();
        node65.setIsSyntheticBlock(true);
        boolean boolean70 = node65.isContinue();
        boolean boolean71 = strSet53.equals((java.lang.Object) node65);
        java.lang.Object[] objArray72 = strSet53.toArray();
        int int73 = strList43.indexOf((java.lang.Object) objArray72);
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList43.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.isNoShadow();
        boolean boolean77 = jSDocInfo75.isNoShadow();
        boolean boolean78 = jSDocInfo75.hasModifies();
        boolean boolean79 = jSDocInfo75.isOverride();
        java.util.Collection<java.lang.String> strCollection80 = jSDocInfo75.getAuthors();
        java.lang.String str81 = jSDocInfo75.getBlockDescription();
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo75.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo75.getReturnType();
        boolean boolean84 = jSDocInfo75.isExpose();
        int int85 = strList43.lastIndexOf((java.lang.Object) boolean84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean87 = jSDocInfo86.hasBaseType();
        java.lang.String str88 = jSDocInfo86.getFileOverview();
        int int89 = jSDocInfo86.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = jSDocInfo86.getBaseType();
        boolean boolean91 = jSDocInfo86.isConstant();
        boolean boolean92 = jSDocInfo86.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = jSDocInfo86.getBaseType();
        java.lang.String str94 = jSDocInfo86.getSourceName();
        boolean boolean95 = jSDocInfo86.isDefine();
        boolean boolean96 = strList43.equals((java.lang.Object) jSDocInfo86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = strSet29.addAll((java.util.Collection<java.lang.String>) strList43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(strCollection80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jSTypeExpression90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSTypeExpression93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean2 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node8 = node6.getParent();
        node6.setIsSyntheticBlock(true);
        boolean boolean11 = node6.isContinue();
        boolean boolean12 = node6.isParamList();
        boolean boolean13 = node6.isParamList();
        boolean boolean14 = node6.isOptionalArg();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node16.setStaticSourceFile(staticSourceFile19);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        com.google.javascript.rhino.Node node31 = node29.getParent();
        com.google.javascript.rhino.Node node32 = node22.useSourceInfoFromForTree(node29);
        boolean boolean33 = node16.hasChild(node22);
        boolean boolean34 = node16.isStringKey();
        int int35 = node16.getCharno();
        com.google.javascript.rhino.Node node36 = null;
        node6.addChildAfter(node16, node36);
        com.google.javascript.rhino.Node node38 = node1.srcrefTree(node16);
        node38.setDouble((double) 4);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo2.getParameterNames();
        boolean boolean4 = jSDocInfo2.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo2.getThrownTypes();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.isDelProp();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node25 = node23.getParent();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node23.setJSType(jSType26);
        java.lang.String str28 = node23.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node30.setStaticSourceFile(staticSourceFile33);
        boolean boolean35 = node30.isComma();
        node30.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList38 = com.google.common.collect.ImmutableList.of(node7, node14, node23, node30);
        boolean boolean39 = node30.isComma();
        boolean boolean40 = node30.isCase();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int46 = node45.getSideEffectFlags();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node52 = node50.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str54 = jSDocInfo53.getFileOverview();
        java.lang.String str55 = jSDocInfo53.getFileOverview();
        boolean boolean56 = jSDocInfo53.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList57 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo2, (java.lang.Object) node30, (java.lang.Object) node45, (java.lang.Object) node50, (java.lang.Object) jSDocInfo53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node59.siblings();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node62.children();
        boolean boolean67 = node62.isVoid();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node69.setStaticSourceFile(staticSourceFile72);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node75.addSuppression("");
        java.lang.String str78 = node75.toString();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100);
        node80.addChildrenToFront(node82);
        com.google.javascript.rhino.Node node84 = node82.getParent();
        com.google.javascript.rhino.Node node85 = node75.useSourceInfoFromForTree(node82);
        boolean boolean86 = node69.hasChild(node75);
        boolean boolean87 = node75.hasMoreThanOneChild();
        boolean boolean89 = node75.getBooleanProp(51);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(12, node30, node59, node62, node75, 44, 0);
        com.google.javascript.rhino.Node node96 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "NUMBER 1.0 37\n");
        node75.putProp(29, (java.lang.Object) node96);
        boolean boolean98 = node96.isInc();
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR" + "'", str28, "OR");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str78, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node3.children();
        java.lang.Object obj10 = null;
        node3.putProp((int) (byte) 10, obj10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo12.getParameterNames();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        int int23 = node19.getCharno();
        boolean boolean24 = node19.isContinue();
        boolean boolean25 = strSet17.equals((java.lang.Object) node19);
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean40 = strList32.containsAll((java.util.Collection<java.lang.String>) strList39);
        java.util.Spliterator<java.lang.String> strSpliterator41 = strList32.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = strList32.asList();
        boolean boolean43 = strSet17.contains((java.lang.Object) strList42);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node49 = node47.getParent();
        int int50 = node47.getLength();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        node47.addChildrenToFront(node52);
        boolean boolean56 = strList42.contains((java.lang.Object) node47);
        com.google.javascript.rhino.Node node57 = node3.clonePropsFrom(node47);
        int int58 = node47.getSourceOffset();
        boolean boolean59 = node47.isNoSideEffectsCall();
        node47.setVarArgs(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node47.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node47.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1), (-1), 15);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        com.google.javascript.rhino.Node node74 = node72.getParent();
        boolean boolean75 = node74.isDefaultCase();
        boolean boolean76 = node74.isNoSideEffectsCall();
        boolean boolean77 = node74.isTypeOf();
        int int78 = node74.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            node47.addChildBefore(node68, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSpliterator41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.isVarArgs();
        boolean boolean7 = node1.isIn();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node44.isLabel();
        boolean boolean47 = node44.isContinue();
        com.google.javascript.rhino.Node node48 = node16.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node49 = node1.srcref(node44);
        int int50 = node49.getSourcePosition();
        boolean boolean51 = node49.isName();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        com.google.javascript.rhino.Node node68 = node66.getParent();
        com.google.javascript.rhino.Node node69 = node59.useSourceInfoFromForTree(node66);
        boolean boolean70 = node53.hasChild(node59);
        node53.removeProp(44);
        boolean boolean73 = node53.isIf();
        boolean boolean74 = node53.isString();
        com.google.javascript.rhino.Node node75 = node53.removeFirstChild();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node77.addChildrenToFront(node79);
        boolean boolean81 = node77.isReturn();
        com.google.javascript.rhino.InputId inputId82 = node77.getInputId();
        boolean boolean83 = node77.isArrayLit();
        boolean boolean84 = node77.isObjectLit();
        node53.addChildrenToFront(node77);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node86 = node49.getChildBefore(node77);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str62, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(inputId82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("((OR))");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        java.lang.String str10 = jSDocInfo0.toString();
        boolean boolean12 = jSDocInfo0.hasParameterType("[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getParameterType("OR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(jSTypeExpression15);
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        com.google.javascript.rhino.Node node18 = node16.getParent();
        com.google.javascript.rhino.Node node19 = node9.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node21.isComma();
        node21.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node30.children();
        com.google.javascript.rhino.InputId inputId35 = null;
        node30.setInputId(inputId35);
        boolean boolean37 = node30.isName();
        java.lang.String str38 = node21.checkTreeEquals(node30);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] { node3, node9, node30 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(nodeArray39);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray39);
        boolean boolean42 = node41.isWhile();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", (-1), 8);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder47 = node46.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node49.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        node49.setStaticSourceFile(staticSourceFile52);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        com.google.javascript.rhino.Node node65 = node55.useSourceInfoFromForTree(node62);
        boolean boolean66 = node49.hasChild(node55);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        java.lang.String str71 = node68.toString();
        int int72 = node68.getChildCount();
        boolean boolean73 = node68.isGetProp();
        boolean boolean74 = node49.isEquivalentTo(node68);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        node76.addChildrenToFront(node78);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node76.children();
        com.google.javascript.rhino.InputId inputId81 = null;
        node76.setInputId(inputId81);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) '4', node41, node46, node49, node76);
        node49.putIntProp(50, 100);
        boolean boolean87 = node49.isNumber();
        com.google.javascript.rhino.jstype.JSType jSType88 = node49.getJSType();
        int int89 = node49.getLength();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str38, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str58, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str71, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(nodeIterable80);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesArguments();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        int int5 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node10 = typePosition0.getItem();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isFalse();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        boolean boolean28 = node23.isIf();
        com.google.javascript.rhino.Node node29 = node20.copyInformationFromForTree(node23);
        boolean boolean30 = node20.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isReturn();
        com.google.javascript.rhino.InputId inputId37 = node32.getInputId();
        boolean boolean38 = node32.isAdd();
        node20.addChildrenToFront(node32);
        int int40 = node32.getLength();
        boolean boolean41 = node32.isIf();
        com.google.javascript.rhino.Node node42 = node32.getFirstChild();
        com.google.javascript.rhino.Node node43 = node7.useSourceInfoFromForTree(node42);
        node7.putBooleanProp(5, true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputId37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Iterator<java.lang.String> strItor15 = strList6.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strList6.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo17.getParameterNames();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo17.getVisibility();
        java.lang.String str22 = jSDocInfo17.getDescriptionForParameter("Not declared as a type name");
        boolean boolean23 = jSDocInfo17.isOverride();
        java.lang.String str25 = jSDocInfo17.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str26 = jSDocInfo17.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo17.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList27.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor29 = strList28.listIterator();
        boolean boolean30 = strList6.containsAll((java.util.Collection<java.lang.String>) strList28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = strList6.get(409600);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (409600) must be less than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(visibility20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder1 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        java.lang.String str6 = node3.toString();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node3.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] { node11 };
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node19 };
        com.google.javascript.rhino.Node[][] nodeArray26 = new com.google.javascript.rhino.Node[][] { nodeArray9, nodeArray17, nodeArray25 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder27 = nodeArrayBuilder1.add(nodeArray26);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder28.add(nodeArray29);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = nodeArrayBuilder27.add(nodeArray29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(1, nodeArray29);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = node32.getAncestor(39);
        node32.setOptionalArg(true);
        boolean boolean38 = node32.isNew();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str6, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArrayBuilder27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertNotNull(nodeArrayBuilder31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR 0", 4, (int) (short) 1);
        node3.addSuppression("(())");
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        boolean boolean7 = jSDocInfo0.isConstructor();
        boolean boolean9 = jSDocInfo0.hasParameter("OR [jsdoc_info: JSDocInfo]\n");
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection13 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(strCollection13);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isObjectLit();
        boolean boolean10 = node8.isString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node12.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.Node node28 = node18.useSourceInfoFromForTree(node25);
        boolean boolean29 = node12.hasChild(node18);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node12.getAncestors();
        boolean boolean31 = node12.isNot();
        node8.addChildrenToBack(node12);
        boolean boolean34 = node12.getBooleanProp(32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(4, "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)", 54, 0);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType5);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = strList2.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasBaseType();
        jSDocInfo4.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo4.getTypedefType();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo4.getReturnType();
        boolean boolean11 = jSDocInfo4.isJavaDispatch();
        boolean boolean12 = jSDocInfo4.isDeprecated();
        boolean boolean13 = jSDocInfo4.isNoShadow();
        boolean boolean14 = jSDocInfo4.isJavaDispatch();
        int int15 = strList2.lastIndexOf((java.lang.Object) jSDocInfo4);
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList2.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.hasBaseType();
        java.lang.String str19 = jSDocInfo17.getFileOverview();
        int int20 = jSDocInfo17.getParameterCount();
        boolean boolean21 = jSDocInfo17.isConstant();
        java.lang.String str22 = jSDocInfo17.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo17.getParameterType("hi!");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo17.getImplementedInterfaces();
        boolean boolean26 = strList2.contains((java.lang.Object) jSTypeExpressionList25);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean12 = jSDocInfo0.hasDescriptionForParameter("NUMBER -1.0\n");
        jSDocInfo0.setLicense("(Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n)");
        boolean boolean15 = jSDocInfo0.isNoTypeCheck();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str17 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList7 = com.google.common.collect.ImmutableList.of(visibility4, visibility5, visibility6);
        jSDocInfo0.setVisibility(visibility6);
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getEnumParameterType();
        jSDocInfo0.setLicense("OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(54, "(OR)", 4095, 32);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node4.getStaticSourceFile();
        node4.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(staticSourceFile5);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition1.getPositionOnEndLine();
        int int10 = typePosition1.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition1.setPositionInformation(46, (int) (short) 0, 4, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 46?end-line: 4");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strList2.retainAll((java.util.Collection<java.lang.String>) strList7);
        int int10 = strList2.size();
        java.lang.String[] strArray12 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strList13.isEmpty();
        boolean boolean16 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        boolean boolean18 = strList13.add("OR\n");
        boolean boolean20 = strList13.add("");
        java.util.Iterator<java.lang.String> strItor21 = strList13.iterator();
        java.lang.String[] strArray28 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.Object[] objArray31 = strSet29.toArray();
        strSet29.clear();
        java.lang.Object[] objArray33 = strSet29.toArray();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray34 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray35 = strSet29.toArray(fileLevelJsDocBuilderArray34);
        java.lang.String[] strArray42 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        java.lang.Object[] objArray45 = strSet43.toArray();
        int int46 = strSet43.size();
        java.util.Spliterator<java.lang.String> strSpliterator47 = strSet43.spliterator();
        boolean boolean49 = strSet43.add("OR [synthetic: 1]");
        boolean boolean50 = strSet29.removeAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Iterator<java.lang.String> strItor51 = strSet43.iterator();
        boolean boolean52 = strList13.contains((java.lang.Object) strItor51);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = node54.cloneNode();
        boolean boolean57 = node54.getBooleanProp(4095);
        com.google.javascript.rhino.Node node58 = node54.cloneNode();
        boolean boolean59 = strList13.equals((java.lang.Object) node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean61 = jSDocInfo60.hasBaseType();
        jSDocInfo60.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo60.getTypedefType();
        boolean boolean65 = jSDocInfo60.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo60.getReturnType();
        boolean boolean67 = jSDocInfo60.isJavaDispatch();
        boolean boolean68 = jSDocInfo60.isDeprecated();
        boolean boolean69 = jSDocInfo60.isDeprecated();
        boolean boolean70 = jSDocInfo60.isInterface();
        boolean boolean71 = jSDocInfo60.isNoAlias();
        boolean boolean72 = jSDocInfo60.isInterface();
        boolean boolean73 = strList13.remove((java.lang.Object) jSDocInfo60);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray34);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(strSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        boolean boolean7 = node1.isLabelName();
        node1.removeProp(49);
        boolean boolean10 = node1.isCall();
        boolean boolean11 = node1.isQualifiedName();
        boolean boolean12 = node1.isSyntheticBlock();
        com.google.javascript.rhino.Node node13 = node1.getNext();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "([OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component])", 53, (int) (short) 1);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node11 = node7.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFromForTree(node7);
        boolean boolean14 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isVarArgs();
        boolean boolean22 = node16.isIn();
        node7.addChildToFront(node16);
        boolean boolean24 = node16.isAdd();
        boolean boolean25 = node16.isSwitch();
        boolean boolean26 = node16.isBreak();
        boolean boolean27 = node16.isWhile();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node34.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node29.copyInformationFromForTree(node34);
        boolean boolean41 = node29.isReturn();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = new com.google.javascript.rhino.JSTypeExpression(node29, "");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(44, node16, node29, 7, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isObjectLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isReturn();
        com.google.javascript.rhino.InputId inputId15 = node10.getInputId();
        boolean boolean16 = node10.isArrayLit();
        boolean boolean17 = node10.isInc();
        com.google.javascript.rhino.Node node18 = node1.srcrefTree(node10);
        boolean boolean19 = node18.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node36 = node34.getParent();
        com.google.javascript.rhino.Node node37 = node27.useSourceInfoFromForTree(node34);
        boolean boolean38 = node21.hasChild(node27);
        boolean boolean39 = node21.isStringKey();
        int int40 = node21.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoFrom(node21);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isNot();
        boolean boolean49 = node44.isDefaultCase();
        node44.setCharno((int) (byte) 10);
        boolean boolean52 = node44.isNumber();
        boolean boolean53 = node21.isEquivalentTo(node44);
        com.google.javascript.rhino.Node node54 = node21.getLastSibling();
        boolean boolean55 = node54.isThrow();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str30, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strList19.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor32 = strList19.listIterator(213092);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (213092) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node24.isFor();
        com.google.javascript.rhino.Node node34 = node24.getFirstChild();
        boolean boolean35 = node24.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node24.isComma();
        boolean boolean34 = node24.isCase();
        boolean boolean35 = node24.isScript();
        boolean boolean36 = node24.isThis();
        java.lang.String str37 = node24.toStringTree();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR 0 [jsdoc_info: JSDocInfo]\n" + "'", str37, "OR 0 [jsdoc_info: JSDocInfo]\n");
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        boolean boolean11 = jSDocInfo0.hasParameter("[]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("OR 0 [jsdoc_info: JSDocInfo]\n");
        java.lang.String str14 = jSDocInfo0.getReturnDescription();
        boolean boolean15 = jSDocInfo0.isImplicitCast();
        java.lang.Class<?> wildcardClass16 = jSDocInfo0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node17.isLabelName();
        com.google.javascript.rhino.Node node34 = node17.removeFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node17.getJSDocInfo();
        boolean boolean36 = node17.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean11 = jSTypeExpression10.isVarArgs();
        boolean boolean12 = jSTypeExpression10.isVarArgs();
        boolean boolean13 = jSTypeExpression10.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression10);
        com.google.javascript.rhino.Node node15 = jSTypeExpression10.getRoot();
        com.google.javascript.rhino.Node node16 = jSTypeExpression10.getRoot();
        boolean boolean17 = jSTypeExpression10.isVarArgs();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType20 = jSTypeExpression10.evaluate(jSTypeStaticScope18, jSTypeRegistry19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(10.0d, 39, 4);
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("OR [jsdoc_info: JSDocInfo]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 10.0 39 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 37\n", 44, 5);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        boolean boolean9 = node5.isTypeOf();
        boolean boolean10 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.isDelProp();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node21.setJSType(jSType24);
        java.lang.String str26 = node21.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        node28.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList36 = com.google.common.collect.ImmutableList.of(node5, node12, node21, node28);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node40.isLabel();
        boolean boolean43 = node40.isContinue();
        com.google.javascript.rhino.Node node44 = node12.copyInformationFrom(node40);
        java.lang.String str45 = node40.toString();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType58 = node53.getJSType();
        boolean boolean59 = node53.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node60 = node51.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int66 = node65.getSideEffectFlags();
        com.google.javascript.rhino.Node node67 = node53.useSourceInfoIfMissingFrom(node65);
        node65.detachChildren();
        com.google.javascript.rhino.Node node69 = node40.srcrefTree(node65);
        boolean boolean70 = node65.isOr();
        com.google.javascript.rhino.Node node71 = node3.srcref(node65);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node71.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR" + "'", str26, "OR");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR" + "'", str45, "OR");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(nodeIterable72);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        boolean boolean7 = node1.isInstanceOf();
        boolean boolean8 = node1.isParamList();
        boolean boolean9 = node1.isContinue();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        int int15 = node13.getType();
        com.google.javascript.rhino.InputId inputId16 = node13.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node13, "");
        boolean boolean19 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = node1.clonePropsFrom(node13);
        boolean boolean21 = node20.isAnd();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.hasThisType();
        java.lang.String str8 = jSDocInfo0.getDescription();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.String str8 = node2.getSourceFileName();
        boolean boolean9 = node2.isGetElem();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(39, node2, (int) (short) 100, 4);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isOr();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node12.siblings();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node27.setJSType(jSType61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("OR");
        node64.addSuppression("NUMBER 4.0 1\n");
        node27.addChildrenToFront(node64);
        boolean boolean68 = node27.isNE();
        boolean boolean69 = node27.isGetProp();
        boolean boolean70 = node27.isSyntheticBlock();
        com.google.javascript.rhino.Node node71 = node27.cloneTree();
        boolean boolean72 = node71.isAssign();
        java.lang.String str76 = node71.toString(false, true, true);
        java.util.Set<java.lang.String> strSet77 = node71.getDirectives();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR" + "'", str76, "OR");
        org.junit.Assert.assertNull(strSet77);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor17 = strList6.iterator();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.intersection(booleanLiteralSet19);
        int int21 = strList6.lastIndexOf((java.lang.Object) booleanLiteralSet20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node32 = node28.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node34 = node23.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node36.setStaticSourceFile(staticSourceFile39);
        boolean boolean41 = node36.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isNot();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = node43.copyInformationFromForTree(node49);
        boolean boolean51 = node50.isExprResult();
        boolean boolean52 = node50.isDefaultCase();
        node36.addChildrenToBack(node50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        com.google.javascript.rhino.Node node65 = node55.useSourceInfoFromForTree(node62);
        boolean boolean66 = node65.isSetterDef();
        com.google.javascript.rhino.Node node67 = node65.getLastChild();
        boolean boolean68 = node65.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node69 = node50.useSourceInfoIfMissingFromForTree(node65);
        int int70 = node34.getIndexOfChild(node69);
        int int71 = strList6.indexOf((java.lang.Object) node34);
        boolean boolean72 = node34.isNull();
        int int73 = node34.getLength();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str58, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isEmpty();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.hasChildren();
        com.google.javascript.rhino.Node node15 = node1.srcrefTree(node10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        boolean boolean23 = node17.isBlock();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node26);
        int int28 = node26.getLength();
        int int29 = node1.getIndexOfChild(node26);
        com.google.javascript.rhino.Node node30 = node26.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = node30.hasMoreThanOneChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node25.getStaticSourceFile();
        boolean boolean31 = node25.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        node33.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node42.children();
        com.google.javascript.rhino.InputId inputId47 = null;
        node42.setInputId(inputId47);
        boolean boolean49 = node42.isName();
        java.lang.String str50 = node33.checkTreeEquals(node42);
        boolean boolean51 = node42.isInc();
        node42.setType((int) (short) -1);
        node25.addChildrenToFront(node42);
        java.lang.String str55 = node25.getSourceFileName();
        node15.addChildToBack(node25);
        boolean boolean57 = node25.isLabel();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str50, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        com.google.javascript.rhino.InputId inputId15 = null;
        node3.setInputId(inputId15);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        node19.setStaticSourceFile(staticSourceFile22);
        boolean boolean24 = node19.isComma();
        boolean boolean25 = node19.isBlock();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node27.cloneNode();
        com.google.javascript.rhino.Node node29 = node19.copyInformationFromForTree(node28);
        boolean boolean30 = node19.isNew();
        node19.setSourceEncodedPositionForTree(41);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(50, node19, (int) (byte) 10, 48);
        boolean boolean37 = node19.getBooleanProp(4096);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.Node node49 = node39.useSourceInfoFromForTree(node46);
        boolean boolean50 = node49.isArrayLit();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node57.addSuppression("");
        java.lang.String str60 = node57.toString();
        com.google.javascript.rhino.Node node61 = node57.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node57.getStaticSourceFile();
        com.google.javascript.rhino.Node node63 = node52.copyInformationFromForTree(node57);
        java.lang.String str64 = node63.getSourceFileName();
        com.google.javascript.rhino.Node node65 = node49.copyInformationFromForTree(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node63.siblings();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildBefore(node19, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str60, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeIterable66);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isIf();
        com.google.javascript.rhino.Node node17 = node7.getLastSibling();
        boolean boolean18 = node7.isLabel();
        boolean boolean19 = node7.isObjectLit();
        boolean boolean20 = node7.isEmpty();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }
}


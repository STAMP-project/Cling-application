import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest43 {

    public static boolean debug = false;

    @Test
    public void test21501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21501");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str9 = ternaryValue8.toString();
        boolean boolean11 = ternaryValue8.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue5.and(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue2.and(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue14.xor(ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue17.xor(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue15.or(ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean26 = ternaryValue24.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str28 = ternaryValue27.toString();
        boolean boolean30 = ternaryValue27.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue24.and(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue21.and(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue20.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue2.or(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue0.and(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "unknown" + "'", str9, "unknown");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "unknown" + "'", str28, "unknown");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
    }

    @Test
    public void test21502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21502");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList13.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = strList17.subList(0, 1);
        int int21 = strList20.size();
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strList20.spliterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strSpliterator23);
    }

    @Test
    public void test21503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21503");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = new com.google.javascript.rhino.JSTypeExpression(node3, "");
        boolean boolean9 = jSTypeExpression8.isOptionalArg();
        com.google.javascript.rhino.Node node10 = jSTypeExpression8.getRoot();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo11.getTemplateTypeNames();
        int int14 = jSDocInfo11.getParameterCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo11.getTemplateTypeNames();
        boolean boolean16 = jSTypeExpression8.equals((java.lang.Object) strList15);
        boolean boolean17 = jSTypeExpression8.isVarArgs();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21504");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        typePosition7.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        boolean boolean19 = node15.hasChildren();
        typePosition7.setItem(node15);
        int int21 = typePosition7.getPositionOnStartLine();
        boolean boolean22 = typePosition7.hasBrackets();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        boolean boolean30 = node24.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node37.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFromForTree(node37);
        com.google.javascript.rhino.Node node44 = node24.useSourceInfoFrom(node37);
        node44.detachChildren();
        boolean boolean46 = node44.isSyntheticBlock();
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node49.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        node49.setStaticSourceFile(staticSourceFile52);
        boolean boolean54 = node49.isComma();
        node49.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node58.children();
        com.google.javascript.rhino.InputId inputId63 = null;
        node58.setInputId(inputId63);
        boolean boolean65 = node58.isName();
        java.lang.String str66 = node49.checkTreeEquals(node58);
        com.google.javascript.rhino.InputId inputId67 = node49.getInputId();
        boolean boolean68 = node49.hasMoreThanOneChild();
        boolean boolean69 = node49.isCall();
        boolean boolean70 = node44.isEquivalentTo(node49);
        boolean boolean71 = node44.isTypeOf();
        typePosition7.setItem(node44);
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str66, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test21505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21505");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.util.Iterator<java.lang.String> strItor24 = strList13.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor25 = strList13.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor26 = strList13.listIterator();
        java.util.Spliterator<java.lang.String> strSpliterator27 = strList13.spliterator();
        java.util.ListIterator<java.lang.String> strItor28 = strList13.listIterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasTypedefType();
        java.lang.String str31 = jSDocInfo29.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo29.getThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo29.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = jSDocInfo29.getTemplateTypeNames();
        boolean boolean35 = strList13.containsAll((java.util.Collection<java.lang.String>) strList34);
        java.util.stream.Stream<java.lang.String> strStream36 = strList34.parallelStream();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JSDocInfo" + "'", str31, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strStream36);
    }

    @Test
    public void test21506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21506");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        node1.putIntProp((int) (short) 0, 38);
        boolean boolean8 = node1.isCall();
        int int9 = node1.getCharno();
        boolean boolean11 = node1.getBooleanProp(41);
        node1.setSourceEncodedPosition(45);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType26 = node21.getJSType();
        boolean boolean27 = node21.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node28 = node19.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.jstype.JSType jSType29 = node19.getJSType();
        com.google.javascript.rhino.Node node30 = node19.getLastSibling();
        boolean boolean31 = node1.isEquivalentTo(node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasBaseType();
        jSDocInfo32.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo32.getBaseType();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo32.getParameterNames();
        java.lang.String str38 = jSDocInfo32.getDescription();
        boolean boolean39 = jSDocInfo32.containsDeclaration();
        jSDocInfo32.setDeprecated(false);
        boolean boolean42 = jSDocInfo32.shouldPreserveTry();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node44.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node44.siblings();
        boolean boolean50 = node44.isInstanceOf();
        boolean boolean51 = node44.isParamList();
        node44.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        com.google.javascript.rhino.Node node59 = node57.getParent();
        boolean boolean60 = node57.isHook();
        java.util.Set<java.lang.String> strSet61 = node57.getDirectives();
        boolean boolean62 = node44.hasChild(node57);
        jSDocInfo32.setAssociatedNode(node44);
        com.google.javascript.rhino.Node node64 = node1.copyInformationFrom(node44);
        node1.putBooleanProp(409600, true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test21507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21507");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21508");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isDelProp();
        boolean boolean17 = node7.isDebugger();
        boolean boolean18 = node7.wasEmptyNode();
        boolean boolean19 = node7.isTry();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21509");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo5.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo5.getTemplateTypeNames();
        java.lang.String[] strArray17 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.lang.Object[] objArray20 = strSet18.toArray();
        strSet18.clear();
        boolean boolean22 = strList10.containsAll((java.util.Collection<java.lang.String>) strSet18);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = strList10.reverse();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags25 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags25.setReturnsTainted();
        sideEffectFlags25.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags29 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags29.setMutatesArguments();
        sideEffectFlags29.setMutatesArguments();
        sideEffectFlags29.setMutatesGlobalState();
        sideEffectFlags29.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags34.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags37 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray38 = new com.google.javascript.rhino.Node.SideEffectFlags[] { sideEffectFlags25, sideEffectFlags29, sideEffectFlags34, sideEffectFlags37 };
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray39 = strList10.toArray(sideEffectFlagsArray38);
        java.util.ListIterator<java.lang.String> strItor40 = strList10.listIterator();
        java.util.Iterator<java.lang.String> strItor41 = strList10.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean43 = jSDocInfo42.hasBaseType();
        jSDocInfo42.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo42.getBaseType();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo42.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator48 = strSet47.spliterator();
        java.util.Iterator<java.lang.String> strItor49 = strSet47.iterator();
        int int50 = strSet47.size();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node52.isReturn();
        com.google.javascript.rhino.InputId inputId57 = node52.getInputId();
        boolean boolean58 = node52.isAdd();
        boolean boolean59 = node52.isQuotedString();
        int int61 = node52.getIntProp((int) (byte) 1);
        boolean boolean62 = node52.isVarArgs();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        boolean boolean68 = node64.isTypeOf();
        boolean boolean69 = node64.wasEmptyNode();
        boolean boolean70 = node52.isEquivalentTo(node64);
        boolean boolean71 = strSet47.contains((java.lang.Object) boolean70);
        boolean boolean72 = strList10.containsAll((java.util.Collection<java.lang.String>) strSet47);
        boolean boolean73 = strSet4.retainAll((java.util.Collection<java.lang.String>) strSet47);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray38);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test21510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21510");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        node1.detachChildren();
        boolean boolean9 = node1.isQuotedString();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node11.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node11.isComma();
        boolean boolean17 = node11.isBlock();
        java.lang.String str18 = node11.toStringTree();
        boolean boolean19 = node11.isVar();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        boolean boolean27 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node38.children();
        com.google.javascript.rhino.InputId inputId43 = null;
        node38.setInputId(inputId43);
        boolean boolean45 = node38.isName();
        java.lang.String str46 = node29.checkTreeEquals(node38);
        boolean boolean47 = node38.isInc();
        node38.setType((int) (short) -1);
        node21.addChildrenToFront(node38);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node57.addSuppression("");
        java.lang.String str60 = node57.toString();
        com.google.javascript.rhino.Node node61 = node57.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node57.getStaticSourceFile();
        com.google.javascript.rhino.Node node63 = node52.copyInformationFromForTree(node57);
        boolean boolean64 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        boolean boolean70 = node66.isTypeOf();
        boolean boolean71 = node66.isVarArgs();
        boolean boolean72 = node66.isIn();
        node57.addChildToFront(node66);
        node66.removeProp(48);
        com.google.javascript.rhino.Node node77 = node66.getAncestor(0);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node80 = node21.useSourceInfoFromForTree(node79);
        boolean boolean81 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node82 = node11.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node83 = node1.useSourceInfoFrom(node21);
        boolean boolean84 = node1.isDo();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str18, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str46, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str60, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test21511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21511");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        strSet7.clear();
        int int9 = strSet7.size();
        strSet7.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean12 = jSDocInfo11.hasBaseType();
        int int13 = jSDocInfo11.getImplementedInterfaceCount();
        boolean boolean14 = jSDocInfo11.hasTypedefType();
        boolean boolean15 = jSDocInfo11.hasFileOverview();
        boolean boolean16 = jSDocInfo11.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo11.getEnumParameterType();
        boolean boolean18 = jSDocInfo11.hasModifies();
        boolean boolean19 = strSet7.contains((java.lang.Object) boolean18);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21512");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        boolean boolean24 = node19.wasEmptyNode();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isTypeOf();
        boolean boolean31 = node26.isDelProp();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node35.setJSType(jSType38);
        java.lang.String str40 = node35.toString();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node42.setStaticSourceFile(staticSourceFile45);
        boolean boolean47 = node42.isComma();
        node42.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList50 = com.google.common.collect.ImmutableList.of(node19, node26, node35, node42);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node54.isLabel();
        boolean boolean57 = node54.isContinue();
        com.google.javascript.rhino.Node node58 = node26.copyInformationFrom(node54);
        java.lang.String str59 = node54.toString();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        com.google.javascript.rhino.Node node65 = node63.getParent();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType72 = node67.getJSType();
        boolean boolean73 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node74 = node65.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int80 = node79.getSideEffectFlags();
        com.google.javascript.rhino.Node node81 = node67.useSourceInfoIfMissingFrom(node79);
        node79.detachChildren();
        com.google.javascript.rhino.Node node83 = node54.srcrefTree(node79);
        boolean boolean84 = strList13.contains((java.lang.Object) node83);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor85 = strList13.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = strList13.add("(OR [jsdoc_info: JSDocInfo] [synthetic: 1])");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR" + "'", str40, "OR");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeList50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR" + "'", str59, "OR");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strItor85);
    }

    @Test
    public void test21513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21513");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node7 = node1.removeChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node1.getJsDocBuilderForNode();
        boolean boolean9 = node1.isObjectLit();
        boolean boolean10 = node1.isIf();
        int int11 = node1.getSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test21514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21514");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.wasEmptyNode();
        boolean boolean8 = node2.isLabelName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isHook();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(29, node2, node10, 50, 41);
        int int21 = node20.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = node20.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NEG 50 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
    }

    @Test
    public void test21515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21515");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("Named type with empty name component");
        boolean boolean7 = jSDocInfo0.isNoShadow();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        java.util.Iterator<java.lang.String> strItor10 = strSet8.iterator();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet8.stream();
        java.util.Collection<java.lang.String> strCollection12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = strSet8.retainAll(strCollection12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strStream11);
    }

    @Test
    public void test21516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21516");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasBaseType();
        jSDocInfo18.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo18.getBaseType();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo18.getParameterNames();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        int int29 = node25.getCharno();
        boolean boolean30 = node25.isContinue();
        boolean boolean31 = strSet23.equals((java.lang.Object) node25);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.setIsSyntheticBlock(true);
        boolean boolean40 = node35.isContinue();
        boolean boolean41 = strSet23.equals((java.lang.Object) node35);
        java.lang.Object[] objArray42 = strSet23.toArray();
        int int43 = strList13.indexOf((java.lang.Object) objArray42);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList13.spliterator();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        boolean boolean49 = node46.isVarArgs();
        int int50 = node46.getChildCount();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node52.isNot();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = node52.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node60 = node46.useSourceInfoFromForTree(node58);
        int int61 = strList13.lastIndexOf((java.lang.Object) node46);
        java.util.stream.Stream<java.lang.String> strStream62 = strList13.stream();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        boolean boolean68 = node64.isGetterDef();
        java.util.Set<java.lang.String> strSet69 = node64.getDirectives();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node71.addChildrenToFront(node73);
        boolean boolean75 = node71.isFalse();
        boolean boolean76 = node71.isParamList();
        com.google.javascript.rhino.Node node77 = node64.useSourceInfoIfMissingFrom(node71);
        boolean boolean78 = node64.hasOneChild();
        com.google.javascript.rhino.Node node79 = node64.cloneNode();
        boolean boolean80 = node64.isFor();
        int int81 = strList13.lastIndexOf((java.lang.Object) node64);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test21517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21517");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition24 = marker7.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker7.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition27 = marker7.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker7.getDescription();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(nodeSourcePosition24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(nodeSourcePosition27);
        org.junit.Assert.assertNull(stringPosition28);
    }

    @Test
    public void test21518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21518");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isEmpty();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.hasChildren();
        com.google.javascript.rhino.Node node15 = node1.srcrefTree(node10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        boolean boolean23 = node17.isBlock();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node26);
        int int28 = node26.getLength();
        int int29 = node1.getIndexOfChild(node26);
        boolean boolean30 = node1.isArrayLit();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable31 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor32 = ancestorIterable31.iterator();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ancestorIterable31);
        org.junit.Assert.assertNotNull(nodeItor32);
    }

    @Test
    public void test21519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21519");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        boolean boolean23 = node17.isFalse();
        boolean boolean24 = node17.isNoSideEffectsCall();
        java.lang.String str25 = node10.checkTreeEquals(node17);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder28.add(nodeArray29);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray29, 2, (int) '4');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) '4', nodeArray29, 50, 15);
        com.google.javascript.rhino.Node node37 = node17.useSourceInfoFromForTree(node36);
        boolean boolean38 = node17.isAssignAdd();
        boolean boolean39 = node17.isIn();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n" + "'", str25, "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test21520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21520");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean12 = strList3.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray22 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean32 = strList23.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList23.isEmpty();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        boolean boolean43 = strList36.retainAll((java.util.Collection<java.lang.String>) strList41);
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList57 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean58 = strList50.containsAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray60 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        boolean boolean72 = strList65.retainAll((java.util.Collection<java.lang.String>) strList70);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        boolean boolean82 = strList75.retainAll((java.util.Collection<java.lang.String>) strList80);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList83 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList19, (java.util.List<java.lang.String>) strList23, (java.util.List<java.lang.String>) strList41, (java.util.List<java.lang.String>) strList50, (java.util.List<java.lang.String>) strList61, (java.util.List<java.lang.String>) strList65, (java.util.List<java.lang.String>) strList75);
        boolean boolean84 = strList50.isEmpty();
        java.lang.Object[] objArray85 = strList50.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator86 = strList50.spliterator();
        boolean boolean87 = strList3.remove((java.lang.Object) strSpliterator86);
        java.lang.String str89 = strList3.remove(1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strListList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
    }

    @Test
    public void test21521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21521");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.children();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node2.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node16.getStaticSourceFile();
        boolean boolean22 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node36 = node16.useSourceInfoFrom(node29);
        boolean boolean37 = node29.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node39.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node39.getStaticSourceFile();
        boolean boolean45 = node39.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node node58 = node47.copyInformationFromForTree(node52);
        com.google.javascript.rhino.Node node59 = node39.useSourceInfoFrom(node52);
        boolean boolean60 = node52.isNot();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(44, node10, node29, node52);
        int int63 = node61.getIntProp(0);
        boolean boolean64 = node61.isAnd();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21522");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        com.google.javascript.rhino.Node node21 = node11.useSourceInfoFromForTree(node18);
        boolean boolean22 = node21.isSetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node21.siblings();
        int int24 = node3.getIndexOfChild(node21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isGetterDef();
        java.util.Set<java.lang.String> strSet31 = node26.getDirectives();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isFalse();
        boolean boolean38 = node33.isParamList();
        com.google.javascript.rhino.Node node39 = node26.useSourceInfoIfMissingFrom(node33);
        node39.setLength(45);
        boolean boolean42 = node39.isStringKey();
        node39.setVarArgs(false);
        com.google.javascript.rhino.Node node45 = node21.copyInformationFromForTree(node39);
        boolean boolean46 = node39.isCall();
        node39.detachChildren();
        java.lang.String str48 = node39.toString();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder49 = node39.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [length: 45]" + "'", str48, "OR [length: 45]");
    }

    @Test
    public void test21523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21523");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node8 = node1.getLastSibling();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node10.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node10.getStaticSourceFile();
        boolean boolean16 = node10.isVarArgs();
        node1.addChildrenToFront(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasBaseType();
        jSDocInfo18.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo18.getTypedefType();
        boolean boolean23 = jSDocInfo18.isNoSideEffects();
        com.google.javascript.rhino.Node node24 = jSDocInfo18.getAssociatedNode();
        boolean boolean25 = jSDocInfo18.isConstructor();
        boolean boolean26 = jSDocInfo18.isExport();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo18.getSuppressions();
        node10.setDirectives(strSet27);
        java.util.HashSet[] hashSetArray30 = new java.util.HashSet[0];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray31 = (java.util.HashSet<java.lang.String>[]) hashSetArray30;
        java.util.HashSet<java.lang.String>[] strSetArray32 = strSet27.toArray(strSetArray31);
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList33 = com.google.common.collect.ImmutableList.copyOf(strSetArray31);
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList34 = com.google.common.collect.ImmutableList.copyOf((java.util.AbstractSet<java.lang.String>[]) strSetArray31);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(hashSetArray30);
        org.junit.Assert.assertNotNull(strSetArray31);
        org.junit.Assert.assertNotNull(strSetArray32);
        org.junit.Assert.assertNotNull(strSetList33);
        org.junit.Assert.assertNotNull(strSetList34);
    }

    @Test
    public void test21524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21524");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        boolean boolean20 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node21 = node10.removeChildren();
        boolean boolean22 = node21.isTypeOf();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        boolean boolean30 = node24.isLocalResultCall();
        boolean boolean31 = node24.isArrayLit();
        boolean boolean32 = node24.isAssign();
        com.google.javascript.rhino.Node node33 = node21.clonePropsFrom(node24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node21.getAncestors();
        node21.putBooleanProp(44, true);
        int int38 = node21.getSideEffectFlags();
        com.google.javascript.rhino.jstype.JSType jSType39 = node21.getJSType();
        boolean boolean40 = node21.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test21525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21525");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.lang.String str4 = jSDocInfo0.getVersion();
        java.lang.String str5 = jSDocInfo0.getDescription();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet6.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSpliterator7);
    }

    @Test
    public void test21526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21526");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean18 = strList10.containsAll((java.util.Collection<java.lang.String>) strList17);
        java.util.Spliterator<java.lang.String> strSpliterator19 = strList10.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = strList10.asList();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node22.isTypeOf();
        boolean boolean27 = node22.wasEmptyNode();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        boolean boolean33 = node29.isTypeOf();
        boolean boolean34 = node29.isDelProp();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        com.google.javascript.rhino.Node node40 = node38.getParent();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node38.setJSType(jSType41);
        java.lang.String str43 = node38.toString();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node45.setStaticSourceFile(staticSourceFile48);
        boolean boolean50 = node45.isComma();
        node45.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList53 = com.google.common.collect.ImmutableList.of(node22, node29, node38, node45);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        boolean boolean59 = node57.isLabel();
        boolean boolean60 = node57.isContinue();
        com.google.javascript.rhino.Node node61 = node29.copyInformationFrom(node57);
        node57.setCharno(4095);
        int int64 = strList20.indexOf((java.lang.Object) node57);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strList20.spliterator();
        boolean boolean66 = strSet3.remove((java.lang.Object) strSpliterator65);
        com.google.common.collect.ImmutableList<java.util.Spliterator<java.lang.String>> strSpliteratorList67 = com.google.common.collect.ImmutableList.of(strSpliterator65);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSpliterator19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR" + "'", str43, "OR");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSpliteratorList67);
    }

    @Test
    public void test21527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21527");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str1 = ternaryValue0.toString();
        java.lang.String str2 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue3.xor(ternaryValue4);
        boolean boolean7 = ternaryValue3.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue3.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean11 = ternaryValue9.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str13 = ternaryValue12.toString();
        boolean boolean15 = ternaryValue12.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue9.and(ternaryValue12);
        boolean boolean18 = ternaryValue9.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue8.and(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue0.or(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean24 = ternaryValue22.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str26 = ternaryValue25.toString();
        boolean boolean28 = ternaryValue25.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue22.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str31 = ternaryValue30.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean34 = ternaryValue32.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str36 = ternaryValue35.toString();
        boolean boolean38 = ternaryValue35.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue32.and(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean42 = ternaryValue40.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str44 = ternaryValue43.toString();
        boolean boolean46 = ternaryValue43.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue40.and(ternaryValue43);
        boolean boolean49 = ternaryValue40.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str51 = ternaryValue50.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean54 = ternaryValue52.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str56 = ternaryValue55.toString();
        boolean boolean58 = ternaryValue55.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue52.and(ternaryValue55);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue59.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue50.or(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList63 = com.google.common.collect.ImmutableList.of(ternaryValue30, ternaryValue39, ternaryValue40, ternaryValue61, ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue25.or(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = ternaryValue0.and(ternaryValue39);
        boolean boolean67 = ternaryValue39.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "false" + "'", str1, "false");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "false" + "'", str2, "false");
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "unknown" + "'", str13, "unknown");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "unknown" + "'", str26, "unknown");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "unknown" + "'", str31, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "unknown" + "'", str36, "unknown");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "unknown" + "'", str44, "unknown");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "unknown" + "'", str51, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "unknown" + "'", str56, "unknown");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValueList63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test21528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21528");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int26 = strList17.size();
        boolean boolean27 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList17);
        java.util.stream.Stream<java.lang.String> strStream28 = strList17.stream();
        int int29 = strList17.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasBaseType();
        jSDocInfo30.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo30.getBaseType();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo30.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean50 = strList42.containsAll((java.util.Collection<java.lang.String>) strList49);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor51 = strList42.listIterator();
        boolean boolean52 = strSet35.containsAll((java.util.Collection<java.lang.String>) strList42);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        node54.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = node63.children();
        com.google.javascript.rhino.InputId inputId68 = null;
        node63.setInputId(inputId68);
        boolean boolean70 = node63.isName();
        java.lang.String str71 = node54.checkTreeEquals(node63);
        boolean boolean72 = node63.isInc();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        boolean boolean78 = node74.isNot();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node81 = node74.copyInformationFromForTree(node80);
        com.google.javascript.rhino.InputId inputId82 = node74.getInputId();
        node63.addChildrenToFront(node74);
        boolean boolean84 = strList42.equals((java.lang.Object) node74);
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = strList42.reverse();
        boolean boolean86 = strList17.containsAll((java.util.Collection<java.lang.String>) strList85);
        // The following exception was thrown during execution in test generation
        try {
            strList85.add(213092, "STRING OR");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeIterable67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str71, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(inputId82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test21529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21529");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isFalse();
        boolean boolean13 = node8.isParamList();
        com.google.javascript.rhino.Node node14 = node1.useSourceInfoIfMissingFrom(node8);
        node14.setLength(45);
        com.google.javascript.rhino.Node node18 = node14.getAncestor(29);
        boolean boolean19 = node14.isInstanceOf();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21530");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(10.0d);
        boolean boolean2 = node1.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test21531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21531");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition24 = marker19.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = marker19.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition26 = marker19.getNameNode();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(nodeSourcePosition24);
        org.junit.Assert.assertNull(typePosition25);
        org.junit.Assert.assertNull(nodeSourcePosition26);
    }

    @Test
    public void test21532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21532");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isInterface();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21533");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.util.Iterator<java.lang.String> strItor7 = strSet6.iterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strItor7);
    }

    @Test
    public void test21534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21534");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList13.reverse();
        int int18 = strList17.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = strList17.reverse();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = strList17.set(213044, "(NUMBER -1.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test21535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21535");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isGetElem();
        int int13 = node11.getCharno();
        node11.addSuppression("GETELEM");
        node11.setVarArgs(false);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isNot();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = node19.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        boolean boolean32 = node28.isNot();
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoFrom(node28);
        com.google.javascript.rhino.Node node35 = node33.getAncestor(0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        int int42 = node40.getType();
        com.google.javascript.rhino.InputId inputId43 = node40.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = null;
        node40.setJSDocInfo(jSDocInfo44);
        boolean boolean46 = node40.isDo();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node48.isNot();
        boolean boolean53 = node48.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        com.google.javascript.rhino.Node node58 = node48.copyInformationFromForTree(node55);
        java.lang.Object obj60 = node58.getProp(38);
        com.google.javascript.rhino.Node node61 = node40.srcrefTree(node58);
        node35.putProp(6, (java.lang.Object) node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.hasBaseType();
        jSDocInfo63.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo63.getBaseType();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo63.getParameterNames();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        int int74 = node70.getCharno();
        boolean boolean75 = node70.isContinue();
        boolean boolean76 = strSet68.equals((java.lang.Object) node70);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        com.google.javascript.rhino.Node node82 = node80.getParent();
        node80.setIsSyntheticBlock(true);
        boolean boolean85 = node80.isContinue();
        boolean boolean86 = strSet68.equals((java.lang.Object) node80);
        java.lang.Object[] objArray87 = strSet68.toArray();
        java.lang.Object[] objArray88 = strSet68.toArray();
        node40.setDirectives(strSet68);
        java.lang.Object[] objArray90 = strSet68.toArray();
        node11.setDirectives(strSet68);
        int int92 = node11.getType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNull(inputId43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
    }

    @Test
    public void test21536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21536");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isParamList();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node12 = node3.cloneTree();
        boolean boolean13 = node12.isThrow();
        boolean boolean14 = node12.isDebugger();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isFalse();
        boolean boolean21 = node16.isParamList();
        boolean boolean22 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        int int36 = node35.getSideEffectFlags();
        node16.addChildrenToBack(node35);
        com.google.javascript.rhino.Node node39 = node16.getAncestor(45);
        com.google.javascript.rhino.Node node40 = node12.useSourceInfoIfMissingFrom(node16);
        boolean boolean41 = node12.isGetElem();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test21537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21537");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        boolean boolean11 = jSDocInfo0.hasParameter("[]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("OR 0 [jsdoc_info: JSDocInfo]\n");
        boolean boolean15 = jSDocInfo0.hasParameter("(Named type with empty name component)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getEnumParameterType();
        boolean boolean17 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21538");
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<java.lang.String>> strListList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(strListList0);
    }

    @Test
    public void test21539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21539");
        java.lang.String[] strArray25 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        java.lang.String[] strArray31 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray32 = strSet26.toArray((java.lang.Comparable<java.lang.String>[]) strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "NUMBER 4.0 1\n" };
        java.lang.String[] strArray49 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        java.lang.String[] strArray55 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray56 = strSet50.toArray((java.lang.Comparable<java.lang.String>[]) strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "unknown", "Not declared as a type name" };
        java.lang.String[] strArray64 = new java.lang.String[] { "OR 0 [jsdoc_info: JSDocInfo]\n", "(Named type with empty name component)", "OR", "OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n" };
        com.google.common.collect.ImmutableList<java.lang.String[]> strArrayList65 = com.google.common.collect.ImmutableList.of(strArray31, strArray35, strArray55, strArray59, strArray64);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]", "OR", "OR 0 [jsdoc_info: JSDocInfo]\n", "(Not declared as a type name)", "Not declared as a constructor", "", "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n", "NUMBER -1.0\n", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "NUMBER 4.0 1\n", "OR [jsdoc_info: JSDocInfo]\n", "Not declared as a constructor", strArray31);
        boolean boolean67 = strList66.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor69 = strList66.listIterator((int) (byte) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet72 = jSDocInfo71.getParameterNames();
        boolean boolean73 = jSDocInfo71.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = jSDocInfo71.getVisibility();
        java.lang.String str76 = jSDocInfo71.getDescriptionForParameter("Not declared as a type name");
        boolean boolean77 = jSDocInfo71.isOverride();
        java.lang.String str79 = jSDocInfo71.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = jSDocInfo71.getTemplateTypeNames();
        java.util.stream.Stream<java.lang.String> strStream81 = strList80.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean83 = jSDocInfo82.hasBaseType();
        java.lang.String str84 = jSDocInfo82.getReturnDescription();
        int int85 = jSDocInfo82.getImplementedInterfaceCount();
        int int86 = strList80.indexOf((java.lang.Object) int85);
        java.util.Spliterator<java.lang.String> strSpliterator87 = strList80.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strList66.addAll((int) (short) 1, (java.util.Collection<java.lang.String>) strList80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strComparableArray32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strComparableArray56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArrayList65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(visibility74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strStream81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator87);
    }

    @Test
    public void test21540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21540");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        int int6 = node4.getType();
        com.google.javascript.rhino.InputId inputId7 = node4.getInputId();
        com.google.javascript.rhino.Node node8 = node4.getParent();
        boolean boolean9 = node8.isGetterDef();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isBreak();
        node13.setLineno(50);
        boolean boolean18 = node13.isDebugger();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node13.setJSType(jSType19);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(51, node8, node13, (int) (byte) 10, 39);
        boolean boolean24 = node23.isVoid();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isTypeOf();
        boolean boolean31 = node26.wasEmptyNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.isDelProp();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        com.google.javascript.rhino.Node node44 = node42.getParent();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node42.setJSType(jSType45);
        java.lang.String str47 = node42.toString();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node49.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        node49.setStaticSourceFile(staticSourceFile52);
        boolean boolean54 = node49.isComma();
        node49.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList57 = com.google.common.collect.ImmutableList.of(node26, node33, node42, node49);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        boolean boolean63 = node61.isLabel();
        boolean boolean64 = node61.isContinue();
        com.google.javascript.rhino.Node node65 = node33.copyInformationFrom(node61);
        java.lang.String str66 = node61.toString();
        com.google.javascript.rhino.Node node67 = node61.detachFromParent();
        boolean boolean68 = node61.isHook();
        com.google.javascript.rhino.Node node69 = node23.useSourceInfoIfMissingFrom(node61);
        node61.setVarArgs(true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR" + "'", str47, "OR");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR" + "'", str66, "OR");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test21541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21541");
        java.lang.String[] strArray1 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.Iterator<java.lang.String> strItor5 = strList2.iterator();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.isDelProp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node7, "Unknown class name");
        boolean boolean15 = strList2.remove((java.lang.Object) node7);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        node17.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node26.children();
        com.google.javascript.rhino.InputId inputId31 = null;
        node26.setInputId(inputId31);
        boolean boolean33 = node26.isName();
        java.lang.String str34 = node17.checkTreeEquals(node26);
        boolean boolean35 = node26.isStringKey();
        boolean boolean36 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node26.removeChildren();
        int int38 = node26.getLength();
        com.google.javascript.rhino.Node node39 = node7.copyInformationFromForTree(node26);
        com.google.javascript.rhino.jstype.JSType jSType40 = node7.getJSType();
        boolean boolean41 = node7.isName();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str34, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test21542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21542");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test21543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21543");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isIf();
        boolean boolean7 = node1.isNoSideEffectsCall();
        int int8 = node1.getType();
        boolean boolean9 = node1.isAssign();
        node1.setLineno((int) (short) 1);
        boolean boolean12 = node1.isSetterDef();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21544");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int26 = strList17.size();
        boolean boolean27 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList17);
        int int28 = strList17.size();
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList17.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList17.reverse();
        java.lang.Object[] objArray31 = strList30.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = strList30.reverse();
        // The following exception was thrown during execution in test generation
        try {
            strList32.add(131072, "(NEG)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test21545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21545");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isInterface();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21546");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        jSDocInfo0.setAssociatedNode(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node5.children();
        boolean boolean28 = node5.isAnd();
        boolean boolean29 = node5.isBlock();
        boolean boolean30 = node5.isDefaultCase();
        boolean boolean31 = node5.isReturn();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node5.getAncestors();
        boolean boolean33 = node5.isOnlyModifiesThisCall();
        boolean boolean34 = node5.isQualifiedName();
        boolean boolean35 = node5.isParamList();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ancestorIterable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test21547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21547");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node10.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] { node10 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node[][] nodeArray25 = new com.google.javascript.rhino.Node[][] { nodeArray8, nodeArray16, nodeArray24 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder26 = nodeArrayBuilder0.add(nodeArray25);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder27 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] { node29 };
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node37.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] { node37 };
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node49 = node45.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node45.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node45 };
        com.google.javascript.rhino.Node[][] nodeArray52 = new com.google.javascript.rhino.Node[][] { nodeArray35, nodeArray43, nodeArray51 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder53 = nodeArrayBuilder27.add(nodeArray52);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder54 = nodeArrayBuilder26.add(nodeArray52);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder55 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder57 = nodeArrayBuilder55.add(nodeArray56);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder58 = nodeArrayBuilder54.add(nodeArray56);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList59 = nodeArrayBuilder58.build();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder61 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder63 = nodeArrayBuilder61.add(nodeArray62);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray62);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder65 = nodeArrayBuilder58.add(nodeArray62);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArrayBuilder26);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArrayBuilder53);
        org.junit.Assert.assertNotNull(nodeArrayBuilder54);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArrayBuilder57);
        org.junit.Assert.assertNotNull(nodeArrayBuilder58);
        org.junit.Assert.assertNotNull(nodeArrayList59);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(nodeArrayBuilder63);
        org.junit.Assert.assertNotNull(nodeArrayBuilder65);
    }

    @Test
    public void test21548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21548");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean12 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21549");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition2.hasBrackets();
        int int10 = typePosition2.getPositionOnEndLine();
        int int11 = typePosition2.getPositionOnEndLine();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isNot();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = node13.copyInformationFromForTree(node19);
        boolean boolean21 = node20.isObjectLit();
        typePosition2.setItem(node20);
        boolean boolean23 = node20.isNew();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test21550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21550");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasBaseType();
        jSDocInfo18.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo18.getBaseType();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo18.getParameterNames();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        int int29 = node25.getCharno();
        boolean boolean30 = node25.isContinue();
        boolean boolean31 = strSet23.equals((java.lang.Object) node25);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.setIsSyntheticBlock(true);
        boolean boolean40 = node35.isContinue();
        boolean boolean41 = strSet23.equals((java.lang.Object) node35);
        java.lang.Object[] objArray42 = strSet23.toArray();
        int int43 = strList13.indexOf((java.lang.Object) objArray42);
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = strList13.asList();
        java.lang.Object[] objArray45 = strList44.toArray();
        java.util.ListIterator<java.lang.String> strItor47 = strList44.listIterator(0);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor48 = strList44.listIterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
    }

    @Test
    public void test21551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21551");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        java.lang.String str41 = node36.getQualifiedName();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node36.setJSType(jSType42);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = node36.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test21552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21552");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList7 = com.google.common.collect.ImmutableList.of(visibility4, visibility5, visibility6);
        jSDocInfo0.setVisibility(visibility6);
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        jSDocInfo0.setLicense("OR [jsdoc_info: JSDocInfo]");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getParameterNames();
        java.util.Iterator<java.lang.String> strItor14 = strSet13.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean29 = strList21.containsAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor30 = strList21.listIterator();
        int int31 = strList21.size();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder32 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node34.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] { node34 };
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node46 = node42.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] { node42 };
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node50.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node50 };
        com.google.javascript.rhino.Node[][] nodeArray57 = new com.google.javascript.rhino.Node[][] { nodeArray40, nodeArray48, nodeArray56 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder58 = nodeArrayBuilder32.add(nodeArray57);
        int int59 = strList21.lastIndexOf((java.lang.Object) nodeArray57);
        java.lang.String[] strArray62 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        boolean boolean70 = node66.isTypeOf();
        boolean boolean71 = node66.wasEmptyNode();
        int int72 = strList63.indexOf((java.lang.Object) boolean71);
        java.lang.Object[] objArray73 = strList63.toArray();
        int int74 = strList21.lastIndexOf((java.lang.Object) strList63);
        strList63.clear();
        boolean boolean77 = strList63.add("NUMBER 0.0 44");
        boolean boolean78 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList63);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str45, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str53, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArrayBuilder58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test21553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21553");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 10);
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isThrow();
        boolean boolean5 = node1.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test21554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21554");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.addSuppression("(OR \n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags14 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags14.setThrows();
        sideEffectFlags14.clearAllFlags();
        int int17 = strList13.indexOf((java.lang.Object) sideEffectFlags14);
        boolean boolean18 = sideEffectFlags14.areAllFlagsSet();
        sideEffectFlags14.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21555");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isArrayLit();
        node11.setSourceEncodedPosition(30);
        boolean boolean15 = node11.isSwitch();
        boolean boolean16 = node11.isTypeOf();
        int int17 = node11.getType();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        com.google.javascript.rhino.Node node35 = node33.getParent();
        com.google.javascript.rhino.Node node36 = node26.useSourceInfoFromForTree(node33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node38.setStaticSourceFile(staticSourceFile41);
        boolean boolean43 = node38.isComma();
        node38.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node47.children();
        com.google.javascript.rhino.InputId inputId52 = null;
        node47.setInputId(inputId52);
        boolean boolean54 = node47.isName();
        java.lang.String str55 = node38.checkTreeEquals(node47);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node20, node26, node47 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList57 = com.google.common.collect.ImmutableList.of(nodeArray56);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray56);
        boolean boolean59 = node58.hasMoreThanOneChild();
        node58.setType((int) (byte) 100);
        boolean boolean62 = node58.isScript();
        node58.setSourceEncodedPositionForTree(4095);
        com.google.javascript.rhino.Node node65 = node11.srcref(node58);
        node58.setType(155648);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str29, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str55, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeList57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test21556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21556");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasThisType();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        java.lang.String str11 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test21557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21557");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test21558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21558");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        int int13 = node1.getSourcePosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test21559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21559");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        boolean boolean8 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node12.isLabel();
        boolean boolean15 = node12.isContinue();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        com.google.javascript.rhino.Node node23 = node12.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        node28.setLength(1);
        com.google.javascript.rhino.Node node31 = node12.useSourceInfoFrom(node28);
        boolean boolean33 = node12.getBooleanProp(31);
        node12.setType(3);
        jSDocInfo0.setAssociatedNode(node12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test21560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21560");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean14 = strSet7.equals((java.lang.Object) 1.0d);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasBaseType();
        jSDocInfo15.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo15.getBaseType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo15.getParameterNames();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        boolean boolean27 = node22.isContinue();
        boolean boolean28 = strSet20.equals((java.lang.Object) node22);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node34 = node32.getParent();
        node32.setIsSyntheticBlock(true);
        boolean boolean37 = node32.isContinue();
        boolean boolean38 = strSet20.equals((java.lang.Object) node32);
        int int39 = strSet20.size();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList48 = com.google.common.collect.ImmutableList.of(typePosition40, typePosition41, typePosition42, typePosition43, typePosition44, typePosition45, typePosition46, typePosition47);
        typePosition47.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        java.lang.String str58 = node55.toString();
        boolean boolean59 = node55.hasChildren();
        typePosition47.setItem(node55);
        int int61 = typePosition47.getStartLine();
        boolean boolean62 = strSet20.equals((java.lang.Object) typePosition47);
        boolean boolean63 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.Spliterator<java.lang.String> strSpliterator64 = strSet7.spliterator();
        java.util.stream.Stream<java.lang.String> strStream65 = strSet7.parallelStream();
        boolean boolean66 = strSet7.isEmpty();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(typePositionList48);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str58, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertNotNull(strStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test21561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21561");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        boolean boolean8 = node4.isTypeOf();
        boolean boolean9 = node4.wasEmptyNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isTypeOf();
        boolean boolean16 = node11.isDelProp();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node20.setJSType(jSType23);
        java.lang.String str25 = node20.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        node27.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList35 = com.google.common.collect.ImmutableList.of(node4, node11, node20, node27);
        com.google.javascript.rhino.Node node36 = node2.copyInformationFrom(node27);
        node36.putIntProp((int) ' ', 45);
        boolean boolean40 = node36.isInstanceOf();
        int int41 = node36.getSideEffectFlags();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = jSDocInfo42.getTemplateTypeNames();
        boolean boolean45 = jSDocInfo42.isNoTypeCheck();
        java.lang.String str47 = jSDocInfo42.getDescriptionForParameter("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n");
        java.util.Set<java.lang.String> strSet48 = jSDocInfo42.getParameterNames();
        node36.setDirectives(strSet48);
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet48.spliterator();
        java.util.Iterator<java.lang.String> strItor51 = strSet48.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = strSet48.add("(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR" + "'", str25, "OR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNotNull(strItor51);
    }

    @Test
    public void test21562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21562");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isBlock();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = node22.cloneNode();
        com.google.javascript.rhino.Node node24 = node14.copyInformationFromForTree(node23);
        node14.setType((int) '4');
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        int int32 = node30.getType();
        boolean boolean33 = node30.isOptionalArg();
        com.google.javascript.rhino.Node node34 = node14.useSourceInfoFrom(node30);
        com.google.javascript.rhino.Node node35 = node11.srcref(node34);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        com.google.javascript.rhino.Node node41 = node39.getParent();
        node39.setIsSyntheticBlock(true);
        boolean boolean44 = node39.isContinue();
        boolean boolean45 = node39.isParamList();
        boolean boolean46 = node39.isParamList();
        boolean boolean47 = node39.isOptionalArg();
        boolean boolean48 = node39.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node49 = node35.srcrefTree(node39);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        boolean boolean57 = node51.isLocalResultCall();
        boolean boolean58 = node51.isArrayLit();
        boolean boolean59 = node51.isAssign();
        boolean boolean60 = node51.isNew();
        node39.addChildrenToFront(node51);
        boolean boolean62 = node39.isStringKey();
        boolean boolean63 = node39.isThis();
        boolean boolean64 = node39.isNumber();
        boolean boolean65 = node39.isThis();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test21563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21563");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "OR [jsdoc_info: JSDocInfo]", 15, (int) 'a');
        boolean boolean5 = node4.isDo();
        java.lang.String str6 = node4.getString();
        int int8 = node4.getIntProp(39);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str6, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test21564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21564");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        java.util.stream.Stream<java.lang.String> strStream17 = strList6.stream();
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray18 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray19 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray20 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray21 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray22 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.javascript.rhino.JSDocInfo.StringPosition[][] stringPositionArray23 = new com.google.javascript.rhino.JSDocInfo.StringPosition[][] { stringPositionArray18, stringPositionArray19, stringPositionArray20, stringPositionArray21, stringPositionArray22 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition[]> stringPositionArrayList24 = com.google.common.collect.ImmutableList.of(stringPositionArray23);
        int int25 = strList6.indexOf((java.lang.Object) stringPositionArrayList24);
        java.lang.Object[] objArray26 = strList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList6.reverse();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertNotNull(stringPositionArray18);
        org.junit.Assert.assertNotNull(stringPositionArray19);
        org.junit.Assert.assertNotNull(stringPositionArray20);
        org.junit.Assert.assertNotNull(stringPositionArray21);
        org.junit.Assert.assertNotNull(stringPositionArray22);
        org.junit.Assert.assertNotNull(stringPositionArray23);
        org.junit.Assert.assertNotNull(stringPositionArrayList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test21565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21565");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(1, "(Not declared as a type name)");
        boolean boolean4 = node3.isGetElem();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node6.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node6.siblings();
        boolean boolean12 = node6.isInstanceOf();
        boolean boolean13 = node6.isParamList();
        node6.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        boolean boolean22 = node19.isHook();
        java.util.Set<java.lang.String> strSet23 = node19.getDirectives();
        boolean boolean24 = node6.hasChild(node19);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        node26.setStaticSourceFile(staticSourceFile29);
        boolean boolean31 = node26.isComma();
        boolean boolean32 = node26.isBlock();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("OR 36\n    OR\n", 4, 59);
        boolean boolean37 = node26.hasChild(node36);
        java.lang.String str38 = node26.getQualifiedName();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        int int44 = node40.getCharno();
        boolean boolean45 = node40.isName();
        boolean boolean46 = node40.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node40, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression48);
        boolean boolean51 = jSTypeExpression48.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node52 = jSTypeExpression48.getRoot();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isNot();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = node54.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        boolean boolean67 = node63.isNot();
        com.google.javascript.rhino.Node node68 = node61.useSourceInfoFrom(node63);
        boolean boolean69 = jSTypeExpression48.equals((java.lang.Object) node63);
        boolean boolean70 = node63.isBreak();
        boolean boolean71 = node63.isCall();
        node63.putIntProp(29, (int) (byte) 100);
        boolean boolean75 = node63.isIf();
        node63.setCharno(15);
        node26.addChildrenToBack(node63);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("OR [var_args_name: 1]", 16, 32);
        node82.setQuotedString();
        node26.addChildrenToFront(node82);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) 100);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(33, node3, node6, node26, node86, (int) (byte) 10, 39);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test21566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21566");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        boolean boolean2 = node1.isOr();
        boolean boolean3 = node1.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test21567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21567");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder2 = nodeArrayBuilder0.add(nodeArray1);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList3 = nodeArrayBuilder2.build();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder4 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node22 };
        com.google.javascript.rhino.Node[][] nodeArray29 = new com.google.javascript.rhino.Node[][] { nodeArray12, nodeArray20, nodeArray28 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder4.add(nodeArray29);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] { node33 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node45 = node41.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node41.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] { node41 };
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node49.addSuppression("");
        java.lang.String str52 = node49.toString();
        com.google.javascript.rhino.Node node53 = node49.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] { node49 };
        com.google.javascript.rhino.Node[][] nodeArray56 = new com.google.javascript.rhino.Node[][] { nodeArray39, nodeArray47, nodeArray55 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder57 = nodeArrayBuilder31.add(nodeArray56);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder58 = nodeArrayBuilder30.add(nodeArray56);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder59 = nodeArrayBuilder2.add(nodeArray56);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList60 = nodeArrayBuilder2.build();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList61 = nodeArrayBuilder2.build();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList62 = nodeArrayBuilder2.build();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList63 = nodeArrayBuilder2.build();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArrayBuilder2);
        org.junit.Assert.assertNotNull(nodeArrayList3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str52, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArrayBuilder57);
        org.junit.Assert.assertNotNull(nodeArrayBuilder58);
        org.junit.Assert.assertNotNull(nodeArrayBuilder59);
        org.junit.Assert.assertNotNull(nodeArrayList60);
        org.junit.Assert.assertNotNull(nodeArrayList61);
        org.junit.Assert.assertNotNull(nodeArrayList62);
        org.junit.Assert.assertNotNull(nodeArrayList63);
    }

    @Test
    public void test21568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21568");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        java.lang.String str41 = node36.getQualifiedName();
        com.google.javascript.rhino.Node node42 = node36.getLastChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test21569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21569");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node11 = node9.getParent();
        com.google.javascript.rhino.Node node12 = node2.useSourceInfoFromForTree(node9);
        node12.setOptionalArg(false);
        boolean boolean15 = node12.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node24.getParent();
        com.google.javascript.rhino.Node node27 = node17.useSourceInfoFromForTree(node24);
        boolean boolean28 = node27.isSetterDef();
        com.google.javascript.rhino.Node node29 = node27.getLastChild();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(24, node12, node27);
        boolean boolean31 = node12.isCall();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test21570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21570");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        node21.detachChildren();
        boolean boolean23 = node21.isSyntheticBlock();
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        node26.setStaticSourceFile(staticSourceFile29);
        boolean boolean31 = node26.isComma();
        node26.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node35.children();
        com.google.javascript.rhino.InputId inputId40 = null;
        node35.setInputId(inputId40);
        boolean boolean42 = node35.isName();
        java.lang.String str43 = node26.checkTreeEquals(node35);
        com.google.javascript.rhino.InputId inputId44 = node26.getInputId();
        boolean boolean45 = node26.hasMoreThanOneChild();
        boolean boolean46 = node26.isCall();
        boolean boolean47 = node21.isEquivalentTo(node26);
        java.lang.String str48 = node26.getQualifiedName();
        node26.setSourceEncodedPositionForTree(9);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        int int57 = node53.getCharno();
        boolean boolean58 = node53.isName();
        boolean boolean59 = node53.isNE();
        boolean boolean60 = node53.isEmpty();
        com.google.javascript.rhino.Node node61 = node53.removeFirstChild();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 2);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node65.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        node65.setStaticSourceFile(staticSourceFile68);
        boolean boolean70 = node65.isComma();
        node65.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = node74.children();
        com.google.javascript.rhino.InputId inputId79 = null;
        node74.setInputId(inputId79);
        boolean boolean81 = node74.isName();
        java.lang.String str82 = node65.checkTreeEquals(node74);
        com.google.javascript.rhino.InputId inputId83 = null;
        node74.setInputId(inputId83);
        boolean boolean85 = node74.isBlock();
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = node74.getJSDocInfo();
        boolean boolean87 = node74.isNot();
        com.google.javascript.rhino.Node node88 = node63.copyInformationFrom(node74);
        boolean boolean89 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node90 = node53.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(6, node63, (int) '4', 54);
        java.lang.String str94 = node26.checkTreeEquals(node63);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str43, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str82, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSDocInfo86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 2.0\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 2.0\n" + "'", str94, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 2.0\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 2.0\n");
    }

    @Test
    public void test21571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21571");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean12 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        boolean boolean13 = jSDocInfo0.isOverride();
        boolean boolean14 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21572");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strList2.retainAll((java.util.Collection<java.lang.String>) strList7);
        int int10 = strList2.size();
        java.lang.String[] strArray12 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strList13.isEmpty();
        boolean boolean16 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        boolean boolean18 = strList13.add("OR\n");
        boolean boolean20 = strList13.add("");
        java.util.Iterator<java.lang.String> strItor21 = strList13.iterator();
        java.lang.Object[] objArray22 = strList13.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo23.getParameterNames();
        boolean boolean25 = jSDocInfo23.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = jSDocInfo23.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo23.getTypedefType();
        java.lang.String str28 = jSDocInfo23.getOriginalCommentString();
        boolean boolean29 = strList13.remove((java.lang.Object) jSDocInfo23);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strList13.spliterator();
        int int31 = strList13.size();
        java.util.Spliterator<java.lang.String> strSpliterator32 = strList13.spliterator();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[OR [jsdoc_info: JSDocInfo], OR\n, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[OR [jsdoc_info: JSDocInfo], OR\n, ]");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(visibility26);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(strSpliterator32);
    }

    @Test
    public void test21573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21573");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = strList13.reverse();
        boolean boolean25 = strList24.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strList24.spliterator();
        java.util.ListIterator<java.lang.String> strItor27 = strList24.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            strList24.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(strItor27);
    }

    @Test
    public void test21574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21574");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor34 = strList25.listIterator();
        int int35 = strList25.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList25.asList();
        java.lang.Object[] objArray37 = strList36.toArray();
        boolean boolean38 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList36);
        boolean boolean40 = strSet13.add("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasBaseType();
        java.lang.String str43 = jSDocInfo41.getFileOverview();
        int int44 = jSDocInfo41.getParameterCount();
        boolean boolean45 = jSDocInfo41.isConstant();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo41.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.hasBaseType();
        jSDocInfo47.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo47.getTypedefType();
        boolean boolean52 = jSDocInfo47.isNoSideEffects();
        com.google.javascript.rhino.Node node53 = jSDocInfo47.getAssociatedNode();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo47.getSuppressions();
        strSet54.clear();
        int int56 = strSet54.size();
        boolean boolean57 = strSet46.containsAll((java.util.Collection<java.lang.String>) strSet54);
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean72 = strList64.containsAll((java.util.Collection<java.lang.String>) strList71);
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList64.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = strList64.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = booleanLiteralSet76.union(booleanLiteralSet77);
        boolean boolean79 = strList74.equals((java.lang.Object) booleanLiteralSet76);
        java.lang.Object obj80 = null;
        boolean boolean81 = strList74.equals(obj80);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        node83.addChildrenToFront(node85);
        boolean boolean87 = node83.isReturn();
        com.google.javascript.rhino.InputId inputId88 = node83.getInputId();
        boolean boolean89 = node83.isArrayLit();
        boolean boolean90 = node83.isInc();
        boolean boolean91 = strList74.contains((java.lang.Object) node83);
        com.google.common.collect.ImmutableList<java.lang.String> strList92 = strList74.reverse();
        boolean boolean93 = strSet54.remove((java.lang.Object) strList74);
        boolean boolean94 = strSet13.removeAll((java.util.Collection<java.lang.String>) strList74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = strList74.remove(8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(inputId88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test21575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21575");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isArrayLit();
        boolean boolean8 = node1.isInc();
        boolean boolean9 = node1.hasChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d);
        boolean boolean12 = node11.hasOneChild();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((-1), "RETURN ()\n");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        boolean boolean24 = node23.isDefaultCase();
        boolean boolean25 = node23.isNoSideEffectsCall();
        java.lang.String str29 = node23.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasTypedefType();
        java.lang.String str32 = jSDocInfo30.toString();
        node23.setJSDocInfo(jSDocInfo30);
        com.google.javascript.rhino.Node node34 = node23.cloneTree();
        boolean boolean35 = node34.isThis();
        node34.setCharno((int) (short) -1);
        boolean boolean38 = node34.isBlock();
        boolean boolean39 = node17.hasChild(node34);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(16);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(36, node34, node41, (int) (byte) -1, 11);
        boolean boolean45 = node34.isIn();
        com.google.javascript.rhino.Node node46 = node13.useSourceInfoIfMissingFromForTree(node34);
        boolean boolean47 = node46.isSyntheticBlock();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR" + "'", str29, "OR");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test21576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21576");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node3.isDebugger();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node8.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node8.isComma();
        boolean boolean14 = node8.isBlock();
        com.google.javascript.rhino.Node node15 = node8.getLastSibling();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node17.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node17.getStaticSourceFile();
        boolean boolean23 = node17.isVarArgs();
        node8.addChildrenToFront(node17);
        boolean boolean25 = node8.isCall();
        boolean boolean26 = node8.isParamList();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        boolean boolean34 = node28.isBlock();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = node36.cloneNode();
        com.google.javascript.rhino.Node node38 = node28.copyInformationFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean44 = node43.isExprResult();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node48.isLabel();
        boolean boolean51 = node43.isEquivalentTo(node48);
        com.google.javascript.rhino.Node node52 = node37.useSourceInfoIfMissingFrom(node43);
        boolean boolean53 = node43.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChild(node8, node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test21577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21577");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.isExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("BITXOR 0");
        boolean boolean12 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21578");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean14 = strSet7.equals((java.lang.Object) 1.0d);
        java.util.stream.Stream<java.lang.String> strStream15 = strSet7.parallelStream();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setIsSyntheticBlock(true);
        int int24 = node19.getType();
        boolean boolean25 = node19.isObjectLit();
        boolean boolean26 = node19.isCase();
        boolean boolean27 = strSet7.equals((java.lang.Object) boolean26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.hasBaseType();
        int int30 = jSDocInfo28.getImplementedInterfaceCount();
        boolean boolean31 = jSDocInfo28.hasType();
        java.lang.String str32 = jSDocInfo28.getOriginalCommentString();
        jSDocInfo28.setDeprecated(true);
        java.util.Set<java.lang.String> strSet35 = jSDocInfo28.getParameterNames();
        boolean boolean36 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet35);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test21579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21579");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = strList5.reverse();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags20 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags20.setReturnsTainted();
        sideEffectFlags20.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags24 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags24.setMutatesArguments();
        sideEffectFlags24.setMutatesArguments();
        sideEffectFlags24.setMutatesGlobalState();
        sideEffectFlags24.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags29 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags29.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags32 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray33 = new com.google.javascript.rhino.Node.SideEffectFlags[] { sideEffectFlags20, sideEffectFlags24, sideEffectFlags29, sideEffectFlags32 };
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray34 = strList5.toArray(sideEffectFlagsArray33);
        java.util.ListIterator<java.lang.String> strItor35 = strList5.listIterator();
        int int36 = strList5.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasBaseType();
        jSDocInfo37.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo37.getBaseType();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo37.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet42.spliterator();
        java.util.Iterator<java.lang.String> strItor44 = strSet42.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet42.spliterator();
        java.util.Iterator<java.lang.String> strItor46 = strSet42.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.hasBaseType();
        java.lang.String str49 = jSDocInfo47.getFileOverview();
        boolean boolean50 = jSDocInfo47.hasType();
        boolean boolean51 = jSDocInfo47.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList52 = jSDocInfo47.getThrownTypes();
        java.lang.String str53 = jSDocInfo47.getReturnDescription();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo47.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.isNoShadow();
        java.lang.String str57 = jSDocInfo55.getMeaning();
        boolean boolean58 = jSDocInfo55.hasReturnType();
        boolean boolean59 = jSDocInfo55.isDeprecated();
        boolean boolean60 = jSDocInfo55.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo55.getThisType();
        jSDocInfo55.setDeprecated(false);
        boolean boolean64 = jSDocInfo55.isNoAlias();
        boolean boolean65 = strSet54.remove((java.lang.Object) jSDocInfo55);
        com.google.common.collect.ImmutableList<java.util.Set<java.lang.String>> strSetList66 = com.google.common.collect.ImmutableList.of(strSet42, strSet54);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = strList5.removeAll((java.util.Collection<java.lang.String>) strSet54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray33);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSetList66);
    }

    @Test
    public void test21580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21580");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        java.lang.String str10 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test21581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21581");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 4096, 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21582");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isAdd();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node13 = node9.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node9.getStaticSourceFile();
        boolean boolean15 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node17.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFrom(node22);
        boolean boolean30 = node22.isWhile();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node34.isLabel();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isNot();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = node41.copyInformationFromForTree(node47);
        com.google.javascript.rhino.InputId inputId49 = node41.getInputId();
        com.google.javascript.rhino.Node node50 = node41.getNext();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node52.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node52.isComma();
        boolean boolean58 = node52.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList59 = com.google.common.collect.ImmutableList.of(node22, node34, node39, node41, node52);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node41.getJsDocBuilderForNode();
        boolean boolean61 = node41.hasOneChild();
        com.google.javascript.rhino.Node node62 = node2.copyInformationFrom(node41);
        boolean boolean64 = node2.getBooleanProp(50);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        boolean boolean71 = node70.isDefaultCase();
        boolean boolean72 = node70.isNoSideEffectsCall();
        java.lang.String str76 = node70.toString(false, false, false);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean81 = node80.isBreak();
        boolean boolean82 = node80.isCase();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(45, node2, node70, node80);
        boolean boolean84 = node83.isVar();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR" + "'", str76, "OR");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test21583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21583");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isObjectLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isReturn();
        com.google.javascript.rhino.InputId inputId15 = node10.getInputId();
        boolean boolean16 = node10.isArrayLit();
        boolean boolean17 = node10.isInc();
        com.google.javascript.rhino.Node node18 = node1.srcrefTree(node10);
        boolean boolean19 = node18.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node18.getAncestors();
        node18.removeProp(48);
        boolean boolean23 = node18.hasChildren();
        int int25 = node18.getIntProp(46);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test21584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21584");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 11, (int) ' ', 2);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21585");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        node14.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node14.getAncestors();
        boolean boolean20 = node14.isFromExterns();
        boolean boolean21 = node14.isTrue();
        com.google.javascript.rhino.Node node22 = node14.getLastChild();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node24.isNot();
        boolean boolean29 = node24.isIf();
        boolean boolean30 = node24.isInstanceOf();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node47 = node45.getParent();
        com.google.javascript.rhino.Node node48 = node38.useSourceInfoFromForTree(node45);
        boolean boolean49 = node32.hasChild(node38);
        node24.addChildToBack(node38);
        boolean boolean51 = node24.isTrue();
        boolean boolean52 = node22.hasChild(node24);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test21586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21586");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        java.lang.String str7 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test21587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21587");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList6.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean32 = strList24.containsAll((java.util.Collection<java.lang.String>) strList31);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor33 = strList24.listIterator();
        java.lang.Object[] objArray34 = strList24.toArray();
        boolean boolean35 = strList6.containsAll((java.util.Collection<java.lang.String>) strList24);
        java.lang.Object[] objArray36 = strList24.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor37 = strList24.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator38 = strList24.spliterator();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        node41.setStaticSourceFile(staticSourceFile44);
        boolean boolean46 = node41.isComma();
        boolean boolean47 = node41.isBlock();
        java.lang.String str48 = node41.toStringTree();
        boolean boolean49 = node41.isDec();
        node41.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        java.lang.String str56 = node53.toString();
        com.google.javascript.rhino.Node node57 = node53.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node53.getStaticSourceFile();
        boolean boolean59 = node53.isLocalResultCall();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        java.lang.String str64 = node61.toString();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node66.addSuppression("");
        java.lang.String str69 = node66.toString();
        com.google.javascript.rhino.Node node70 = node66.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = node66.getStaticSourceFile();
        com.google.javascript.rhino.Node node72 = node61.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node node73 = node53.useSourceInfoFrom(node66);
        boolean boolean74 = node66.isWhile();
        node66.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(54, node41, node66);
        boolean boolean78 = node41.isSyntheticBlock();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean80 = jSDocInfo79.hasBaseType();
        jSDocInfo79.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo79.getTypedefType();
        boolean boolean84 = jSDocInfo79.isJavaDispatch();
        node41.setJSDocInfo(jSDocInfo79);
        boolean boolean86 = strList24.contains((java.lang.Object) node41);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strSpliterator38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str48, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str56, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str64, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str69, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(staticSourceFile71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test21588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21588");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = strSet5.containsAll(strCollection6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test21589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21589");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.hasChildren();
        boolean boolean8 = node1.isNumber();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node1.getJsDocBuilderForNode();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder9);
    }

    @Test
    public void test21590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21590");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition0.setItem(node2);
        typePosition0.setPositionInformation(10, 44, 36, 51);
        int int9 = typePosition0.getPositionOnEndLine();
        int int10 = typePosition0.getPositionOnEndLine();
        boolean boolean11 = typePosition0.hasBrackets();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21591");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node27.setJSType(jSType61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("OR");
        node64.addSuppression("NUMBER 4.0 1\n");
        node27.addChildrenToFront(node64);
        boolean boolean68 = node64.isNoSideEffectsCall();
        node64.setType(4095);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 10);
        com.google.javascript.rhino.Node node73 = node72.cloneNode();
        com.google.javascript.rhino.Node node74 = node64.copyInformationFrom(node72);
        node74.setLength((int) (short) 10);
        boolean boolean77 = node74.isSwitch();
        boolean boolean78 = node74.isVoid();
        boolean boolean79 = node74.isReturn();
        com.google.javascript.rhino.InputId inputId80 = node74.getInputId();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(inputId80);
    }

    @Test
    public void test21592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21592");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        node12.setIsSyntheticBlock(true);
        boolean boolean17 = node12.isContinue();
        java.lang.String str18 = node12.getQualifiedName();
        boolean boolean19 = node12.isSetterDef();
        typePosition3.setItem(node12);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node23.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node23.getStaticSourceFile();
        boolean boolean29 = node23.isVar();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node31.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node31.setStaticSourceFile(staticSourceFile34);
        boolean boolean36 = node31.isComma();
        boolean boolean37 = node31.isBlock();
        com.google.javascript.rhino.Node node38 = node31.getLastSibling();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node40.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node40.getStaticSourceFile();
        boolean boolean46 = node40.isVarArgs();
        node31.addChildrenToFront(node40);
        node31.setSourceEncodedPositionForTree(51);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(50, node23, node31);
        boolean boolean51 = node50.isSetterDef();
        node12.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10);
        boolean boolean55 = node54.isInc();
        com.google.javascript.rhino.Node node56 = node12.useSourceInfoIfMissingFrom(node54);
        node54.setCharno(4);
        boolean boolean59 = node54.isCase();
        boolean boolean60 = node54.hasOneChild();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str43, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test21593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21593");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        boolean boolean12 = node10.isWhile();
        boolean boolean13 = node10.isDo();
        java.lang.String str14 = node10.toStringTree();
        boolean boolean15 = node10.isLabelName();
        boolean boolean16 = node10.isDefaultCase();
        boolean boolean17 = node10.isScript();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR\n" + "'", str14, "OR\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21594");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(6, (int) (short) 10, 50);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        boolean boolean10 = node9.isDefaultCase();
        boolean boolean11 = node9.isNoSideEffectsCall();
        boolean boolean12 = node9.isNew();
        com.google.javascript.rhino.Node node13 = node3.copyInformationFromForTree(node9);
        node3.addSuppression("Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n");
        boolean boolean16 = node3.isRegExp();
        boolean boolean17 = node3.isTry();
        boolean boolean18 = node3.isParamList();
        boolean boolean19 = node3.isNull();
        boolean boolean20 = node3.wasEmptyNode();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test21595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21595");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isEmpty();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.hasChildren();
        com.google.javascript.rhino.Node node15 = node1.srcrefTree(node10);
        boolean boolean16 = node15.isExprResult();
        boolean boolean17 = node15.isHook();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21596");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        boolean boolean8 = node4.isTypeOf();
        boolean boolean9 = node4.wasEmptyNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isTypeOf();
        boolean boolean16 = node11.isDelProp();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node20.setJSType(jSType23);
        java.lang.String str25 = node20.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        node27.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList35 = com.google.common.collect.ImmutableList.of(node4, node11, node20, node27);
        com.google.javascript.rhino.Node node36 = node2.copyInformationFrom(node27);
        boolean boolean37 = node2.isIn();
        int int38 = node2.getSideEffectFlags();
        boolean boolean39 = node2.isHook();
        int int40 = node2.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR" + "'", str25, "OR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test21597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21597");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) ' ', "(OR 0 [jsdoc_info: JSDocInfo]\n)");
        boolean boolean3 = node2.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test21598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21598");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        boolean boolean72 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.hasTypedefType();
        java.lang.String str75 = jSDocInfo73.toString();
        boolean boolean77 = jSDocInfo73.hasParameterType("Unknown class name");
        boolean boolean78 = jSDocInfo73.isIdGenerator();
        int int79 = jSDocInfo73.getExtendedInterfacesCount();
        boolean boolean80 = jSDocInfo73.hasThisType();
        boolean boolean81 = jSDocInfo73.isJavaDispatch();
        int int82 = strList6.indexOf((java.lang.Object) jSDocInfo73);
        boolean boolean83 = jSDocInfo73.isConsistentIdGenerator();
        int int84 = jSDocInfo73.getParameterCount();
        boolean boolean85 = jSDocInfo73.hasThisType();
        boolean boolean86 = jSDocInfo73.isJavaDispatch();
        java.lang.String str87 = jSDocInfo73.getOriginalCommentString();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "JSDocInfo" + "'", str75, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test21599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21599");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.xor(ternaryValue1);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean5 = ternaryValue3.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str7 = ternaryValue6.toString();
        boolean boolean9 = ternaryValue6.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue3.and(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue11.xor(ternaryValue12);
        boolean boolean15 = ternaryValue11.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue3.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue1.or(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue17.not();
        java.lang.String str19 = ternaryValue18.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "unknown" + "'", str7, "unknown");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "unknown" + "'", str19, "unknown");
    }

    @Test
    public void test21600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21600");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR [directives: []]\n    OR\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setItem("NUMBER 4.0 1\n");
        stringPosition12.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition12.setPositionInformation((int) '#', 44, 51, 50);
        int int25 = stringPosition12.getEndLine();
        stringPosition12.setItem("Unknown class name");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition28.setItem("NUMBER 4.0 1\n");
        stringPosition28.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition28.setPositionInformation((int) '#', 44, 51, 50);
        int int41 = stringPosition28.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition42.setItem("NUMBER 4.0 1\n");
        stringPosition42.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int50 = stringPosition42.getEndLine();
        int int51 = stringPosition42.getPositionOnStartLine();
        stringPosition42.setPositionInformation((int) ' ', 49, 51, 38);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int58 = stringPosition57.getEndLine();
        int int59 = stringPosition57.getEndLine();
        stringPosition57.setItem("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition62 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition62.setItem("NUMBER 4.0 1\n");
        stringPosition62.setItem("unknown");
        stringPosition62.setItem("(OR)");
        stringPosition62.setItem("OR \n");
        int int71 = stringPosition62.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int73 = stringPosition72.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition12, stringPosition28, stringPosition42, stringPosition57, stringPosition62, stringPosition72);
        stringPosition12.setPositionInformation((int) (byte) 10, 52, 35, 0);
        stringPosition12.setPositionInformation(0, 48, 40999, 47);
        int int85 = stringPosition12.getPositionOnStartLine();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 51 + "'", int25 == 51);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51 + "'", int41 == 51);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 48 + "'", int85 == 48);
    }

    @Test
    public void test21601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21601");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        java.lang.String str8 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test21602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21602");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) -1, "GETELEM", 38, 36);
        boolean boolean5 = node4.isDebugger();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test21603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21603");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.hasBaseType();
        jSDocInfo1.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo1.getBaseType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo1.getParameterNames();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        int int12 = node8.getCharno();
        boolean boolean13 = node8.isContinue();
        boolean boolean14 = strSet6.equals((java.lang.Object) node8);
        boolean boolean15 = node8.isSetterDef();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        node17.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node26.children();
        com.google.javascript.rhino.InputId inputId31 = null;
        node26.setInputId(inputId31);
        boolean boolean33 = node26.isName();
        java.lang.String str34 = node17.checkTreeEquals(node26);
        boolean boolean35 = node26.isInc();
        com.google.javascript.rhino.Node node36 = node8.srcrefTree(node26);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node38.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node38.siblings();
        boolean boolean44 = node38.isInstanceOf();
        boolean boolean45 = node38.isParamList();
        node38.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        boolean boolean54 = node51.isHook();
        java.util.Set<java.lang.String> strSet55 = node51.getDirectives();
        boolean boolean56 = node38.hasChild(node51);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isNot();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = node58.copyInformationFromForTree(node64);
        boolean boolean66 = node65.isExprResult();
        boolean boolean67 = node65.isDefaultCase();
        com.google.javascript.rhino.Node node68 = node65.getNext();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(46, node26, node38, node65, 0, (int) (short) 100);
        boolean boolean72 = node71.isQuotedString();
        com.google.javascript.rhino.Node node73 = node71.getFirstChild();
        node73.setOptionalArg(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str34, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test21604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21604");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        int int15 = node11.getCharno();
        boolean boolean16 = node11.isName();
        boolean boolean17 = node11.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node11, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression19);
        com.google.javascript.rhino.Node node21 = jSTypeExpression20.getRoot();
        boolean boolean22 = jSTypeExpression20.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean24 = jSTypeExpression20.equals((java.lang.Object) visibility23);
        com.google.javascript.rhino.Node node25 = jSTypeExpression20.getRoot();
        node1.addChildrenToFront(node25);
        boolean boolean27 = node25.isString();
        com.google.javascript.rhino.Node node28 = node25.removeFirstChild();
        node28.setCharno((int) (byte) 1);
        boolean boolean31 = node28.isThrow();
        com.google.javascript.rhino.Node node32 = node28.getParent();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test21605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21605");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        boolean boolean10 = node9.isDefaultCase();
        boolean boolean11 = node9.isVoid();
        com.google.javascript.rhino.Node node12 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean13 = node3.isDebugger();
        node3.setSourceFileForTesting("(OR\n    OR\n)");
        boolean boolean16 = node3.isInc();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("((NUMBER 1.0 37\n))", (-1), 213044);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        node22.setStaticSourceFile(staticSourceFile25);
        boolean boolean27 = node22.isComma();
        boolean boolean28 = node22.isFalse();
        boolean boolean29 = node22.isNoSideEffectsCall();
        boolean boolean30 = node22.isCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node22.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node32 = node22.cloneNode();
        node22.setWasEmptyNode(true);
        node20.addChildToBack(node22);
        com.google.javascript.rhino.Node node36 = node3.copyInformationFrom(node22);
        boolean boolean37 = node22.isGetElem();
        com.google.javascript.rhino.Node node38 = node22.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node38.addSuppression("OR [jsdoc_info: JSDocInfo] [length: 46]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test21606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21606");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(8);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test21607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21607");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        boolean boolean7 = node1.isRegExp();
        boolean boolean8 = node1.isReturn();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21608");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.String str8 = node2.getSourceFileName();
        boolean boolean9 = node2.isGetElem();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(31, node2, 0, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasBaseType();
        jSDocInfo13.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int17 = jSDocInfo13.getParameterCount();
        boolean boolean18 = jSDocInfo13.isNoSideEffects();
        node12.setJSDocInfo(jSDocInfo13);
        boolean boolean20 = node12.isRegExp();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test21609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21609");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        int int8 = node3.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node3.getJSDocInfo();
        boolean boolean10 = node3.isSwitch();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21610");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        int int6 = node2.getCharno();
        boolean boolean7 = node2.isName();
        boolean boolean8 = node2.isNE();
        boolean boolean9 = node2.isEmpty();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        boolean boolean15 = node11.hasChildren();
        com.google.javascript.rhino.Node node16 = node2.srcrefTree(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0, node2);
        node17.putBooleanProp(0, false);
        boolean boolean21 = node17.isQualifiedName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test21611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21611");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1L));
        boolean boolean2 = node1.isUnscopedQualifiedName();
        java.lang.Object obj4 = node1.getProp(32);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder6 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] { node8 };
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node16 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] { node24 };
        com.google.javascript.rhino.Node[][] nodeArray31 = new com.google.javascript.rhino.Node[][] { nodeArray14, nodeArray22, nodeArray30 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder32 = nodeArrayBuilder6.add(nodeArray31);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder33 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        java.lang.String str38 = node35.toString();
        com.google.javascript.rhino.Node node39 = node35.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node47 = node43.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node51 };
        com.google.javascript.rhino.Node[][] nodeArray58 = new com.google.javascript.rhino.Node[][] { nodeArray41, nodeArray49, nodeArray57 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder59 = nodeArrayBuilder33.add(nodeArray58);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder60 = nodeArrayBuilder32.add(nodeArray58);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder61 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder63 = nodeArrayBuilder61.add(nodeArray62);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder64 = nodeArrayBuilder60.add(nodeArray62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) 'a', nodeArray62, 40, 39);
        node1.addChildrenToBack(node67);
        boolean boolean69 = node1.isTrue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArrayBuilder32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str38, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str46, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArrayBuilder59);
        org.junit.Assert.assertNotNull(nodeArrayBuilder60);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(nodeArrayBuilder63);
        org.junit.Assert.assertNotNull(nodeArrayBuilder64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test21612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21612");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        com.google.javascript.rhino.Node node21 = node11.useSourceInfoFromForTree(node18);
        boolean boolean22 = node21.isSetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node21.siblings();
        int int24 = node3.getIndexOfChild(node21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isGetterDef();
        java.util.Set<java.lang.String> strSet31 = node26.getDirectives();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isFalse();
        boolean boolean38 = node33.isParamList();
        com.google.javascript.rhino.Node node39 = node26.useSourceInfoIfMissingFrom(node33);
        node39.setLength(45);
        boolean boolean42 = node39.isStringKey();
        node39.setVarArgs(false);
        com.google.javascript.rhino.Node node45 = node21.copyInformationFromForTree(node39);
        boolean boolean46 = node39.isCall();
        boolean boolean47 = node39.hasMoreThanOneChild();
        boolean boolean48 = node39.isNot();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test21613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21613");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean21 = strList13.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor22 = strList13.listIterator();
        java.lang.Object[] objArray23 = strList13.toArray();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        boolean boolean35 = node30.isIf();
        com.google.javascript.rhino.Node node36 = node27.copyInformationFromForTree(node30);
        boolean boolean37 = strList13.contains((java.lang.Object) node36);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node48 = node44.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node node50 = node39.copyInformationFromForTree(node44);
        boolean boolean51 = node44.isAssignAdd();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isTypeOf();
        boolean boolean58 = node53.isVarArgs();
        boolean boolean59 = node53.isIn();
        node44.addChildToFront(node53);
        node53.removeProp(48);
        com.google.javascript.rhino.Node node64 = node53.getAncestor(0);
        boolean boolean65 = node53.isUnscopedQualifiedName();
        boolean boolean66 = node53.isStringKey();
        boolean boolean67 = node53.isCase();
        int int68 = strList13.lastIndexOf((java.lang.Object) node53);
        boolean boolean69 = strSet6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor70 = strList13.listIterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str42, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strItor70);
    }

    @Test
    public void test21614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21614");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setItem("unknown");
        stringPosition0.setItem("(OR)");
        int int7 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("true");
        int int10 = stringPosition0.getEndLine();
        int int11 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test21615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21615");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        boolean boolean19 = node7.isNot();
        boolean boolean20 = node7.isBlock();
        boolean boolean21 = node7.isVarArgs();
        com.google.javascript.rhino.Node node22 = node7.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = node22.isNull();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test21616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21616");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 0, 38);
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSType5);
    }

    @Test
    public void test21617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21617");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        boolean boolean7 = node4.isVarArgs();
        int int8 = node4.getChildCount();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = node10.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node18 = node4.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoFromForTree(node18);
        boolean boolean20 = node18.isSyntheticBlock();
        boolean boolean22 = node18.getBooleanProp((int) '#');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node18.siblings();
        boolean boolean24 = node18.isAdd();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node28.isLabel();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo32.getParameterNames();
        boolean boolean34 = jSDocInfo32.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo32.getThrownTypes();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isTypeOf();
        boolean boolean49 = node44.isDelProp();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node55 = node53.getParent();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node53.setJSType(jSType56);
        java.lang.String str58 = node53.toString();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node60.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node60.setStaticSourceFile(staticSourceFile63);
        boolean boolean65 = node60.isComma();
        node60.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList68 = com.google.common.collect.ImmutableList.of(node37, node44, node53, node60);
        boolean boolean69 = node60.isComma();
        boolean boolean70 = node60.isCase();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int76 = node75.getSideEffectFlags();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        com.google.javascript.rhino.Node node82 = node80.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str84 = jSDocInfo83.getFileOverview();
        java.lang.String str85 = jSDocInfo83.getFileOverview();
        boolean boolean86 = jSDocInfo83.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList87 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo32, (java.lang.Object) node60, (java.lang.Object) node75, (java.lang.Object) node80, (java.lang.Object) jSDocInfo83);
        node28.addChildrenToBack(node75);
        int int90 = node28.getIntProp(45);
        com.google.javascript.rhino.Node node91 = node28.removeChildren();
        boolean boolean92 = node91.isQualifiedName();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(47, node18, node91);
        boolean boolean94 = node18.isContinue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR" + "'", str58, "OR");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test21618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21618");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = node15.getAncestor(0);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        int int24 = node22.getType();
        com.google.javascript.rhino.InputId inputId25 = node22.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = null;
        node22.setJSDocInfo(jSDocInfo26);
        boolean boolean28 = node22.isDo();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        boolean boolean35 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.Node node40 = node30.copyInformationFromForTree(node37);
        java.lang.Object obj42 = node40.getProp(38);
        com.google.javascript.rhino.Node node43 = node22.srcrefTree(node40);
        node17.putProp(6, (java.lang.Object) node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.hasBaseType();
        jSDocInfo45.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo45.getBaseType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        int int56 = node52.getCharno();
        boolean boolean57 = node52.isContinue();
        boolean boolean58 = strSet50.equals((java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        node62.setIsSyntheticBlock(true);
        boolean boolean67 = node62.isContinue();
        boolean boolean68 = strSet50.equals((java.lang.Object) node62);
        java.lang.Object[] objArray69 = strSet50.toArray();
        java.lang.Object[] objArray70 = strSet50.toArray();
        node22.setDirectives(strSet50);
        java.util.stream.Stream<java.lang.String> strStream72 = strSet50.parallelStream();
        boolean boolean73 = strSet50.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasBaseType();
        java.lang.String str76 = jSDocInfo74.getFileOverview();
        int int77 = jSDocInfo74.getParameterCount();
        boolean boolean78 = jSDocInfo74.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility79 = jSDocInfo74.getVisibility();
        boolean boolean80 = jSDocInfo74.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo74.getThisType();
        int int82 = jSDocInfo74.getParameterCount();
        boolean boolean83 = strSet50.equals((java.lang.Object) int82);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(visibility79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test21619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21619");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(OR 0\n)", (int) '4', 49);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21620");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isRegExp();
        boolean boolean7 = node3.isIf();
        boolean boolean8 = node3.hasOneChild();
        boolean boolean9 = node3.isParamList();
        com.google.javascript.rhino.Node node10 = node3.getLastSibling();
        java.lang.Object obj12 = null;
        node3.putProp(51, obj12);
        node3.setLength((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test21621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21621");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Iterator<java.lang.String> strItor15 = strList6.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strList6.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo17.getParameterNames();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo17.getVisibility();
        java.lang.String str22 = jSDocInfo17.getDescriptionForParameter("Not declared as a type name");
        boolean boolean23 = jSDocInfo17.isOverride();
        java.lang.String str25 = jSDocInfo17.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str26 = jSDocInfo17.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo17.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList27.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor29 = strList28.listIterator();
        boolean boolean30 = strList6.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.Object[] objArray31 = strList6.toArray();
        java.lang.String str32 = strList6.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = strList6.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = strList33.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = strList34.asList();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = strList35.add("(Not declared as a type name)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(visibility20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str32, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList35);
    }

    @Test
    public void test21622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21622");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.isInterface();
        int int4 = jSDocInfo0.getExtendedInterfacesCount();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test21623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21623");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList11 = com.google.common.collect.ImmutableList.of(visibility8, visibility9, visibility10);
        jSDocInfo0.setVisibility(visibility10);
        boolean boolean13 = jSDocInfo0.isNoShadow();
        boolean boolean14 = jSDocInfo0.isOverride();
        boolean boolean15 = jSDocInfo0.isIdGenerator();
        boolean boolean16 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21624");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        java.util.stream.Stream<java.lang.String> strStream71 = strList48.stream();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node73.addSuppression("");
        java.lang.String str76 = node73.toString();
        int int77 = node73.getChildCount();
        node73.setLength(15);
        boolean boolean80 = node73.isDebugger();
        boolean boolean81 = strList48.remove((java.lang.Object) node73);
        com.google.javascript.rhino.Node node82 = node73.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node82.setWasEmptyNode(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str76, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test21625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21625");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, 15, 0);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 0, node4);
        boolean boolean7 = node4.isParamList();
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21626");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean21 = strList16.containsAll((java.util.Collection<java.lang.String>) strList20);
        java.util.Iterator<java.lang.String> strItor22 = strList20.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.hasBaseType();
        jSDocInfo23.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo23.getBaseType();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo23.getParameterNames();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        int int34 = node30.getCharno();
        boolean boolean35 = node30.isContinue();
        boolean boolean36 = strSet28.equals((java.lang.Object) node30);
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean51 = strList43.containsAll((java.util.Collection<java.lang.String>) strList50);
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList43.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = strList43.asList();
        boolean boolean54 = strSet28.contains((java.lang.Object) strList53);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        int int61 = node58.getLength();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        node58.addChildrenToFront(node63);
        boolean boolean67 = strList53.contains((java.lang.Object) node58);
        java.lang.Object[] objArray68 = strList53.toArray();
        boolean boolean69 = strList20.containsAll((java.util.Collection<java.lang.String>) strList53);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor71 = strList53.listIterator(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (41) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test21627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21627");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        java.lang.Object obj10 = null;
        boolean boolean11 = jSTypeExpression9.equals(obj10);
        com.google.javascript.rhino.Node node12 = jSTypeExpression9.getRoot();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        java.util.Spliterator<java.lang.String> strSpliterator28 = strList19.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = strList19.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor30 = strList19.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean33 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str38 = ternaryValue37.toString();
        boolean boolean40 = ternaryValue37.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue34.and(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue31.and(ternaryValue37);
        int int43 = strList19.indexOf((java.lang.Object) ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue42.xor(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue42.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue46.not();
        boolean boolean48 = jSTypeExpression9.equals((java.lang.Object) ternaryValue46);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        com.google.javascript.rhino.Node node50 = jSTypeExpression9.getRoot();
        com.google.javascript.rhino.Node node51 = jSTypeExpression9.getRoot();
        java.lang.String str52 = node51.toStringTree();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "unknown" + "'", str38, "unknown");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR\n    OR\n" + "'", str52, "OR\n    OR\n");
    }

    @Test
    public void test21628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21628");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList7 = com.google.common.collect.ImmutableList.of(visibility4, visibility5, visibility6);
        jSDocInfo0.setVisibility(visibility6);
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        jSDocInfo0.setLicense("OR [jsdoc_info: JSDocInfo]");
        java.lang.String str12 = jSDocInfo0.getMeaning();
        java.lang.String str13 = jSDocInfo0.getVersion();
        java.lang.String str14 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSDocInfo" + "'", str14, "JSDocInfo");
    }

    @Test
    public void test21629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21629");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        int int17 = node13.getCharno();
        boolean boolean18 = node13.isName();
        boolean boolean19 = node13.isNE();
        boolean boolean20 = node13.isLabelName();
        boolean boolean21 = node8.isEquivalentToTyped(node13);
        node13.setSourceEncodedPosition((int) (byte) 100);
        boolean boolean24 = node13.isNew();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test21630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21630");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.hasOneChild();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(29);
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        node15.setWasEmptyNode(false);
        boolean boolean19 = node15.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21631");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = node7.removeChildren();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, node7);
        jSDocInfo0.setAssociatedNode(node7);
        int int16 = jSDocInfo0.getParameterCount();
        boolean boolean17 = jSDocInfo0.isNoSideEffects();
        boolean boolean18 = jSDocInfo0.hasTypedefType();
        boolean boolean19 = jSDocInfo0.hasTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo21.getImplementedInterfaces();
        boolean boolean25 = jSDocInfo21.hasParameterType("OR");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo21.getReturnType();
        boolean boolean27 = jSDocInfo21.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo21.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo21.getThrownTypes();
        boolean boolean30 = jSDocInfo21.isJavaDispatch();
        boolean boolean31 = jSDocInfo21.isDeprecated();
        boolean boolean32 = jSDocInfo21.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo21.getParameterType("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: NUMBER -1.0\n");
        java.util.Set<java.lang.String> strSet35 = jSDocInfo21.getSuppressions();
        java.lang.Object obj36 = null;
        boolean boolean37 = strSet35.remove(obj36);
        java.lang.Object[] objArray38 = strSet35.toArray();
        java.util.Iterator<java.lang.String> strItor39 = strSet35.iterator();
        boolean boolean40 = strList20.containsAll((java.util.Collection<java.lang.String>) strSet35);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test21632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21632");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str6 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        boolean boolean15 = node9.isLabelName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node9.siblings();
        node9.putIntProp(0, 0);
        boolean boolean20 = node9.isHook();
        jSDocInfo0.setAssociatedNode(node9);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test21633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21633");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        int int2 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int4 = stringPosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition5.setItem("NUMBER 4.0 1\n");
        stringPosition5.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition5.setPositionInformation((int) '#', 44, 51, 50);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int19 = stringPosition18.getStartLine();
        int int20 = stringPosition18.getEndLine();
        int int21 = stringPosition18.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList22 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition5, stringPosition18);
        int int23 = stringPosition18.getPositionOnStartLine();
        stringPosition18.setItem("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        stringPosition18.setItem("BITXOR 0");
        int int28 = stringPosition18.getPositionOnStartLine();
        int int29 = stringPosition18.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(stringPositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test21634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21634");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(48, "Unknown class name", (-1), 42);
        boolean boolean6 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node8.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node8.isComma();
        node8.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node17.children();
        com.google.javascript.rhino.InputId inputId22 = null;
        node17.setInputId(inputId22);
        boolean boolean24 = node17.isName();
        java.lang.String str25 = node8.checkTreeEquals(node17);
        boolean boolean26 = node17.isStringKey();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType39 = node34.getJSType();
        boolean boolean40 = node34.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node41 = node32.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int47 = node46.getSideEffectFlags();
        com.google.javascript.rhino.Node node48 = node34.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node50.children();
        com.google.javascript.rhino.InputId inputId55 = null;
        node50.setInputId(inputId55);
        boolean boolean57 = node50.isName();
        boolean boolean58 = node50.isFunction();
        com.google.javascript.rhino.Node node59 = node48.srcref(node50);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, node5, node17, node50, (int) (byte) 10, 49);
        java.lang.String str63 = node17.toString();
        boolean boolean64 = node17.hasChildren();
        com.google.javascript.rhino.Node node66 = node17.getAncestor((int) '4');
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str25, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "OR" + "'", str63, "OR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(node66);
    }

    @Test
    public void test21635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21635");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasThisType();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        boolean boolean12 = jSDocInfo0.hasParameterType("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        java.lang.String str13 = jSDocInfo0.getBlockDescription();
        boolean boolean14 = jSDocInfo0.isNoShadow();
        java.lang.String str15 = jSDocInfo0.getSourceName();
        java.lang.String str16 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test21636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21636");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "Node tree inequality:\nTree1:\nOR [opt_arg: 1]\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR [opt_arg: 1]\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n", 48, 15);
        com.google.javascript.rhino.Node node6 = node4.getAncestor((int) (short) 1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test21637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21637");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        boolean boolean12 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nSTRING  39\n\n\nTree2:\nOR\n\n\nSubtree1: STRING  39\n\n\nSubtree2: OR\n");
        java.lang.String str15 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JSDocInfo" + "'", str15, "JSDocInfo");
    }

    @Test
    public void test21638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21638");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isUnscopedQualifiedName();
        int int11 = node1.getSourceOffset();
        boolean boolean12 = node1.isGetterDef();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21639");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation((int) ' ', 49, 51, 38);
        int int15 = stringPosition0.getPositionOnEndLine();
        int int16 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("JSDocInfo");
        int int19 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 38 + "'", int15 == 38);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 38 + "'", int16 == 38);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 38 + "'", int19 == 38);
    }

    @Test
    public void test21640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21640");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isEmpty();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.hasChildren();
        com.google.javascript.rhino.Node node15 = node1.srcrefTree(node10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        boolean boolean23 = node17.isBlock();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node26);
        int int28 = node26.getLength();
        int int29 = node1.getIndexOfChild(node26);
        com.google.javascript.rhino.Node node30 = node26.removeChildren();
        boolean boolean31 = node26.isHook();
        java.lang.String str32 = node26.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR" + "'", str32, "OR");
    }

    @Test
    public void test21641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21641");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        java.util.Iterator<java.lang.String> strItor54 = strList43.iterator();
        boolean boolean55 = strList13.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = strList43.asList();
        java.util.stream.Stream<java.lang.String> strStream57 = strList56.stream();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strStream57);
    }

    @Test
    public void test21642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21642");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        boolean boolean17 = jSDocInfo0.isNoCompile();
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isReturn();
        com.google.javascript.rhino.InputId inputId26 = node21.getInputId();
        boolean boolean27 = node21.isAdd();
        boolean boolean28 = node21.isQuotedString();
        int int30 = node21.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isNot();
        boolean boolean37 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        com.google.javascript.rhino.Node node42 = node32.copyInformationFromForTree(node39);
        node32.setOptionalArg(true);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node48.addSuppression("");
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node57 = node55.getParent();
        com.google.javascript.rhino.Node node58 = node48.useSourceInfoFromForTree(node55);
        boolean boolean59 = node58.isSetterDef();
        com.google.javascript.rhino.Node node60 = node58.getLastChild();
        boolean boolean61 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(1, node21, node32, node46, node58);
        boolean boolean63 = node58.isVoid();
        int int64 = strList18.lastIndexOf((java.lang.Object) boolean63);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags66 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags66.clearAllFlags();
        sideEffectFlags66.clearAllFlags();
        int int69 = strList18.indexOf((java.lang.Object) sideEffectFlags66);
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = strList18.asList();
        java.lang.Object[] objArray71 = strList70.toArray();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str51, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
    }

    @Test
    public void test21643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21643");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition24 = marker4.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker4.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker4.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition27 = marker4.getNameNode();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(nodeSourcePosition24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(nodeSourcePosition27);
    }

    @Test
    public void test21644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21644");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strList5.stream();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor19 = strList5.iterator();
        java.util.Iterator<java.lang.String> strItor20 = strList5.iterator();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node24.getParent();
        node24.setIsSyntheticBlock(true);
        boolean boolean29 = node24.isContinue();
        java.lang.String str30 = node24.getQualifiedName();
        boolean boolean31 = node24.isSwitch();
        node24.removeProp((int) '4');
        boolean boolean34 = node24.isParamList();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node24.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node24.children();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isNot();
        boolean boolean43 = node38.isDefaultCase();
        java.lang.String str44 = node38.toStringTree();
        boolean boolean45 = node38.isLabel();
        int int46 = node24.getIndexOfChild(node38);
        boolean boolean47 = node24.isContinue();
        boolean boolean48 = strList5.equals((java.lang.Object) node24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = strList5.set(4096, "((OR 0))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR\n    OR\n" + "'", str44, "OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test21645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21645");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder3 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder5 = nodeArrayBuilder3.add(nodeArray4);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(12, nodeArray4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(24, nodeArray4, 4100, (int) (byte) 1);
        boolean boolean11 = node10.isFunction();
        boolean boolean12 = node10.isArrayLit();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(nodeArrayBuilder5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21646");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        java.lang.String str8 = jSDocInfo0.toString();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node12 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test21647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21647");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType13);
    }

    @Test
    public void test21648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21648");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList9 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8);
        int int10 = typePosition7.getPositionOnEndLine();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean15 = node14.isLabel();
        typePosition7.setItem(node14);
        boolean boolean17 = node14.isBreak();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        boolean boolean25 = node19.isLocalResultCall();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isNot();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = node27.copyInformationFromForTree(node33);
        com.google.javascript.rhino.InputId inputId35 = node27.getInputId();
        boolean boolean36 = node27.isIn();
        boolean boolean37 = node19.isEquivalentToTyped(node27);
        java.lang.String str38 = node27.toStringTree();
        node14.addChildToFront(node27);
        boolean boolean40 = node27.isThis();
        com.google.javascript.rhino.Node node41 = node27.getParent();
        boolean boolean42 = node41.isAssign();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(155684, node41, (int) (short) 100, 9);
        org.junit.Assert.assertNotNull(typePositionList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR\n    OR\n" + "'", str38, "OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21649");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        boolean boolean7 = node1.isLabelName();
        node1.removeProp(49);
        boolean boolean10 = node1.isCall();
        boolean boolean11 = node1.isIn();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(213092);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21650");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean17 = node16.isExprResult();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node21.isLabel();
        boolean boolean24 = node16.isEquivalentTo(node21);
        com.google.javascript.rhino.Node node25 = node10.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.children();
        node27.putIntProp(8, (int) '4');
        node10.addChildrenToBack(node27);
        boolean boolean36 = node27.isThrow();
        node27.setVarArgs(true);
        boolean boolean39 = node27.hasChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node27.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node41 = node27.getParent();
        boolean boolean42 = node41.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21651");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isAdd();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node13 = node9.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node9.getStaticSourceFile();
        boolean boolean15 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node17.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFrom(node22);
        boolean boolean30 = node22.isWhile();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node34.isLabel();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isNot();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = node41.copyInformationFromForTree(node47);
        com.google.javascript.rhino.InputId inputId49 = node41.getInputId();
        com.google.javascript.rhino.Node node50 = node41.getNext();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node52.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node52.isComma();
        boolean boolean58 = node52.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList59 = com.google.common.collect.ImmutableList.of(node22, node34, node39, node41, node52);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node41.getJsDocBuilderForNode();
        boolean boolean61 = node41.hasOneChild();
        com.google.javascript.rhino.Node node62 = node2.copyInformationFrom(node41);
        boolean boolean64 = node2.getBooleanProp(50);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        boolean boolean71 = node70.isDefaultCase();
        boolean boolean72 = node70.isNoSideEffectsCall();
        java.lang.String str76 = node70.toString(false, false, false);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean81 = node80.isBreak();
        boolean boolean82 = node80.isCase();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(45, node2, node70, node80);
        node80.detachChildren();
        boolean boolean85 = node80.isQualifiedName();
        boolean boolean86 = node80.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR" + "'", str76, "OR");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test21652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21652");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node9);
        node12.putBooleanProp(37, false);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, 4095, 44);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node36 = node34.getParent();
        com.google.javascript.rhino.Node node37 = node27.useSourceInfoFromForTree(node34);
        boolean boolean38 = node21.hasChild(node27);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node21.getAncestors();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        int int45 = node41.getCharno();
        boolean boolean46 = node41.isName();
        boolean boolean47 = node41.isNE();
        boolean boolean48 = node41.isIn();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        com.google.javascript.rhino.Node node54 = node52.getParent();
        boolean boolean55 = node54.isDefaultCase();
        int int56 = node41.getIndexOfChild(node54);
        node54.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, node12, node19, node21, node54, 0, 30);
        boolean boolean62 = node21.isSyntheticBlock();
        boolean boolean63 = node21.isVoid();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str30, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(ancestorIterable39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test21653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21653");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1L));
        boolean boolean2 = node1.isUnscopedQualifiedName();
        boolean boolean3 = node1.isAnd();
        node1.setCharno(33);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test21654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21654");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        node11.setJSDocInfo(jSDocInfo12);
        java.lang.Object obj19 = node11.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node20 = node11.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = node11.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test21655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21655");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        com.google.javascript.rhino.Node node9 = null;
        typePosition1.setItem(node9);
        java.lang.Class<?> wildcardClass11 = typePosition1.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement> annotatedElementList12 = com.google.common.collect.ImmutableList.of((java.lang.reflect.AnnotatedElement) wildcardClass11);
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(annotatedElementList12);
    }

    @Test
    public void test21656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21656");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        node1.setSourceEncodedPositionForTree(49);
        node1.setType((int) (short) 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test21657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21657");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        int int6 = node2.getCharno();
        boolean boolean7 = node2.isName();
        boolean boolean8 = node2.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = new com.google.javascript.rhino.JSTypeExpression(node2, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression10);
        boolean boolean13 = jSTypeExpression10.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node14 = jSTypeExpression10.getRoot();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isNot();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = node16.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoFrom(node25);
        boolean boolean31 = jSTypeExpression10.equals((java.lang.Object) node25);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        boolean boolean39 = node33.isBlock();
        java.lang.String str40 = node33.toStringTree();
        boolean boolean41 = node33.isDec();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node48.addSuppression("");
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node52 = node48.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node43.copyInformationFromForTree(node48);
        java.lang.String str55 = node54.getSourceFileName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(0, node25, node33, node54, 4, (int) (short) -1);
        node58.addSuppression("EQ OR [jsdoc_info: JSDocInfo]");
        int int62 = node58.getIntProp(31);
        boolean boolean63 = node58.isCall();
        boolean boolean64 = node58.isStringKey();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str40, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str46, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str51, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21658");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node72.addChildrenToFront(node74);
        int int76 = node72.getCharno();
        boolean boolean77 = node72.isName();
        boolean boolean78 = node72.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node72, "Unknown class name");
        int int81 = strList62.lastIndexOf((java.lang.Object) "Unknown class name");
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList62.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator83 = strList62.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean85 = jSDocInfo84.hasBaseType();
        jSDocInfo84.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo84.getBaseType();
        java.util.Set<java.lang.String> strSet89 = jSDocInfo84.getParameterNames();
        boolean boolean90 = strList62.remove((java.lang.Object) jSDocInfo84);
        int int91 = jSDocInfo84.getExtendedInterfacesCount();
        boolean boolean92 = jSDocInfo84.isInterface();
        java.lang.String str93 = jSDocInfo84.getOriginalCommentString();
        java.lang.String str94 = jSDocInfo84.getLendsName();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertNotNull(strSpliterator83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test21659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21659");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasBaseType();
        jSDocInfo5.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo5.getTypedefType();
        boolean boolean10 = jSDocInfo5.isNoSideEffects();
        boolean boolean12 = jSDocInfo5.hasDescriptionForParameter("JSDocInfo");
        boolean boolean13 = jSDocInfo5.isConstant();
        jSDocInfo5.addSuppression("(Unknown class name)");
        boolean boolean16 = jSDocInfo5.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo5.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo5.getEnumParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str20 = jSDocInfo19.getFileOverview();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        boolean boolean22 = jSDocInfo19.isConstant();
        jSDocInfo19.setDeprecated(true);
        boolean boolean25 = jSDocInfo19.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = jSDocInfo19.getTemplateTypeNames();
        boolean boolean28 = jSDocInfo19.hasParameterType("OR");
        boolean boolean30 = jSDocInfo19.hasParameter("[]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo19.getParameterType("OR 0 [jsdoc_info: JSDocInfo]\n");
        java.lang.String str33 = jSDocInfo19.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo34.getParameterNames();
        boolean boolean36 = jSDocInfo34.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList37 = jSDocInfo34.getThrownTypes();
        boolean boolean39 = jSDocInfo34.hasParameterType("unknown");
        int int40 = jSDocInfo34.getParameterCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList44 = com.google.common.collect.ImmutableList.of(visibility41, visibility42, visibility43);
        jSDocInfo34.setVisibility(visibility42);
        jSDocInfo19.setVisibility(visibility42);
        jSDocInfo5.setVisibility(visibility42);
        jSDocInfo0.setVisibility(visibility42);
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList44);
    }

    @Test
    public void test21660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21660");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        boolean boolean4 = jSDocInfo0.isHidden();
        boolean boolean5 = jSDocInfo0.isOverride();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21661");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(2);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearSideEffectFlags();
        int int8 = sideEffectFlags1.valueOf();
        int int9 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
    }

    @Test
    public void test21662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21662");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        com.google.javascript.rhino.Node node11 = jSTypeExpression10.getRoot();
        boolean boolean12 = jSTypeExpression10.isVarArgs();
        com.google.javascript.rhino.Node node13 = jSTypeExpression10.getRoot();
        int int14 = node13.getLength();
        node13.addSuppression("(OR [jsdoc_info: JSDocInfo])");
        int int17 = node13.getCharno();
        java.lang.String str18 = node13.toStringTree();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EQUALS [jsdoc_info: JSDocInfo]\n    OR\n        OR\n" + "'", str18, "EQUALS [jsdoc_info: JSDocInfo]\n    OR\n        OR\n");
    }

    @Test
    public void test21663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21663");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        java.lang.String str7 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21664");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        namePosition0.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8, namePosition9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList13 = com.google.common.collect.ImmutableList.of(namePosition11, namePosition12);
        int int14 = namePosition11.getPositionOnEndLine();
        int int15 = namePosition11.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition16, namePosition17);
        int int19 = namePosition16.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList22 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21);
        int int23 = namePosition20.getPositionOnEndLine();
        int int24 = namePosition20.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition25, namePosition26);
        namePosition25.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition33, namePosition34);
        int int36 = namePosition33.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList39 = com.google.common.collect.ImmutableList.of(namePosition37, namePosition38);
        namePosition37.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList47 = com.google.common.collect.ImmutableList.of(namePosition45, namePosition46);
        namePosition45.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList53 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition9, namePosition11, namePosition16, namePosition20, namePosition25, namePosition33, namePosition37, namePosition45);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList54 = com.google.common.collect.ImmutableList.of(namePosition37);
        int int55 = namePosition37.getEndLine();
        int int56 = namePosition37.getPositionOnStartLine();
        com.google.javascript.rhino.Node node57 = namePosition37.getItem();
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(namePositionList39);
        org.junit.Assert.assertNotNull(namePositionList47);
        org.junit.Assert.assertNotNull(namePositionList53);
        org.junit.Assert.assertNotNull(namePositionList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 31 + "'", int55 == 31);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test21665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21665");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test21666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21666");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition3.setItem("NUMBER 4.0 1\n");
        stringPosition3.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str11 = stringPosition3.getItem();
        stringPosition3.setItem("");
        int int14 = stringPosition3.getStartLine();
        int int15 = stringPosition3.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int17 = stringPosition16.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList18 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition16);
        java.lang.String str19 = stringPosition0.getItem();
        int int20 = stringPosition0.getEndLine();
        stringPosition0.setPositionInformation((-1), 53, 16, 10);
        java.lang.String str26 = stringPosition0.getItem();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 4.0 1\n" + "'", str11, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(stringPositionList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 4.0 1\n" + "'", str19, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER 4.0 1\n" + "'", str26, "NUMBER 4.0 1\n");
    }

    @Test
    public void test21667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21667");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean6 = node5.isExprResult();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        boolean boolean41 = node32.isComma();
        boolean boolean42 = node32.isCase();
        boolean boolean43 = node32.isScript();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        com.google.javascript.rhino.Node node54 = node52.getParent();
        com.google.javascript.rhino.Node node55 = node45.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        int int61 = node57.getCharno();
        boolean boolean62 = node57.isName();
        boolean boolean63 = node57.isNE();
        boolean boolean64 = node57.isIn();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        boolean boolean71 = node70.isDefaultCase();
        int int72 = node57.getIndexOfChild(node70);
        node57.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node75 = node55.useSourceInfoIfMissingFromForTree(node57);
        node32.addChildrenToBack(node55);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) ' ', node5, node32, (int) (short) -1, 100);
        node5.setType(38);
        node5.setLineno(2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test21668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21668");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int7 = node6.getSideEffectFlags();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node6, node9, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(31, node23);
        boolean boolean25 = node23.isCatch();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test21669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21669");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isStringKey();
        boolean boolean8 = node5.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        boolean boolean16 = node10.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node10, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression18);
        com.google.javascript.rhino.Node node20 = jSTypeExpression19.getRoot();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoFrom(node20);
        boolean boolean22 = node21.isGetElem();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test21670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21670");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = new com.google.javascript.rhino.JSTypeExpression(node3, "");
        boolean boolean9 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = node11.cloneNode();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.isDelProp();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node30.setJSType(jSType33);
        java.lang.String str35 = node30.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList45 = com.google.common.collect.ImmutableList.of(node14, node21, node30, node37);
        com.google.javascript.rhino.Node node46 = node12.copyInformationFrom(node37);
        boolean boolean47 = node3.hasChild(node12);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node49.addSuppression("");
        java.lang.String str52 = node49.toString();
        com.google.javascript.rhino.Node node53 = node49.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node49.getStaticSourceFile();
        boolean boolean55 = node49.isLocalResultCall();
        boolean boolean56 = node49.isArrayLit();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        int int62 = node58.getCharno();
        boolean boolean63 = node58.isName();
        com.google.javascript.rhino.Node node64 = node49.srcrefTree(node58);
        com.google.javascript.rhino.Node node65 = node3.useSourceInfoFrom(node64);
        int int67 = node65.getIntProp(53);
        java.lang.String str71 = node65.toString(true, true, false);
        com.google.javascript.rhino.jstype.JSType jSType72 = node65.getJSType();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR" + "'", str35, "OR");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str52, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "OR" + "'", str71, "OR");
        org.junit.Assert.assertNull(jSType72);
    }

    @Test
    public void test21671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21671");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isParamList();
        boolean boolean11 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        com.google.javascript.rhino.Node node29 = node19.useSourceInfoFromForTree(node26);
        boolean boolean30 = node13.hasChild(node19);
        boolean boolean31 = node13.isStringKey();
        int int32 = node13.getCharno();
        com.google.javascript.rhino.Node node33 = null;
        node3.addChildAfter(node13, node33);
        boolean boolean35 = node13.isOr();
        node13.setSourceEncodedPositionForTree(0);
        boolean boolean38 = node13.isCatch();
        boolean boolean39 = node13.isVar();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test21672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21672");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        boolean boolean31 = node10.isGetterDef();
        boolean boolean32 = node10.isScript();
        com.google.javascript.rhino.Node node33 = node10.getNext();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        int int39 = node35.getCharno();
        boolean boolean40 = node35.isName();
        boolean boolean41 = node35.isNE();
        boolean boolean42 = node35.isEmpty();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        boolean boolean48 = node44.hasChildren();
        com.google.javascript.rhino.Node node49 = node35.srcrefTree(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node44.children();
        node10.addChildrenToBack(node44);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node57.addSuppression("");
        java.lang.String str60 = node57.toString();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        com.google.javascript.rhino.Node node66 = node64.getParent();
        com.google.javascript.rhino.Node node67 = node57.useSourceInfoFromForTree(node64);
        boolean boolean68 = node67.isArrayLit();
        node53.addChildToFront(node67);
        int int70 = node53.getLineno();
        boolean boolean71 = node10.isEquivalentTo(node53);
        com.google.javascript.rhino.Node node72 = node53.getFirstChild();
        int int73 = node53.getSideEffectFlags();
        int int74 = node53.getLength();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str60, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test21673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21673");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        int int6 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21674");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        boolean boolean7 = node2.isVoid();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        boolean boolean41 = node9.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(49, node2, node9, 0, (int) '4');
        com.google.javascript.rhino.Node node45 = node2.cloneNode();
        int int46 = node2.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test21675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21675");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test21676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21676");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21677");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        boolean boolean71 = strList37.isEmpty();
        java.lang.Object[] objArray72 = strList37.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList37.spliterator();
        java.lang.Object[] objArray74 = strList37.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor75 = strList37.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = strList37.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = strList37.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = strList77.remove(16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strItor75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test21678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21678");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo12.getParameterNames();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        int int23 = node19.getCharno();
        boolean boolean24 = node19.isContinue();
        boolean boolean25 = strSet17.equals((java.lang.Object) node19);
        node11.setDirectives(strSet17);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strList29.retainAll((java.util.Collection<java.lang.String>) strList34);
        int int37 = strList29.size();
        boolean boolean38 = strSet17.containsAll((java.util.Collection<java.lang.String>) strList29);
        com.google.common.collect.ImmutableList<java.util.Set<java.lang.String>> strSetList39 = com.google.common.collect.ImmutableList.of(strSet17);
        java.lang.Object[] objArray40 = strSet17.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.isNoShadow();
        boolean boolean43 = jSDocInfo41.isNoShadow();
        boolean boolean44 = jSDocInfo41.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo41.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo41.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = jSDocInfo41.getTemplateTypeNames();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor49 = strList48.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = strList48.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = strList50.asList();
        java.util.Iterator<java.lang.String> strItor52 = strList50.iterator();
        boolean boolean53 = strSet17.equals((java.lang.Object) strList50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = strSet17.add("INSTANCEOF");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strSetList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test21679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21679");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.JSType jSType15 = node5.getJSType();
        boolean boolean16 = node5.isIn();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21680");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node15.isDec();
        boolean boolean24 = node15.hasOneChild();
        boolean boolean25 = node15.isReturn();
        boolean boolean26 = node15.isInc();
        boolean boolean27 = node15.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test21681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21681");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition0.getEndLine();
        int int10 = typePosition0.getPositionOnEndLine();
        boolean boolean11 = typePosition0.hasBrackets();
        int int12 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test21682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21682");
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = strList6.retainAll((java.util.Collection<java.lang.String>) strList11);
        int int14 = strList6.size();
        boolean boolean15 = strList3.containsAll((java.util.Collection<java.lang.String>) strList6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo17.getImplementedInterfaces();
        boolean boolean21 = jSDocInfo17.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = jSDocInfo17.getTemplateTypeNames();
        java.lang.String[] strArray29 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        strSet30.clear();
        boolean boolean34 = strList22.containsAll((java.util.Collection<java.lang.String>) strSet30);
        boolean boolean35 = strList6.addAll(0, (java.util.Collection<java.lang.String>) strList22);
        strList6.clear();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test21683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21683");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo12.getParameterNames();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        int int23 = node19.getCharno();
        boolean boolean24 = node19.isContinue();
        boolean boolean25 = strSet17.equals((java.lang.Object) node19);
        node11.setDirectives(strSet17);
        node11.setSourceEncodedPosition(49);
        boolean boolean29 = node11.isQuotedString();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(43, "OR [jsdoc_info: JSDocInfo]", 39, 49);
        boolean boolean35 = node11.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isString();
        boolean boolean37 = node34.isBlock();
        boolean boolean38 = node34.isSwitch();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test21684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21684");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        boolean boolean5 = jSDocInfo0.hasParameterType("unknown");
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21685");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("(Named type with empty name component)");
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(35, 36, 4095, 4);
        int int13 = stringPosition0.getStartLine();
        int int14 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36 + "'", int14 == 36);
    }

    @Test
    public void test21686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21686");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isInterface();
        boolean boolean6 = jSDocInfo0.isDefine();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test21687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21687");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isVoid();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node11.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node11.isComma();
        boolean boolean17 = node11.isBlock();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node21 = node11.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        boolean boolean33 = node31.isLabel();
        boolean boolean34 = node26.isEquivalentTo(node31);
        com.google.javascript.rhino.Node node35 = node20.useSourceInfoIfMissingFrom(node26);
        boolean boolean36 = node35.isParamList();
        node5.putProp((int) '4', (java.lang.Object) boolean36);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = node5.getLength();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test21688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21688");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.isInterface();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        boolean boolean12 = jSDocInfo0.isInterface();
        boolean boolean13 = jSDocInfo0.isHidden();
        boolean boolean14 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo16.hasBaseType();
        jSDocInfo16.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo16.getTypedefType();
        boolean boolean21 = jSDocInfo16.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo16.getReturnType();
        boolean boolean23 = jSDocInfo16.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.isNoShadow();
        boolean boolean26 = jSDocInfo24.hasFileOverview();
        int int27 = jSDocInfo24.getParameterCount();
        boolean boolean28 = jSDocInfo24.isNoSideEffects();
        boolean boolean29 = jSDocInfo24.isDeprecated();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isNoShadow();
        boolean boolean32 = jSDocInfo30.hasFileOverview();
        int int33 = jSDocInfo30.getParameterCount();
        boolean boolean34 = jSDocInfo30.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo30.getModifies();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isTypeOf();
        boolean boolean49 = node44.isDelProp();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node55 = node53.getParent();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node53.setJSType(jSType56);
        java.lang.String str58 = node53.toString();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node60.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node60.setStaticSourceFile(staticSourceFile63);
        boolean boolean65 = node60.isComma();
        node60.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList68 = com.google.common.collect.ImmutableList.of(node37, node44, node53, node60);
        boolean boolean69 = node44.isComma();
        boolean boolean70 = strSet35.remove((java.lang.Object) node44);
        jSDocInfo24.setAssociatedNode(node44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean73 = jSDocInfo72.isNoShadow();
        boolean boolean74 = jSDocInfo72.isNoTypeCheck();
        boolean boolean75 = jSDocInfo72.isIdGenerator();
        boolean boolean76 = jSDocInfo72.isDeprecated();
        boolean boolean77 = jSDocInfo72.hasReturnType();
        boolean boolean78 = jSDocInfo72.isConsistentIdGenerator();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList79 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo16, jSDocInfo24, jSDocInfo72);
        boolean boolean80 = jSDocInfo24.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo24.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR" + "'", str58, "OR");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
    }

    @Test
    public void test21689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21689");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node3.addChildrenToFront(node5);
        boolean boolean7 = node3.isTypeOf();
        boolean boolean8 = node3.wasEmptyNode();
        com.google.javascript.rhino.Node node9 = node3.removeChildren();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node3);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        node15.setLength(1);
        node15.setLineno((int) (short) 100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node10, node15, (int) '#', 16);
        boolean boolean23 = node22.isContinue();
        boolean boolean24 = node22.isTrue();
        int int25 = node22.getChildCount();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test21690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21690");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isOr();
        com.google.javascript.rhino.InputId inputId7 = node5.getInputId();
        int int8 = node5.getSourcePosition();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test21691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21691");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        boolean boolean36 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isVarArgs();
        boolean boolean44 = node38.isIn();
        node29.addChildToFront(node38);
        node38.removeProp(48);
        boolean boolean48 = node38.isAssign();
        boolean boolean49 = node38.isTrue();
        boolean boolean50 = node6.isEquivalentToTyped(node38);
        node6.addSuppression("Unknown class name");
        com.google.javascript.rhino.Node node53 = node6.getNext();
        boolean boolean54 = node6.isThis();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node57.addSuppression("");
        java.lang.String str60 = node57.toString();
        com.google.javascript.rhino.Node node61 = node57.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node57.getStaticSourceFile();
        boolean boolean63 = node57.isVar();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node65.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        node65.setStaticSourceFile(staticSourceFile68);
        boolean boolean70 = node65.isComma();
        boolean boolean71 = node65.isBlock();
        com.google.javascript.rhino.Node node72 = node65.getLastSibling();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node74.addSuppression("");
        java.lang.String str77 = node74.toString();
        com.google.javascript.rhino.Node node78 = node74.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = node74.getStaticSourceFile();
        boolean boolean80 = node74.isVarArgs();
        node65.addChildrenToFront(node74);
        node65.setSourceEncodedPositionForTree(51);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(50, node57, node65);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean89 = node88.isName();
        boolean boolean90 = node88.isBreak();
        node88.setLineno(50);
        boolean boolean93 = node88.isSyntheticBlock();
        int int94 = node57.getIndexOfChild(node88);
        com.google.javascript.rhino.Node node95 = node6.copyInformationFrom(node88);
        boolean boolean96 = node88.isLabel();
        boolean boolean97 = node88.isDefaultCase();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str60, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str77, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNull(staticSourceFile79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test21692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21692");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo27.getThrownTypes();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo27.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.stream();
        strSet35.clear();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isNot();
        boolean boolean44 = node39.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        com.google.javascript.rhino.Node node49 = node39.copyInformationFromForTree(node46);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node46.setJSType(jSType50);
        java.lang.String str55 = node46.toString(true, false, true);
        boolean boolean56 = node46.isNull();
        boolean boolean57 = strSet35.contains((java.lang.Object) node46);
        boolean boolean58 = node46.isInc();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR" + "'", str55, "OR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test21693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21693");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 53, 46, 39);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node3.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21694");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        boolean boolean10 = jSDocInfo0.hasModifies();
        jSDocInfo0.addSuppression("((Unknown class name))");
        boolean boolean14 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nOR 2 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21695");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.xor(ternaryValue1);
        boolean boolean4 = ternaryValue0.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean10 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str12 = ternaryValue11.toString();
        boolean boolean14 = ternaryValue11.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue8.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue5.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue0.or(ternaryValue16);
        java.lang.String str18 = ternaryValue16.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean21 = ternaryValue19.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue16.xor(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue19.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str25 = ternaryValue24.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean28 = ternaryValue26.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str30 = ternaryValue29.toString();
        boolean boolean32 = ternaryValue29.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue26.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue33.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue24.or(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str37 = ternaryValue36.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean40 = ternaryValue38.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str42 = ternaryValue41.toString();
        boolean boolean44 = ternaryValue41.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue38.and(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue45.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue36.or(ternaryValue45);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue33.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue49.xor(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue36.or(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue53.xor(ternaryValue54);
        boolean boolean57 = ternaryValue53.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue53.not();
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean73 = strList65.containsAll((java.util.Collection<java.lang.String>) strList72);
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList65.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = strList65.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor76 = strList65.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean79 = ternaryValue77.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean82 = ternaryValue80.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str84 = ternaryValue83.toString();
        boolean boolean86 = ternaryValue83.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue87 = ternaryValue80.and(ternaryValue83);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = ternaryValue77.and(ternaryValue83);
        int int89 = strList65.indexOf((java.lang.Object) ternaryValue88);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue91 = ternaryValue88.xor(ternaryValue90);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = ternaryValue88.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue93 = ternaryValue53.and(ternaryValue88);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue94 = ternaryValue51.or(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue95 = ternaryValue23.or(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "unknown" + "'", str12, "unknown");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "unknown" + "'", str18, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "unknown" + "'", str25, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "unknown" + "'", str30, "unknown");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "unknown" + "'", str37, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "unknown" + "'", str42, "unknown");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "unknown" + "'", str84, "unknown");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(ternaryValue87);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertNotNull(ternaryValue91);
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertNotNull(ternaryValue93);
        org.junit.Assert.assertNotNull(ternaryValue94);
        org.junit.Assert.assertNotNull(ternaryValue95);
    }

    @Test
    public void test21696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21696");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(48, "Unknown class name", (-1), 42);
        boolean boolean6 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node8.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node8.isComma();
        node8.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node17.children();
        com.google.javascript.rhino.InputId inputId22 = null;
        node17.setInputId(inputId22);
        boolean boolean24 = node17.isName();
        java.lang.String str25 = node8.checkTreeEquals(node17);
        boolean boolean26 = node17.isStringKey();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType39 = node34.getJSType();
        boolean boolean40 = node34.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node41 = node32.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int47 = node46.getSideEffectFlags();
        com.google.javascript.rhino.Node node48 = node34.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node50.children();
        com.google.javascript.rhino.InputId inputId55 = null;
        node50.setInputId(inputId55);
        boolean boolean57 = node50.isName();
        boolean boolean58 = node50.isFunction();
        com.google.javascript.rhino.Node node59 = node48.srcref(node50);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, node5, node17, node50, (int) (byte) 10, 49);
        boolean boolean63 = node62.isVoid();
        node62.setSourceEncodedPositionForTree(0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str25, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test21697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21697");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.union(booleanLiteralSet2);
        boolean boolean5 = booleanLiteralSet2.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test21698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21698");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isGetterDef();
        java.util.Set<java.lang.String> strSet7 = node2.getDirectives();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 10);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        boolean boolean11 = node10.isFor();
        boolean boolean12 = node2.isEquivalentToTyped(node10);
        node2.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(31, node2, 213044, 51);
        java.lang.String str18 = node2.toStringTree();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR\n    OR\n" + "'", str18, "OR\n    OR\n");
    }

    @Test
    public void test21699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21699");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isConstant();
        boolean boolean4 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("STRING  32\n");
        int int7 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test21700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21700");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition0.setItem(node2);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition4.setItem(node6);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList16 = com.google.common.collect.ImmutableList.of(typePosition8, typePosition9, typePosition10, typePosition11, typePosition12, typePosition13, typePosition14, typePosition15);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList25 = com.google.common.collect.ImmutableList.of(typePosition17, typePosition18, typePosition19, typePosition20, typePosition21, typePosition22, typePosition23, typePosition24);
        typePosition24.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList39 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition32, typePosition33, typePosition34, typePosition35, typePosition36, typePosition37, typePosition38);
        int int40 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList49 = com.google.common.collect.ImmutableList.of(typePosition41, typePosition42, typePosition43, typePosition44, typePosition45, typePosition46, typePosition47, typePosition48);
        int int50 = typePosition47.getPositionOnEndLine();
        int int51 = typePosition47.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList60 = com.google.common.collect.ImmutableList.of(typePosition52, typePosition53, typePosition54, typePosition55, typePosition56, typePosition57, typePosition58, typePosition59);
        int int61 = typePosition55.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition62 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition63 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition64 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition65 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition66 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition67 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition68 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList70 = com.google.common.collect.ImmutableList.of(typePosition62, typePosition63, typePosition64, typePosition65, typePosition66, typePosition67, typePosition68, typePosition69);
        int int71 = typePosition62.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition73 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition74 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition78 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList80 = com.google.common.collect.ImmutableList.of(typePosition72, typePosition73, typePosition74, typePosition75, typePosition76, typePosition77, typePosition78, typePosition79);
        int int81 = typePosition72.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition82 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList83 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition4, typePosition10, typePosition24, typePosition36, typePosition47, typePosition55, typePosition62, typePosition72, typePosition82);
        int int84 = typePosition36.getPositionOnEndLine();
        com.google.javascript.rhino.Node node85 = typePosition36.getItem();
        boolean boolean86 = typePosition36.hasBrackets();
        int int87 = typePosition36.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(typePositionList16);
        org.junit.Assert.assertNotNull(typePositionList25);
        org.junit.Assert.assertNotNull(typePositionList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(typePositionList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(typePositionList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(typePositionList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(typePositionList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(typePositionList83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test21701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21701");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(52, "Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n", 15, 0);
        boolean boolean6 = node5.isReturn();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        com.google.javascript.rhino.Node node12 = node10.getParent();
        node10.setIsSyntheticBlock(true);
        boolean boolean15 = node10.isContinue();
        boolean boolean16 = node10.isOnlyModifiesThisCall();
        boolean boolean17 = node10.isAdd();
        int int18 = node5.getIndexOfChild(node10);
        boolean boolean19 = node5.isBreak();
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(2, node5, node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21702");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = strList6.get(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (41) must be less than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test21703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21703");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isExprResult();
        boolean boolean10 = node8.isDefaultCase();
        boolean boolean11 = node8.isTrue();
        boolean boolean12 = node8.isNew();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node16.setStaticSourceFile(staticSourceFile19);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        com.google.javascript.rhino.Node node31 = node29.getParent();
        com.google.javascript.rhino.Node node32 = node22.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node34.setStaticSourceFile(staticSourceFile37);
        boolean boolean39 = node34.isComma();
        node34.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node43.children();
        com.google.javascript.rhino.InputId inputId48 = null;
        node43.setInputId(inputId48);
        boolean boolean50 = node43.isName();
        java.lang.String str51 = node34.checkTreeEquals(node43);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] { node16, node22, node43 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList53 = com.google.common.collect.ImmutableList.of(nodeArray52);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray52);
        boolean boolean55 = node54.isWhile();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", (-1), 8);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node59.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node62.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = null;
        node62.setStaticSourceFile(staticSourceFile65);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        java.lang.String str71 = node68.toString();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        com.google.javascript.rhino.Node node77 = node75.getParent();
        com.google.javascript.rhino.Node node78 = node68.useSourceInfoFromForTree(node75);
        boolean boolean79 = node62.hasChild(node68);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node81.addSuppression("");
        java.lang.String str84 = node81.toString();
        int int85 = node81.getChildCount();
        boolean boolean86 = node81.isGetProp();
        boolean boolean87 = node62.isEquivalentTo(node81);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(100);
        node89.addChildrenToFront(node91);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable93 = node89.children();
        com.google.javascript.rhino.InputId inputId94 = null;
        node89.setInputId(inputId94);
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node((int) '4', node54, node59, node62, node89);
        com.google.javascript.rhino.Node node97 = node8.copyInformationFrom(node59);
        int int98 = node8.getChildCount();
        boolean boolean99 = node8.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str51, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str71, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str84, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(nodeIterable93);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test21704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21704");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        boolean boolean19 = node2.hasChild(node8);
        boolean boolean20 = node8.hasMoreThanOneChild();
        boolean boolean22 = node8.getBooleanProp(51);
        com.google.javascript.rhino.Node node23 = node8.getLastChild();
        boolean boolean24 = node8.isAssign();
        boolean boolean25 = node8.isExprResult();
        boolean boolean26 = node8.isScript();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node8, 54, 44);
        int int30 = node8.getLength();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test21705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21705");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node72.addChildrenToFront(node74);
        int int76 = node72.getCharno();
        boolean boolean77 = node72.isName();
        boolean boolean78 = node72.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node72, "Unknown class name");
        int int81 = strList62.lastIndexOf((java.lang.Object) "Unknown class name");
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList62.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList83 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList62);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(100);
        node85.addChildrenToFront(node87);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable89 = node85.children();
        com.google.javascript.rhino.InputId inputId90 = null;
        node85.setInputId(inputId90);
        boolean boolean92 = node85.isHook();
        boolean boolean93 = node85.isDefaultCase();
        boolean boolean94 = node85.isTrue();
        boolean boolean95 = strList62.contains((java.lang.Object) boolean94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = strList62.remove(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 59, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertNotNull(strIterableList83);
        org.junit.Assert.assertNotNull(nodeIterable89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test21706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21706");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getDescription();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.lang.String str11 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test21707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21707");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("OR\n    OR\n");
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("OR 52\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test21708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21708");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition2.getPositionOnStartLine();
        boolean boolean10 = typePosition2.hasBrackets();
        int int11 = typePosition2.getEndLine();
        int int12 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node13 = typePosition2.getItem();
        com.google.javascript.rhino.Node node14 = typePosition2.getItem();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test21709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21709");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        java.lang.String str10 = node1.toString(true, true, true);
        boolean boolean11 = node1.isFunction();
        boolean boolean12 = node1.isIn();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isFalse();
        boolean boolean19 = node14.isParamList();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoFromForTree(node14);
        boolean boolean21 = node1.isDebugger();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test21710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21710");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = marker13.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker13.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition26 = marker13.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = marker13.getType();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(typePosition24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(nodeSourcePosition26);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(typePosition28);
    }

    @Test
    public void test21711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21711");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        boolean boolean5 = jSDocInfo0.hasParameterType("unknown");
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean8 = jSDocInfo0.hasParameter("false");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test21712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21712");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        int int12 = strList3.indexOf((java.lang.Object) boolean11);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.stream();
        java.util.Spliterator<java.lang.String> strSpliterator14 = strList3.spliterator();
        int int15 = strList3.size();
        int int16 = strList3.size();
        java.lang.Object[] objArray17 = strList3.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.isNoShadow();
        java.lang.String str20 = jSDocInfo18.getMeaning();
        com.google.javascript.rhino.Node node21 = jSDocInfo18.getAssociatedNode();
        java.lang.String str22 = jSDocInfo18.getLicense();
        java.lang.String str23 = jSDocInfo18.getSourceName();
        jSDocInfo18.setLicense("((OR))");
        java.util.Set<java.lang.String> strSet26 = jSDocInfo18.getSuppressions();
        boolean boolean27 = jSDocInfo18.isNoSideEffects();
        java.lang.String str28 = jSDocInfo18.toString();
        int int29 = strList3.lastIndexOf((java.lang.Object) str28);
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor45 = strList36.listIterator();
        java.lang.Object[] objArray46 = strList36.toArray();
        boolean boolean47 = strList36.isEmpty();
        int int48 = strList36.size();
        java.lang.String str49 = strList36.toString();
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList50 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList36);
        boolean boolean51 = strList3.contains((java.lang.Object) strList36);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JSDocInfo" + "'", str28, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str49, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strListList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test21713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21713");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isFalse();
        boolean boolean13 = node8.isParamList();
        com.google.javascript.rhino.Node node14 = node1.useSourceInfoIfMissingFrom(node8);
        boolean boolean16 = node8.getBooleanProp(41);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node18.siblings();
        int int20 = node18.getSourcePosition();
        boolean boolean21 = node18.isStringKey();
        boolean boolean22 = node18.isComma();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node18.children();
        node8.addChildrenToFront(node18);
        node8.setWasEmptyNode(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
    }

    @Test
    public void test21714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21714");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.isOnlyModifiesThisCall();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isGetterDef();
        boolean boolean16 = node11.isContinue();
        com.google.javascript.rhino.Node node17 = node2.copyInformationFrom(node11);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isReturn();
        com.google.javascript.rhino.InputId inputId24 = node19.getInputId();
        boolean boolean25 = node19.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isBlock();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean42 = strList34.containsAll((java.util.Collection<java.lang.String>) strList41);
        java.lang.String[] strArray45 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isTypeOf();
        boolean boolean54 = node49.wasEmptyNode();
        int int55 = strList46.indexOf((java.lang.Object) boolean54);
        int int56 = strList41.indexOf((java.lang.Object) boolean54);
        boolean boolean57 = strList41.isEmpty();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        boolean boolean64 = node60.isTypeOf();
        boolean boolean65 = node60.isDelProp();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        int int71 = node67.getCharno();
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] { node60, node67 };
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray72);
        int int74 = strList41.indexOf((java.lang.Object) node73);
        boolean boolean75 = node73.isAnd();
        com.google.javascript.rhino.Node node76 = node19.useSourceInfoFromForTree(node73);
        boolean boolean77 = node19.isTrue();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(33, node2, node19);
        boolean boolean79 = node2.isNumber();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test21715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21715");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        boolean boolean8 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        boolean boolean10 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(visibility11);
    }

    @Test
    public void test21716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21716");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = strList5.reverse();
        java.lang.String str19 = strList18.toString();
        java.lang.String str20 = strList18.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = strList18.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = strList18.set(176181, "(OR \n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test21717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21717");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node13 = node11.getLastChild();
        boolean boolean14 = node11.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(6, (int) (short) 0, 0);
        com.google.javascript.rhino.Node node19 = node11.copyInformationFromForTree(node18);
        boolean boolean20 = node18.isTypeOf();
        boolean boolean21 = node18.isFor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test21718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21718");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        boolean boolean15 = strList6.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor16 = strList6.listIterator();
        boolean boolean17 = strList6.isEmpty();
        java.lang.String[] strArray19 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = strList20.isEmpty();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, 44, 47);
        int int27 = strList20.lastIndexOf((java.lang.Object) 0.0f);
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean42 = strList34.containsAll((java.util.Collection<java.lang.String>) strList41);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor43 = strList34.listIterator();
        java.lang.Object[] objArray44 = strList34.toArray();
        boolean boolean45 = strList20.containsAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean46 = strList6.containsAll((java.util.Collection<java.lang.String>) strList34);
        java.util.stream.Stream<java.lang.String> strStream47 = strList6.stream();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strStream47);
    }

    @Test
    public void test21719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21719");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isNew();
        boolean boolean11 = node1.isAnd();
        boolean boolean12 = node1.isFunction();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21720");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        int int12 = strList3.indexOf((java.lang.Object) boolean11);
        java.lang.Object[] objArray13 = strList3.toArray();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node15.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node15.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.children();
        boolean boolean22 = node15.isObjectLit();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node24.isReturn();
        com.google.javascript.rhino.InputId inputId29 = node24.getInputId();
        boolean boolean30 = node24.isArrayLit();
        boolean boolean31 = node24.isInc();
        com.google.javascript.rhino.Node node32 = node15.srcrefTree(node24);
        boolean boolean33 = strList3.equals((java.lang.Object) node32);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        java.lang.String str38 = node35.toString();
        com.google.javascript.rhino.Node node39 = node35.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node35.getStaticSourceFile();
        boolean boolean41 = node35.isLocalResultCall();
        boolean boolean42 = node35.isArrayLit();
        boolean boolean43 = node35.isCase();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFrom(node35);
        boolean boolean45 = node35.isCall();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str38, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test21721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21721");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.isExport();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test21722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21722");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node16.isLabel();
        boolean boolean19 = node16.isContinue();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        com.google.javascript.rhino.Node node27 = node16.useSourceInfoIfMissingFrom(node22);
        boolean boolean28 = node3.isEquivalentTo(node22);
        com.google.javascript.rhino.InputId inputId29 = null;
        node22.setInputId(inputId29);
        boolean boolean31 = node22.isReturn();
        java.util.Set<java.lang.String> strSet32 = null;
        node22.setDirectives(strSet32);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test21723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21723");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.hasType();
        boolean boolean12 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21724");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnEndLine();
        java.lang.String str10 = stringPosition0.getItem();
        stringPosition0.setItem("STRING OR [jsdoc_info: JSDocInfo] 4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 4.0 1\n" + "'", str10, "NUMBER 4.0 1\n");
    }

    @Test
    public void test21725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21725");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node10.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node10.children();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node10.clonePropsFrom(node18);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        boolean boolean30 = node24.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node37.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFromForTree(node37);
        com.google.javascript.rhino.Node node44 = node24.useSourceInfoFrom(node37);
        boolean boolean45 = node37.isNot();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node51 = node47.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node47.getStaticSourceFile();
        boolean boolean53 = node47.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node60.addSuppression("");
        java.lang.String str63 = node60.toString();
        com.google.javascript.rhino.Node node64 = node60.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node66 = node55.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = node47.useSourceInfoFrom(node60);
        boolean boolean68 = node60.isNot();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(44, node18, node37, node60);
        boolean boolean70 = node69.isBlock();
        boolean boolean71 = strList7.contains((java.lang.Object) boolean70);
        // The following exception was thrown during execution in test generation
        try {
            strList7.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str58, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str63, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(staticSourceFile65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test21726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21726");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        boolean boolean11 = jSDocInfo0.hasParameter("[]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("OR 0 [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node15.setStaticSourceFile(staticSourceFile18);
        boolean boolean20 = node15.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node22.isNot();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = node22.copyInformationFromForTree(node28);
        boolean boolean30 = node29.isExprResult();
        boolean boolean31 = node29.isDefaultCase();
        node15.addChildrenToBack(node29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node43 = node41.getParent();
        com.google.javascript.rhino.Node node44 = node34.useSourceInfoFromForTree(node41);
        boolean boolean45 = node44.isSetterDef();
        com.google.javascript.rhino.Node node46 = node44.getLastChild();
        boolean boolean47 = node44.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node48 = node29.useSourceInfoIfMissingFromForTree(node44);
        jSDocInfo0.setAssociatedNode(node29);
        boolean boolean50 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test21727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21727");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test21728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21728");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.getJsDocBuilderForNode();
        boolean boolean53 = node33.hasOneChild();
        com.google.javascript.rhino.Node node54 = node33.cloneTree();
        java.lang.String str55 = node54.toStringTree();
        boolean boolean56 = node54.isSetterDef();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR\n    OR\n" + "'", str55, "OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test21729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21729");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isAssign();
        boolean boolean11 = node1.isReturn();
        int int13 = node1.getIntProp(51);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node15.children();
        node15.putIntProp(8, (int) '4');
        boolean boolean23 = node15.isInstanceOf();
        boolean boolean24 = node15.isBreak();
        node15.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        boolean boolean34 = node28.isFalse();
        boolean boolean35 = node28.isNoSideEffectsCall();
        boolean boolean36 = node28.isCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node28.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node38 = node28.cloneNode();
        boolean boolean39 = node28.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.hasBaseType();
        java.lang.String str42 = jSDocInfo40.getFileOverview();
        boolean boolean43 = jSDocInfo40.hasType();
        boolean boolean44 = jSDocInfo40.isImplicitCast();
        java.lang.String str45 = jSDocInfo40.getVersion();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        int int51 = node47.getCharno();
        boolean boolean52 = node47.isName();
        boolean boolean53 = node47.isNE();
        boolean boolean54 = node47.isIn();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        boolean boolean61 = node60.isDefaultCase();
        int int62 = node47.getIndexOfChild(node60);
        boolean boolean63 = node60.isLabelName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node60.children();
        boolean boolean65 = node60.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(1, "((OR))", (int) (byte) 1, 10);
        boolean boolean71 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node72 = node60.srcref(node70);
        jSDocInfo40.setAssociatedNode(node70);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node75.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = null;
        node75.setStaticSourceFile(staticSourceFile78);
        boolean boolean80 = node75.isComma();
        boolean boolean81 = node75.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = new com.google.javascript.rhino.JSTypeExpression(node75, "unknown");
        node75.setSourceFileForTesting("OR 0 [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile86 = node75.getStaticSourceFile();
        node70.setStaticSourceFile(staticSourceFile86);
        node28.setStaticSourceFile(staticSourceFile86);
        node15.setStaticSourceFile(staticSourceFile86);
        node1.setStaticSourceFile(staticSourceFile86);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(staticSourceFile86);
    }

    @Test
    public void test21730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21730");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition6.getPositionOnEndLine();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean14 = node13.isLabel();
        typePosition6.setItem(node13);
        boolean boolean16 = node13.isInc();
        node13.setSourceEncodedPositionForTree(10);
        boolean boolean19 = node13.isContinue();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21731");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str6 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        java.lang.String str10 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test21732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21732");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean2 = node1.isFromExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = new com.google.javascript.rhino.JSTypeExpression(node1, "(OR\n)");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test21733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21733");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        node11.setOptionalArg(false);
        boolean boolean14 = node11.isEmpty();
        boolean boolean15 = node11.isRegExp();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node11.children();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node11, "(Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n)");
        int int19 = node11.getChildCount();
        int int20 = node11.getSideEffectFlags();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test21734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21734");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node8 = node1.getLastSibling();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node10.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node10.getStaticSourceFile();
        boolean boolean16 = node10.isVarArgs();
        node1.addChildrenToFront(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasBaseType();
        jSDocInfo18.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo18.getTypedefType();
        boolean boolean23 = jSDocInfo18.isNoSideEffects();
        com.google.javascript.rhino.Node node24 = jSDocInfo18.getAssociatedNode();
        boolean boolean25 = jSDocInfo18.isConstructor();
        boolean boolean26 = jSDocInfo18.isExport();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo18.getSuppressions();
        node10.setDirectives(strSet27);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node10, "((OR))");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int36 = node35.getSideEffectFlags();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        int int42 = node38.getCharno();
        boolean boolean43 = node38.isName();
        boolean boolean44 = node38.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = new com.google.javascript.rhino.JSTypeExpression(node38, "Unknown class name");
        node35.addChildrenToFront(node38);
        java.lang.String str48 = node38.getSourceFileName();
        int int49 = node38.getLength();
        int int50 = node38.getType();
        java.lang.String str51 = node38.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        java.lang.String str56 = node53.toString();
        com.google.javascript.rhino.Node node57 = node53.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node53.getStaticSourceFile();
        boolean boolean59 = node53.isLocalResultCall();
        boolean boolean60 = node53.isArrayLit();
        boolean boolean61 = node53.isAssign();
        boolean boolean62 = node53.isAssign();
        boolean boolean63 = node53.isReturn();
        int int64 = node53.getLineno();
        node53.setLineno(2);
        boolean boolean67 = node53.isSwitch();
        java.lang.String str68 = node38.checkTreeEquals(node53);
        com.google.javascript.rhino.Node node69 = node10.srcrefTree(node38);
        boolean boolean70 = node69.isDebugger();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str56, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR 2 [jsdoc_info: JSDocInfo]\n" + "'", str68, "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR 2 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test21735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21735");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        boolean boolean17 = node16.isExprResult();
        boolean boolean18 = node16.isDefaultCase();
        node2.addChildrenToBack(node16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.Node node30 = node28.getParent();
        com.google.javascript.rhino.Node node31 = node21.useSourceInfoFromForTree(node28);
        boolean boolean32 = node31.isSetterDef();
        com.google.javascript.rhino.Node node33 = node31.getLastChild();
        boolean boolean34 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node35 = node16.useSourceInfoIfMissingFromForTree(node31);
        int int36 = node16.getSideEffectFlags();
        boolean boolean37 = node16.isContinue();
        boolean boolean38 = node16.isNot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, node16, 29, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test21736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21736");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int26 = strList17.size();
        boolean boolean27 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList17);
        boolean boolean28 = strList17.isEmpty();
        java.util.ListIterator<java.lang.String> strItor29 = strList17.listIterator();
        java.lang.Object[] objArray30 = strList17.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean32 = jSDocInfo31.hasBaseType();
        jSDocInfo31.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo31.getBaseType();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo31.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator37 = strSet36.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator38 = strSet36.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator39 = strSet36.spliterator();
        int int40 = strSet36.size();
        int int41 = strSet36.size();
        java.util.stream.Stream<java.lang.String> strStream42 = strSet36.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.isNoShadow();
        boolean boolean45 = jSDocInfo43.isNoShadow();
        boolean boolean46 = jSDocInfo43.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo43.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo43.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = jSDocInfo43.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo43.getType();
        boolean boolean52 = jSDocInfo43.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = jSDocInfo43.getTemplateTypeNames();
        boolean boolean54 = strSet36.equals((java.lang.Object) strList53);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = strList17.retainAll((java.util.Collection<java.lang.String>) strList53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strSpliterator37);
        org.junit.Assert.assertNotNull(strSpliterator38);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test21737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21737");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("Named type with empty name component");
        boolean boolean7 = jSDocInfo0.isNoShadow();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        boolean boolean9 = strSet8.isEmpty();
        java.lang.Object[] objArray10 = strSet8.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean12 = jSDocInfo11.hasBaseType();
        jSDocInfo11.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo11.getBaseType();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo11.getParameterNames();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo11.getModifies();
        boolean boolean18 = strSet8.contains((java.lang.Object) jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21738");
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = com.google.common.collect.ImmutableList.of("JSDocInfo", "GETELEM", "NUMBER -1.0\n", "Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n", "NUMBER 1.0 37\n", "", "OR\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "", "(OR \n)", "OR\n    OR\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray21 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean31 = strList22.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean32 = strList22.isEmpty();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        boolean boolean42 = strList35.retainAll((java.util.Collection<java.lang.String>) strList40);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean57 = strList49.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.lang.String[] strArray59 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        boolean boolean71 = strList64.retainAll((java.util.Collection<java.lang.String>) strList69);
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        boolean boolean81 = strList74.retainAll((java.util.Collection<java.lang.String>) strList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList82 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList18, (java.util.List<java.lang.String>) strList22, (java.util.List<java.lang.String>) strList40, (java.util.List<java.lang.String>) strList49, (java.util.List<java.lang.String>) strList60, (java.util.List<java.lang.String>) strList64, (java.util.List<java.lang.String>) strList74);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        int int87 = strList18.indexOf((java.lang.Object) '4');
        java.util.Spliterator<java.lang.String> strSpliterator88 = strList18.spliterator();
        boolean boolean89 = strList11.contains((java.lang.Object) strSpliterator88);
        java.util.Spliterator<java.lang.String> strSpliterator90 = strList11.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = strList11.set(221184, "([OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component])");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strListList82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSpliterator90);
    }

    @Test
    public void test21739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21739");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str3 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test21740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21740");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node12.isParamList();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = new com.google.javascript.rhino.JSTypeExpression(node12, "OR [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node16 = node12.cloneTree();
        boolean boolean17 = node12.isSyntheticBlock();
        int int18 = node12.getLength();
        boolean boolean19 = node12.isVar();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21741");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.addSuppression("OR [synthetic: 1]");
        java.lang.String str6 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        java.lang.String str8 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        boolean boolean10 = jSDocInfo0.isExpose();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
    }

    @Test
    public void test21742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21742");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = strList2.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasBaseType();
        jSDocInfo4.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo4.getTypedefType();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo4.getReturnType();
        boolean boolean11 = jSDocInfo4.isJavaDispatch();
        boolean boolean12 = jSDocInfo4.isDeprecated();
        boolean boolean13 = jSDocInfo4.isNoShadow();
        boolean boolean14 = jSDocInfo4.isJavaDispatch();
        int int15 = strList2.lastIndexOf((java.lang.Object) jSDocInfo4);
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList2.asList();
        // The following exception was thrown during execution in test generation
        try {
            strList2.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test21743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21743");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        boolean boolean11 = jSDocInfo0.isExport();
        int int12 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test21744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21744");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean27 = node5.isSyntheticBlock();
        node5.setOptionalArg(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test21745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21745");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor34 = strList25.listIterator();
        int int35 = strList25.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList25.asList();
        java.lang.Object[] objArray37 = strList36.toArray();
        boolean boolean38 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList36);
        java.util.Spliterator<java.lang.String> strSpliterator39 = strList36.spliterator();
        java.lang.String[] strArray46 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        strSet47.clear();
        java.lang.Object[] objArray51 = strSet47.toArray();
        boolean boolean52 = strList36.containsAll((java.util.Collection<java.lang.String>) strSet47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = strList36.add("false");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test21746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21746");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList26.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor28 = strList27.listIterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasBaseType();
        jSDocInfo29.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo29.getTypedefType();
        boolean boolean34 = jSDocInfo29.isNoSideEffects();
        boolean boolean35 = jSDocInfo29.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo29.getThisType();
        boolean boolean38 = jSDocInfo29.hasParameter("[]");
        java.util.Collection<java.lang.String> strCollection39 = jSDocInfo29.getAuthors();
        jSDocInfo29.setDeprecated(false);
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = jSDocInfo29.getTemplateTypeNames();
        java.lang.String str43 = jSDocInfo29.toString();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo29.getSuppressions();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = strList27.removeAll((java.util.Collection<java.lang.String>) strSet44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(strCollection39);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JSDocInfo" + "'", str43, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test21747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21747");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = strList13.reverse();
        int int25 = strList13.size();
        java.util.Iterator<java.lang.String> strItor26 = strList13.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList13.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = strList27.remove(42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test21748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21748");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10);
        boolean boolean2 = node1.isFalse();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test21749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21749");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node3.getAncestors();
        boolean boolean11 = node3.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node3.setJSType(jSType12);
        node3.removeProp(40);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21750");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isExport();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        boolean boolean9 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21751");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        boolean boolean15 = node14.isLocalResultCall();
        java.lang.Object obj17 = node14.getProp(51);
        boolean boolean18 = node14.isWhile();
        boolean boolean19 = node14.isNot();
        boolean boolean20 = node14.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasBaseType();
        jSDocInfo21.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo21.setLicense("Not declared as a type name");
        boolean boolean27 = jSDocInfo21.shouldPreserveTry();
        jSDocInfo21.addSuppression("NUMBER 1.0 37\n");
        java.util.Collection<java.lang.String> strCollection30 = jSDocInfo21.getAuthors();
        node14.setJSDocInfo(jSDocInfo21);
        boolean boolean32 = node14.isTrue();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node14.setStaticSourceFile(staticSourceFile33);
        boolean boolean35 = node14.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strCollection30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test21752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21752");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getTypedefType();
        boolean boolean4 = jSDocInfo0.isConstructor();
        boolean boolean5 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test21753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21753");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition1.getPositionOnEndLine();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        boolean boolean16 = node11.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        com.google.javascript.rhino.Node node21 = node11.copyInformationFromForTree(node18);
        boolean boolean22 = node21.isAssignAdd();
        boolean boolean23 = node21.isRegExp();
        typePosition1.setItem(node21);
        node21.addSuppression("unknown");
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable27 = node21.getAncestors();
        int int28 = node21.getSourceOffset();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ancestorIterable27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test21754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21754");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isFalse();
        boolean boolean13 = node8.isParamList();
        com.google.javascript.rhino.Node node14 = node1.useSourceInfoIfMissingFrom(node8);
        node14.setLength(45);
        boolean boolean17 = node14.isStringKey();
        node14.setVarArgs(false);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node21.children();
        boolean boolean26 = node21.isVoid();
        boolean boolean27 = node21.isFor();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int33 = node32.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node39 = node37.getParent();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType46 = node41.getJSType();
        boolean boolean47 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = node39.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int54 = node53.getSideEffectFlags();
        com.google.javascript.rhino.Node node55 = node41.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder56 = node53.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node57 = node32.copyInformationFrom(node53);
        com.google.javascript.rhino.Node node58 = node21.useSourceInfoIfMissingFromForTree(node53);
        node14.addChildToBack(node53);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        node61.setStaticSourceFile(staticSourceFile64);
        boolean boolean66 = node61.isComma();
        boolean boolean67 = node61.isFalse();
        boolean boolean68 = node61.isSwitch();
        node61.setSourceEncodedPosition(47);
        node61.detachChildren();
        boolean boolean72 = node53.isEquivalentTo(node61);
        com.google.javascript.rhino.Node node73 = node53.cloneNode();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test21755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21755");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isFalse();
        boolean boolean14 = node9.isParamList();
        node1.addChildToFront(node9);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isDefaultCase();
        com.google.javascript.rhino.Node node23 = node17.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = node9.checkTreeEquals(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test21756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21756");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.hasBaseType();
        jSDocInfo1.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo1.getBaseType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo1.getParameterNames();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        int int12 = node8.getCharno();
        boolean boolean13 = node8.isContinue();
        boolean boolean14 = strSet6.equals((java.lang.Object) node8);
        boolean boolean15 = node8.isSetterDef();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        node17.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node26.children();
        com.google.javascript.rhino.InputId inputId31 = null;
        node26.setInputId(inputId31);
        boolean boolean33 = node26.isName();
        java.lang.String str34 = node17.checkTreeEquals(node26);
        boolean boolean35 = node26.isInc();
        com.google.javascript.rhino.Node node36 = node8.srcrefTree(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean39 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = node8.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node41 = node8.removeFirstChild();
        java.lang.Object obj43 = node8.getProp((int) (short) 1);
        boolean boolean44 = node8.isBlock();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 0, node8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str34, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test21757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21757");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21758");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        boolean boolean8 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node19 = node15.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node10.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFrom(node15);
        node22.detachChildren();
        boolean boolean24 = node22.isParamList();
        boolean boolean25 = node22.isBlock();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 0);
        boolean boolean28 = node27.isGetProp();
        boolean boolean29 = node27.isAnd();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        int int35 = node31.getCharno();
        boolean boolean36 = node31.isName();
        boolean boolean37 = node31.isDefaultCase();
        boolean boolean38 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        int int44 = node40.getCharno();
        boolean boolean45 = node40.isName();
        boolean boolean46 = node40.isNE();
        boolean boolean47 = node40.isEmpty();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node49.addSuppression("");
        java.lang.String str52 = node49.toString();
        boolean boolean53 = node49.hasChildren();
        com.google.javascript.rhino.Node node54 = node40.srcrefTree(node49);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node56.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        node56.setStaticSourceFile(staticSourceFile59);
        boolean boolean61 = node56.isComma();
        boolean boolean62 = node56.isBlock();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = node64.cloneNode();
        com.google.javascript.rhino.Node node66 = node56.copyInformationFromForTree(node65);
        int int67 = node65.getLength();
        int int68 = node40.getIndexOfChild(node65);
        com.google.javascript.rhino.Node node69 = node65.removeChildren();
        com.google.javascript.rhino.Node node70 = node31.clonePropsFrom(node65);
        boolean boolean71 = node65.isName();
        com.google.javascript.rhino.Node node72 = node27.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, 35, 39);
        com.google.javascript.rhino.Node node77 = node72.useSourceInfoIfMissingFromForTree(node76);
        com.google.javascript.rhino.Node node78 = node72.getLastChild();
        boolean boolean79 = node72.isString();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node81.addSuppression("");
        java.lang.String str84 = node81.toString();
        com.google.javascript.rhino.Node node85 = node81.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile86 = node81.getStaticSourceFile();
        boolean boolean87 = node81.isLocalResultCall();
        boolean boolean88 = node81.isArrayLit();
        boolean boolean89 = node81.isAssign();
        java.lang.String str93 = node81.toString(false, true, false);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile94 = null;
        node81.setStaticSourceFile(staticSourceFile94);
        boolean boolean97 = node81.getBooleanProp(4095);
        com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node(32, node22, node72, node81);
        int int99 = node22.getChildCount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str52, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str84, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNull(staticSourceFile86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str93, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test21759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21759");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(46);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        java.lang.String str6 = node3.toString();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        com.google.javascript.rhino.Node node12 = node10.getParent();
        com.google.javascript.rhino.Node node13 = node3.useSourceInfoFromForTree(node10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        int int19 = node15.getCharno();
        boolean boolean20 = node15.isName();
        boolean boolean21 = node15.isNE();
        boolean boolean22 = node15.isLabelName();
        boolean boolean23 = node10.isEquivalentToTyped(node15);
        java.util.Set<java.lang.String> strSet24 = node10.getDirectives();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean29 = node28.isRegExp();
        boolean boolean30 = node28.isName();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node28.setJSType(jSType31);
        boolean boolean33 = node28.isBreak();
        boolean boolean34 = node10.isEquivalentTo(node28);
        com.google.javascript.rhino.Node node35 = node28.cloneNode();
        java.lang.String str39 = node28.toString(false, true, true);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node1.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 0);
        boolean boolean44 = node43.isGetProp();
        boolean boolean45 = node43.hasChildren();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        int int52 = node49.getLength();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        node49.addChildrenToFront(node54);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node59.setStaticSourceFile(staticSourceFile62);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node65.addSuppression("");
        java.lang.String str68 = node65.toString();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        com.google.javascript.rhino.Node node74 = node72.getParent();
        com.google.javascript.rhino.Node node75 = node65.useSourceInfoFromForTree(node72);
        boolean boolean76 = node59.hasChild(node65);
        boolean boolean77 = node59.isStringKey();
        com.google.javascript.rhino.Node node78 = node49.useSourceInfoFromForTree(node59);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node80.addSuppression("");
        com.google.javascript.rhino.Node node83 = node78.copyInformationFromForTree(node80);
        boolean boolean84 = node43.isEquivalentToTyped(node83);
        com.google.javascript.rhino.Node node85 = node28.useSourceInfoIfMissingFromForTree(node83);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str6, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 4.0" + "'", str39, "NUMBER 4.0");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str68, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test21760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21760");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        boolean boolean7 = node2.isVoid();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        boolean boolean41 = node9.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(49, node2, node9, 0, (int) '4');
        boolean boolean45 = node44.isAssign();
        node44.setWasEmptyNode(true);
        node44.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test21761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21761");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.util.Iterator<java.lang.String> strItor24 = strList13.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor25 = strList13.iterator();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList13.replaceAll(strUnaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
    }

    @Test
    public void test21762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21762");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("((OR))");
        boolean boolean9 = jSDocInfo0.hasParameter("");
        boolean boolean10 = jSDocInfo0.isImplicitCast();
        boolean boolean12 = jSDocInfo0.hasParameterType("Unknown class name");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean27 = jSTypeExpression23.equals((java.lang.Object) visibility26);
        jSDocInfo0.setVisibility(visibility26);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo0.getReturnType();
        boolean boolean30 = jSDocInfo0.hasModifies();
        boolean boolean32 = jSDocInfo0.hasParameter("()");
        boolean boolean33 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test21763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21763");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node1.getAncestors();
        boolean boolean20 = node1.isNot();
        node1.putBooleanProp((int) (short) 1, false);
        java.lang.String str24 = node1.getQualifiedName();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test21764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21764");
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = com.google.common.collect.ImmutableList.of("OR [jsdoc_info: JSDocInfo]\n", "(unknown)", "(Unknown class name)");
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str5 = jSDocInfo4.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo4.getTemplateTypeNames();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        com.google.javascript.rhino.Node node12 = node10.getParent();
        node10.setIsSyntheticBlock(true);
        boolean boolean15 = node10.isContinue();
        int int16 = strList6.indexOf((java.lang.Object) boolean15);
        boolean boolean17 = strList3.containsAll((java.util.Collection<java.lang.String>) strList6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = strList6.set(0, "(INSTANCEOF 6 [jsdoc_info: JSDocInfo]\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test21765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21765");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo0.getType();
        boolean boolean29 = jSDocInfo0.isExterns();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo0.getSuppressions();
        boolean boolean32 = jSDocInfo0.hasParameter("OR");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo0.getTypedefType();
        boolean boolean34 = jSDocInfo0.isDeprecated();
        jSDocInfo0.addSuppression("NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test21766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21766");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        jSDocInfo0.setLicense("(Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR NUMBER 1.0 37\n 29\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR NUMBER 1.0 37\n 29\n)");
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("(OR [synthetic: 1])");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
    }

    @Test
    public void test21767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21767");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder2 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder4 = nodeArrayBuilder2.add(nodeArray3);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray3);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(44, nodeArray3, (int) (short) 100, 51);
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArrayBuilder4);
    }

    @Test
    public void test21768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21768");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition24 = marker1.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker1.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = marker1.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition27 = marker1.getNameNode();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(nodeSourcePosition24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(typePosition26);
        org.junit.Assert.assertNull(nodeSourcePosition27);
    }

    @Test
    public void test21769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21769");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isVarArgs();
        boolean boolean8 = node1.isDebugger();
        boolean boolean9 = node1.isDefaultCase();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21770");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str6 = ternaryValue5.toString();
        boolean boolean8 = ternaryValue5.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue2.and(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue0.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean14 = ternaryValue12.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean17 = ternaryValue15.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str19 = ternaryValue18.toString();
        boolean boolean21 = ternaryValue18.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue15.and(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue12.and(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.xor(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue27.xor(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue25.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean33 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str38 = ternaryValue37.toString();
        boolean boolean40 = ternaryValue37.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue34.and(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue31.and(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue31.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue30.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue12.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue9.and(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "unknown" + "'", str6, "unknown");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "unknown" + "'", str19, "unknown");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "unknown" + "'", str38, "unknown");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
    }

    @Test
    public void test21771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21771");
        java.lang.String[] strArray1 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.Iterator<java.lang.String> strItor5 = strList2.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean8 = ternaryValue6.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str10 = ternaryValue9.toString();
        boolean boolean12 = ternaryValue9.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue6.and(ternaryValue9);
        boolean boolean14 = strList2.contains((java.lang.Object) ternaryValue6);
        strList2.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo16.isNoShadow();
        java.lang.String str18 = jSDocInfo16.getMeaning();
        com.google.javascript.rhino.Node node19 = jSDocInfo16.getAssociatedNode();
        java.lang.String str20 = jSDocInfo16.getLicense();
        java.lang.String str21 = jSDocInfo16.getSourceName();
        jSDocInfo16.setLicense("((OR))");
        boolean boolean25 = jSDocInfo16.hasParameter("");
        boolean boolean26 = jSDocInfo16.isImplicitCast();
        boolean boolean28 = jSDocInfo16.hasParameterType("Unknown class name");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        int int34 = node30.getCharno();
        boolean boolean35 = node30.isName();
        boolean boolean36 = node30.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node30, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression38);
        com.google.javascript.rhino.Node node40 = jSTypeExpression39.getRoot();
        boolean boolean41 = jSTypeExpression39.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean43 = jSTypeExpression39.equals((java.lang.Object) visibility42);
        jSDocInfo16.setVisibility(visibility42);
        java.util.Set<java.lang.String> strSet45 = jSDocInfo16.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.hasTypedefType();
        java.lang.String str48 = jSDocInfo46.toString();
        boolean boolean50 = jSDocInfo46.hasParameterType("Unknown class name");
        jSDocInfo46.setLicense("(Unknown class name)");
        boolean boolean53 = jSDocInfo46.containsDeclaration();
        boolean boolean54 = strSet45.equals((java.lang.Object) jSDocInfo46);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node56.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        node56.setStaticSourceFile(staticSourceFile59);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node62.addSuppression("");
        java.lang.String str65 = node62.toString();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        com.google.javascript.rhino.Node node71 = node69.getParent();
        com.google.javascript.rhino.Node node72 = node62.useSourceInfoFromForTree(node69);
        boolean boolean73 = node56.hasChild(node62);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node75.addSuppression("");
        java.lang.String str78 = node75.toString();
        int int79 = node75.getChildCount();
        boolean boolean80 = node75.isGetProp();
        boolean boolean81 = node56.isEquivalentTo(node75);
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean83 = jSDocInfo82.hasTypedefType();
        java.lang.String str84 = jSDocInfo82.toString();
        boolean boolean86 = jSDocInfo82.hasParameterType("Unknown class name");
        boolean boolean87 = jSDocInfo82.isIdGenerator();
        node56.setJSDocInfo(jSDocInfo82);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList89 = jSDocInfo82.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList90 = jSDocInfo82.getThrownTypes();
        boolean boolean91 = strSet45.contains((java.lang.Object) jSDocInfo82);
        boolean boolean92 = jSDocInfo82.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet93 = jSDocInfo82.getParameterNames();
        boolean boolean94 = strList2.retainAll((java.util.Collection<java.lang.String>) strSet93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = strList2.set(27, "BITXOR");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 27, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "unknown" + "'", str10, "unknown");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JSDocInfo" + "'", str48, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str65, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str78, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "JSDocInfo" + "'", str84, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList89);
        org.junit.Assert.assertNotNull(jSTypeExpressionList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test21772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21772");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n", (int) '#', (int) (short) 1);
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(jSType4);
    }

    @Test
    public void test21773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21773");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isNot();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = node8.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isExprResult();
        boolean boolean17 = node15.isDefaultCase();
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node29 = node27.getParent();
        com.google.javascript.rhino.Node node30 = node20.useSourceInfoFromForTree(node27);
        boolean boolean31 = node30.isSetterDef();
        com.google.javascript.rhino.Node node32 = node30.getLastChild();
        boolean boolean33 = node30.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node34 = node15.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean35 = node15.hasMoreThanOneChild();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test21774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21774");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        boolean boolean11 = strSet7.isEmpty();
        java.lang.Object[] objArray12 = strSet7.toArray();
        boolean boolean14 = strSet7.add("[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasBaseType();
        jSDocInfo15.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo15.getTypedefType();
        boolean boolean20 = jSDocInfo15.isNoSideEffects();
        com.google.javascript.rhino.Node node21 = jSDocInfo15.getAssociatedNode();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo15.getSuppressions();
        strSet22.clear();
        int int24 = strSet22.size();
        strSet22.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.isNoShadow();
        boolean boolean28 = jSDocInfo26.isNoShadow();
        boolean boolean29 = jSDocInfo26.hasModifies();
        boolean boolean30 = jSDocInfo26.isExterns();
        boolean boolean31 = jSDocInfo26.hasType();
        boolean boolean32 = jSDocInfo26.isHidden();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo26.getModifies();
        boolean boolean34 = strSet33.isEmpty();
        boolean boolean35 = strSet22.addAll((java.util.Collection<java.lang.String>) strSet33);
        strSet22.clear();
        boolean boolean37 = strSet7.contains((java.lang.Object) strSet22);
        java.lang.Object[] objArray38 = strSet22.toArray();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
    }

    @Test
    public void test21775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21775");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node11 = node9.getParent();
        com.google.javascript.rhino.Node node12 = node2.useSourceInfoFromForTree(node9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        boolean boolean21 = node14.isIn();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        boolean boolean28 = node27.isDefaultCase();
        int int29 = node14.getIndexOfChild(node27);
        node14.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node32 = node12.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node34.siblings();
        int int36 = node34.getSourcePosition();
        boolean boolean37 = node34.isDefaultCase();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(47, node32, node34, 6, 37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node46 = node42.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node42.getStaticSourceFile();
        boolean boolean48 = node42.isLocalResultCall();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node59.children();
        com.google.javascript.rhino.InputId inputId64 = null;
        node59.setInputId(inputId64);
        boolean boolean66 = node59.isName();
        java.lang.String str67 = node50.checkTreeEquals(node59);
        boolean boolean68 = node59.isInc();
        node59.setType((int) (short) -1);
        node42.addChildrenToFront(node59);
        boolean boolean72 = node59.isCatch();
        node59.setCharno(52);
        com.google.javascript.rhino.Node node75 = node32.useSourceInfoFrom(node59);
        boolean boolean76 = node32.isUnscopedQualifiedName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str45, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str67, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test21776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21776");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        boolean boolean19 = node2.hasChild(node8);
        boolean boolean20 = node8.isNot();
        node8.addSuppression("Not declared as a type name");
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(35, node8);
        java.util.Set<java.lang.String> strSet24 = node8.getDirectives();
        node8.removeProp(37);
        node8.setSourceFileForTesting("OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node30.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node30.getStaticSourceFile();
        boolean boolean36 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node47 = node43.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node node49 = node38.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node50 = node30.useSourceInfoFrom(node43);
        boolean boolean51 = node43.isWhile();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node55.isLabel();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        boolean boolean66 = node62.isNot();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = node62.copyInformationFromForTree(node68);
        com.google.javascript.rhino.InputId inputId70 = node62.getInputId();
        com.google.javascript.rhino.Node node71 = node62.getNext();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node73.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = null;
        node73.setStaticSourceFile(staticSourceFile76);
        boolean boolean78 = node73.isComma();
        boolean boolean79 = node73.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList80 = com.google.common.collect.ImmutableList.of(node43, node55, node60, node62, node73);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100);
        node82.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = null;
        node82.setStaticSourceFile(staticSourceFile85);
        com.google.javascript.rhino.Node node87 = node62.copyInformationFromForTree(node82);
        node62.setVarArgs(false);
        boolean boolean90 = node8.isEquivalentToTyped(node62);
        node62.putBooleanProp((-1), true);
        boolean boolean94 = node62.isLabel();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str33, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str46, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(inputId70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeList80);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test21777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21777");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition0.setPositionInformation((int) '#', 44, 51, 50);
        int int13 = stringPosition0.getEndLine();
        stringPosition0.setItem("Unknown class name");
        int int16 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("(OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n)");
        int int19 = stringPosition0.getStartLine();
        int int20 = stringPosition0.getStartLine();
        int int21 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
    }

    @Test
    public void test21778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21778");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasBaseType();
        java.lang.String str8 = jSDocInfo6.getFileOverview();
        boolean boolean9 = jSDocInfo6.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo6.getExtendedInterfaces();
        int int11 = strList5.indexOf((java.lang.Object) jSDocInfo6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = strList5.add("Node tree inequality:\nTree1:\nASSIGN_MOD\n    OR [jsdoc_info: JSDocInfo]\n        ERROR\n            OR\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: ASSIGN_MOD\n    OR [jsdoc_info: JSDocInfo]\n        ERROR\n            OR\n\n\nSubtree2: NUMBER -1.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test21779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21779");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        boolean boolean14 = node9.isName();
        boolean boolean15 = node9.isNE();
        boolean boolean16 = node9.isIn();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        boolean boolean23 = node22.isDefaultCase();
        int int24 = node9.getIndexOfChild(node22);
        boolean boolean25 = node22.isLabelName();
        boolean boolean26 = node1.isEquivalentTo(node22);
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean32 = node31.isName();
        node31.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node35 = node22.useSourceInfoIfMissingFrom(node31);
        boolean boolean36 = node22.isDefaultCase();
        boolean boolean37 = node22.wasEmptyNode();
        node22.addSuppression("OR [jsdoc_info: JSDocInfo]");
        node22.putBooleanProp(53, false);
        boolean boolean43 = node22.hasChildren();
        boolean boolean44 = node22.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test21780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21780");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = strList2.reverse();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        boolean boolean9 = node5.isReturn();
        com.google.javascript.rhino.InputId inputId10 = node5.getInputId();
        boolean boolean11 = node5.isArrayLit();
        boolean boolean12 = node5.isInc();
        boolean boolean13 = node5.isAssign();
        java.lang.String str14 = node5.getSourceFileName();
        int int15 = strList3.lastIndexOf((java.lang.Object) node5);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isReturn();
        com.google.javascript.rhino.InputId inputId22 = node17.getInputId();
        boolean boolean23 = node17.isAdd();
        boolean boolean24 = node17.isQuotedString();
        node5.addChildToFront(node17);
        int int26 = node17.getSourceOffset();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test21781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21781");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = strList6.reverse();
        java.lang.Object[] objArray73 = strList72.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strList72.add(7, "OR 52");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
    }

    @Test
    public void test21782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21782");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor17 = strList6.iterator();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.intersection(booleanLiteralSet19);
        int int21 = strList6.lastIndexOf((java.lang.Object) booleanLiteralSet20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node32 = node28.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node34 = node23.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node36.setStaticSourceFile(staticSourceFile39);
        boolean boolean41 = node36.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isNot();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = node43.copyInformationFromForTree(node49);
        boolean boolean51 = node50.isExprResult();
        boolean boolean52 = node50.isDefaultCase();
        node36.addChildrenToBack(node50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        com.google.javascript.rhino.Node node65 = node55.useSourceInfoFromForTree(node62);
        boolean boolean66 = node65.isSetterDef();
        com.google.javascript.rhino.Node node67 = node65.getLastChild();
        boolean boolean68 = node65.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node69 = node50.useSourceInfoIfMissingFromForTree(node65);
        int int70 = node34.getIndexOfChild(node69);
        int int71 = strList6.indexOf((java.lang.Object) node34);
        boolean boolean72 = node34.wasEmptyNode();
        com.google.javascript.rhino.Node node73 = node34.getLastSibling();
        java.lang.String str74 = node73.getSourceFileName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable75 = node73.getAncestors();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str58, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(ancestorIterable75);
    }

    @Test
    public void test21783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21783");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
    }

    @Test
    public void test21784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21784");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        java.lang.Object[] objArray16 = strList6.toArray();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        boolean boolean28 = node23.isIf();
        com.google.javascript.rhino.Node node29 = node20.copyInformationFromForTree(node23);
        boolean boolean30 = strList6.contains((java.lang.Object) node29);
        boolean boolean31 = strList6.isEmpty();
        java.lang.Object[] objArray32 = strList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = strList6.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean35 = jSDocInfo34.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo34.getImplementedInterfaces();
        boolean boolean38 = jSDocInfo34.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = jSDocInfo34.getTemplateTypeNames();
        java.lang.String[] strArray46 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        strSet47.clear();
        boolean boolean51 = strList39.containsAll((java.util.Collection<java.lang.String>) strSet47);
        java.util.stream.Stream<java.lang.String> strStream52 = strSet47.stream();
        boolean boolean54 = strSet47.add("unknown");
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        boolean boolean64 = strList57.retainAll((java.util.Collection<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.String>> strCollectionList65 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList66 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strList62);
        boolean boolean67 = strList33.containsAll((java.util.Collection<java.lang.String>) strSet47);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor68 = strList33.iterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strCollectionList65);
        org.junit.Assert.assertNotNull(strCollectionList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strItor68);
    }

    @Test
    public void test21785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21785");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("NUMBER 1.0 37\n");
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.isConstructor();
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test21786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21786");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        boolean boolean7 = node1.isFunction();
        boolean boolean8 = node1.isThrow();
        int int9 = node1.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node1.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jSDocInfo10);
    }

    @Test
    public void test21787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21787");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isFalse();
        boolean boolean9 = node2.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        boolean boolean12 = node11.isParamList();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isBreak();
        node16.setLineno(50);
        boolean boolean21 = node16.isDebugger();
        boolean boolean22 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(5, node2, node11, node16);
        boolean boolean24 = node23.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test21788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21788");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("Named type with empty name component");
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("(OR 0\n)");
        boolean boolean11 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21789");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node24.isFor();
        node24.setSourceEncodedPosition(40);
        node24.putIntProp(43, 31);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isTypeOf();
        boolean boolean45 = node40.isOnlyModifiesThisCall();
        boolean boolean46 = node40.isDelProp();
        boolean boolean47 = node40.hasChildren();
        boolean boolean48 = node40.isThis();
        boolean boolean49 = node40.isQuotedString();
        com.google.javascript.rhino.Node node50 = node24.useSourceInfoFromForTree(node40);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node24, "RETURN ()\n");
        boolean boolean53 = jSTypeExpression52.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression54);
    }

    @Test
    public void test21790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21790");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        java.util.Iterator<java.lang.String> strItor54 = strList43.iterator();
        boolean boolean55 = strList13.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition56 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int57 = stringPosition56.getStartLine();
        stringPosition56.setItem("(NUMBER 1.0 37\n)");
        stringPosition56.setItem("(OR)");
        int int62 = strList13.lastIndexOf((java.lang.Object) "(OR)");
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = strList13.asList();
        java.util.ListIterator<java.lang.String> strItor65 = strList63.listIterator((int) (byte) 0);
        java.lang.Object[] objArray66 = strList63.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList67 = strList63.reverse();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList67);
    }

    @Test
    public void test21791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21791");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node15.isDec();
        boolean boolean24 = node15.hasOneChild();
        boolean boolean25 = node15.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str27 = jSDocInfo26.getFileOverview();
        java.lang.String str28 = jSDocInfo26.getFileOverview();
        boolean boolean29 = jSDocInfo26.isConstant();
        jSDocInfo26.setDeprecated(true);
        boolean boolean32 = jSDocInfo26.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo26.getTemplateTypeNames();
        boolean boolean35 = jSDocInfo26.hasParameterType("OR");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo26.getBaseType();
        boolean boolean37 = jSDocInfo26.isNoCompile();
        node15.setJSDocInfo(jSDocInfo26);
        boolean boolean39 = node15.isTry();
        boolean boolean40 = node15.isEmpty();
        node15.setLineno(51);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test21792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21792");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test21793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21793");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isInterface();
        java.lang.String str5 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(strCollection7);
    }

    @Test
    public void test21794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21794");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet2.union(booleanLiteralSet4);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet7.union(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet11.union(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet7.union(booleanLiteralSet11);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet4.union(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet1.union(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet17.union(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet22.union(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet26.union(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet22.union(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet19.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet30.union(booleanLiteralSet32);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet34.union(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = booleanLiteralSet32.union(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean41 = booleanLiteralSet39.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet42.intersection(booleanLiteralSet43);
        boolean boolean46 = booleanLiteralSet44.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet39.intersection(booleanLiteralSet44);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet32.intersection(booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet50.union(booleanLiteralSet51);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet53.union(booleanLiteralSet55);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet52.union(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet58.union(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = booleanLiteralSet63.union(booleanLiteralSet64);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = booleanLiteralSet67.union(booleanLiteralSet68);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = booleanLiteralSet63.union(booleanLiteralSet67);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = booleanLiteralSet60.union(booleanLiteralSet70);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = booleanLiteralSet52.union(booleanLiteralSet70);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY;
        boolean boolean75 = booleanLiteralSet73.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = booleanLiteralSet52.intersection(booleanLiteralSet73);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = booleanLiteralSet48.intersection(booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = booleanLiteralSet16.union(booleanLiteralSet76);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test21795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21795");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isFalse();
        boolean boolean17 = node7.isSwitch();
        com.google.javascript.rhino.Node node18 = node7.getLastChild();
        com.google.javascript.rhino.Node node19 = node18.getNext();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test21796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21796");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean28 = strList20.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList20.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList20.asList();
        boolean boolean31 = strSet5.contains((java.lang.Object) strList30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        int int38 = node35.getLength();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        node35.addChildrenToFront(node40);
        boolean boolean44 = strList30.contains((java.lang.Object) node35);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList30.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.hasBaseType();
        jSDocInfo46.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo46.setLicense("Not declared as a type name");
        boolean boolean52 = jSDocInfo46.shouldPreserveTry();
        jSDocInfo46.addSuppression("NUMBER 1.0 37\n");
        boolean boolean55 = jSDocInfo46.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo46.getBaseType();
        boolean boolean57 = jSDocInfo46.isNoAlias();
        jSDocInfo46.setDeprecated(false);
        boolean boolean60 = strList30.equals((java.lang.Object) jSDocInfo46);
        java.util.Collection<java.lang.String> strCollection61 = jSDocInfo46.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strCollection61);
    }

    @Test
    public void test21797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21797");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = node9.cloneNode();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node10);
        node1.setType((int) '4');
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        int int19 = node17.getType();
        boolean boolean20 = node17.isOptionalArg();
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node17);
        boolean boolean22 = node1.isSwitch();
        int int23 = node1.getLineno();
        com.google.javascript.rhino.Node node24 = node1.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = node24.isIn();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test21798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21798");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        boolean boolean11 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getThrownTypes();
        boolean boolean13 = jSDocInfo0.isJavaDispatch();
        boolean boolean14 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo0.getVisibility();
        java.lang.String str16 = jSDocInfo0.getVersion();
        boolean boolean18 = jSDocInfo0.hasParameter("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(visibility15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21799");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node12.isParamList();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = new com.google.javascript.rhino.JSTypeExpression(node12, "OR [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node16 = jSTypeExpression15.getRoot();
        com.google.javascript.rhino.Node node17 = jSTypeExpression15.getRoot();
        boolean boolean18 = node17.hasMoreThanOneChild();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21800");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo0.getType();
        boolean boolean29 = jSDocInfo0.isExterns();
        java.lang.String str30 = jSDocInfo0.getDeprecationReason();
        java.lang.String str31 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(jSTypeExpression32);
    }

    @Test
    public void test21801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21801");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isBlock();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = node10.cloneNode();
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node11);
        boolean boolean13 = node2.isNew();
        node2.setSourceEncodedPositionForTree(41);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(50, node2, (int) (byte) 10, 48);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node2.setStaticSourceFile(staticSourceFile19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node2.siblings();
        boolean boolean22 = node2.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test21802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21802");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("((OR))");
        boolean boolean9 = jSDocInfo0.hasParameter("");
        boolean boolean10 = jSDocInfo0.isImplicitCast();
        boolean boolean12 = jSDocInfo0.hasParameterType("Unknown class name");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean27 = jSTypeExpression23.equals((java.lang.Object) visibility26);
        jSDocInfo0.setVisibility(visibility26);
        java.util.Set<java.lang.String> strSet29 = jSDocInfo0.getSuppressions();
        boolean boolean30 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo0.getTypedefType();
        java.lang.String str33 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JSDocInfo" + "'", str33, "JSDocInfo");
    }

    @Test
    public void test21803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21803");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isIf();
        boolean boolean8 = node2.isInstanceOf();
        java.lang.String str9 = node2.getQualifiedName();
        boolean boolean10 = node2.isTypeOf();
        boolean boolean11 = node2.isSetterDef();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(41004, node2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21804");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean4 = node3.isRegExp();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = node6.cloneNode();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        com.google.javascript.rhino.Node node41 = node7.copyInformationFrom(node32);
        node41.putIntProp((int) ' ', 45);
        java.lang.String str45 = node3.checkTreeEquals(node41);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        boolean boolean51 = node47.isTypeOf();
        boolean boolean52 = node47.wasEmptyNode();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isTypeOf();
        boolean boolean59 = node54.isDelProp();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        com.google.javascript.rhino.Node node65 = node63.getParent();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node63.setJSType(jSType66);
        java.lang.String str68 = node63.toString();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node70.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = null;
        node70.setStaticSourceFile(staticSourceFile73);
        boolean boolean75 = node70.isComma();
        node70.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList78 = com.google.common.collect.ImmutableList.of(node47, node54, node63, node70);
        boolean boolean79 = node70.isFor();
        node70.setSourceEncodedPosition(40);
        node70.putIntProp(43, 31);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(100);
        node86.addChildrenToFront(node88);
        boolean boolean90 = node86.isTypeOf();
        boolean boolean91 = node86.isOnlyModifiesThisCall();
        boolean boolean92 = node86.isDelProp();
        boolean boolean93 = node86.hasChildren();
        boolean boolean94 = node86.isThis();
        boolean boolean95 = node86.isQuotedString();
        com.google.javascript.rhino.Node node96 = node70.useSourceInfoFromForTree(node86);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable97 = node96.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            node41.removeChild(node96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n" + "'", str45, "Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "OR" + "'", str68, "OR");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(ancestorIterable97);
    }

    @Test
    public void test21805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21805");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getDescription();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.lang.Object[] objArray11 = strList10.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test21806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21806");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        node21.detachChildren();
        boolean boolean23 = node21.isQuotedString();
        boolean boolean24 = node21.isLabelName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test21807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21807");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        java.lang.String str7 = node1.toStringTree();
        boolean boolean8 = node1.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (short) 10);
        com.google.javascript.rhino.InputId inputId11 = null;
        node10.setInputId(inputId11);
        node1.addChildToFront(node10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node19 = node15.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node15.getStaticSourceFile();
        boolean boolean21 = node15.isLocalResultCall();
        node15.setVarArgs(true);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node30.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node25.copyInformationFromForTree(node30);
        boolean boolean37 = node30.isAssignAdd();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isTypeOf();
        boolean boolean44 = node39.isVarArgs();
        boolean boolean45 = node39.isIn();
        node30.addChildToFront(node39);
        node15.addChildrenToBack(node30);
        boolean boolean48 = node30.isVarArgs();
        com.google.javascript.rhino.Node node49 = node10.clonePropsFrom(node30);
        com.google.javascript.rhino.Node node50 = node10.detachFromParent();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR\n    OR\n" + "'", str7, "OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str33, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test21808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21808");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = node15.getAncestor(0);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        int int24 = node22.getType();
        com.google.javascript.rhino.InputId inputId25 = node22.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = null;
        node22.setJSDocInfo(jSDocInfo26);
        boolean boolean28 = node22.isDo();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        boolean boolean35 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.Node node40 = node30.copyInformationFromForTree(node37);
        java.lang.Object obj42 = node40.getProp(38);
        com.google.javascript.rhino.Node node43 = node22.srcrefTree(node40);
        node17.putProp(6, (java.lang.Object) node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.hasBaseType();
        jSDocInfo45.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo45.getBaseType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        int int56 = node52.getCharno();
        boolean boolean57 = node52.isContinue();
        boolean boolean58 = strSet50.equals((java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        node62.setIsSyntheticBlock(true);
        boolean boolean67 = node62.isContinue();
        boolean boolean68 = strSet50.equals((java.lang.Object) node62);
        java.lang.Object[] objArray69 = strSet50.toArray();
        java.lang.Object[] objArray70 = strSet50.toArray();
        node22.setDirectives(strSet50);
        java.util.stream.Stream<java.lang.String> strStream72 = strSet50.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator73 = strSet50.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator74 = strSet50.spliterator();
        boolean boolean75 = strSet50.isEmpty();
        java.lang.Object[] objArray76 = strSet50.toArray();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
    }

    @Test
    public void test21809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21809");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(29);
        int int2 = sideEffectFlags1.valueOf();
        int int3 = sideEffectFlags1.valueOf();
        int int4 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 29 + "'", int2 == 29);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 29 + "'", int3 == 29);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 29 + "'", int4 == 29);
    }

    @Test
    public void test21810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21810");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.addSuppression("(OR \n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags14 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags14.setThrows();
        sideEffectFlags14.clearAllFlags();
        int int17 = strList13.indexOf((java.lang.Object) sideEffectFlags14);
        int int18 = sideEffectFlags14.valueOf();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test21811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21811");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        int int6 = jSDocInfo0.getParameterCount();
        java.lang.String str7 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("(OR 0\n)");
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test21812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21812");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = strList6.reverse();
        java.lang.String str73 = strList72.toString();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]" + "'", str73, "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
    }

    @Test
    public void test21813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21813");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        int int12 = node3.getType();
        boolean boolean13 = node3.isNot();
        boolean boolean14 = node3.isIf();
        boolean boolean15 = node3.isRegExp();
        boolean boolean16 = node3.isQualifiedName();
        boolean boolean17 = node3.isStringKey();
        int int18 = node3.getChildCount();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test21814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21814");
        java.lang.String[] strArray3 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        int int13 = strList4.indexOf((java.lang.Object) boolean12);
        java.lang.Object[] objArray14 = strList4.toArray();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node16.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node16.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.children();
        boolean boolean23 = node16.isObjectLit();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isReturn();
        com.google.javascript.rhino.InputId inputId30 = node25.getInputId();
        boolean boolean31 = node25.isArrayLit();
        boolean boolean32 = node25.isInc();
        com.google.javascript.rhino.Node node33 = node16.srcrefTree(node25);
        boolean boolean34 = strList4.equals((java.lang.Object) node33);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node36.getStaticSourceFile();
        boolean boolean42 = node36.isLocalResultCall();
        boolean boolean43 = node36.isArrayLit();
        boolean boolean44 = node36.isCase();
        com.google.javascript.rhino.Node node45 = node33.copyInformationFrom(node36);
        boolean boolean46 = node45.isReturn();
        node45.setLength(41);
        boolean boolean49 = node45.isIf();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100, node45, 40999, 44);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[OR [jsdoc_info: JSDocInfo], OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test21815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21815");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean14 = strSet7.equals((java.lang.Object) 1.0d);
        java.util.stream.Stream<java.lang.String> strStream15 = strSet7.parallelStream();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setIsSyntheticBlock(true);
        int int24 = node19.getType();
        boolean boolean25 = node19.isObjectLit();
        boolean boolean26 = node19.isCase();
        boolean boolean27 = strSet7.equals((java.lang.Object) boolean26);
        java.util.stream.Stream<java.lang.String> strStream28 = strSet7.stream();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strStream28);
    }

    @Test
    public void test21816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21816");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        boolean boolean4 = jSDocInfo0.isDefine();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        jSDocInfo0.setLicense("(OR 0)");
        boolean boolean13 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21817");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo0.getType();
        boolean boolean29 = jSDocInfo0.isExterns();
        java.lang.String str30 = jSDocInfo0.getDeprecationReason();
        java.util.Collection<java.lang.String> strCollection31 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strCollection31);
    }

    @Test
    public void test21818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21818");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int6 = node5.getSideEffectFlags();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node13.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node8.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node5, node8, (int) '4', (int) (byte) 100);
        java.lang.String str23 = node8.getQualifiedName();
        node8.setCharno(50);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test21819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21819");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        node21.detachChildren();
        boolean boolean23 = node21.isSyntheticBlock();
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        node26.setStaticSourceFile(staticSourceFile29);
        boolean boolean31 = node26.isComma();
        node26.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node35.children();
        com.google.javascript.rhino.InputId inputId40 = null;
        node35.setInputId(inputId40);
        boolean boolean42 = node35.isName();
        java.lang.String str43 = node26.checkTreeEquals(node35);
        com.google.javascript.rhino.InputId inputId44 = node26.getInputId();
        boolean boolean45 = node26.hasMoreThanOneChild();
        boolean boolean46 = node26.isCall();
        boolean boolean47 = node21.isEquivalentTo(node26);
        java.lang.String str48 = node26.getQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        boolean boolean60 = node56.isNot();
        boolean boolean61 = node56.isIf();
        com.google.javascript.rhino.Node node62 = node53.copyInformationFromForTree(node56);
        boolean boolean63 = node53.isEmpty();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        boolean boolean69 = node65.isReturn();
        com.google.javascript.rhino.InputId inputId70 = node65.getInputId();
        boolean boolean71 = node65.isAdd();
        node53.addChildrenToFront(node65);
        boolean boolean73 = node65.isDec();
        int int74 = node65.getType();
        boolean boolean75 = node65.isAssign();
        node26.putProp(44, (java.lang.Object) node65);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str43, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(inputId70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test21820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21820");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        boolean boolean4 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test21821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21821");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        boolean boolean57 = jSDocInfo1.isConstant();
        boolean boolean58 = jSDocInfo1.isExterns();
        boolean boolean60 = jSDocInfo1.hasParameter("(unknown)");
        boolean boolean61 = jSDocInfo1.isIdGenerator();
        boolean boolean62 = jSDocInfo1.isConstructor();
        boolean boolean64 = jSDocInfo1.hasParameterType("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n    ERROR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: ERROR\n    OR\n");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21822");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n", 15, 0);
        boolean boolean5 = node4.isReturn();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node11 = node9.getParent();
        node9.setIsSyntheticBlock(true);
        boolean boolean14 = node9.isContinue();
        boolean boolean15 = node9.isOnlyModifiesThisCall();
        boolean boolean16 = node9.isAdd();
        int int17 = node4.getIndexOfChild(node9);
        boolean boolean18 = node4.isBreak();
        boolean boolean19 = node4.isThis();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21823");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int20 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = node7.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node19.getJsDocBuilderForNode();
        boolean boolean23 = node19.isOnlyModifiesThisCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo24.getImplementedInterfaces();
        boolean boolean28 = jSDocInfo24.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo24.getTemplateTypeNames();
        java.lang.String[] strArray36 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.Object[] objArray39 = strSet37.toArray();
        strSet37.clear();
        boolean boolean41 = strList29.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean56 = strList48.containsAll((java.util.Collection<java.lang.String>) strList55);
        int int57 = strList55.size();
        boolean boolean58 = strSet37.retainAll((java.util.Collection<java.lang.String>) strList55);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean60 = node19.isNew();
        boolean boolean61 = node19.isLabel();
        boolean boolean63 = node19.getBooleanProp(0);
        boolean boolean64 = node19.isTrue();
        boolean boolean65 = node19.isSwitch();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test21824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21824");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = strList13.reverse();
        java.util.Iterator<java.lang.String> strItor25 = strList24.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean40 = strList32.containsAll((java.util.Collection<java.lang.String>) strList39);
        int int42 = strList32.lastIndexOf((java.lang.Object) 1L);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 1.0f);
        int int45 = strList32.lastIndexOf((java.lang.Object) 1.0f);
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = strList32.asList();
        boolean boolean47 = strList32.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = strList24.removeAll((java.util.Collection<java.lang.String>) strList32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test21825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21825");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isBlock();
        com.google.javascript.rhino.Node node8 = node1.getLastSibling();
        boolean boolean9 = node1.isComma();
        java.lang.String str10 = node1.getQualifiedName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = new com.google.javascript.rhino.JSTypeExpression(node1, "STRING  32\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(jSTypeExpression13);
    }

    @Test
    public void test21826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21826");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("[OR, [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]], [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]]");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test21827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21827");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        node9.setStaticSourceFile(staticSourceFile12);
        boolean boolean14 = node9.isComma();
        node9.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node18.children();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean25 = node18.isName();
        java.lang.String str26 = node9.checkTreeEquals(node18);
        boolean boolean27 = node18.isInc();
        node18.setType((int) (short) -1);
        node1.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node37.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFromForTree(node37);
        boolean boolean44 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.isVarArgs();
        boolean boolean52 = node46.isIn();
        node37.addChildToFront(node46);
        node46.removeProp(48);
        com.google.javascript.rhino.Node node57 = node46.getAncestor(0);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node60 = node1.useSourceInfoFromForTree(node59);
        boolean boolean61 = node1.isQualifiedName();
        node1.setType((int) '#');
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable64 = node1.getAncestors();
        boolean boolean65 = node1.isSetterDef();
        // The following exception was thrown during execution in test generation
        try {
            node1.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str26, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(ancestorIterable64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test21828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21828");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test21829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21829");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(stringPosition5);
    }

    @Test
    public void test21830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21830");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        boolean boolean6 = jSDocInfo0.hasParameter("NUMBER -1.0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21831");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.union(booleanLiteralSet19);
        boolean boolean21 = strList16.equals((java.lang.Object) booleanLiteralSet18);
        java.lang.Object obj22 = null;
        boolean boolean23 = strList16.equals(obj22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isReturn();
        com.google.javascript.rhino.InputId inputId30 = node25.getInputId();
        boolean boolean31 = node25.isArrayLit();
        boolean boolean32 = node25.isInc();
        boolean boolean33 = strList16.contains((java.lang.Object) node25);
        boolean boolean34 = node25.isRegExp();
        boolean boolean35 = node25.hasOneChild();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node46.children();
        com.google.javascript.rhino.InputId inputId51 = null;
        node46.setInputId(inputId51);
        boolean boolean53 = node46.isName();
        java.lang.String str54 = node37.checkTreeEquals(node46);
        boolean boolean55 = node46.isStringKey();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        int int61 = node59.getType();
        com.google.javascript.rhino.InputId inputId62 = node59.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = null;
        node59.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.Node node65 = node46.srcref(node59);
        com.google.javascript.rhino.Node node66 = node25.copyInformationFrom(node46);
        int int67 = node25.getSideEffectFlags();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str54, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNull(inputId62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test21832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21832");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        boolean boolean17 = node10.isNew();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isReturn();
        com.google.javascript.rhino.InputId inputId24 = node19.getInputId();
        boolean boolean25 = node19.isArrayLit();
        boolean boolean26 = node19.isInc();
        boolean boolean27 = node19.isAssign();
        java.lang.String str28 = node19.getSourceFileName();
        boolean boolean29 = node19.isSetterDef();
        boolean boolean30 = node19.isGetProp();
        com.google.javascript.rhino.Node node31 = node10.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        boolean boolean33 = node32.isGetElem();
        boolean boolean34 = node32.isDec();
        com.google.javascript.rhino.InputId inputId35 = node32.getInputId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
    }

    @Test
    public void test21833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21833");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.siblings();
        int int3 = node1.getSourcePosition();
        boolean boolean4 = node1.isDefaultCase();
        boolean boolean5 = node1.isNull();
        boolean boolean6 = node1.isDec();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("((OR))");
        boolean boolean9 = node1.isEquivalentTo(node8);
        boolean boolean10 = node8.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21834");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        int int17 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean18 = jSDocInfo0.isInterface();
        int int19 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str20 = jSDocInfo0.getLendsName();
        boolean boolean22 = jSDocInfo0.hasParameterType("(Named type with empty name component)");
        boolean boolean23 = jSDocInfo0.isNoTypeCheck();
        boolean boolean24 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str25 = jSDocInfo0.getSourceName();
        java.lang.String str26 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test21835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21835");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        boolean boolean10 = node9.isDefaultCase();
        boolean boolean11 = node9.isVoid();
        com.google.javascript.rhino.Node node12 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node15.setStaticSourceFile(staticSourceFile18);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.Node node30 = node28.getParent();
        com.google.javascript.rhino.Node node31 = node21.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        node33.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node42.children();
        com.google.javascript.rhino.InputId inputId47 = null;
        node42.setInputId(inputId47);
        boolean boolean49 = node42.isName();
        java.lang.String str50 = node33.checkTreeEquals(node42);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node15, node21, node42 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList52 = com.google.common.collect.ImmutableList.of(nodeArray51);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray51);
        int int55 = node53.getIntProp((int) (short) -1);
        com.google.javascript.rhino.Node node56 = node3.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 213044, (int) (short) 10, 4);
        boolean boolean61 = node56.hasChild(node60);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str50, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test21836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21836");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = node15.getAncestor(0);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        int int24 = node22.getType();
        com.google.javascript.rhino.InputId inputId25 = node22.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = null;
        node22.setJSDocInfo(jSDocInfo26);
        boolean boolean28 = node22.isDo();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        boolean boolean35 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.Node node40 = node30.copyInformationFromForTree(node37);
        java.lang.Object obj42 = node40.getProp(38);
        com.google.javascript.rhino.Node node43 = node22.srcrefTree(node40);
        node17.putProp(6, (java.lang.Object) node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.hasBaseType();
        jSDocInfo45.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo45.getBaseType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        int int56 = node52.getCharno();
        boolean boolean57 = node52.isContinue();
        boolean boolean58 = strSet50.equals((java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        node62.setIsSyntheticBlock(true);
        boolean boolean67 = node62.isContinue();
        boolean boolean68 = strSet50.equals((java.lang.Object) node62);
        java.lang.Object[] objArray69 = strSet50.toArray();
        java.lang.Object[] objArray70 = strSet50.toArray();
        node22.setDirectives(strSet50);
        java.lang.Object[] objArray72 = strSet50.toArray();
        boolean boolean73 = strSet50.isEmpty();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node75.addChildrenToFront(node77);
        int int79 = node75.getCharno();
        boolean boolean80 = node75.isName();
        boolean boolean81 = node75.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = new com.google.javascript.rhino.JSTypeExpression(node75, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression83);
        boolean boolean86 = jSTypeExpression83.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node87 = jSTypeExpression83.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strSet50.remove((java.lang.Object) jSTypeExpression83);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test21837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21837");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isParamList();
        boolean boolean11 = node3.isQuotedString();
        node3.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        int int18 = node17.getLength();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isNoShadow();
        java.lang.String str22 = jSDocInfo20.getMeaning();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags25 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags25.setReturnsTainted();
        int int27 = sideEffectFlags25.valueOf();
        boolean boolean28 = strSet23.remove((java.lang.Object) sideEffectFlags25);
        node19.setDirectives(strSet23);
        boolean boolean30 = node19.isAdd();
        boolean boolean31 = node19.isGetElem();
        boolean boolean32 = node3.isEquivalentTo(node19);
        boolean boolean33 = node3.isTypeOf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test21838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21838");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Iterator<java.lang.String> strItor15 = strList6.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strList6.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo17.getParameterNames();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo17.getVisibility();
        java.lang.String str22 = jSDocInfo17.getDescriptionForParameter("Not declared as a type name");
        boolean boolean23 = jSDocInfo17.isOverride();
        java.lang.String str25 = jSDocInfo17.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str26 = jSDocInfo17.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo17.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList27.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor29 = strList28.listIterator();
        boolean boolean30 = strList6.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.Object[] objArray31 = strList6.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strList6.add(33, "(NUMBER 0.0 44)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(visibility20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test21839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21839");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        boolean boolean21 = node14.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        boolean boolean27 = node23.hasChildren();
        com.google.javascript.rhino.Node node28 = node14.srcrefTree(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.children();
        boolean boolean30 = strSet7.remove((java.lang.Object) node23);
        int int31 = strSet7.size();
        java.util.Spliterator<java.lang.String> strSpliterator32 = strSet7.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.hasBaseType();
        jSDocInfo33.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        boolean boolean37 = jSDocInfo33.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo33.getReturnType();
        boolean boolean39 = strSet7.equals((java.lang.Object) jSDocInfo33);
        java.lang.String[] strArray46 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet47.spliterator();
        java.lang.String[] strArray57 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        java.lang.Object[] objArray60 = strSet58.toArray();
        strSet58.clear();
        java.lang.Object[] objArray62 = strSet58.toArray();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray63 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray64 = strSet58.toArray(fileLevelJsDocBuilderArray63);
        java.lang.String[] strArray71 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        java.lang.Object[] objArray74 = strSet72.toArray();
        int int75 = strSet72.size();
        java.util.Spliterator<java.lang.String> strSpliterator76 = strSet72.spliterator();
        boolean boolean78 = strSet72.add("OR [synthetic: 1]");
        boolean boolean79 = strSet58.removeAll((java.util.Collection<java.lang.String>) strSet72);
        java.util.Iterator<java.lang.String> strItor80 = strSet72.iterator();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100);
        node82.addSuppression("");
        java.lang.String str85 = node82.toString();
        int int86 = node82.getChildCount();
        boolean boolean87 = node82.isGetProp();
        boolean boolean88 = node82.isOnlyModifiesThisCall();
        boolean boolean89 = strSet72.contains((java.lang.Object) boolean88);
        boolean boolean90 = strSet47.containsAll((java.util.Collection<java.lang.String>) strSet72);
        boolean boolean91 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet72);
        java.util.Spliterator<java.lang.String> strSpliterator92 = strSet72.spliterator();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray63);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(strSpliterator76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str85, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strSpliterator92);
    }

    @Test
    public void test21840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21840");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        node3.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        com.google.javascript.rhino.Node node29 = node19.useSourceInfoFromForTree(node26);
        boolean boolean30 = node13.hasChild(node19);
        boolean boolean31 = node13.isStringKey();
        com.google.javascript.rhino.Node node32 = node3.useSourceInfoFromForTree(node13);
        boolean boolean33 = node32.isLabel();
        boolean boolean34 = node32.isAnd();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node36.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node36.siblings();
        boolean boolean42 = node36.isInstanceOf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node36.setStaticSourceFile(staticSourceFile43);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        node46.setStaticSourceFile(staticSourceFile49);
        boolean boolean51 = node46.isComma();
        boolean boolean52 = node46.isBlock();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = node54.cloneNode();
        com.google.javascript.rhino.Node node56 = node46.copyInformationFromForTree(node55);
        node46.setType((int) '4');
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        int int64 = node62.getType();
        boolean boolean65 = node62.isOptionalArg();
        com.google.javascript.rhino.Node node66 = node46.useSourceInfoFrom(node62);
        boolean boolean67 = node46.isSwitch();
        node36.addChildToBack(node46);
        com.google.javascript.rhino.Node node69 = node32.srcref(node46);
        boolean boolean70 = node32.hasMoreThanOneChild();
        boolean boolean71 = node32.isNot();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test21841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21841");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(52, "STRING OR");
        boolean boolean3 = node2.isDo();
        boolean boolean4 = node2.isOr();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test21842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21842");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node3.children();
        boolean boolean9 = node3.isName();
        node3.detachChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node3.getStaticSourceFile();
        boolean boolean12 = node3.isIn();
        boolean boolean13 = node3.isOr();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test21843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21843");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 54, 0, (int) '4');
        int int4 = node3.getChildCount();
        boolean boolean5 = node3.hasMoreThanOneChild();
        boolean boolean6 = node3.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test21844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21844");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        com.google.javascript.rhino.Node node13 = node1.clonePropsFrom(node9);
        boolean boolean14 = node1.isGetterDef();
        com.google.javascript.rhino.Node node16 = node1.getAncestor(47);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node18.setStaticSourceFile(staticSourceFile21);
        boolean boolean23 = node18.isComma();
        node18.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.children();
        com.google.javascript.rhino.InputId inputId32 = null;
        node27.setInputId(inputId32);
        boolean boolean34 = node27.isName();
        java.lang.String str35 = node18.checkTreeEquals(node27);
        com.google.javascript.rhino.InputId inputId36 = node18.getInputId();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int43 = node42.getSideEffectFlags();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node50.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node56 = node45.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(30, node42, node45, (int) '4', (int) (byte) 100);
        boolean boolean60 = node18.isEquivalentToTyped(node42);
        boolean boolean61 = node18.isScript();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node63.addChildrenToFront(node65);
        boolean boolean67 = node63.isFalse();
        boolean boolean68 = node63.isOr();
        com.google.javascript.rhino.Node node69 = node18.copyInformationFromForTree(node63);
        node1.addChildrenToBack(node18);
        java.lang.String str71 = node18.getSourceFileName();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str35, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str53, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test21845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21845");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        boolean boolean52 = node14.isUnscopedQualifiedName();
        boolean boolean53 = node14.isFromExterns();
        boolean boolean54 = node14.isNew();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        boolean boolean61 = node60.isDefaultCase();
        boolean boolean62 = node60.isRegExp();
        int int63 = node14.getIndexOfChild(node60);
        boolean boolean64 = node60.isUnscopedQualifiedName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21846");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 0, 42);
        boolean boolean4 = node3.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test21847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21847");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 37, (int) (short) 100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        node7.setIsSyntheticBlock(true);
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = node7.isParamList();
        node7.setSourceEncodedPositionForTree(54);
        int int16 = node7.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node7.siblings();
        com.google.javascript.rhino.Node node18 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node20.children();
        node20.putIntProp(8, (int) '4');
        boolean boolean28 = node20.isInstanceOf();
        int int29 = node20.getSourcePosition();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node20.getAncestors();
        boolean boolean31 = node20.isExprResult();
        node20.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node34 = node7.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean35 = node7.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test21848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21848");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("RETURN ()\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((NUMBER 1.0 37\n))", "GETELEM", "OR [synthetic: 1]", "NUMBER 1.0 37\n");
        java.lang.Object[] objArray7 = strList6.toArray();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        node9.setStaticSourceFile(staticSourceFile12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.Node node25 = node15.useSourceInfoFromForTree(node22);
        boolean boolean26 = node9.hasChild(node15);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        int int32 = node28.getChildCount();
        boolean boolean33 = node28.isGetProp();
        boolean boolean34 = node9.isEquivalentTo(node28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.hasTypedefType();
        java.lang.String str37 = jSDocInfo35.toString();
        boolean boolean39 = jSDocInfo35.hasParameterType("Unknown class name");
        boolean boolean40 = jSDocInfo35.isIdGenerator();
        node9.setJSDocInfo(jSDocInfo35);
        java.lang.String str42 = jSDocInfo35.getOriginalCommentString();
        boolean boolean43 = jSDocInfo35.hasModifies();
        java.lang.String str44 = jSDocInfo35.getMeaning();
        boolean boolean45 = strList6.contains((java.lang.Object) jSDocInfo35);
        boolean boolean46 = strList6.isEmpty();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[RETURN ()\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((NUMBER 1.0 37\n)), GETELEM, OR [synthetic: 1], NUMBER 1.0 37\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[RETURN ()\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((NUMBER 1.0 37\n)), GETELEM, OR [synthetic: 1], NUMBER 1.0 37\n]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JSDocInfo" + "'", str37, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test21849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21849");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        boolean boolean13 = node3.isParamList();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node3.children();
        boolean boolean16 = node3.isAdd();
        boolean boolean17 = node3.isEmpty();
        boolean boolean18 = node3.isInc();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21850");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int6 = node5.getSideEffectFlags();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node13.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node8.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node5, node8, (int) '4', (int) (byte) 100);
        node22.removeProp(4);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean30 = node29.isExprResult();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node34.isLabel();
        boolean boolean37 = node29.isEquivalentTo(node34);
        boolean boolean38 = node29.isCall();
        boolean boolean39 = node29.hasChildren();
        com.google.javascript.rhino.Node node40 = node22.useSourceInfoIfMissingFrom(node29);
        boolean boolean41 = node40.isFunction();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isReturn();
        com.google.javascript.rhino.InputId inputId48 = node43.getInputId();
        boolean boolean49 = node43.isArrayLit();
        boolean boolean50 = node43.isObjectLit();
        com.google.javascript.rhino.Node node52 = node43.getAncestor((int) (byte) 0);
        int int53 = node43.getType();
        node43.setSourceFileForTesting("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.Node node56 = node40.useSourceInfoIfMissingFromForTree(node43);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test21851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21851");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node29.children();
        com.google.javascript.rhino.InputId inputId34 = null;
        node29.setInputId(inputId34);
        boolean boolean36 = node29.isName();
        java.lang.String str37 = node20.checkTreeEquals(node29);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node2, node8, node29 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList39 = com.google.common.collect.ImmutableList.of(nodeArray38);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray38);
        boolean boolean41 = node40.hasMoreThanOneChild();
        node40.setType((int) (byte) 100);
        boolean boolean44 = node40.isScript();
        node40.setSourceEncodedPositionForTree(4095);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node52 = node50.getParent();
        node50.setLineno(37);
        boolean boolean55 = node50.isVoid();
        com.google.javascript.rhino.Node node56 = node50.getLastSibling();
        boolean boolean57 = node50.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            node40.addChildrenToBack(node50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str37, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test21852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21852");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList13.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = strList17.subList(0, 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str22 = jSDocInfo21.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo21.getTemplateTypeNames();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        int int29 = node25.getCharno();
        boolean boolean30 = node25.isName();
        boolean boolean31 = node25.isNE();
        boolean boolean32 = node25.isEmpty();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        boolean boolean38 = node34.hasChildren();
        com.google.javascript.rhino.Node node39 = node25.srcrefTree(node34);
        int int40 = strList23.indexOf((java.lang.Object) node25);
        int int41 = strList20.lastIndexOf((java.lang.Object) node25);
        boolean boolean42 = node25.isArrayLit();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21853");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        node1.putIntProp((int) (short) 0, 38);
        boolean boolean8 = node1.isCall();
        int int9 = node1.getCharno();
        boolean boolean11 = node1.getBooleanProp(41);
        node1.setSourceEncodedPosition(45);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType26 = node21.getJSType();
        boolean boolean27 = node21.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node28 = node19.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.jstype.JSType jSType29 = node19.getJSType();
        com.google.javascript.rhino.Node node30 = node19.getLastSibling();
        boolean boolean31 = node1.isEquivalentTo(node19);
        boolean boolean32 = node19.isDec();
        boolean boolean33 = node19.isWhile();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node35.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node35.siblings();
        boolean boolean41 = node35.isInstanceOf();
        boolean boolean42 = node35.isParamList();
        boolean boolean43 = node35.isContinue();
        boolean boolean44 = node19.hasChild(node35);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test21854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test21855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21855");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        node3.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        com.google.javascript.rhino.Node node29 = node19.useSourceInfoFromForTree(node26);
        boolean boolean30 = node13.hasChild(node19);
        boolean boolean31 = node13.isStringKey();
        com.google.javascript.rhino.Node node32 = node3.useSourceInfoFromForTree(node13);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder34 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node36 };
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node48 = node44.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] { node44 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] { node52 };
        com.google.javascript.rhino.Node[][] nodeArray59 = new com.google.javascript.rhino.Node[][] { nodeArray42, nodeArray50, nodeArray58 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder60 = nodeArrayBuilder34.add(nodeArray59);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder61 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder63 = nodeArrayBuilder61.add(nodeArray62);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder64 = nodeArrayBuilder60.add(nodeArray62);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(0, nodeArray62);
        boolean boolean66 = node65.isNE();
        node32.addChildrenToBack(node65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.isNoShadow();
        java.lang.String str70 = jSDocInfo68.getMeaning();
        com.google.javascript.rhino.Node node71 = jSDocInfo68.getAssociatedNode();
        java.lang.String str72 = jSDocInfo68.getLicense();
        java.lang.String str73 = jSDocInfo68.getOriginalCommentString();
        boolean boolean74 = jSDocInfo68.isNoAlias();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility75 = jSDocInfo68.getVisibility();
        boolean boolean76 = jSDocInfo68.hasThisType();
        boolean boolean78 = jSDocInfo68.hasParameterType("(OR)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo68.getBaseType();
        node65.setJSDocInfo(jSDocInfo68);
        boolean boolean81 = node65.isCatch();
        boolean boolean82 = node65.isGetterDef();
        boolean boolean83 = node65.isFor();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArrayBuilder60);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(nodeArrayBuilder63);
        org.junit.Assert.assertNotNull(nodeArrayBuilder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(visibility75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test21856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21856");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int20 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = node7.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node19.getJsDocBuilderForNode();
        boolean boolean23 = node19.isBreak();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node19.siblings();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.Node node30 = node28.getParent();
        node28.setIsSyntheticBlock(true);
        boolean boolean33 = node28.isContinue();
        java.lang.String str34 = node28.getQualifiedName();
        boolean boolean35 = node28.isSwitch();
        node28.removeProp((int) '4');
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node41.isLabel();
        boolean boolean44 = node41.isContinue();
        com.google.javascript.rhino.Node node45 = node41.removeFirstChild();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        int int51 = node47.getCharno();
        com.google.javascript.rhino.Node node52 = node41.useSourceInfoIfMissingFrom(node47);
        boolean boolean53 = node28.isEquivalentTo(node47);
        com.google.javascript.rhino.InputId inputId54 = null;
        node47.setInputId(inputId54);
        boolean boolean56 = node47.isNumber();
        boolean boolean57 = node47.isStringKey();
        com.google.javascript.rhino.Node node58 = node19.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node node59 = node58.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node61 = node59.getChildAtIndex(1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test21857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21857");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        boolean boolean12 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nSTRING  39\n\n\nTree2:\nOR\n\n\nSubtree1: STRING  39\n\n\nSubtree2: OR\n");
        boolean boolean15 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test21858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21858");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("JSDocInfo");
        boolean boolean8 = jSDocInfo0.isConstant();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean11 = jSDocInfo0.isDefine();
        boolean boolean12 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasBaseType();
        jSDocInfo13.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo13.getTypedefType();
        boolean boolean18 = jSDocInfo13.isNoSideEffects();
        boolean boolean20 = jSDocInfo13.hasDescriptionForParameter("JSDocInfo");
        boolean boolean21 = jSDocInfo13.isConstant();
        jSDocInfo13.addSuppression("(Unknown class name)");
        boolean boolean24 = jSDocInfo13.hasType();
        boolean boolean25 = jSDocInfo13.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo13.setVisibility(visibility26);
        jSDocInfo0.setVisibility(visibility26);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean30 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test21859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21859");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        java.lang.String str8 = jSDocInfo0.toString();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21860");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isIf();
        com.google.javascript.rhino.Node node17 = node7.getLastSibling();
        boolean boolean18 = node17.isTrue();
        boolean boolean19 = node17.isQuotedString();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21861");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("NUMBER 1.0 37\n");
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
    }

    @Test
    public void test21862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21862");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(30, "OR [synthetic: 1]");
        java.lang.String str3 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        node11.putIntProp((int) (short) 0, 38);
        node7.addChildToBack(node11);
        boolean boolean19 = node11.isEmpty();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        boolean boolean26 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.Node node31 = node21.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node32 = node11.srcref(node28);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.wasEmptyNode();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isTypeOf();
        boolean boolean46 = node41.isDelProp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node52 = node50.getParent();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node50.setJSType(jSType53);
        java.lang.String str55 = node50.toString();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node57.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        node57.setStaticSourceFile(staticSourceFile60);
        boolean boolean62 = node57.isComma();
        node57.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList65 = com.google.common.collect.ImmutableList.of(node34, node41, node50, node57);
        boolean boolean66 = node57.isComma();
        boolean boolean67 = node11.isEquivalentToTyped(node57);
        com.google.javascript.rhino.Node node68 = node11.getLastChild();
        boolean boolean69 = node11.isGetProp();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node11.siblings();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node72.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = null;
        node72.setStaticSourceFile(staticSourceFile75);
        boolean boolean77 = node72.isComma();
        node72.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        node81.addChildrenToFront(node83);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable85 = node81.children();
        com.google.javascript.rhino.InputId inputId86 = null;
        node81.setInputId(inputId86);
        boolean boolean88 = node81.isName();
        java.lang.String str89 = node72.checkTreeEquals(node81);
        node81.setCharno((int) '#');
        com.google.javascript.rhino.Node node92 = node11.useSourceInfoIfMissingFromForTree(node81);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable93 = node11.children();
        node11.detachChildren();
        int int95 = node11.getLength();
        boolean boolean96 = node11.isFunction();
        com.google.javascript.rhino.Node node97 = node2.useSourceInfoIfMissingFrom(node11);
        boolean boolean98 = node11.isCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR" + "'", str55, "OR");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str89, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(nodeIterable93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test21863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21863");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList12 = com.google.common.collect.ImmutableList.of(typePair2);
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNotNull(typePairList12);
        org.junit.Assert.assertNull(jSType13);
    }

    @Test
    public void test21864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21864");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        boolean boolean23 = node17.isFalse();
        boolean boolean24 = node17.isNoSideEffectsCall();
        java.lang.String str25 = node10.checkTreeEquals(node17);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        com.google.javascript.rhino.Node node59 = node17.srcrefTree(node50);
        node50.setLength(151552);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n" + "'", str25, "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test21865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21865");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        boolean boolean8 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node10.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node10.isComma();
        node10.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node19.children();
        com.google.javascript.rhino.InputId inputId24 = null;
        node19.setInputId(inputId24);
        boolean boolean26 = node19.isName();
        java.lang.String str27 = node10.checkTreeEquals(node19);
        boolean boolean28 = node19.isInc();
        node19.setType((int) (short) -1);
        node2.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node38.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node38.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node33.copyInformationFromForTree(node38);
        boolean boolean45 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        boolean boolean51 = node47.isTypeOf();
        boolean boolean52 = node47.isVarArgs();
        boolean boolean53 = node47.isIn();
        node38.addChildToFront(node47);
        node47.removeProp(48);
        com.google.javascript.rhino.Node node58 = node47.getAncestor(0);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node61 = node2.useSourceInfoFromForTree(node60);
        boolean boolean62 = node2.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) 'a', node2);
        boolean boolean64 = node2.isQualifiedName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str27, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21866");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test21867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21867");
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = com.google.common.collect.ImmutableList.of("JSDocInfo", "GETELEM", "NUMBER -1.0\n", "Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n", "NUMBER 1.0 37\n", "", "OR\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "", "(OR \n)", "OR\n    OR\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray21 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean31 = strList22.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean32 = strList22.isEmpty();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        boolean boolean42 = strList35.retainAll((java.util.Collection<java.lang.String>) strList40);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean57 = strList49.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.lang.String[] strArray59 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        boolean boolean71 = strList64.retainAll((java.util.Collection<java.lang.String>) strList69);
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        boolean boolean81 = strList74.retainAll((java.util.Collection<java.lang.String>) strList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList82 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList18, (java.util.List<java.lang.String>) strList22, (java.util.List<java.lang.String>) strList40, (java.util.List<java.lang.String>) strList49, (java.util.List<java.lang.String>) strList60, (java.util.List<java.lang.String>) strList64, (java.util.List<java.lang.String>) strList74);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        int int87 = strList18.indexOf((java.lang.Object) '4');
        java.util.Spliterator<java.lang.String> strSpliterator88 = strList18.spliterator();
        boolean boolean89 = strList11.contains((java.lang.Object) strSpliterator88);
        java.util.Iterator<java.lang.String> strItor90 = strList11.iterator();
        int int91 = strList11.size();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor92 = strList11.listIterator();
        java.lang.Object[] objArray93 = strList11.toArray();
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strListList82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 11 + "'", int91 == 11);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[JSDocInfo, GETELEM, NUMBER -1.0\n, Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n, NUMBER 1.0 37\n, , OR\n, OR 0 [jsdoc_info: JSDocInfo]\n, , (OR \n), OR\n    OR\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[JSDocInfo, GETELEM, NUMBER -1.0\n, Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n, NUMBER 1.0 37\n, , OR\n, OR 0 [jsdoc_info: JSDocInfo]\n, , (OR \n), OR\n    OR\n]");
    }

    @Test
    public void test21868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21868");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node11.siblings();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        int int19 = node15.getCharno();
        boolean boolean20 = node15.isName();
        boolean boolean21 = node15.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node15, "Unknown class name");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node25.setStaticSourceFile(staticSourceFile28);
        boolean boolean30 = node25.isComma();
        node25.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node34.children();
        com.google.javascript.rhino.InputId inputId39 = null;
        node34.setInputId(inputId39);
        boolean boolean41 = node34.isName();
        java.lang.String str42 = node25.checkTreeEquals(node34);
        boolean boolean43 = jSTypeExpression23.equals((java.lang.Object) node25);
        com.google.javascript.rhino.Node node44 = jSTypeExpression23.getRoot();
        com.google.javascript.rhino.Node node45 = node11.useSourceInfoFrom(node44);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node45, "(OR\n    OR\n)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str42, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test21869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21869");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(((OR)))", 155648, 32);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21870");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isFalse();
        boolean boolean6 = node1.isIn();
        boolean boolean7 = node1.isOnlyModifiesThisCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21871");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(48, "Unknown class name", (-1), 42);
        boolean boolean5 = node4.wasEmptyNode();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isFalse();
        boolean boolean12 = node7.isOr();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node7);
        boolean boolean14 = node13.isCatch();
        boolean boolean15 = node13.isScript();
        com.google.javascript.rhino.Node node16 = node13.removeFirstChild();
        int int17 = node13.getSideEffectFlags();
        int int18 = node13.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test21872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21872");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getDescription();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean8 = jSDocInfo0.isExport();
        boolean boolean9 = jSDocInfo0.hasFileOverview();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
    }

    @Test
    public void test21873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21873");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = null;
        node3.setJSDocInfo(jSDocInfo7);
        boolean boolean9 = node3.isDo();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        boolean boolean16 = node11.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        com.google.javascript.rhino.Node node21 = node11.copyInformationFromForTree(node18);
        java.lang.Object obj23 = node21.getProp(38);
        com.google.javascript.rhino.Node node24 = node3.srcrefTree(node21);
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isThis();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        boolean boolean40 = node36.isNot();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = node36.copyInformationFromForTree(node42);
        boolean boolean44 = node43.isExprResult();
        boolean boolean45 = node43.isDefaultCase();
        node29.addChildrenToBack(node43);
        node29.setSourceEncodedPositionForTree(42);
        boolean boolean49 = node29.isSetterDef();
        com.google.javascript.rhino.Node node50 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean51 = node24.isCatch();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test21874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21874");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node72.addChildrenToFront(node74);
        int int76 = node72.getCharno();
        boolean boolean77 = node72.isName();
        boolean boolean78 = node72.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node72, "Unknown class name");
        int int81 = strList62.lastIndexOf((java.lang.Object) "Unknown class name");
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList62.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator83 = strList62.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean85 = jSDocInfo84.hasBaseType();
        jSDocInfo84.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo84.getBaseType();
        java.util.Set<java.lang.String> strSet89 = jSDocInfo84.getParameterNames();
        boolean boolean90 = strList62.remove((java.lang.Object) jSDocInfo84);
        java.lang.String str91 = jSDocInfo84.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = jSDocInfo84.getTypedefType();
        java.lang.String str93 = jSDocInfo84.getDeprecationReason();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertNotNull(strSpliterator83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNull(jSTypeExpression92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test21875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21875");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test21876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21876");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getLicense();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test21877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21877");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        jSDocInfo0.setLicense("(Not declared as a type name)");
        boolean boolean7 = jSDocInfo0.hasType();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test21878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21878");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        int int9 = strList8.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test21879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21879");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        boolean boolean7 = node3.isCase();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node3.getStaticSourceFile();
        boolean boolean9 = node3.isSetterDef();
        int int10 = node3.getType();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test21880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21880");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean15 = strList7.containsAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator16 = strList7.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList7.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor18 = strList7.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean21 = ternaryValue19.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean24 = ternaryValue22.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str26 = ternaryValue25.toString();
        boolean boolean28 = ternaryValue25.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue22.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue19.and(ternaryValue25);
        int int31 = strList7.indexOf((java.lang.Object) ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue0.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue0.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean39 = ternaryValue37.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str41 = ternaryValue40.toString();
        boolean boolean43 = ternaryValue40.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue37.and(ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue34.and(ternaryValue40);
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean60 = strList52.containsAll((java.util.Collection<java.lang.String>) strList59);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strList52.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = strList52.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor63 = strList52.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean66 = ternaryValue64.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean69 = ternaryValue67.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str71 = ternaryValue70.toString();
        boolean boolean73 = ternaryValue70.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue67.and(ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue64.and(ternaryValue70);
        int int76 = strList52.indexOf((java.lang.Object) ternaryValue75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = ternaryValue45.or(ternaryValue75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue33.or(ternaryValue45);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = ternaryValue33.not();
        boolean boolean81 = ternaryValue33.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "unknown" + "'", str26, "unknown");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "unknown" + "'", str41, "unknown");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "unknown" + "'", str71, "unknown");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test21881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21881");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        boolean boolean57 = jSDocInfo1.isConstant();
        boolean boolean58 = jSDocInfo1.isExterns();
        boolean boolean60 = jSDocInfo1.hasParameter("(unknown)");
        boolean boolean61 = jSDocInfo1.isIdGenerator();
        boolean boolean62 = jSDocInfo1.isInterface();
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = jSDocInfo1.getTemplateTypeNames();
        boolean boolean64 = jSDocInfo1.isExterns();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21882");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node29.children();
        com.google.javascript.rhino.InputId inputId34 = null;
        node29.setInputId(inputId34);
        boolean boolean36 = node29.isName();
        java.lang.String str37 = node20.checkTreeEquals(node29);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node2, node8, node29 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList39 = com.google.common.collect.ImmutableList.of(nodeArray38);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(4095, nodeArray38);
        boolean boolean41 = node40.isTry();
        boolean boolean42 = node40.isCase();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node45.setStaticSourceFile(staticSourceFile48);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        com.google.javascript.rhino.Node node61 = node51.useSourceInfoFromForTree(node58);
        boolean boolean62 = node45.hasChild(node51);
        boolean boolean63 = node51.hasMoreThanOneChild();
        boolean boolean65 = node51.getBooleanProp(51);
        com.google.javascript.rhino.Node node66 = node51.getLastChild();
        boolean boolean67 = node51.isAssign();
        boolean boolean68 = node51.isExprResult();
        boolean boolean69 = node51.isScript();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) '#', node51, 54, 44);
        com.google.javascript.rhino.Node node73 = node40.useSourceInfoFrom(node72);
        int int74 = node73.getLineno();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str37, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 54 + "'", int74 == 54);
    }

    @Test
    public void test21883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21883");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node1.getStaticSourceFile();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = node11.cloneNode();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.isDelProp();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node30.setJSType(jSType33);
        java.lang.String str35 = node30.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList45 = com.google.common.collect.ImmutableList.of(node14, node21, node30, node37);
        com.google.javascript.rhino.Node node46 = node12.copyInformationFrom(node37);
        boolean boolean47 = node12.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(35, node12);
        com.google.javascript.rhino.Node node49 = node12.getLastSibling();
        boolean boolean50 = node12.isTrue();
        com.google.javascript.rhino.Node node51 = node1.srcref(node12);
        boolean boolean52 = node51.isNoSideEffectsCall();
        boolean boolean53 = node51.isVarArgs();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR" + "'", str35, "OR");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test21884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21884");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor11 = ancestorIterable10.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator12 = ancestorIterable10.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor13 = ancestorIterable10.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator14 = ancestorIterable10.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor15 = ancestorIterable10.iterator();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertNotNull(nodeItor11);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
        org.junit.Assert.assertNotNull(nodeItor15);
    }

    @Test
    public void test21885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21885");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 29, 16);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(44, 6, 9);
        boolean boolean9 = node7.getBooleanProp((int) (short) 0);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node11.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node11.isComma();
        node11.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node20.children();
        com.google.javascript.rhino.InputId inputId25 = null;
        node20.setInputId(inputId25);
        boolean boolean27 = node20.isName();
        java.lang.String str28 = node11.checkTreeEquals(node20);
        boolean boolean29 = node20.isInc();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isNot();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = node31.copyInformationFromForTree(node37);
        com.google.javascript.rhino.InputId inputId39 = node31.getInputId();
        node20.addChildrenToFront(node31);
        boolean boolean41 = node31.isExprResult();
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChild(node7, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The new child node has siblings.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str28, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test21886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21886");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        boolean boolean2 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test21887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21887");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        int int8 = node3.getType();
        boolean boolean9 = node3.isObjectLit();
        boolean boolean10 = node3.hasMoreThanOneChild();
        boolean boolean11 = node3.isBlock();
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("((OR 0))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR [synthetic: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21888");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node3.children();
        boolean boolean9 = node3.isName();
        boolean boolean10 = node3.isTypeOf();
        int int11 = node3.getType();
        boolean boolean12 = node3.isTypeOf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node14.siblings();
        boolean boolean16 = node14.isLabel();
        com.google.javascript.rhino.Node node17 = node3.copyInformationFrom(node14);
        boolean boolean18 = node17.isCase();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21889");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("()");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("(Not declared as a type name)");
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        java.lang.String str10 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test21890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21890");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isInc();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        node23.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node44 = node3.useSourceInfoFromForTree(node23);
        boolean boolean45 = node23.isSyntheticBlock();
        com.google.javascript.rhino.Node node46 = node23.getFirstChild();
        boolean boolean48 = node46.getBooleanProp(37);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test21891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21891");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(30, "OR [synthetic: 1]");
        java.lang.String str3 = node2.getSourceFileName();
        int int4 = node2.getLineno();
        com.google.javascript.rhino.Node node5 = node2.removeFirstChild();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isNot();
        boolean boolean17 = node12.isIf();
        com.google.javascript.rhino.Node node18 = node9.copyInformationFromForTree(node12);
        boolean boolean19 = node9.isEmpty();
        boolean boolean20 = node9.isDefaultCase();
        boolean boolean21 = node9.isRegExp();
        com.google.javascript.rhino.Node node22 = node2.srcref(node9);
        boolean boolean23 = node9.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test21892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21892");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Iterator<java.lang.String> strItor15 = strList6.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strList6.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo17.getParameterNames();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo17.getVisibility();
        java.lang.String str22 = jSDocInfo17.getDescriptionForParameter("Not declared as a type name");
        boolean boolean23 = jSDocInfo17.isOverride();
        java.lang.String str25 = jSDocInfo17.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str26 = jSDocInfo17.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo17.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList27.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor29 = strList28.listIterator();
        boolean boolean30 = strList6.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.Object[] objArray31 = strList6.toArray();
        java.lang.String str32 = strList6.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = strList6.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = strList33.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = strList34.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasBaseType();
        jSDocInfo36.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo36.getBaseType();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo36.getParameterNames();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        int int47 = node43.getCharno();
        boolean boolean48 = node43.isContinue();
        boolean boolean49 = strSet41.equals((java.lang.Object) node43);
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean64 = strList56.containsAll((java.util.Collection<java.lang.String>) strList63);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strList56.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = strList56.asList();
        boolean boolean67 = strSet41.contains((java.lang.Object) strList66);
        boolean boolean68 = strList66.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor69 = strList66.iterator();
        boolean boolean70 = strList66.isEmpty();
        boolean boolean71 = strList66.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor73 = strList66.listIterator(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = strList35.retainAll((java.util.Collection<java.lang.String>) strList66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(visibility20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str32, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strItor73);
    }

    @Test
    public void test21893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21893");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        boolean boolean11 = jSDocInfo0.hasParameterType("OR");
        jSDocInfo0.addSuppression("JSDocInfo");
        boolean boolean14 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean15 = jSDocInfo0.isDefine();
        boolean boolean16 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21894");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        boolean boolean24 = node18.isDebugger();
        com.google.javascript.rhino.Node node26 = node18.getAncestor(42);
        int int27 = node18.getSourcePosition();
        java.lang.Object obj29 = node18.getProp(24613);
        com.google.javascript.rhino.Node node30 = node18.getNext();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test21895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21895");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int4 = jSDocInfo0.getParameterCount();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
    }

    @Test
    public void test21896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21896");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("RETURN ()\n");
        java.lang.String str13 = jSDocInfo0.getBlockDescription();
        boolean boolean14 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21897");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        boolean boolean2 = node1.isTry();
        java.util.Set<java.lang.String> strSet3 = node1.getDirectives();
        node1.setSourceEncodedPositionForTree(6);
        boolean boolean6 = node1.isRegExp();
        boolean boolean7 = node1.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21898");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(52, "STRING OR");
        boolean boolean3 = node2.isDo();
        boolean boolean4 = node2.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test21899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21899");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node3.children();
        java.lang.Object obj10 = null;
        node3.putProp((int) (byte) 10, obj10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo12.getParameterNames();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        int int23 = node19.getCharno();
        boolean boolean24 = node19.isContinue();
        boolean boolean25 = strSet17.equals((java.lang.Object) node19);
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean40 = strList32.containsAll((java.util.Collection<java.lang.String>) strList39);
        java.util.Spliterator<java.lang.String> strSpliterator41 = strList32.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = strList32.asList();
        boolean boolean43 = strSet17.contains((java.lang.Object) strList42);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node49 = node47.getParent();
        int int50 = node47.getLength();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        node47.addChildrenToFront(node52);
        boolean boolean56 = strList42.contains((java.lang.Object) node47);
        com.google.javascript.rhino.Node node57 = node3.clonePropsFrom(node47);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = node57.getExistingIntProp(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSpliterator41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test21900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21900");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test21901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21901");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        java.lang.String str5 = node2.toString();
        com.google.javascript.rhino.Node node6 = node2.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node10.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] { node10 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node[][] nodeArray25 = new com.google.javascript.rhino.Node[][] { nodeArray8, nodeArray16, nodeArray24 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder26 = nodeArrayBuilder0.add(nodeArray25);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder27 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder29 = nodeArrayBuilder27.add(nodeArray28);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder26.add(nodeArray28);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder34 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node36 };
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node48 = node44.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] { node44 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] { node52 };
        com.google.javascript.rhino.Node[][] nodeArray59 = new com.google.javascript.rhino.Node[][] { nodeArray42, nodeArray50, nodeArray58 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder60 = nodeArrayBuilder34.add(nodeArray59);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder61 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        java.lang.String str66 = node63.toString();
        com.google.javascript.rhino.Node node67 = node63.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node63.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        node71.addSuppression("");
        java.lang.String str74 = node71.toString();
        com.google.javascript.rhino.Node node75 = node71.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = node71.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] { node71 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node79.addSuppression("");
        java.lang.String str82 = node79.toString();
        com.google.javascript.rhino.Node node83 = node79.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node79.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray85 = new com.google.javascript.rhino.Node[] { node79 };
        com.google.javascript.rhino.Node[][] nodeArray86 = new com.google.javascript.rhino.Node[][] { nodeArray69, nodeArray77, nodeArray85 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder87 = nodeArrayBuilder61.add(nodeArray86);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder88 = nodeArrayBuilder60.add(nodeArray86);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder89 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray90 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder91 = nodeArrayBuilder89.add(nodeArray90);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder92 = nodeArrayBuilder88.add(nodeArray90);
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', nodeArray90, 40, 39);
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(7, nodeArray90);
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node(4100, nodeArray90);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder98 = nodeArrayBuilder30.add(nodeArray90);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str5, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArrayBuilder26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArrayBuilder29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArrayBuilder60);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str66, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str74, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(staticSourceFile76);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str82, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertNotNull(nodeArrayBuilder87);
        org.junit.Assert.assertNotNull(nodeArrayBuilder88);
        org.junit.Assert.assertNotNull(nodeArray90);
        org.junit.Assert.assertNotNull(nodeArrayBuilder91);
        org.junit.Assert.assertNotNull(nodeArrayBuilder92);
        org.junit.Assert.assertNotNull(nodeArrayBuilder98);
    }

    @Test
    public void test21902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21902");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        boolean boolean11 = jSDocInfo0.hasParameter("[]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("OR 0 [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node15.setStaticSourceFile(staticSourceFile18);
        boolean boolean20 = node15.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node22.isNot();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = node22.copyInformationFromForTree(node28);
        boolean boolean30 = node29.isExprResult();
        boolean boolean31 = node29.isDefaultCase();
        node15.addChildrenToBack(node29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node43 = node41.getParent();
        com.google.javascript.rhino.Node node44 = node34.useSourceInfoFromForTree(node41);
        boolean boolean45 = node44.isSetterDef();
        com.google.javascript.rhino.Node node46 = node44.getLastChild();
        boolean boolean47 = node44.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node48 = node29.useSourceInfoIfMissingFromForTree(node44);
        jSDocInfo0.setAssociatedNode(node29);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 43);
        boolean boolean52 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = node51.getAncestor(1);
        boolean boolean55 = node29.hasChild(node54);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test21903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21903");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasBaseType();
        java.lang.String str12 = jSDocInfo10.getFileOverview();
        int int13 = jSDocInfo10.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo10.getEnumParameterType();
        boolean boolean15 = jSDocInfo10.isExterns();
        boolean boolean16 = jSTypeExpression9.equals((java.lang.Object) boolean15);
        boolean boolean17 = jSTypeExpression9.isOptionalArg();
        boolean boolean18 = jSTypeExpression9.isOptionalArg();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor34 = strList32.iterator();
        boolean boolean35 = strList32.isEmpty();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        int int41 = node37.getCharno();
        boolean boolean42 = strList32.equals((java.lang.Object) node37);
        java.util.Iterator<java.lang.String> strItor43 = strList32.iterator();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags44 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int45 = sideEffectFlags44.valueOf();
        sideEffectFlags44.clearSideEffectFlags();
        sideEffectFlags44.setThrows();
        sideEffectFlags44.setMutatesThis();
        boolean boolean49 = strList32.contains((java.lang.Object) sideEffectFlags44);
        java.lang.Object[] objArray50 = strList32.toArray();
        boolean boolean51 = jSTypeExpression9.equals((java.lang.Object) strList32);
        com.google.javascript.rhino.Node node52 = jSTypeExpression9.getRoot();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test21904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("JSDocInfo");
        boolean boolean8 = jSDocInfo0.isConstant();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        java.lang.String str12 = jSDocInfo0.getDeprecationReason();
        boolean boolean13 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getBaseType();
        boolean boolean15 = jSDocInfo0.isOverride();
        boolean boolean16 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21905");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        boolean boolean21 = strList16.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = node30.copyInformationFromForTree(node36);
        boolean boolean38 = node37.isExprResult();
        boolean boolean39 = node37.isDefaultCase();
        node23.addChildrenToBack(node37);
        node23.setSourceEncodedPositionForTree(42);
        boolean boolean43 = node23.isHook();
        boolean boolean44 = node23.isLabelName();
        boolean boolean45 = strList16.equals((java.lang.Object) boolean44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.hasBaseType();
        java.lang.String str48 = jSDocInfo46.getFileOverview();
        int int49 = jSDocInfo46.getParameterCount();
        boolean boolean50 = jSDocInfo46.isConstant();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo46.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo52.getParameterNames();
        boolean boolean54 = jSDocInfo52.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo52.getThrownTypes();
        boolean boolean56 = jSDocInfo52.isIdGenerator();
        boolean boolean57 = jSDocInfo52.hasEnumParameterType();
        boolean boolean58 = strSet51.remove((java.lang.Object) jSDocInfo52);
        boolean boolean59 = strList16.containsAll((java.util.Collection<java.lang.String>) strSet51);
        java.util.Iterator<java.lang.String> strItor60 = strSet51.iterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strItor60);
    }

    @Test
    public void test21906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21906");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21907");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        boolean boolean17 = node14.isLabelName();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType30 = node25.getJSType();
        boolean boolean31 = node25.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = node23.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int38 = node37.getSideEffectFlags();
        com.google.javascript.rhino.Node node39 = node25.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node41.children();
        com.google.javascript.rhino.InputId inputId46 = null;
        node41.setInputId(inputId46);
        boolean boolean48 = node41.isName();
        boolean boolean49 = node41.isFunction();
        com.google.javascript.rhino.Node node50 = node39.srcref(node41);
        node14.addChildToBack(node41);
        com.google.javascript.rhino.jstype.JSType jSType52 = node14.getJSType();
        int int53 = node14.getLineno();
        node14.addSuppression("DELPROP OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n 37");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test21908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21908");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        java.lang.String str10 = jSDocInfo0.getVersion();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21909");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.hasBaseType();
        jSDocInfo1.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo1.getBaseType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo1.getParameterNames();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        int int12 = node8.getCharno();
        boolean boolean13 = node8.isContinue();
        boolean boolean14 = strSet6.equals((java.lang.Object) node8);
        boolean boolean15 = node8.isSetterDef();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node17.isComma();
        node17.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node26.children();
        com.google.javascript.rhino.InputId inputId31 = null;
        node26.setInputId(inputId31);
        boolean boolean33 = node26.isName();
        java.lang.String str34 = node17.checkTreeEquals(node26);
        boolean boolean35 = node26.isInc();
        com.google.javascript.rhino.Node node36 = node8.srcrefTree(node26);
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder38 = node36.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node36.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node40 = null;
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node42.setStaticSourceFile(staticSourceFile45);
        boolean boolean47 = node42.isComma();
        node42.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node51.children();
        com.google.javascript.rhino.InputId inputId56 = null;
        node51.setInputId(inputId56);
        boolean boolean58 = node51.isName();
        java.lang.String str59 = node42.checkTreeEquals(node51);
        boolean boolean60 = node51.isInc();
        int int61 = node51.getChildCount();
        node51.setIsSyntheticBlock(false);
        boolean boolean64 = node51.wasEmptyNode();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node66.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        node66.setStaticSourceFile(staticSourceFile69);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node72.addSuppression("");
        java.lang.String str75 = node72.toString();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        node77.addChildrenToFront(node79);
        com.google.javascript.rhino.Node node81 = node79.getParent();
        com.google.javascript.rhino.Node node82 = node72.useSourceInfoFromForTree(node79);
        boolean boolean83 = node66.hasChild(node72);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(11, node36, node40, node51, node72, 204841, 213092);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str34, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str59, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str75, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test21910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21910");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        node1.putIntProp((int) (short) 0, 38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        boolean boolean16 = node10.isNoSideEffectsCall();
        int int17 = node10.getType();
        boolean boolean18 = node10.isAssign();
        com.google.javascript.rhino.Node node19 = node1.copyInformationFromForTree(node10);
        int int20 = node1.getLength();
        com.google.javascript.rhino.Node node21 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(213044, "(OR \n)", (int) ' ', 3);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node26.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node28 = node1.useSourceInfoFrom(node26);
        node26.addSuppression("THIS");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test21911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21911");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.lang.String str7 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isNoShadow();
        boolean boolean10 = jSDocInfo8.isNoShadow();
        boolean boolean11 = jSDocInfo8.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList15 = com.google.common.collect.ImmutableList.of(visibility12, visibility13, visibility14);
        jSDocInfo8.setVisibility(visibility14);
        jSDocInfo0.setVisibility(visibility14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList15);
    }

    @Test
    public void test21912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21912");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isIf();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        boolean boolean9 = node8.isParamList();
        com.google.javascript.rhino.Node node10 = node1.useSourceInfoIfMissingFrom(node8);
        boolean boolean11 = node10.isFromExterns();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node10.getJsDocBuilderForNode();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder12);
    }

    @Test
    public void test21913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21913");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor18 = strList6.iterator();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        boolean boolean24 = node20.isTypeOf();
        boolean boolean25 = node20.wasEmptyNode();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.isDelProp();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node38 = node36.getParent();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node36.setJSType(jSType39);
        java.lang.String str41 = node36.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = null;
        node43.setStaticSourceFile(staticSourceFile46);
        boolean boolean48 = node43.isComma();
        node43.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node20, node27, node36, node43);
        boolean boolean52 = node43.isFor();
        node43.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node55 = node43.cloneTree();
        int int56 = strList6.indexOf((java.lang.Object) node55);
        java.lang.Object[] objArray57 = strList6.toArray();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test21914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21914");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isNoShadow();
        boolean boolean10 = jSDocInfo8.isNoShadow();
        boolean boolean11 = jSDocInfo8.hasModifies();
        boolean boolean12 = jSDocInfo8.isExterns();
        boolean boolean13 = jSDocInfo8.hasType();
        boolean boolean14 = jSDocInfo8.isDefine();
        java.util.Collection<java.lang.String> strCollection15 = jSDocInfo8.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo8.getThisType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection17 = jSDocInfo8.getTypeNodes();
        int int18 = strList7.indexOf((java.lang.Object) nodeCollection17);
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator19 = nodeCollection17.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strCollection15);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(nodeCollection17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator19);
    }

    @Test
    public void test21915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21915");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isParamList();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node12 = node3.cloneTree();
        boolean boolean13 = node3.isQuotedString();
        boolean boolean14 = node3.isInstanceOf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21916");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        int int12 = node3.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        com.google.javascript.rhino.Node node14 = node3.getNext();
        boolean boolean15 = node3.isScript();
        boolean boolean16 = node3.isWhile();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21917");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("((OR))");
        boolean boolean9 = jSDocInfo0.hasParameter("");
        boolean boolean10 = jSDocInfo0.isImplicitCast();
        boolean boolean12 = jSDocInfo0.hasParameterType("Unknown class name");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean27 = jSTypeExpression23.equals((java.lang.Object) visibility26);
        jSDocInfo0.setVisibility(visibility26);
        java.util.Set<java.lang.String> strSet29 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo0.getType();
        boolean boolean31 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test21918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21918");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        java.lang.Object obj10 = null;
        boolean boolean11 = jSTypeExpression9.equals(obj10);
        com.google.javascript.rhino.Node node12 = jSTypeExpression9.getRoot();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        java.util.Spliterator<java.lang.String> strSpliterator28 = strList19.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = strList19.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor30 = strList19.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean33 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str38 = ternaryValue37.toString();
        boolean boolean40 = ternaryValue37.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue34.and(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue31.and(ternaryValue37);
        int int43 = strList19.indexOf((java.lang.Object) ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue42.xor(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue42.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue46.not();
        boolean boolean48 = jSTypeExpression9.equals((java.lang.Object) ternaryValue46);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean50 = jSTypeExpression9.isOptionalArg();
        com.google.javascript.rhino.Node node51 = jSTypeExpression9.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "unknown" + "'", str38, "unknown");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test21919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21919");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        boolean boolean9 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21920");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 10);
    }

    @Test
    public void test21921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21921");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.lang.String str11 = jSDocInfo9.getMeaning();
        boolean boolean12 = jSDocInfo9.hasReturnType();
        boolean boolean13 = jSDocInfo9.isDeprecated();
        boolean boolean14 = jSDocInfo9.hasModifies();
        int int15 = jSDocInfo9.getExtendedInterfacesCount();
        boolean boolean16 = jSDocInfo9.hasTypedefType();
        boolean boolean17 = jSDocInfo9.isDeprecated();
        java.lang.String str18 = jSDocInfo9.getMeaning();
        boolean boolean19 = jSDocInfo9.isConstant();
        int int20 = strList8.lastIndexOf((java.lang.Object) boolean19);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test21922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21922");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition0.hasBrackets();
        int int10 = typePosition0.getPositionOnStartLine();
        int int11 = typePosition0.getPositionOnStartLine();
        int int12 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isNot();
        boolean boolean19 = node14.isDefaultCase();
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        boolean boolean27 = node22.isName();
        boolean boolean28 = node22.isDefaultCase();
        node14.addChildToFront(node22);
        int int30 = node22.getCharno();
        typePosition0.setItem(node22);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = node22.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test21923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21923");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        boolean boolean33 = node32.isDefaultCase();
        boolean boolean34 = node32.isNoSideEffectsCall();
        boolean boolean35 = node32.isAssignAdd();
        boolean boolean36 = node32.isSyntheticBlock();
        int int37 = strList26.lastIndexOf((java.lang.Object) boolean36);
        java.lang.Object[] objArray38 = strList26.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = strList26.remove(52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test21924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21924");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getLicense();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue3.xor(ternaryValue4);
        boolean boolean7 = ternaryValue3.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean10 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean13 = ternaryValue11.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str15 = ternaryValue14.toString();
        boolean boolean17 = ternaryValue14.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue11.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue8.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue3.or(ternaryValue19);
        boolean boolean22 = ternaryValue19.toBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = strSet2.remove((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "unknown" + "'", str15, "unknown");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test21925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21925");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setAllFlags();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test21926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21926");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        com.google.javascript.rhino.Node node11 = jSTypeExpression10.getRoot();
        boolean boolean12 = jSTypeExpression10.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean14 = jSTypeExpression10.equals((java.lang.Object) visibility13);
        com.google.javascript.rhino.Node node15 = jSTypeExpression10.getRoot();
        com.google.javascript.rhino.Node node16 = jSTypeExpression10.getRoot();
        boolean boolean17 = jSTypeExpression10.isOptionalArg();
        com.google.javascript.rhino.Node node18 = jSTypeExpression10.getRoot();
        java.lang.String str19 = node18.getSourceFileName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test21927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21927");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        node21.putBooleanProp(43, true);
        boolean boolean34 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node35 = node21.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = node35.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test21928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21928");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        node8.putIntProp((int) (short) 0, 38);
        node4.addChildToBack(node8);
        boolean boolean16 = node8.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isNot();
        boolean boolean23 = node18.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        com.google.javascript.rhino.Node node28 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node29 = node8.srcref(node25);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isTypeOf();
        boolean boolean36 = node31.wasEmptyNode();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isDelProp();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node49 = node47.getParent();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node47.setJSType(jSType50);
        java.lang.String str52 = node47.toString();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        node54.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList62 = com.google.common.collect.ImmutableList.of(node31, node38, node47, node54);
        boolean boolean63 = node54.isComma();
        boolean boolean64 = node8.isEquivalentToTyped(node54);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        node68.setIsSyntheticBlock(true);
        boolean boolean73 = node68.isContinue();
        java.lang.String str74 = node68.getQualifiedName();
        node68.putBooleanProp(1, false);
        com.google.javascript.rhino.Node node78 = node54.useSourceInfoIfMissingFromForTree(node68);
        boolean boolean79 = node78.isBlock();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) 10, node78);
        node80.detachChildren();
        boolean boolean82 = node80.isSwitch();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR" + "'", str52, "OR");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test21929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21929");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getFileOverview();
        java.lang.String str3 = jSDocInfo1.getFileOverview();
        java.lang.String str4 = jSDocInfo1.getMeaning();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        boolean boolean12 = node6.isLocalResultCall();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node14.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node26 = node6.useSourceInfoFrom(node19);
        jSDocInfo1.setAssociatedNode(node6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node6.children();
        boolean boolean29 = node6.isAnd();
        boolean boolean30 = node6.isBlock();
        boolean boolean31 = node6.isDefaultCase();
        boolean boolean32 = node6.isReturn();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(15, node6);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test21930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21930");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        boolean boolean5 = node2.isVarArgs();
        int int6 = node2.getChildCount();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isNot();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = node8.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node16 = node2.useSourceInfoFromForTree(node14);
        node2.setSourceEncodedPositionForTree(54);
        boolean boolean19 = node2.isScript();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        node22.setStaticSourceFile(staticSourceFile25);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        com.google.javascript.rhino.Node node38 = node28.useSourceInfoFromForTree(node35);
        boolean boolean39 = node22.hasChild(node28);
        boolean boolean40 = node28.isNot();
        node28.addSuppression("Not declared as a type name");
        boolean boolean43 = node28.isNumber();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isTypeOf();
        boolean boolean50 = node45.isVarArgs();
        boolean boolean51 = node45.isCatch();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isNot();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = node53.copyInformationFromForTree(node59);
        boolean boolean61 = node60.isExprResult();
        boolean boolean62 = node60.isDefaultCase();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(15, node28, node45, node60);
        boolean boolean64 = node28.isIf();
        com.google.javascript.rhino.Node node66 = node28.getAncestor(1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 100, node2, node66);
        boolean boolean68 = node2.isString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test21931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21931");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        int int6 = node2.getCharno();
        boolean boolean7 = node2.isName();
        boolean boolean8 = node2.isNE();
        boolean boolean9 = node2.isIn();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        com.google.javascript.rhino.Node node15 = node13.getParent();
        boolean boolean16 = node15.isDefaultCase();
        int int17 = node2.getIndexOfChild(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node2.setStaticSourceFile(staticSourceFile18);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(49, node2);
        int int22 = node20.getIntProp(1);
        boolean boolean23 = node20.isRegExp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test21932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21932");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean4 = node3.isRegExp();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = node6.cloneNode();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        com.google.javascript.rhino.Node node41 = node7.copyInformationFrom(node32);
        node41.putIntProp((int) ' ', 45);
        java.lang.String str45 = node3.checkTreeEquals(node41);
        boolean boolean46 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n" + "'", str45, "Node tree inequality:\nTree1:\nNUMBER 4.0 1\n\n\nTree2:\nOR 0 [incrdecr: 45]\n\n\nSubtree1: NUMBER 4.0 1\n\n\nSubtree2: OR 0 [incrdecr: 45]\n");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test21933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21933");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isFromExterns();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node12.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node12.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.children();
        boolean boolean19 = node12.isObjectLit();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isReturn();
        com.google.javascript.rhino.InputId inputId26 = node21.getInputId();
        boolean boolean27 = node21.isArrayLit();
        boolean boolean28 = node21.isInc();
        com.google.javascript.rhino.Node node29 = node12.srcrefTree(node21);
        boolean boolean30 = node29.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node47 = node45.getParent();
        com.google.javascript.rhino.Node node48 = node38.useSourceInfoFromForTree(node45);
        boolean boolean49 = node32.hasChild(node38);
        boolean boolean50 = node32.isStringKey();
        int int51 = node32.getCharno();
        com.google.javascript.rhino.Node node52 = node29.useSourceInfoFrom(node32);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        boolean boolean59 = node55.isNot();
        boolean boolean60 = node55.isDefaultCase();
        node55.setCharno((int) (byte) 10);
        boolean boolean63 = node55.isNumber();
        boolean boolean64 = node32.isEquivalentTo(node55);
        boolean boolean65 = node55.isLocalResultCall();
        boolean boolean66 = node1.isEquivalentToTyped(node55);
        java.lang.String str67 = node55.getSourceFileName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test21934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21934");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        node6.setSourceEncodedPositionForTree((int) (short) -1);
        boolean boolean17 = node6.isExprResult();
        boolean boolean18 = node6.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node6.getAncestors();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isNot();
        boolean boolean31 = node26.isIf();
        com.google.javascript.rhino.Node node32 = node23.copyInformationFromForTree(node26);
        boolean boolean33 = node23.isEmpty();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isReturn();
        com.google.javascript.rhino.InputId inputId40 = node35.getInputId();
        boolean boolean41 = node35.isAdd();
        node23.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node43 = node23.removeFirstChild();
        com.google.javascript.rhino.Node node44 = node6.useSourceInfoIfMissingFromForTree(node23);
        java.lang.String str45 = node44.getQualifiedName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputId40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test21935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21935");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        boolean boolean61 = node60.isNoSideEffectsCall();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        java.lang.String str67 = node60.toString(true, false, true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR" + "'", str67, "OR");
    }

    @Test
    public void test21936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21936");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node1.isQuotedString();
        boolean boolean34 = node1.isNumber();
        java.lang.String str35 = node1.getQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test21937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21937");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        boolean boolean17 = node14.isLabelName();
        boolean boolean18 = node14.wasEmptyNode();
        boolean boolean19 = node14.isComma();
        int int20 = node14.getSourcePosition();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node14.getStaticSourceFile();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isCatch();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test21938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21938");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        int int77 = node75.getType();
        com.google.javascript.rhino.InputId inputId78 = node75.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node75, "");
        boolean boolean81 = strList71.contains((java.lang.Object) node75);
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList71.spliterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor83 = strList71.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = strList71.add("OR 0 [synthetic: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNull(inputId78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertNotNull(strItor83);
    }

    @Test
    public void test21939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21939");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        jSDocInfo0.setLicense("BITXOR 0");
        java.lang.String str10 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test21940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21940");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        node21.putBooleanProp(43, true);
        boolean boolean34 = node21.isAssignAdd();
        boolean boolean35 = node21.isOr();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = new com.google.javascript.rhino.JSTypeExpression(node21, "(Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n)");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeExpression37.evaluate(jSTypeStaticScope38, jSTypeRegistry39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test21941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21941");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR [directives: []]\n    OR\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setItem("NUMBER 4.0 1\n");
        stringPosition12.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition12.setPositionInformation((int) '#', 44, 51, 50);
        int int25 = stringPosition12.getEndLine();
        stringPosition12.setItem("Unknown class name");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition28.setItem("NUMBER 4.0 1\n");
        stringPosition28.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition28.setPositionInformation((int) '#', 44, 51, 50);
        int int41 = stringPosition28.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition42.setItem("NUMBER 4.0 1\n");
        stringPosition42.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int50 = stringPosition42.getEndLine();
        int int51 = stringPosition42.getPositionOnStartLine();
        stringPosition42.setPositionInformation((int) ' ', 49, 51, 38);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int58 = stringPosition57.getEndLine();
        int int59 = stringPosition57.getEndLine();
        stringPosition57.setItem("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition62 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition62.setItem("NUMBER 4.0 1\n");
        stringPosition62.setItem("unknown");
        stringPosition62.setItem("(OR)");
        stringPosition62.setItem("OR \n");
        int int71 = stringPosition62.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int73 = stringPosition72.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition12, stringPosition28, stringPosition42, stringPosition57, stringPosition62, stringPosition72);
        stringPosition12.setItem("(unknown)");
        int int77 = stringPosition12.getStartLine();
        int int78 = stringPosition12.getEndLine();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 51 + "'", int25 == 51);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51 + "'", int41 == 51);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 51 + "'", int78 == 51);
    }

    @Test
    public void test21942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21942");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isArrayLit();
        boolean boolean8 = node1.isObjectLit();
        com.google.javascript.rhino.Node node10 = node1.getAncestor((int) (byte) 0);
        int int11 = node1.getType();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node13.setStaticSourceFile(staticSourceFile16);
        boolean boolean18 = node13.isComma();
        node13.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node22.children();
        com.google.javascript.rhino.InputId inputId27 = null;
        node22.setInputId(inputId27);
        boolean boolean29 = node22.isName();
        java.lang.String str30 = node13.checkTreeEquals(node22);
        boolean boolean31 = node22.isInc();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        node22.addChildrenToFront(node33);
        boolean boolean43 = node33.isBlock();
        boolean boolean44 = node33.isCase();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.isOnlyModifiesThisCall();
        boolean boolean52 = node46.isDelProp();
        boolean boolean53 = node46.isNull();
        boolean boolean54 = node33.hasChild(node46);
        com.google.javascript.rhino.Node node55 = node1.srcref(node46);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str30, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test21943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21943");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isIf();
        boolean boolean7 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        node9.setStaticSourceFile(staticSourceFile12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.Node node25 = node15.useSourceInfoFromForTree(node22);
        boolean boolean26 = node9.hasChild(node15);
        node1.addChildToBack(node15);
        boolean boolean28 = node1.hasMoreThanOneChild();
        boolean boolean29 = node1.isNE();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isNot();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = node31.copyInformationFromForTree(node37);
        boolean boolean39 = node31.isNew();
        boolean boolean40 = node31.isCall();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node31.getAncestors();
        com.google.javascript.rhino.Node node42 = node1.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node42.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = node42.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ancestorIterable41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(jSDocInfo43);
    }

    @Test
    public void test21944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21944");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isAdd();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node8.getStaticSourceFile();
        boolean boolean14 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node16.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = node8.useSourceInfoFrom(node21);
        boolean boolean29 = node21.isWhile();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node33.isLabel();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = node37.cloneNode();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node40.addChildrenToFront(node42);
        boolean boolean44 = node40.isNot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = node40.copyInformationFromForTree(node46);
        com.google.javascript.rhino.InputId inputId48 = node40.getInputId();
        com.google.javascript.rhino.Node node49 = node40.getNext();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        boolean boolean57 = node51.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node21, node33, node38, node40, node51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node40.getJsDocBuilderForNode();
        boolean boolean60 = node40.hasOneChild();
        com.google.javascript.rhino.Node node61 = node1.copyInformationFrom(node40);
        boolean boolean62 = node61.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node63 = node61.getFirstChild();
        boolean boolean64 = node63.isVar();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21945");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean41 = strList33.containsAll((java.util.Collection<java.lang.String>) strList40);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strList33.spliterator();
        boolean boolean43 = strList25.containsAll((java.util.Collection<java.lang.String>) strList33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo45.getParameterNames();
        boolean boolean47 = jSDocInfo45.isOverride();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isNot();
        boolean boolean59 = node54.isIf();
        com.google.javascript.rhino.Node node60 = node51.copyInformationFromForTree(node54);
        jSDocInfo45.setAssociatedNode(node54);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node54.children();
        boolean boolean63 = node54.isAssign();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(50, node54, 45, (int) (byte) 0);
        boolean boolean67 = node66.isTrue();
        boolean boolean68 = node66.isThis();
        int int69 = strList33.indexOf((java.lang.Object) node66);
        boolean boolean70 = strList33.isEmpty();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test21946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21946");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesThis();
        int int7 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
    }

    @Test
    public void test21947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21947");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean4 = node3.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        boolean boolean11 = node10.isDefaultCase();
        boolean boolean12 = node10.isNoSideEffectsCall();
        java.lang.String str16 = node10.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.hasTypedefType();
        java.lang.String str19 = jSDocInfo17.toString();
        node10.setJSDocInfo(jSDocInfo17);
        boolean boolean21 = node10.isGetProp();
        node3.addChildToBack(node10);
        boolean boolean23 = node10.isNot();
        boolean boolean24 = node10.isTry();
        int int25 = node10.getLineno();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR" + "'", str16, "OR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test21948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21948");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 10);
        typePosition41.setItem(node43);
        int int45 = node43.getSourceOffset();
        com.google.javascript.rhino.Node node46 = node36.copyInformationFrom(node43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node48.addSuppression("");
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node57 = node55.getParent();
        com.google.javascript.rhino.Node node58 = node48.useSourceInfoFromForTree(node55);
        boolean boolean59 = node58.isArrayLit();
        node58.setSourceEncodedPosition(30);
        boolean boolean62 = node58.isSwitch();
        boolean boolean63 = node58.isTypeOf();
        boolean boolean64 = node58.isLabel();
        com.google.javascript.rhino.Node node65 = node46.useSourceInfoIfMissingFromForTree(node58);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str51, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test21949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21949");
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = com.google.common.collect.ImmutableList.of("OR", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = strList6.retainAll((java.util.Collection<java.lang.String>) strList11);
        int int14 = strList6.size();
        boolean boolean15 = strList3.containsAll((java.util.Collection<java.lang.String>) strList6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = strList3.add("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR 37\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR 37\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test21950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21950");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        boolean boolean11 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21951");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isInc();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        node23.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node44 = node3.useSourceInfoFromForTree(node23);
        boolean boolean45 = node23.isCatch();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test21952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21952");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        int int17 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean18 = jSDocInfo0.isInterface();
        int int19 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str21 = jSDocInfo0.getDescriptionForParameter("Unknown class name");
        boolean boolean22 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
    }

    @Test
    public void test21953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21953");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasBaseType();
        jSDocInfo4.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo4.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo4.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo11.getTemplateTypeNames();
        boolean boolean14 = jSDocInfo11.hasTypedefType();
        boolean boolean15 = jSDocInfo11.hasModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo16.getParameterNames();
        boolean boolean18 = jSDocInfo16.isOverride();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        boolean boolean30 = node25.isIf();
        com.google.javascript.rhino.Node node31 = node22.copyInformationFromForTree(node25);
        jSDocInfo16.setAssociatedNode(node25);
        int int33 = jSDocInfo16.getImplementedInterfaceCount();
        boolean boolean34 = jSDocInfo16.isInterface();
        int int35 = jSDocInfo16.getImplementedInterfaceCount();
        java.lang.String str36 = jSDocInfo16.getLendsName();
        boolean boolean38 = jSDocInfo16.hasParameterType("(Named type with empty name component)");
        boolean boolean39 = jSDocInfo16.isNoTypeCheck();
        boolean boolean40 = jSDocInfo16.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str42 = jSDocInfo41.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = jSDocInfo41.getTemplateTypeNames();
        int int44 = jSDocInfo41.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection45 = jSDocInfo41.getMarkers();
        boolean boolean46 = jSDocInfo41.isConstant();
        boolean boolean47 = jSDocInfo41.isNoTypeCheck();
        int int48 = jSDocInfo41.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo41.getEnumParameterType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo41.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str52 = jSDocInfo51.getFileOverview();
        java.lang.String str53 = jSDocInfo51.getFileOverview();
        boolean boolean55 = jSDocInfo51.hasParameterType("[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo56.getParameterNames();
        java.util.Collection<java.lang.String> strCollection58 = jSDocInfo56.getReferences();
        boolean boolean59 = jSDocInfo56.isConstant();
        boolean boolean60 = jSDocInfo56.isConstructor();
        jSDocInfo56.setLicense("RETURN ()\n");
        java.lang.String str63 = jSDocInfo56.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean65 = jSDocInfo64.isNoShadow();
        boolean boolean66 = jSDocInfo64.isNoShadow();
        boolean boolean67 = jSDocInfo64.hasModifies();
        boolean boolean68 = jSDocInfo64.isExterns();
        boolean boolean69 = jSDocInfo64.isConsistentIdGenerator();
        boolean boolean70 = jSDocInfo64.isNoSideEffects();
        boolean boolean71 = jSDocInfo64.isOverride();
        java.lang.String str72 = jSDocInfo64.getDeprecationReason();
        java.lang.String str73 = jSDocInfo64.getFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasBaseType();
        jSDocInfo74.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo74.getThrownTypes();
        int int79 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection80 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean82 = jSDocInfo81.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection83 = jSDocInfo81.getAuthors();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList84 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo11, jSDocInfo16, jSDocInfo41, jSDocInfo51, jSDocInfo56, jSDocInfo64, jSDocInfo74, jSDocInfo81);
        java.util.Set<java.lang.String> strSet85 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection86 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = strSet85.addAll(strCollection86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(markerCollection45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(strCollection58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "JSDocInfo" + "'", str63, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(nodeCollection80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(strCollection83);
        org.junit.Assert.assertNotNull(jSDocInfoList84);
        org.junit.Assert.assertNotNull(strSet85);
    }

    @Test
    public void test21954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21954");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.xor(ternaryValue1);
        boolean boolean4 = ternaryValue0.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue0.not();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        java.util.Spliterator<java.lang.String> strSpliterator21 = strList12.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = strList12.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor23 = strList12.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean26 = ternaryValue24.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean29 = ternaryValue27.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str31 = ternaryValue30.toString();
        boolean boolean33 = ternaryValue30.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue27.and(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue24.and(ternaryValue30);
        int int36 = strList12.indexOf((java.lang.Object) ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue35.xor(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue35.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue0.and(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue0.not();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "unknown" + "'", str31, "unknown");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
    }

    @Test
    public void test21955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21956");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        node19.setLength(1);
        com.google.javascript.rhino.Node node22 = node3.useSourceInfoFrom(node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node19.getJSDocInfo();
        node19.setType(1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo26.getParameterNames();
        boolean boolean28 = jSDocInfo26.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo26.getVisibility();
        java.lang.String str31 = jSDocInfo26.getDescriptionForParameter("Not declared as a type name");
        boolean boolean32 = jSDocInfo26.isOverride();
        java.lang.String str34 = jSDocInfo26.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = jSDocInfo26.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet38 = jSDocInfo37.getParameterNames();
        boolean boolean39 = jSDocInfo37.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = jSDocInfo37.getThrownTypes();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node42.isTypeOf();
        boolean boolean47 = node42.wasEmptyNode();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isTypeOf();
        boolean boolean54 = node49.isDelProp();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node58.setJSType(jSType61);
        java.lang.String str63 = node58.toString();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node65.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        node65.setStaticSourceFile(staticSourceFile68);
        boolean boolean70 = node65.isComma();
        node65.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList73 = com.google.common.collect.ImmutableList.of(node42, node49, node58, node65);
        boolean boolean74 = node65.isComma();
        boolean boolean75 = node65.isCase();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int81 = node80.getSideEffectFlags();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        node83.addChildrenToFront(node85);
        com.google.javascript.rhino.Node node87 = node85.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str89 = jSDocInfo88.getFileOverview();
        java.lang.String str90 = jSDocInfo88.getFileOverview();
        boolean boolean91 = jSDocInfo88.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList92 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo37, (java.lang.Object) node65, (java.lang.Object) node80, (java.lang.Object) node85, (java.lang.Object) jSDocInfo88);
        int int93 = strList35.indexOf((java.lang.Object) node80);
        boolean boolean94 = node80.hasChildren();
        com.google.javascript.rhino.Node node95 = node19.useSourceInfoFrom(node80);
        boolean boolean96 = node95.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(visibility29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "OR" + "'", str63, "OR");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objList92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test21957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21957");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getDescription();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        jSDocInfo0.setDeprecated(false);
        boolean boolean10 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        int int12 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str14 = jSDocInfo0.getDescriptionForParameter("TRUE\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test21958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21958");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Iterator<java.lang.String> strItor15 = strList6.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strList6.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo17.getParameterNames();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo17.getVisibility();
        java.lang.String str22 = jSDocInfo17.getDescriptionForParameter("Not declared as a type name");
        boolean boolean23 = jSDocInfo17.isOverride();
        java.lang.String str25 = jSDocInfo17.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str26 = jSDocInfo17.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo17.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList27.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor29 = strList28.listIterator();
        boolean boolean30 = strList6.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.Object[] objArray31 = strList6.toArray();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.isOnlyModifiesThisCall();
        boolean boolean39 = node33.isDelProp();
        boolean boolean40 = node33.hasChildren();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(32, 15, 0);
        node44.setWasEmptyNode(true);
        boolean boolean47 = node33.hasChild(node44);
        node44.setSourceEncodedPosition((-1));
        int int50 = strList6.indexOf((java.lang.Object) (-1));
        java.lang.String[] strArray57 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        java.lang.Object[] objArray60 = strSet58.toArray();
        strSet58.clear();
        java.util.Iterator<java.lang.String> strItor62 = strSet58.iterator();
        int int63 = strSet58.size();
        boolean boolean64 = strSet58.isEmpty();
        boolean boolean66 = strSet58.add("OR\n    OR\n");
        java.lang.Object[] objArray67 = strSet58.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = strList6.removeAll((java.util.Collection<java.lang.String>) strSet58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(visibility20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[OR\n    OR\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[OR\n    OR\n]");
    }

    @Test
    public void test21959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21959");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isTypeOf();
        boolean boolean37 = node32.isDelProp();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        int int43 = node39.getCharno();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node32, node39 };
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray44);
        int int46 = strList13.indexOf((java.lang.Object) node45);
        java.util.Iterator<java.lang.String> strItor47 = strList13.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        boolean boolean59 = strList13.containsAll((java.util.Collection<java.lang.String>) strList58);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        int int61 = strList13.indexOf((java.lang.Object) booleanLiteralSet60);
        boolean boolean62 = strList13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str64 = jSDocInfo63.getFileOverview();
        java.lang.String str65 = jSDocInfo63.getFileOverview();
        java.lang.String str66 = jSDocInfo63.getMeaning();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        java.lang.String str71 = node68.toString();
        com.google.javascript.rhino.Node node72 = node68.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = node68.getStaticSourceFile();
        boolean boolean74 = node68.isLocalResultCall();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node76.addSuppression("");
        java.lang.String str79 = node76.toString();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node81.addSuppression("");
        java.lang.String str84 = node81.toString();
        com.google.javascript.rhino.Node node85 = node81.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile86 = node81.getStaticSourceFile();
        com.google.javascript.rhino.Node node87 = node76.copyInformationFromForTree(node81);
        com.google.javascript.rhino.Node node88 = node68.useSourceInfoFrom(node81);
        jSDocInfo63.setAssociatedNode(node68);
        java.lang.String str91 = jSDocInfo63.getDescriptionForParameter("true");
        boolean boolean92 = jSDocInfo63.hasType();
        boolean boolean93 = jSDocInfo63.isConsistentIdGenerator();
        int int94 = strList13.indexOf((java.lang.Object) jSDocInfo63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = strList13.get(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (32) must be less than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str71, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(staticSourceFile73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str79, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str84, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNull(staticSourceFile86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test21960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21960");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        java.lang.String str9 = jSDocInfo0.getLicense();
        boolean boolean11 = jSDocInfo0.hasParameterType("OR [opt_arg: 1]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21961");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
    }

    @Test
    public void test21962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21962");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 59);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test21963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        boolean boolean4 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        boolean boolean7 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21964");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.String str8 = node3.getSourceFileName();
        boolean boolean9 = node3.isDelProp();
        boolean boolean10 = node3.isCatch();
        node3.setWasEmptyNode(true);
        boolean boolean13 = node3.isFunction();
        com.google.javascript.rhino.InputId inputId14 = node3.getInputId();
        boolean boolean15 = node3.isWith();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test21965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21965");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        boolean boolean24 = node19.wasEmptyNode();
        java.lang.Class<?> wildcardClass25 = node19.getClass();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        java.lang.Class<?> wildcardClass33 = node27.getClass();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isTypeOf();
        boolean boolean40 = node35.wasEmptyNode();
        java.lang.Class<?> wildcardClass41 = node35.getClass();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isTypeOf();
        boolean boolean48 = node43.wasEmptyNode();
        java.lang.Class<?> wildcardClass49 = node43.getClass();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        boolean boolean55 = node51.isTypeOf();
        boolean boolean56 = node51.wasEmptyNode();
        java.lang.Class<?> wildcardClass57 = node51.getClass();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        boolean boolean63 = node59.isTypeOf();
        boolean boolean64 = node59.wasEmptyNode();
        java.lang.Class<?> wildcardClass65 = node59.getClass();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isTypeOf();
        boolean boolean72 = node67.wasEmptyNode();
        java.lang.Class<?> wildcardClass73 = node67.getClass();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node75.addChildrenToFront(node77);
        boolean boolean79 = node75.isTypeOf();
        boolean boolean80 = node75.wasEmptyNode();
        java.lang.Class<?> wildcardClass81 = node75.getClass();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        node83.addChildrenToFront(node85);
        boolean boolean87 = node83.isTypeOf();
        boolean boolean88 = node83.wasEmptyNode();
        java.lang.Class<?> wildcardClass89 = node83.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.GenericDeclaration> genericDeclarationList90 = com.google.common.collect.ImmutableList.of((java.lang.reflect.GenericDeclaration) wildcardClass25, (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass41, (java.lang.reflect.GenericDeclaration) wildcardClass49, (java.lang.reflect.GenericDeclaration) wildcardClass57, (java.lang.reflect.GenericDeclaration) wildcardClass65, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.lang.reflect.GenericDeclaration) wildcardClass81, (java.lang.reflect.GenericDeclaration) wildcardClass89);
        int int91 = strList13.indexOf((java.lang.Object) wildcardClass41);
        java.util.ListIterator<java.lang.String> strItor92 = strList13.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = strList13.get(213092);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (213092) must be less than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(genericDeclarationList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(strItor92);
    }

    @Test
    public void test21966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21966");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isArrayLit();
        boolean boolean8 = node1.isInc();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isWith();
        boolean boolean11 = node1.isLabelName();
        boolean boolean12 = node1.isWhile();
        boolean boolean13 = node1.isSwitch();
        com.google.javascript.rhino.Node node14 = node1.getLastChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test21967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21967");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node3.getAncestors();
        boolean boolean11 = node3.isDec();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21968");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("");
        jSDocInfo0.addSuppression("STRING  32\n");
        java.lang.String str12 = jSDocInfo0.getMeaning();
        boolean boolean13 = jSDocInfo0.isConstructor();
        java.lang.String str15 = jSDocInfo0.getDescriptionForParameter("STRING (OR [jsdoc_info: JSDocInfo]) 2");
        boolean boolean16 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21969");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("OR 0 [jsdoc_info: JSDocInfo]\n");
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor10 = strList9.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = strList9.reverse();
        java.lang.Object[] objArray12 = strList9.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test21970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21970");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        boolean boolean8 = node4.isTypeOf();
        boolean boolean9 = node4.wasEmptyNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isTypeOf();
        boolean boolean16 = node11.isDelProp();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node20.setJSType(jSType23);
        java.lang.String str25 = node20.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        node27.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList35 = com.google.common.collect.ImmutableList.of(node4, node11, node20, node27);
        com.google.javascript.rhino.Node node36 = node2.copyInformationFrom(node27);
        boolean boolean37 = node2.isIn();
        int int38 = node2.getSideEffectFlags();
        node2.removeProp((int) 'a');
        boolean boolean41 = node2.isTry();
        boolean boolean42 = node2.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR" + "'", str25, "OR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21971");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFromForTree(node64);
        boolean boolean66 = node64.isArrayLit();
        boolean boolean67 = node64.isFor();
        boolean boolean68 = node64.isInstanceOf();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test21972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21972");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        java.util.Iterator<java.lang.String> strItor7 = strSet5.iterator();
        int int8 = strSet5.size();
        boolean boolean9 = strSet5.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test21973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21973");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition3.setItem("NUMBER 4.0 1\n");
        stringPosition3.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str11 = stringPosition3.getItem();
        stringPosition3.setItem("");
        int int14 = stringPosition3.getStartLine();
        int int15 = stringPosition3.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int17 = stringPosition16.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList18 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition16);
        java.lang.String str19 = stringPosition0.getItem();
        int int20 = stringPosition0.getEndLine();
        stringPosition0.setPositionInformation((-1), 53, 16, 10);
        stringPosition0.setItem("STRING OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 4.0 1\n" + "'", str11, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(stringPositionList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 4.0 1\n" + "'", str19, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test21974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21974");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor18 = strList17.iterator();
        java.util.Iterator<java.lang.String> strItor19 = strList17.iterator();
        java.util.stream.Stream<java.lang.String> strStream20 = strList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasBaseType();
        jSDocInfo21.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo21.getTypedefType();
        boolean boolean26 = jSDocInfo21.isJavaDispatch();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo21.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo21.getEnumParameterType();
        int int29 = strList17.indexOf((java.lang.Object) jSDocInfo21);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        int int36 = node32.getCharno();
        boolean boolean37 = node32.isName();
        boolean boolean38 = node32.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node32, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression40);
        boolean boolean43 = jSTypeExpression40.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node44 = jSTypeExpression40.getRoot();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isNot();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = node46.copyInformationFromForTree(node52);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        boolean boolean59 = node55.isNot();
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoFrom(node55);
        boolean boolean61 = jSTypeExpression40.equals((java.lang.Object) node55);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node63.setStaticSourceFile(staticSourceFile66);
        boolean boolean68 = node63.isComma();
        boolean boolean69 = node63.isBlock();
        java.lang.String str70 = node63.toStringTree();
        boolean boolean71 = node63.isDec();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node73.addSuppression("");
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        node78.addSuppression("");
        java.lang.String str81 = node78.toString();
        com.google.javascript.rhino.Node node82 = node78.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile83 = node78.getStaticSourceFile();
        com.google.javascript.rhino.Node node84 = node73.copyInformationFromForTree(node78);
        java.lang.String str85 = node84.getSourceFileName();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(0, node55, node63, node84, 4, (int) (short) -1);
        int int89 = node55.getChildCount();
        boolean boolean90 = strList17.contains((java.lang.Object) int89);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str70, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str76, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str81, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(staticSourceFile83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test21975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21975");
        java.lang.String[] strArray1 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.Iterator<java.lang.String> strItor5 = strList2.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean8 = ternaryValue6.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str10 = ternaryValue9.toString();
        boolean boolean12 = ternaryValue9.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue6.and(ternaryValue9);
        boolean boolean14 = strList2.contains((java.lang.Object) ternaryValue6);
        strList2.clear();
        com.google.common.collect.ImmutableList<java.lang.Object> objList16 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.String>) strList2);
        java.util.Collection<java.lang.String> strCollection18 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = strList2.addAll(41, strCollection18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 41, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "unknown" + "'", str10, "unknown");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objList16);
    }

    @Test
    public void test21976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21976");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test21977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21977");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 35.0 43", 50, (int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21978");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        int int8 = strSet7.size();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet7.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strStream9);
    }

    @Test
    public void test21979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21979");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasBaseType();
        jSDocInfo53.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo53.getBaseType();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo53.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet58.spliterator();
        node33.setDirectives(strSet58);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strSet58.spliterator();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node63.setStaticSourceFile(staticSourceFile66);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        com.google.javascript.rhino.Node node78 = node76.getParent();
        com.google.javascript.rhino.Node node79 = node69.useSourceInfoFromForTree(node76);
        boolean boolean80 = node63.hasChild(node69);
        boolean boolean81 = node69.isNot();
        boolean boolean82 = strSet58.equals((java.lang.Object) node69);
        boolean boolean83 = node69.isAssign();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test21980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21980");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        boolean boolean5 = strList3.isEmpty();
        strList3.clear();
        boolean boolean8 = strList3.add("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getFileOverview();
        java.lang.String str11 = jSDocInfo9.getFileOverview();
        boolean boolean12 = jSDocInfo9.isNoAlias();
        int int13 = strList3.lastIndexOf((java.lang.Object) boolean12);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strList3.spliterator();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder15 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node17.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node17 };
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node25 };
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] { node33 };
        com.google.javascript.rhino.Node[][] nodeArray40 = new com.google.javascript.rhino.Node[][] { nodeArray23, nodeArray31, nodeArray39 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder41 = nodeArrayBuilder15.add(nodeArray40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node45.isLabel();
        boolean boolean48 = node45.isObjectLit();
        int int49 = node45.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] { node45 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node54.isLabel();
        boolean boolean57 = node54.isObjectLit();
        int int58 = node54.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node54 };
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        boolean boolean65 = node63.isLabel();
        boolean boolean66 = node63.isObjectLit();
        int int67 = node63.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node[][] nodeArray69 = new com.google.javascript.rhino.Node[][] { nodeArray50, nodeArray59, nodeArray68 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder70 = nodeArrayBuilder41.add(nodeArray69);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        boolean boolean77 = node73.isTypeOf();
        boolean boolean78 = node73.isDelProp();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100);
        node80.addChildrenToFront(node82);
        int int84 = node80.getCharno();
        com.google.javascript.rhino.Node[] nodeArray85 = new com.google.javascript.rhino.Node[] { node73, node80 };
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray85);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder87 = nodeArrayBuilder41.add(nodeArray85);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder88 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray89 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder90 = nodeArrayBuilder88.add(nodeArray89);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder91 = nodeArrayBuilder41.add(nodeArray89);
        boolean boolean92 = strList3.contains((java.lang.Object) nodeArray89);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(221184, nodeArray89);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArrayBuilder41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArrayBuilder70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertNotNull(nodeArrayBuilder87);
        org.junit.Assert.assertNotNull(nodeArray89);
        org.junit.Assert.assertNotNull(nodeArrayBuilder90);
        org.junit.Assert.assertNotNull(nodeArrayBuilder91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test21981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21981");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder2 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        java.lang.String str7 = node4.toString();
        com.google.javascript.rhino.Node node8 = node4.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node4.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] { node12 };
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node20.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node20 };
        com.google.javascript.rhino.Node[][] nodeArray27 = new com.google.javascript.rhino.Node[][] { nodeArray10, nodeArray18, nodeArray26 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = nodeArrayBuilder2.add(nodeArray27);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node32.isLabel();
        boolean boolean35 = node32.isObjectLit();
        int int36 = node32.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node41.isLabel();
        boolean boolean44 = node41.isObjectLit();
        int int45 = node41.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] { node41 };
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node50.isLabel();
        boolean boolean53 = node50.isObjectLit();
        int int54 = node50.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] { node50 };
        com.google.javascript.rhino.Node[][] nodeArray56 = new com.google.javascript.rhino.Node[][] { nodeArray37, nodeArray46, nodeArray55 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder57 = nodeArrayBuilder28.add(nodeArray56);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        boolean boolean64 = node60.isTypeOf();
        boolean boolean65 = node60.isDelProp();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        int int71 = node67.getCharno();
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] { node60, node67 };
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray72);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder74 = nodeArrayBuilder28.add(nodeArray72);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder75 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder77 = nodeArrayBuilder75.add(nodeArray76);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder78 = nodeArrayBuilder28.add(nodeArray76);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(4095, nodeArray76);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(24613, nodeArray76, (int) (byte) -1, 44);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str7, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str15, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArrayBuilder28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArrayBuilder57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArrayBuilder74);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeArrayBuilder77);
        org.junit.Assert.assertNotNull(nodeArrayBuilder78);
    }

    @Test
    public void test21982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21982");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isExprResult();
        boolean boolean10 = node8.isDefaultCase();
        boolean boolean11 = node8.isTrue();
        boolean boolean12 = node8.isNew();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        com.google.javascript.rhino.Node node18 = node16.getParent();
        node16.setIsSyntheticBlock(true);
        boolean boolean21 = node16.isContinue();
        boolean boolean22 = node16.isParamList();
        boolean boolean23 = node16.isParamList();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node30.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node25.copyInformationFromForTree(node30);
        boolean boolean37 = node30.isAssignAdd();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isTypeOf();
        boolean boolean44 = node39.isVarArgs();
        boolean boolean45 = node39.isIn();
        node30.addChildToFront(node39);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node48.addSuppression("");
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        java.lang.String str56 = node53.toString();
        com.google.javascript.rhino.Node node57 = node53.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node53.getStaticSourceFile();
        com.google.javascript.rhino.Node node59 = node48.copyInformationFromForTree(node53);
        boolean boolean60 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        boolean boolean66 = node62.isTypeOf();
        boolean boolean67 = node62.isVarArgs();
        boolean boolean68 = node62.isIn();
        node53.addChildToFront(node62);
        node62.removeProp(48);
        boolean boolean72 = node62.isAssign();
        boolean boolean73 = node62.isTrue();
        boolean boolean74 = node30.isEquivalentToTyped(node62);
        int int75 = node62.getSourceOffset();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node77.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node77.setStaticSourceFile(staticSourceFile80);
        boolean boolean82 = node77.isComma();
        boolean boolean83 = node77.isFalse();
        boolean boolean84 = node77.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node85 = node62.useSourceInfoFrom(node77);
        com.google.javascript.rhino.Node node86 = node16.srcref(node77);
        com.google.javascript.rhino.Node node87 = node8.srcref(node16);
        boolean boolean88 = node16.isDec();
        com.google.javascript.rhino.Node node89 = node16.cloneTree();
        node89.removeProp(7);
        com.google.javascript.rhino.Node node92 = null;
        // The following exception was thrown during execution in test generation
        try {
            node89.addChildrenToBack(node92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str33, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str51, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str56, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test21983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21983");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("Named type with empty name component");
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test21984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21984");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int4 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        boolean boolean8 = jSDocInfo0.isConstructor();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21985");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        node11.setJSDocInfo(jSDocInfo12);
        java.lang.String str18 = jSDocInfo12.getFileOverview();
        java.lang.String str19 = jSDocInfo12.getDescription();
        com.google.javascript.rhino.Node node20 = null;
        jSDocInfo12.setAssociatedNode(node20);
        boolean boolean22 = jSDocInfo12.hasThisType();
        java.lang.String str23 = jSDocInfo12.getDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test21986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21986");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasBaseType();
        jSDocInfo4.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo4.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo4.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo11.getTemplateTypeNames();
        boolean boolean14 = jSDocInfo11.hasTypedefType();
        boolean boolean15 = jSDocInfo11.hasModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo16.getParameterNames();
        boolean boolean18 = jSDocInfo16.isOverride();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        boolean boolean30 = node25.isIf();
        com.google.javascript.rhino.Node node31 = node22.copyInformationFromForTree(node25);
        jSDocInfo16.setAssociatedNode(node25);
        int int33 = jSDocInfo16.getImplementedInterfaceCount();
        boolean boolean34 = jSDocInfo16.isInterface();
        int int35 = jSDocInfo16.getImplementedInterfaceCount();
        java.lang.String str36 = jSDocInfo16.getLendsName();
        boolean boolean38 = jSDocInfo16.hasParameterType("(Named type with empty name component)");
        boolean boolean39 = jSDocInfo16.isNoTypeCheck();
        boolean boolean40 = jSDocInfo16.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str42 = jSDocInfo41.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = jSDocInfo41.getTemplateTypeNames();
        int int44 = jSDocInfo41.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection45 = jSDocInfo41.getMarkers();
        boolean boolean46 = jSDocInfo41.isConstant();
        boolean boolean47 = jSDocInfo41.isNoTypeCheck();
        int int48 = jSDocInfo41.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo41.getEnumParameterType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo41.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str52 = jSDocInfo51.getFileOverview();
        java.lang.String str53 = jSDocInfo51.getFileOverview();
        boolean boolean55 = jSDocInfo51.hasParameterType("[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo56.getParameterNames();
        java.util.Collection<java.lang.String> strCollection58 = jSDocInfo56.getReferences();
        boolean boolean59 = jSDocInfo56.isConstant();
        boolean boolean60 = jSDocInfo56.isConstructor();
        jSDocInfo56.setLicense("RETURN ()\n");
        java.lang.String str63 = jSDocInfo56.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean65 = jSDocInfo64.isNoShadow();
        boolean boolean66 = jSDocInfo64.isNoShadow();
        boolean boolean67 = jSDocInfo64.hasModifies();
        boolean boolean68 = jSDocInfo64.isExterns();
        boolean boolean69 = jSDocInfo64.isConsistentIdGenerator();
        boolean boolean70 = jSDocInfo64.isNoSideEffects();
        boolean boolean71 = jSDocInfo64.isOverride();
        java.lang.String str72 = jSDocInfo64.getDeprecationReason();
        java.lang.String str73 = jSDocInfo64.getFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasBaseType();
        jSDocInfo74.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo74.getThrownTypes();
        int int79 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection80 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean82 = jSDocInfo81.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection83 = jSDocInfo81.getAuthors();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList84 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo11, jSDocInfo16, jSDocInfo41, jSDocInfo51, jSDocInfo56, jSDocInfo64, jSDocInfo74, jSDocInfo81);
        boolean boolean85 = jSDocInfo11.isJavaDispatch();
        boolean boolean86 = jSDocInfo11.isOverride();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(markerCollection45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(strCollection58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "JSDocInfo" + "'", str63, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(nodeCollection80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(strCollection83);
        org.junit.Assert.assertNotNull(jSDocInfoList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test21987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21987");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.lang.Object[] objArray11 = strSet7.toArray();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray12 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray13 = strSet7.toArray(fileLevelJsDocBuilderArray12);
        boolean boolean15 = strSet7.add("true");
        int int16 = strSet7.size();
        boolean boolean17 = strSet7.isEmpty();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray12);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21988");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("NUMBER 1.0 37\n");
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.isConstant();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        boolean boolean9 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21989");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int20 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = node7.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node19.getJsDocBuilderForNode();
        boolean boolean23 = node19.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node25.setStaticSourceFile(staticSourceFile28);
        boolean boolean30 = node25.isComma();
        node25.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node34.children();
        com.google.javascript.rhino.InputId inputId39 = null;
        node34.setInputId(inputId39);
        boolean boolean41 = node34.isName();
        java.lang.String str42 = node25.checkTreeEquals(node34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.hasBaseType();
        java.lang.String str45 = jSDocInfo43.getFileOverview();
        int int46 = jSDocInfo43.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo43.getEnumParameterType();
        node34.setJSDocInfo(jSDocInfo43);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo43.getReturnType();
        java.lang.String str50 = jSDocInfo43.toString();
        java.lang.String str51 = jSDocInfo43.getFileOverview();
        java.lang.String str52 = jSDocInfo43.getSourceName();
        boolean boolean53 = jSDocInfo43.isDeprecated();
        node19.setJSDocInfo(jSDocInfo43);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str42, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "JSDocInfo" + "'", str50, "JSDocInfo");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test21990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21990");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        int int6 = node3.getLength();
        node3.setLength(1);
        node3.setSourceEncodedPositionForTree(43);
        java.lang.Object obj12 = node3.getProp(15);
        boolean boolean13 = node3.hasChildren();
        boolean boolean14 = node3.isOnlyModifiesThisCall();
        int int15 = node3.getChildCount();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test21991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21991");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isExport();
        boolean boolean4 = jSDocInfo0.isDefine();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        boolean boolean6 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        java.lang.String str9 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(markerCollection8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21992");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), 40999, 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21993");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean15 = strList7.containsAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator16 = strList7.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList7.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet19.union(booleanLiteralSet20);
        boolean boolean22 = strList17.equals((java.lang.Object) booleanLiteralSet19);
        java.lang.Object obj23 = null;
        boolean boolean24 = strList17.equals(obj23);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isReturn();
        com.google.javascript.rhino.InputId inputId31 = node26.getInputId();
        boolean boolean32 = node26.isArrayLit();
        boolean boolean33 = node26.isInc();
        boolean boolean34 = strList17.contains((java.lang.Object) node26);
        boolean boolean35 = node26.isRegExp();
        boolean boolean36 = node26.isVar();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(16, node26, (int) (byte) 10, 44);
        com.google.javascript.rhino.Node node40 = node26.detachFromParent();
        boolean boolean41 = node40.isDec();
        boolean boolean42 = node40.isLabelName();
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(inputId31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21994");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test21995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21995");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 0L);
        node1.setLineno(38);
        boolean boolean4 = node1.isNew();
        boolean boolean5 = node1.isIn();
        boolean boolean6 = node1.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test21996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21996");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition3.setItem("NUMBER 4.0 1\n");
        stringPosition3.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str11 = stringPosition3.getItem();
        stringPosition3.setItem("");
        int int14 = stringPosition3.getStartLine();
        int int15 = stringPosition3.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int17 = stringPosition16.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList18 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition16);
        java.lang.String str19 = stringPosition0.getItem();
        java.lang.String str20 = stringPosition0.getItem();
        int int21 = stringPosition0.getPositionOnStartLine();
        int int22 = stringPosition0.getStartLine();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 4.0 1\n" + "'", str11, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(stringPositionList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 4.0 1\n" + "'", str19, "NUMBER 4.0 1\n");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER 4.0 1\n" + "'", str20, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test21997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21997");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.isExpose();
        java.lang.String str7 = jSDocInfo0.getLicense();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        int int12 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test21998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21998");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        boolean boolean8 = node1.isDo();
        boolean boolean9 = node1.isVoid();
        boolean boolean10 = node1.isStringKey();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node1.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
    }

    @Test
    public void test21999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21999");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        node3.setVarArgs(false);
        boolean boolean9 = node3.isVoid();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node11.getStaticSourceFile();
        boolean boolean17 = node11.isLocalResultCall();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node19.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = node11.useSourceInfoFrom(node24);
        boolean boolean32 = node24.isWhile();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node40.cloneNode();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isNot();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = node43.copyInformationFromForTree(node49);
        com.google.javascript.rhino.InputId inputId51 = node43.getInputId();
        com.google.javascript.rhino.Node node52 = node43.getNext();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        boolean boolean60 = node54.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node24, node36, node41, node43, node54);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node43.getJsDocBuilderForNode();
        boolean boolean63 = node43.hasOneChild();
        node3.addChildrenToBack(node43);
        com.google.javascript.rhino.Node node65 = node43.getFirstChild();
        boolean boolean66 = node65.isThrow();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(inputId51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test22000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test22000");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        node17.setIsSyntheticBlock(true);
        boolean boolean22 = node17.isContinue();
        boolean boolean23 = strSet5.equals((java.lang.Object) node17);
        java.lang.Object[] objArray24 = strSet5.toArray();
        java.lang.Object[] objArray25 = strSet5.toArray();
        boolean boolean26 = strSet5.isEmpty();
        com.google.common.collect.ImmutableList[][][] immutableListArray28 = new com.google.common.collect.ImmutableList[0][][];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList<java.lang.String>[][][] strListArray29 = (com.google.common.collect.ImmutableList<java.lang.String>[][][]) immutableListArray28;
        com.google.common.collect.ImmutableList<java.lang.String>[][][] strListArray30 = strSet5.toArray(strListArray29);
        com.google.common.collect.ImmutableList<java.util.RandomAccess[][]> randomAccessArrayList31 = com.google.common.collect.ImmutableList.of((java.util.RandomAccess[][][]) strListArray30);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(immutableListArray28);
        org.junit.Assert.assertNotNull(strListArray29);
        org.junit.Assert.assertNotNull(strListArray30);
        org.junit.Assert.assertNotNull(randomAccessArrayList31);
    }
}


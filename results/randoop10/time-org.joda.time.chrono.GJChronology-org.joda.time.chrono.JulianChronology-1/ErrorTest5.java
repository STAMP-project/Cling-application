import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2501");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant24.plus(readableDuration28);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTimeISO();
        boolean boolean31 = instant15.isAfter((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        java.lang.String str42 = instant40.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.Instant instant49 = gJChronology45.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant49.minus(readableDuration50);
        org.joda.time.Instant instant54 = instant51.withDurationAdded((-12219292800000L), 0);
        int int55 = instant40.compareTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Instant instant56 = instant51.toInstant();
        org.joda.time.Instant instant59 = instant56.withDurationAdded((-36000000L), 0);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant61 = instant59.plus(readableDuration60);
        long long62 = instant61.getMillis();
        boolean boolean63 = instant15.isBefore((org.joda.time.ReadableInstant) instant61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant61 and mutableDateTime30", (instant61.compareTo(mutableDateTime30) == 0) == instant61.equals(mutableDateTime30));
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2502");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        int int6 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfDay();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField10 = gJChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DurationField durationField15 = gJChronology13.millis();
        long long19 = gJChronology13.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField20 = gJChronology13.millis();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = gJChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str30 = dateTimeZone29.getID();
        org.joda.time.Chronology chronology31 = gJChronology26.withZone(dateTimeZone29);
        long long34 = dateTimeZone29.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone35 = dateTimeZone29.toTimeZone();
        long long38 = dateTimeZone29.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology39 = gJChronology13.withZone(dateTimeZone29);
        boolean boolean40 = gJChronology2.equals((java.lang.Object) gJChronology13);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology13.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        boolean boolean51 = instant50.isAfterNow();
        boolean boolean52 = instant50.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone53 = instant50.getZone();
        org.joda.time.Chronology chronology54 = gJChronology13.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField55 = chronology54.months();
        org.joda.time.DurationField durationField56 = chronology54.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField55", (durationField23.compareTo(durationField55) == 0) == durationField23.equals(durationField55));
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2503");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField9, and durationField10", !(durationField20.compareTo(durationField9) == 0) || (Math.signum(durationField20.compareTo(durationField10)) == Math.signum(durationField9.compareTo(durationField10))));
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2504");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        int int19 = dateTimeZone8.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = julianChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.dayOfWeek();
        int int24 = julianChronology20.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField30 = julianChronology29.centuries();
        java.lang.String str31 = julianChronology29.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology29.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone34.getShortName((-35999890L), locale36);
        long long40 = dateTimeZone34.adjustOffset((-35999899L), true);
        int int42 = dateTimeZone34.getStandardOffset(5201L);
        org.joda.time.Chronology chronology43 = julianChronology29.withZone(dateTimeZone34);
        org.joda.time.Chronology chronology44 = julianChronology20.withZone(dateTimeZone34);
        org.joda.time.DurationField durationField45 = chronology44.months();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str52 = dateTimeZone51.getID();
        org.joda.time.Chronology chronology53 = gJChronology48.withZone(dateTimeZone51);
        java.lang.String str55 = dateTimeZone51.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology56 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.Chronology chronology57 = julianChronology56.withUTC();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        org.joda.time.DurationField durationField62 = julianChronology61.centuries();
        java.lang.String str63 = julianChronology61.toString();
        java.lang.String str64 = julianChronology61.toString();
        org.joda.time.DurationField durationField65 = julianChronology61.weekyears();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        java.util.Locale locale70 = null;
        java.lang.String str71 = dateTimeZone67.getName((-1L), locale70);
        org.joda.time.LocalDateTime localDateTime72 = null;
        boolean boolean73 = dateTimeZone67.isLocalDateTimeGap(localDateTime72);
        boolean boolean75 = dateTimeZone67.isStandardOffset(36000000L);
        java.lang.String str76 = dateTimeZone67.toString();
        org.joda.time.Chronology chronology77 = julianChronology61.withZone(dateTimeZone67);
        org.joda.time.Chronology chronology78 = julianChronology56.withZone(dateTimeZone67);
        org.joda.time.Chronology chronology79 = chronology44.withZone(dateTimeZone67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField45", (durationField6.compareTo(durationField45) == 0) == durationField6.equals(durationField45));
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2505");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        boolean boolean21 = instant11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = instant11.getZone();
        boolean boolean23 = instant11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = instant11.getZone();
        org.joda.time.Chronology chronology25 = instant11.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime20", (instant11.compareTo(dateTime20) == 0) == instant11.equals(dateTime20));
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2506");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTimeISO();
        java.lang.String str15 = mutableDateTime14.toString();
        boolean boolean16 = mutableDateTime14.isEqualNow();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(36000001L);
        int int19 = mutableDateTime14.compareTo((org.joda.time.ReadableInstant) instant18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.Chronology chronology23 = gJChronology22.withUTC();
        java.lang.String str24 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = gJChronology22.add(readablePeriod31, (long) 100, 1);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology22.year();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology22.millisOfSecond();
        long long41 = gJChronology22.add(61544001598418L, 50400000L, 86400000);
        boolean boolean42 = instant18.equals((java.lang.Object) 50400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime14", (instant6.compareTo(mutableDateTime14) == 0) == instant6.equals(mutableDateTime14));
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.Instant instant21 = instant11.toInstant();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant11.plus(readableDuration22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant23", (dateTime20.compareTo(instant23) == 0) == dateTime20.equals(instant23));
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2508");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField10 = gJChronology2.years();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = gJChronology2.add(readablePeriod11, 41529110L, 16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField10", (durationField9.compareTo(durationField10) == 0) == durationField9.equals(durationField10));
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant6.plus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        java.lang.String str21 = instant19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        int int34 = instant19.compareTo((org.joda.time.ReadableInstant) instant30);
        long long35 = instant19.getMillis();
        org.joda.time.Instant instant36 = instant19.toInstant();
        org.joda.time.Chronology chronology37 = instant19.getChronology();
        boolean boolean38 = instant19.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology42.getZone();
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, (org.joda.time.ReadableInstant) instant48);
        java.lang.String str50 = instant48.toString();
        int int51 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) instant48);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((java.lang.Object) instant48);
        boolean boolean54 = instant48.isAfter((-107999990L));
        boolean boolean56 = instant48.isAfter((-12219292799965L));
        boolean boolean57 = instant19.isAfter((org.joda.time.ReadableInstant) instant48);
        boolean boolean58 = instant6.isEqual((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTime dateTime59 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.chrono.JulianChronology julianChronology63 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone61);
        boolean boolean65 = julianChronology63.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology66 = julianChronology63.withUTC();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology68 = julianChronology63.withZone(dateTimeZone67);
        org.joda.time.DurationField durationField69 = julianChronology63.days();
        org.joda.time.DateTimeField dateTimeField70 = julianChronology63.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone71 = julianChronology63.getZone();
        org.joda.time.DurationField durationField72 = julianChronology63.seconds();
        org.joda.time.DurationField durationField73 = julianChronology63.seconds();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology63.dayOfWeek();
        int int75 = instant6.get(dateTimeField74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime59", (instant6.compareTo(dateTime59) == 0) == instant6.equals(dateTime59));
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2510");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField16 = julianChronology15.centuries();
        org.joda.time.DurationField durationField17 = julianChronology15.weeks();
        org.joda.time.DurationField durationField18 = julianChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.dayOfYear();
        boolean boolean20 = gJChronology2.equals((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology15.era();
        org.joda.time.DurationField durationField23 = julianChronology15.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField4, and durationField11", !(durationField23.compareTo(durationField4) == 0) || (Math.signum(durationField23.compareTo(durationField11)) == Math.signum(durationField4.compareTo(durationField11))));
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2511");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.Instant instant8 = instant6.toInstant();
        org.joda.time.Instant instant11 = instant6.withDurationAdded((-36000001L), 1200);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        java.lang.String str24 = instant22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.Instant instant36 = instant33.withDurationAdded((-12219292800000L), 0);
        int int37 = instant22.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant22.minus(readableDuration38);
        java.util.Date date40 = instant22.toDate();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.Instant instant52 = instant49.withDurationAdded((-12219292800000L), 0);
        boolean boolean53 = instant22.isEqual((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant55 = instant22.minus((-35999968L));
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, (org.joda.time.ReadableInstant) instant64);
        java.lang.String str66 = instant64.toString();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.Instant instant73 = gJChronology69.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant75 = instant73.minus(readableDuration74);
        org.joda.time.Instant instant78 = instant75.withDurationAdded((-12219292800000L), 0);
        int int79 = instant64.compareTo((org.joda.time.ReadableInstant) instant75);
        long long80 = instant64.getMillis();
        org.joda.time.Instant instant81 = instant64.toInstant();
        org.joda.time.DateTimeZone dateTimeZone82 = instant64.getZone();
        long long84 = dateTimeZone82.previousTransition((long) (short) 100);
        long long87 = dateTimeZone82.convertLocalToUTC((long) (-1), false);
        org.joda.time.DateTime dateTime88 = instant22.toDateTime(dateTimeZone82);
        java.util.Date date89 = instant22.toDate();
        org.joda.time.Instant instant91 = instant22.minus(43129898499L);
        org.joda.time.DateTimeZone dateTimeZone92 = instant22.getZone();
        boolean boolean93 = instant11.equals((java.lang.Object) instant22);
        org.joda.time.DateTime dateTime94 = instant22.toDateTime();
        boolean boolean96 = instant22.isAfter(36000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime94", (instant22.compareTo(dateTime94) == 0) == instant22.equals(dateTime94));
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2512");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant6.plus(readableDuration9);
        org.joda.time.Instant instant12 = instant6.minus((-30950980L));
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = instant20.toDateTime();
        java.util.Date date25 = instant20.toDate();
        boolean boolean26 = instant20.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime27 = instant20.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.dayOfYear();
        int int33 = instant20.get(dateTimeField32);
        boolean boolean35 = instant20.isBefore((-1L));
        long long36 = instant20.getMillis();
        org.joda.time.DateTime dateTime37 = instant20.toDateTimeISO();
        int int38 = instant13.compareTo((org.joda.time.ReadableInstant) instant20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and mutableDateTime23", (instant20.compareTo(mutableDateTime23) == 0) == instant20.equals(mutableDateTime23));
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2513");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField37 = gJChronology2.years();
        org.joda.time.Chronology chronology38 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField40 = gJChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) instant49);
        java.lang.String str51 = instant49.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.dayOfYear();
        org.joda.time.Instant instant58 = gJChronology54.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant58.minus(readableDuration59);
        org.joda.time.Instant instant63 = instant60.withDurationAdded((-12219292800000L), 0);
        int int64 = instant49.compareTo((org.joda.time.ReadableInstant) instant60);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant66 = instant49.minus(readableDuration65);
        java.util.Date date67 = instant49.toDate();
        boolean boolean68 = gJChronology2.equals((java.lang.Object) instant49);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant71 = instant49.withDurationAdded(readableDuration69, 20);
        long long72 = instant71.getMillis();
        org.joda.time.Instant instant74 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime75 = instant74.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76, readableInstant77);
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology78.getZone();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str82 = dateTimeZone81.getID();
        org.joda.time.Chronology chronology83 = gJChronology78.withZone(dateTimeZone81);
        java.lang.String str85 = dateTimeZone81.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology86 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone81);
        org.joda.time.Chronology chronology87 = julianChronology86.withUTC();
        org.joda.time.DateTimeField dateTimeField88 = julianChronology86.dayOfMonth();
        org.joda.time.DurationField durationField89 = julianChronology86.seconds();
        java.lang.String str90 = julianChronology86.toString();
        org.joda.time.DateTime dateTime91 = instant74.toDateTime((org.joda.time.Chronology) julianChronology86);
        boolean boolean92 = instant71.isBefore((org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant71 and dateTime75", (instant71.compareTo(dateTime75) == 0) == instant71.equals(dateTime75));
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2514");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        java.lang.String str6 = julianChronology3.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, (long) (short) 1, (-1));
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.weekyear();
        org.joda.time.DurationField durationField12 = julianChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField14 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField4, and durationField12", !(durationField14.compareTo(durationField4) == 0) || (Math.signum(durationField14.compareTo(durationField12)) == Math.signum(durationField4.compareTo(durationField12))));
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2515");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = instant6.getZone();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant6.withDurationAdded(readableDuration14, (int) '#');
        java.util.Date date17 = instant6.toDate();
        org.joda.time.Instant instant20 = instant6.withDurationAdded((-110L), (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTime dateTime31 = instant29.toDateTime();
        long long32 = dateTime31.getMillis();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.plus(readableDuration35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(1L);
        boolean boolean39 = instant34.isEqual((org.joda.time.ReadableInstant) instant38);
        boolean boolean40 = dateTime31.isBefore((org.joda.time.ReadableInstant) instant38);
        boolean boolean41 = instant6.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant42 = instant6.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and dateTime31", (instant29.compareTo(dateTime31) == 0) == instant29.equals(dateTime31));
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2516");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.getID();
        int int9 = dateTimeZone1.getOffsetFromLocal((long) 1);
        java.lang.String str11 = dateTimeZone1.getName((long) 8);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        boolean boolean14 = instant13.isAfterNow();
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant13.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant13.isSupported(dateTimeFieldType18);
        java.lang.String str20 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.Chronology chronology28 = gJChronology23.withZone(dateTimeZone26);
        long long31 = dateTimeZone26.convertLocalToUTC((long) (short) 10, false);
        long long34 = dateTimeZone26.convertLocalToUTC((-12219292800000L), true);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant36.withDurationAdded(readableDuration37, 0);
        boolean boolean41 = instant39.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant44 = instant39.withDurationAdded(readableDuration42, 4);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46);
        boolean boolean50 = julianChronology48.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField51 = julianChronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology48.hourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology48.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime55 = instant39.toMutableDateTime((org.joda.time.Chronology) julianChronology48);
        int int56 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) mutableDateTime55);
        int int57 = instant13.compareTo((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime55.getZone();
        int int59 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) mutableDateTime55);
        boolean boolean60 = dateTimeZone1.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and mutableDateTime55", (instant36.compareTo(mutableDateTime55) == 0) == instant36.equals(mutableDateTime55));
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.weeks();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.year();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology16.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone22.getName((long) 36000000, locale24);
        int int27 = dateTimeZone22.getOffset((long) ' ');
        org.joda.time.Chronology chronology28 = julianChronology16.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField29 = julianChronology16.months();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology16.minuteOfHour();
        boolean boolean31 = gJChronology2.equals((java.lang.Object) julianChronology16);
        org.joda.time.DurationField durationField32 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology2.getZone();
        org.joda.time.DurationField durationField34 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField34, durationField6, and durationField7", !(durationField34.compareTo(durationField6) == 0) || (Math.signum(durationField34.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2518");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime(chronology2);
        org.joda.time.Instant instant4 = instant0.toInstant();
        java.lang.Object obj5 = null;
        boolean boolean6 = instant0.equals(obj5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant0", (mutableDateTime1.compareTo(instant0) == 0) == mutableDateTime1.equals(instant0));
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2519");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.Instant instant8 = instant4.withMillis(25200L);
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.plus(readableDuration10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.DurationField durationField17 = chronology15.hours();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology15.getZone();
        org.joda.time.DateTime dateTime19 = instant11.toDateTime(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        boolean boolean23 = dateTime19.isEqual((org.joda.time.ReadableInstant) instant21);
        int int24 = instant8.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        org.joda.time.DurationField durationField29 = gJChronology27.millis();
        org.joda.time.Chronology chronology30 = gJChronology27.withUTC();
        org.joda.time.DurationField durationField31 = gJChronology27.seconds();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.year();
        org.joda.time.Instant instant33 = gJChronology27.getGregorianCutover();
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime dateTime35 = instant33.toDateTime();
        boolean boolean36 = instant21.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and dateTime34", (instant33.compareTo(dateTime34) == 0) == instant33.equals(dateTime34));
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2520");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = instant16.isAfter(readableInstant18);
        org.joda.time.Instant instant21 = instant16.withMillis(35999999L);
        org.joda.time.Instant instant23 = instant21.withMillis((-12219364800000L));
        boolean boolean25 = instant23.isAfter((-35999899L));
        long long26 = instant23.getMillis();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.Chronology chronology34 = gJChronology29.withZone(dateTimeZone32);
        java.lang.String str36 = dateTimeZone32.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology37.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology37.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str46 = dateTimeZone45.getID();
        org.joda.time.Chronology chronology47 = gJChronology42.withZone(dateTimeZone45);
        java.lang.String str49 = dateTimeZone45.getName((long) (byte) 10);
        long long52 = dateTimeZone45.convertLocalToUTC((-35999900L), false);
        int int54 = dateTimeZone45.getOffsetFromLocal((long) 278);
        boolean boolean56 = dateTimeZone45.isStandardOffset((long) 4);
        org.joda.time.Chronology chronology57 = julianChronology37.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime58 = instant23.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime59 = instant23.toDateTimeISO();
        long long60 = dateTime59.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime58", (instant23.compareTo(dateTime58) == 0) == instant23.equals(dateTime58));
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2521");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime12 = instant9.toMutableDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = instant9.toDateTime();
        java.util.Date date14 = instant9.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.Chronology chronology22 = gJChronology17.withZone(dateTimeZone20);
        java.lang.String str24 = dateTimeZone20.getName((long) (byte) 10);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        long long29 = dateTimeZone20.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean30 = instant9.equals((java.lang.Object) (byte) 10);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, (org.joda.time.ReadableInstant) instant9);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime12", (instant9.compareTo(mutableDateTime12) == 0) == instant9.equals(mutableDateTime12));
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2522");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = instant8.toDateTime();
        org.joda.time.Instant instant14 = instant8.withMillis(100L);
        boolean boolean15 = instant1.isAfter((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        int int28 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((java.lang.Object) instant25);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((java.lang.Object) instant29);
        java.util.Date date31 = instant30.toDate();
        org.joda.time.Instant instant33 = instant30.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.Chronology chronology49 = gJChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology44.getZone();
        long long52 = dateTimeZone50.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology53 = gJChronology36.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean57 = dateTimeZone55.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        boolean boolean63 = julianChronology61.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology64 = julianChronology61.withUTC();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology66 = julianChronology61.withZone(dateTimeZone65);
        long long68 = dateTimeZone55.getMillisKeepLocal(dateTimeZone65, 10L);
        org.joda.time.Chronology chronology69 = gJChronology36.withZone(dateTimeZone65);
        long long71 = dateTimeZone65.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime72 = instant30.toMutableDateTime(dateTimeZone65);
        int int73 = instant8.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant74 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone76);
        org.joda.time.chrono.JulianChronology julianChronology78 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone76);
        boolean boolean80 = julianChronology78.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology81 = julianChronology78.withUTC();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology78.era();
        org.joda.time.DateTimeField dateTimeField83 = julianChronology78.minuteOfHour();
        org.joda.time.DurationField durationField84 = julianChronology78.weeks();
        org.joda.time.DurationField durationField85 = julianChronology78.days();
        org.joda.time.DateTimeField dateTimeField86 = julianChronology78.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField87 = julianChronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField88 = julianChronology78.minuteOfHour();
        java.lang.String str89 = julianChronology78.toString();
        org.joda.time.DateTimeField dateTimeField90 = julianChronology78.secondOfMinute();
        org.joda.time.DateTime dateTime91 = instant74.toDateTime((org.joda.time.Chronology) julianChronology78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant74 and mutableDateTime11", (instant74.compareTo(mutableDateTime11) == 0) == instant74.equals(mutableDateTime11));
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2523");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        org.joda.time.DurationField durationField7 = julianChronology3.eras();
        org.joda.time.DurationField durationField8 = julianChronology3.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField8, and durationField7", !(durationField7.compareTo(durationField8) == 0) || (Math.signum(durationField7.compareTo(durationField7)) == Math.signum(durationField8.compareTo(durationField7))));
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2524");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.era();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.Chronology chronology15 = gJChronology12.withUTC();
        org.joda.time.DurationField durationField16 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.clockhourOfDay();
        java.lang.String str18 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.yearOfEra();
        int int20 = gJChronology12.getMinimumDaysInFirstWeek();
        boolean boolean21 = julianChronology3.equals((java.lang.Object) gJChronology12);
        org.joda.time.DurationField durationField22 = gJChronology12.weeks();
        org.joda.time.DurationField durationField23 = gJChronology12.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField4 and durationField22", (durationField4.compareTo(durationField22) == 0) == durationField4.equals(durationField22));
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2525");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = instant8.getZone();
        org.joda.time.Instant instant28 = instant8.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.Chronology chronology33 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.era();
        org.joda.time.DurationField durationField35 = gJChronology31.months();
        org.joda.time.DurationField durationField36 = gJChronology31.minutes();
        org.joda.time.MutableDateTime mutableDateTime37 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology31);
        long long38 = instant8.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime37", (instant8.compareTo(mutableDateTime37) == 0) == instant8.equals(mutableDateTime37));
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2526");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone3);
        boolean boolean7 = julianChronology5.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology8 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology5.era();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology5.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = instant1.toMutableDateTime((org.joda.time.Chronology) julianChronology5);
        boolean boolean13 = mutableDateTime11.isEqual(18684000000L);
        long long14 = mutableDateTime11.getMillis();
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-12219292800000L), 0);
        boolean boolean29 = instant24.isEqual(35L);
        boolean boolean30 = instant15.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant15.isSupported(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant41);
        java.lang.String str43 = instant41.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.Instant instant50 = gJChronology46.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant50.minus(readableDuration51);
        org.joda.time.Instant instant55 = instant52.withDurationAdded((-12219292800000L), 0);
        int int56 = instant41.compareTo((org.joda.time.ReadableInstant) instant52);
        long long57 = instant41.getMillis();
        long long58 = instant41.getMillis();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant61 = instant41.withDurationAdded(readableDuration59, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant41.plus(readableDuration62);
        int int64 = instant15.compareTo((org.joda.time.ReadableInstant) instant63);
        boolean boolean65 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67);
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology68.getZone();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology68.getZone();
        org.joda.time.Instant instant74 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, (org.joda.time.ReadableInstant) instant74);
        java.lang.String str76 = instant74.toString();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, readableInstant78);
        org.joda.time.DateTimeZone dateTimeZone80 = gJChronology79.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology79.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology79.dayOfYear();
        org.joda.time.Instant instant83 = gJChronology79.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant85 = instant83.minus(readableDuration84);
        org.joda.time.Instant instant88 = instant85.withDurationAdded((-12219292800000L), 0);
        int int89 = instant74.compareTo((org.joda.time.ReadableInstant) instant85);
        org.joda.time.Instant instant90 = instant85.toInstant();
        org.joda.time.Instant instant93 = instant90.withDurationAdded((-36000000L), 0);
        org.joda.time.Instant instant95 = instant90.minus((-60514215008433L));
        int int96 = instant63.compareTo((org.joda.time.ReadableInstant) instant90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2527");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        boolean boolean8 = instant5.isAfter((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = instant17.isEqual(readableInstant23);
        boolean boolean25 = instant5.isEqual((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime28 = instant5.toMutableDateTime(dateTimeZone26);
        boolean boolean30 = mutableDateTime28.isEqual(150804856592683516L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2528");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DurationField durationField9 = gJChronology7.millis();
        long long13 = gJChronology7.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField14 = gJChronology7.millis();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology7.clockhourOfHalfday();
        org.joda.time.Instant instant17 = gJChronology7.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Chronology chronology25 = gJChronology20.withZone(dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology28.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = julianChronology28.getZone();
        org.joda.time.MutableDateTime mutableDateTime31 = instant17.toMutableDateTime(dateTimeZone30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTime dateTime43 = instant41.toDateTime();
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, (org.joda.time.ReadableInstant) instant53);
        java.lang.String str55 = instant53.toString();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.Instant instant62 = gJChronology58.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant62.minus(readableDuration63);
        org.joda.time.Instant instant67 = instant64.withDurationAdded((-12219292800000L), 0);
        int int68 = instant53.compareTo((org.joda.time.ReadableInstant) instant64);
        long long69 = instant53.getMillis();
        org.joda.time.Instant instant70 = instant53.toInstant();
        long long71 = instant53.getMillis();
        boolean boolean72 = dateTime43.isAfter((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime43.toMutableDateTime(chronology73);
        boolean boolean75 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and dateTime43", (instant41.compareTo(dateTime43) == 0) == instant41.equals(dateTime43));
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2529");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        org.joda.time.Chronology chronology10 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long24 = dateTimeZone17.previousTransition(5201L);
        org.joda.time.Chronology chronology25 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.year();
        org.joda.time.DateTime dateTime29 = instant1.toDateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forID("+10:00");
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone31);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime33", (instant1.compareTo(dateTime33) == 0) == instant1.equals(dateTime33));
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2530");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        org.joda.time.MutableDateTime mutableDateTime30 = instant26.toMutableDateTime();
        int int31 = instant16.compareTo((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.Chronology chronology39 = julianChronology35.withUTC();
        org.joda.time.DateTime dateTime40 = mutableDateTime30.toDateTime(chronology39);
        boolean boolean42 = mutableDateTime30.isBefore(5L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime40", (instant9.compareTo(dateTime40) == 0) == instant9.equals(dateTime40));
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2531");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, (-60514215308675L), 278);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField15 = gJChronology2.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField15, and durationField8", !(durationField8.compareTo(durationField15) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField15.compareTo(durationField8))));
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2532");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant33.withDurationAdded(readableDuration34, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = instant33.toString(dateTimeFormatter37);
        org.joda.time.Instant instant41 = instant33.withDurationAdded(0L, 1582);
        long long42 = instant41.getMillis();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant45 = instant41.withDurationAdded(readableDuration43, (int) (short) 100);
        boolean boolean46 = instant8.isAfter((org.joda.time.ReadableInstant) instant41);
        java.lang.String str47 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = instant8.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime49", (instant8.compareTo(dateTime49) == 0) == instant8.equals(dateTime49));
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2533");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        java.lang.String str7 = dateTimeZone6.getID();
        long long9 = dateTimeZone6.nextTransition((long) 10);
        long long11 = dateTimeZone6.nextTransition((-35999900L));
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = instant20.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology26.getZone();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, (org.joda.time.ReadableInstant) instant32);
        java.lang.String str34 = instant32.toString();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.Instant instant41 = gJChronology37.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant41.minus(readableDuration42);
        org.joda.time.Instant instant46 = instant43.withDurationAdded((-12219292800000L), 0);
        int int47 = instant32.compareTo((org.joda.time.ReadableInstant) instant43);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant32.minus(readableDuration48);
        int int50 = instant20.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime51 = instant20.toDateTimeISO();
        boolean boolean52 = dateTimeZone6.equals((java.lang.Object) dateTime51);
        int int54 = dateTimeZone6.getOffsetFromLocal((-60514215054012L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime51", (instant20.compareTo(dateTime51) == 0) == instant20.equals(dateTime51));
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2534");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        java.lang.String str10 = dateTimeZone6.getNameKey(10L);
        long long12 = dateTimeZone6.convertUTCToLocal((-12219328800000L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = julianChronology16.days();
        int int23 = julianChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField24 = julianChronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology16.millisOfDay();
        boolean boolean26 = dateTimeZone6.equals((java.lang.Object) dateTimeField25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Chronology chronology36 = gJChronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology31.getZone();
        long long39 = dateTimeZone37.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology40 = gJChronology27.withZone(dateTimeZone37);
        long long42 = dateTimeZone1.getMillisKeepLocal(dateTimeZone37, (long) 19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant48 = instant45.withDurationAdded(readableDuration46, 0);
        org.joda.time.Instant instant50 = instant48.minus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isStandardOffset((long) 4);
        org.joda.time.DateTime dateTime56 = instant48.toDateTime(dateTimeZone52);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = dateTime56.isSupported(dateTimeFieldType57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) dateTime56);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone1.getName((-66447976L), locale61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant45 and dateTime56", (instant45.compareTo(dateTime56) == 0) == instant45.equals(dateTime56));
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2535");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.Instant instant12 = gJChronology8.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = instant12.toDateTime();
        java.util.Date date17 = instant12.toDate();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Chronology chronology25 = gJChronology20.withZone(dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.getName((long) (byte) 10);
        java.util.TimeZone timeZone28 = dateTimeZone23.toTimeZone();
        long long32 = dateTimeZone23.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean33 = instant12.equals((java.lang.Object) (byte) 10);
        boolean boolean34 = instant5.isBefore((org.joda.time.ReadableInstant) instant12);
        java.lang.String str35 = instant5.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime15", (instant12.compareTo(mutableDateTime15) == 0) == instant12.equals(mutableDateTime15));
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2536");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        java.util.Date date6 = instant5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant5.isSupported(dateTimeFieldType7);
        org.joda.time.Instant instant11 = instant5.withDurationAdded((long) '4', (int) (short) 100);
        long long12 = instant11.getMillis();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant11.withDurationAdded(readableDuration14, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.monthOfYear();
        boolean boolean41 = instant25.equals((java.lang.Object) dateTimeField40);
        org.joda.time.Instant instant43 = instant25.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.dayOfYear();
        org.joda.time.Instant instant52 = gJChronology48.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant52.minus(readableDuration53);
        org.joda.time.Instant instant57 = instant54.withDurationAdded((-12219292800000L), 0);
        boolean boolean59 = instant54.isEqual(35L);
        org.joda.time.Instant instant60 = instant54.toInstant();
        boolean boolean62 = instant60.isBefore((long) ' ');
        boolean boolean63 = instant43.isAfter((org.joda.time.ReadableInstant) instant60);
        org.joda.time.MutableDateTime mutableDateTime64 = instant43.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66);
        java.lang.String str68 = gJChronology67.toString();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.dayOfYear();
        java.lang.String str70 = gJChronology67.toString();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology67.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology67.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime64.toMutableDateTime((org.joda.time.Chronology) gJChronology67);
        boolean boolean74 = instant16.equals((java.lang.Object) mutableDateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime64", (instant1.compareTo(mutableDateTime64) == 0) == instant1.equals(mutableDateTime64));
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2537");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology20 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField22 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.year();
        org.joda.time.DurationField durationField24 = gJChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField24, and durationField22", !(durationField22.compareTo(durationField24) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField24.compareTo(durationField22))));
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2538");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        boolean boolean15 = instant9.isAfter((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = gJChronology18.minutes();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.secondOfDay();
        boolean boolean25 = instant9.equals((java.lang.Object) gJChronology18);
        org.joda.time.DateTime dateTime26 = instant9.toDateTime();
        boolean boolean27 = instant9.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime26", (instant13.compareTo(dateTime26) == 0) == instant13.equals(dateTime26));
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2539");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = julianChronology5.halfdays();
        org.joda.time.DurationField durationField7 = julianChronology5.years();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology5.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        long long33 = instant17.getMillis();
        org.joda.time.Instant instant34 = instant17.toInstant();
        org.joda.time.DateTimeZone dateTimeZone35 = instant17.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        boolean boolean39 = dateTimeZone37.isFixed();
        long long42 = dateTimeZone37.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone37.getName((long) (short) -1, locale45);
        boolean boolean47 = dateTimeZone37.isFixed();
        org.joda.time.MutableDateTime mutableDateTime48 = instant17.toMutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology49 = julianChronology5.withZone(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime48", (instant17.compareTo(mutableDateTime48) == 0) == instant17.equals(mutableDateTime48));
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2540");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        org.joda.time.Instant instant16 = instant13.plus(35L);
        java.lang.String str17 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        org.joda.time.MutableDateTime mutableDateTime20 = instant13.toMutableDateTime(dateTimeZone19);
        boolean boolean22 = mutableDateTime20.isBefore((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DurationField durationField28 = gJChronology25.days();
        org.joda.time.DurationField durationField29 = gJChronology25.centuries();
        boolean boolean30 = mutableDateTime20.equals((java.lang.Object) durationField29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) instant39);
        java.lang.String str41 = instant39.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        org.joda.time.Instant instant53 = instant50.withDurationAdded((-12219292800000L), 0);
        int int54 = instant39.compareTo((org.joda.time.ReadableInstant) instant50);
        long long55 = instant39.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = instant39.isSupported(dateTimeFieldType56);
        org.joda.time.MutableDateTime mutableDateTime58 = instant39.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str65 = dateTimeZone64.getID();
        org.joda.time.Chronology chronology66 = gJChronology61.withZone(dateTimeZone64);
        java.lang.String str68 = dateTimeZone64.getName((long) (byte) 10);
        long long71 = dateTimeZone64.convertLocalToUTC((-35999900L), false);
        long long74 = dateTimeZone64.adjustOffset((long) '#', false);
        long long76 = dateTimeZone64.previousTransition((long) 4);
        long long78 = dateTimeZone64.convertUTCToLocal(0L);
        org.joda.time.DateTime dateTime79 = mutableDateTime58.toDateTime(dateTimeZone64);
        int int80 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime58", (instant39.compareTo(mutableDateTime58) == 0) == instant39.equals(mutableDateTime58));
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2541");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        boolean boolean14 = julianChronology12.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField15 = julianChronology12.days();
        long long20 = julianChronology12.getDateTimeMillis(1970, 8, 10, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology12.getZone();
        java.lang.String str23 = dateTimeZone21.getShortName(36000000L);
        int int25 = dateTimeZone21.getOffset((long) 36000);
        org.joda.time.Chronology chronology26 = julianChronology3.withZone(dateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField15", Math.signum(durationField5.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField5)));
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2542");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField12", Math.signum(durationField9.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField9)));
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2543");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant74 = instant19.minus(3L);
        boolean boolean75 = instant19.isAfterNow();
        org.joda.time.Instant instant77 = instant19.plus((-35997448L));
        org.joda.time.Instant instant78 = instant19.toInstant();
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Instant instant83 = instant80.withDurationAdded(readableDuration81, 0);
        org.joda.time.Instant instant85 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.Instant instant88 = instant85.withDurationAdded(readableDuration86, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = null;
        java.lang.String str90 = instant85.toString(dateTimeFormatter89);
        org.joda.time.Instant instant93 = instant85.withDurationAdded(0L, 1582);
        java.lang.String str94 = instant93.toString();
        boolean boolean95 = instant80.isAfter((org.joda.time.ReadableInstant) instant93);
        int int96 = instant78.compareTo((org.joda.time.ReadableInstant) instant93);
        org.joda.time.MutableDateTime mutableDateTime97 = instant93.toMutableDateTimeISO();
        org.joda.time.Instant instant98 = instant93.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant80 and mutableDateTime97", (instant80.compareTo(mutableDateTime97) == 0) == instant80.equals(mutableDateTime97));
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2544");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = instant1.toString(dateTimeFormatter2);
        java.lang.String str4 = instant1.toString();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant1.withDurationAdded(readableDuration5, (int) (short) 0);
        java.lang.String str8 = instant1.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant1.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.millisOfDay();
        org.joda.time.DurationField durationField17 = gJChronology13.halfdays();
        org.joda.time.DurationField durationField18 = gJChronology13.millis();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology21 = gJChronology13.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.minuteOfDay();
        org.joda.time.Instant instant23 = gJChronology13.getGregorianCutover();
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        boolean boolean25 = instant1.isBefore((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone27.getName(0L, locale29);
        java.lang.String str32 = dateTimeZone27.getName((-71999990L));
        int int34 = dateTimeZone27.getOffset((-60443259497312L));
        org.joda.time.DateTime dateTime35 = instant1.toDateTime(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime24", (instant23.compareTo(dateTime24) == 0) == instant23.equals(dateTime24));
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2545");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName(11L, locale9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone1.getName(3600000L, locale12);
        boolean boolean15 = dateTimeZone1.isStandardOffset(36000000L);
        boolean boolean17 = dateTimeZone1.isStandardOffset((-60514215250013L));
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField22 = gJChronology20.millis();
        org.joda.time.Chronology chronology23 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField24 = gJChronology20.seconds();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.weekOfWeekyear();
        org.joda.time.Instant instant26 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.plus(readableDuration27);
        boolean boolean29 = instant26.isAfterNow();
        org.joda.time.DateTime dateTime30 = instant26.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime30", (instant26.compareTo(dateTime30) == 0) == instant26.equals(dateTime30));
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2546");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gJChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField4 = gJChronology0.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField4, and durationField1", !(durationField1.compareTo(durationField4) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField4.compareTo(durationField1))));
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.Chronology chronology11 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.dayOfWeek();
        org.joda.time.DurationField durationField13 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology21 = julianChronology18.withUTC();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology18.getZone();
        org.joda.time.Chronology chronology23 = gJChronology10.withZone(dateTimeZone22);
        boolean boolean24 = dateTimeZone22.isFixed();
        long long28 = dateTimeZone22.convertLocalToUTC((-12242483999904L), true, (-12219328800000L));
        org.joda.time.Chronology chronology29 = gJChronology2.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField31 = gJChronology2.hours();
        org.joda.time.DurationField durationField32 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField33 = gJChronology2.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField13 and durationField32", (durationField13.compareTo(durationField32) == 0) == durationField13.equals(durationField32));
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2548");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone21 = instant11.getZone();
        boolean boolean22 = instant11.isBeforeNow();
        org.joda.time.Instant instant24 = instant11.plus(252097310L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology28.year();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology28.dayOfYear();
        java.lang.String str37 = julianChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        java.lang.String str47 = dateTimeZone45.getName((long) 0);
        long long50 = dateTimeZone45.adjustOffset(1L, true);
        org.joda.time.Chronology chronology51 = gJChronology40.withZone(dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        long long55 = gJChronology40.add(readablePeriod52, (-107999989L), 24);
        org.joda.time.Instant instant56 = gJChronology40.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology40.getZone();
        org.joda.time.Chronology chronology58 = julianChronology28.withZone(dateTimeZone57);
        long long61 = dateTimeZone57.convertLocalToUTC((long) 278, true);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone57.isLocalDateTimeGap(localDateTime62);
        boolean boolean64 = instant24.equals((java.lang.Object) dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime20", (instant11.compareTo(dateTime20) == 0) == instant11.equals(dateTime20));
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2549");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime22 = instant20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        boolean boolean24 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = dateTime22.isSupported(dateTimeFieldType25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2550");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant25.toString(dateTimeFormatter26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant25.plus(readableDuration28);
        org.joda.time.DateTime dateTime30 = instant25.toDateTimeISO();
        java.lang.String str31 = instant25.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime30", (instant25.compareTo(dateTime30) == 0) == instant25.equals(dateTime30));
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2551");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        boolean boolean9 = instant8.isEqualNow();
        org.joda.time.Instant instant11 = instant8.minus((-35999900L));
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        boolean boolean16 = dateTimeZone14.isFixed();
        long long19 = dateTimeZone14.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone14.getName((long) (short) -1, locale22);
        boolean boolean24 = dateTimeZone14.isFixed();
        long long26 = dateTimeZone14.nextTransition(36009730L);
        org.joda.time.MutableDateTime mutableDateTime27 = instant11.toMutableDateTime(dateTimeZone14);
        boolean boolean28 = mutableDateTime27.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime12", (instant11.compareTo(mutableDateTime12) == 0) == instant11.equals(mutableDateTime12));
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2552");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        int int5 = dateTimeZone3.getOffset(4200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2553");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.Chronology chronology14 = instant8.getChronology();
        org.joda.time.Instant instant16 = instant8.minus((-60514251282542L));
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        java.lang.String str21 = gJChronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.minuteOfDay();
        org.joda.time.DurationField durationField26 = gJChronology19.seconds();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology19.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime28 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology19);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology19.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime28", (instant6.compareTo(mutableDateTime28) == 0) == instant6.equals(mutableDateTime28));
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2554");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.DurationField durationField15 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField17 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = gJChronology2.add(readablePeriod19, 9730L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField24 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField6, and durationField7", !(durationField24.compareTo(durationField6) == 0) || (Math.signum(durationField24.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2555");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.DateTime dateTime29 = instant28.toDateTimeISO();
        boolean boolean31 = instant28.isEqual((-48645335529L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime29", (instant8.compareTo(dateTime29) == 0) == instant8.equals(dateTime29));
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2556");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((-62159565599948L));
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.minus(readableDuration17);
        org.joda.time.Instant instant21 = instant18.withDurationAdded((-12219292800000L), 0);
        boolean boolean23 = instant18.isEqual(35L);
        boolean boolean24 = instant9.isEqual((org.joda.time.ReadableInstant) instant18);
        org.joda.time.MutableDateTime mutableDateTime25 = instant9.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant9);
        org.joda.time.DurationField durationField27 = gJChronology26.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime25", (instant9.compareTo(mutableDateTime25) == 0) == instant9.equals(mutableDateTime25));
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2557");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.util.Date date7 = instant6.toDate();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.plus(readableDuration10);
        java.lang.String str12 = instant9.toString();
        boolean boolean13 = instant6.isAfter((org.joda.time.ReadableInstant) instant9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        boolean boolean19 = julianChronology17.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology20 = julianChronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology22 = julianChronology17.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = julianChronology17.days();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone25 = julianChronology17.getZone();
        org.joda.time.DurationField durationField26 = julianChronology17.days();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology17.millisOfSecond();
        org.joda.time.Chronology chronology28 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = instant6.toMutableDateTime((org.joda.time.Chronology) julianChronology17);
        org.joda.time.Chronology chronology31 = julianChronology17.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime30", (instant6.compareTo(mutableDateTime30) == 0) == instant6.equals(mutableDateTime30));
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        org.joda.time.Instant instant12 = instant6.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.minuteOfHour();
        org.joda.time.DurationField durationField18 = julianChronology16.months();
        org.joda.time.DateTime dateTime19 = instant6.toDateTime((org.joda.time.Chronology) julianChronology16);
        org.joda.time.DateTime dateTime20 = instant6.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and dateTime19", (mutableDateTime9.compareTo(dateTime19) == 0) == mutableDateTime9.equals(dateTime19));
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2559");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfDay();
        org.joda.time.Instant instant10 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = instant10.minus(9730L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField19 = julianChronology16.months();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone21.getName((-1L), locale24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone21.isLocalDateTimeGap(localDateTime26);
        boolean boolean29 = dateTimeZone21.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology30 = julianChronology16.withZone(dateTimeZone21);
        int int32 = dateTimeZone21.getOffset((-35999900L));
        java.lang.String str34 = dateTimeZone21.getShortName(0L);
        java.lang.String str35 = dateTimeZone21.getID();
        java.lang.String str37 = dateTimeZone21.getName(110L);
        org.joda.time.DateTime dateTime38 = instant10.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant45.minus(readableDuration46);
        org.joda.time.Instant instant50 = instant47.withDurationAdded((-12219292800000L), 0);
        boolean boolean52 = instant47.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.Chronology chronology56 = gJChronology55.withUTC();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology55.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology55.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology55.monthOfYear();
        boolean boolean63 = instant47.equals((java.lang.Object) dateTimeField62);
        org.joda.time.Instant instant65 = instant47.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = instant65.isSupported(dateTimeFieldType66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, readableInstant69);
        org.joda.time.DateTimeZone dateTimeZone71 = gJChronology70.getZone();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.dayOfYear();
        org.joda.time.Instant instant74 = gJChronology70.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant74.minus(readableDuration75);
        org.joda.time.Instant instant79 = instant76.withDurationAdded((-12219292800000L), 0);
        boolean boolean81 = instant76.isEqual(35L);
        org.joda.time.Instant instant82 = instant76.toInstant();
        boolean boolean84 = instant82.isBefore((long) ' ');
        boolean boolean85 = instant65.isAfter((org.joda.time.ReadableInstant) instant82);
        org.joda.time.Instant instant87 = instant65.minus(4L);
        org.joda.time.Chronology chronology88 = instant65.getChronology();
        boolean boolean90 = instant65.isAfter((-107999950L));
        org.joda.time.DateTimeZone dateTimeZone91 = instant65.getZone();
        org.joda.time.ReadableDuration readableDuration92 = null;
        org.joda.time.Instant instant93 = instant65.minus(readableDuration92);
        org.joda.time.Instant instant95 = instant93.plus((-12219328800000L));
        java.lang.String str96 = instant95.toString();
        boolean boolean97 = dateTime38.isBefore((org.joda.time.ReadableInstant) instant95);
        org.joda.time.Instant instant98 = instant95.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime38", (instant6.compareTo(dateTime38) == 0) == instant6.equals(dateTime38));
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2560");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        int int10 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField11 = julianChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField13 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField9, and durationField11", !(durationField13.compareTo(durationField9) == 0) || (Math.signum(durationField13.compareTo(durationField11)) == Math.signum(durationField9.compareTo(durationField11))));
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2561");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant24 = instant19.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-36000000L), 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField32 = julianChronology31.centuries();
        org.joda.time.DurationField durationField33 = julianChronology31.weeks();
        org.joda.time.DurationField durationField34 = julianChronology31.years();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone37 = julianChronology31.getZone();
        org.joda.time.MutableDateTime mutableDateTime38 = instant24.toMutableDateTime(dateTimeZone37);
        java.lang.String str39 = instant24.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime38", (instant24.compareTo(mutableDateTime38) == 0) == instant24.equals(mutableDateTime38));
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2562");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.MutableDateTime mutableDateTime12 = instant8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        java.lang.String str23 = instant21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        int int36 = instant21.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.Chronology chronology40 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.dayOfWeek();
        org.joda.time.DurationField durationField42 = gJChronology39.years();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.weekyear();
        boolean boolean44 = instant21.equals((java.lang.Object) dateTimeField43);
        int int45 = mutableDateTime12.get(dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = mutableDateTime12.isSupported(dateTimeFieldType46);
        boolean boolean49 = mutableDateTime12.isEqual((-71936861L));
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime12.getZone();
        long long54 = dateTimeZone50.convertLocalToUTC((-12242555999904L), true, (-4319997428L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime12", (instant6.compareTo(mutableDateTime12) == 0) == instant6.equals(mutableDateTime12));
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2563");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.Chronology chronology5 = gJChronology4.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.millisOfDay();
        java.lang.String str8 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField10 = gJChronology4.weeks();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime12 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        boolean boolean26 = instant21.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.Chronology chronology30 = gJChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology29.monthOfYear();
        boolean boolean37 = instant21.equals((java.lang.Object) dateTimeField36);
        org.joda.time.Instant instant39 = instant21.withMillis(1L);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant21.withDurationAdded(readableDuration40, 1);
        org.joda.time.Instant instant43 = instant42.toInstant();
        boolean boolean45 = instant43.isAfter((-59011667999903L));
        org.joda.time.Instant instant46 = instant43.toInstant();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant46.plus(readableDuration47);
        boolean boolean49 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTime dateTime50 = instant46.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime12", (instant1.compareTo(mutableDateTime12) == 0) == instant1.equals(mutableDateTime12));
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2564");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = mutableDateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant18.minus(readableDuration19);
        boolean boolean21 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) instant18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        boolean boolean31 = instant30.isAfterNow();
        boolean boolean32 = instant30.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone33 = instant30.getZone();
        long long34 = instant30.getMillis();
        boolean boolean35 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant37 = instant30.withMillis(10371503448098510L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime9", (instant30.compareTo(mutableDateTime9) == 0) == instant30.equals(mutableDateTime9));
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2565");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant10.plus(readableDuration11);
        boolean boolean13 = instant12.isAfterNow();
        org.joda.time.DateTime dateTime14 = instant12.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) dateTime14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone8.getShortName(0L, locale17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime14", (instant10.compareTo(dateTime14) == 0) == instant10.equals(dateTime14));
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2566");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.millisOfDay();
        long long11 = julianChronology3.add((-59082465599990L), 1836000071L, 2022);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.hourOfDay();
        org.joda.time.Instant instant22 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant24 = instant22.minus(9730L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField31 = julianChronology28.months();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone33.getName((-1L), locale36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone33.isLocalDateTimeGap(localDateTime38);
        boolean boolean41 = dateTimeZone33.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology42 = julianChronology28.withZone(dateTimeZone33);
        int int44 = dateTimeZone33.getOffset((-35999900L));
        java.lang.String str46 = dateTimeZone33.getShortName(0L);
        java.lang.String str47 = dateTimeZone33.getID();
        java.lang.String str49 = dateTimeZone33.getName(110L);
        org.joda.time.DateTime dateTime50 = instant22.toDateTime(dateTimeZone33);
        boolean boolean51 = julianChronology3.equals((java.lang.Object) dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime50", (instant18.compareTo(dateTime50) == 0) == instant18.equals(dateTime50));
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2567");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        int int35 = instant20.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant20.minus(readableDuration36);
        int int38 = instant8.compareTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = julianChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology41.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = julianChronology41.getZone();
        org.joda.time.DateTime dateTime45 = instant20.toDateTime(dateTimeZone44);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant50 = instant47.withDurationAdded(readableDuration48, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = instant47.toString(dateTimeFormatter51);
        org.joda.time.Instant instant55 = instant47.withDurationAdded(0L, 1582);
        long long56 = instant55.getMillis();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        org.joda.time.Chronology chronology60 = gJChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.dayOfWeek();
        org.joda.time.DurationField durationField62 = gJChronology59.days();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology59.halfdayOfDay();
        int int64 = instant55.get(dateTimeField63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66);
        org.joda.time.Chronology chronology68 = gJChronology67.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology67.millisOfDay();
        org.joda.time.DurationField durationField71 = gJChronology67.halfdays();
        org.joda.time.DurationField durationField72 = gJChronology67.millis();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology75 = gJChronology67.withZone(dateTimeZone74);
        org.joda.time.DurationField durationField76 = gJChronology67.minutes();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology67.halfdayOfDay();
        org.joda.time.DurationField durationField78 = gJChronology67.centuries();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology67.secondOfDay();
        long long83 = gJChronology67.add((long) 9, 0L, 0);
        org.joda.time.Instant instant84 = gJChronology67.getGregorianCutover();
        org.joda.time.DateTime dateTime85 = instant84.toDateTime();
        boolean boolean86 = instant55.isEqual((org.joda.time.ReadableInstant) instant84);
        int int87 = dateTime45.compareTo((org.joda.time.ReadableInstant) instant55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and dateTime85", (instant29.compareTo(dateTime85) == 0) == instant29.equals(dateTime85));
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2568");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        boolean boolean19 = instant14.isAfter(223199999L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant23.withMillis((long) (byte) -1);
        org.joda.time.Instant instant27 = instant25.minus((long) (short) 10);
        org.joda.time.Instant instant29 = instant27.plus((long) 126000000);
        boolean boolean30 = instant14.isEqual((org.joda.time.ReadableInstant) instant27);
        boolean boolean32 = instant14.isBefore(25200L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        org.joda.time.DurationField durationField37 = gJChronology35.millis();
        org.joda.time.Chronology chronology38 = gJChronology35.withUTC();
        org.joda.time.DurationField durationField39 = gJChronology35.seconds();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology35.year();
        org.joda.time.Instant instant41 = gJChronology35.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology35.getZone();
        org.joda.time.DateTime dateTime43 = instant14.toDateTime((org.joda.time.Chronology) gJChronology35);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology35.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime43", (instant9.compareTo(dateTime43) == 0) == instant9.equals(dateTime43));
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2569");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.DurationField durationField15 = gJChronology12.years();
        org.joda.time.DurationField durationField16 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.yearOfEra();
        boolean boolean18 = instant6.equals((java.lang.Object) dateTimeField17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.Instant instant25 = gJChronology21.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.minus(readableDuration26);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((-12219292800000L), 0);
        boolean boolean32 = instant27.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology35.monthOfYear();
        boolean boolean43 = instant27.equals((java.lang.Object) dateTimeField42);
        org.joda.time.Instant instant45 = instant27.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant45.isSupported(dateTimeFieldType46);
        org.joda.time.Chronology chronology48 = instant45.getChronology();
        org.joda.time.Instant instant50 = instant45.withMillis((-35999968L));
        org.joda.time.Chronology chronology51 = instant45.getChronology();
        org.joda.time.MutableDateTime mutableDateTime52 = instant45.toMutableDateTimeISO();
        boolean boolean53 = instant6.isBefore((org.joda.time.ReadableInstant) instant45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant6", (mutableDateTime9.compareTo(instant6) == 0) == mutableDateTime9.equals(instant6));
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2570");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField14 = julianChronology13.centuries();
        java.lang.String str15 = julianChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.yearOfEra();
        org.joda.time.DurationField durationField17 = julianChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.minuteOfDay();
        boolean boolean22 = julianChronology13.equals((java.lang.Object) dateTimeField21);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology13.secondOfMinute();
        int int24 = julianChronology13.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField31 = julianChronology28.months();
        boolean boolean32 = julianChronology13.equals((java.lang.Object) julianChronology28);
        boolean boolean33 = instant8.equals((java.lang.Object) julianChronology13);
        org.joda.time.Instant instant35 = instant8.plus((-35999890L));
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        long long39 = dateTimeZone36.adjustOffset((-6211221875999790L), true);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology40.secondOfDay();
        org.joda.time.DurationField durationField42 = julianChronology40.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField42, durationField14, and durationField17", !(durationField42.compareTo(durationField14) == 0) || (Math.signum(durationField42.compareTo(durationField17)) == Math.signum(durationField14.compareTo(durationField17))));
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2571");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.DateTime dateTime7 = instant4.toDateTimeISO();
        boolean boolean8 = dateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        boolean boolean34 = instant17.isBefore((long) 'a');
        org.joda.time.Instant instant35 = instant17.toInstant();
        boolean boolean36 = instant35.isEqualNow();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((java.lang.Object) instant35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        boolean boolean51 = instant46.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.Chronology chronology55 = gJChronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology54.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology54.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology54.monthOfYear();
        boolean boolean62 = instant46.equals((java.lang.Object) dateTimeField61);
        org.joda.time.Instant instant64 = instant46.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = instant64.isSupported(dateTimeFieldType65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = instant64.isSupported(dateTimeFieldType67);
        org.joda.time.Instant instant71 = instant64.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant73 = instant71.withMillis(187199999L);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant76 = instant71.withDurationAdded(readableDuration74, 1200);
        boolean boolean77 = instant35.isEqual((org.joda.time.ReadableInstant) instant71);
        boolean boolean78 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant79 = new org.joda.time.Instant();
        org.joda.time.Instant instant81 = instant79.withMillis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone82, readableInstant83);
        org.joda.time.DateTimeZone dateTimeZone85 = gJChronology84.getZone();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology84.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField87 = gJChronology84.year();
        int int88 = instant81.get(dateTimeField87);
        org.joda.time.Instant instant91 = instant81.withDurationAdded((-60514251282542L), 660);
        boolean boolean92 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant91);
        org.joda.time.Instant instant93 = instant91.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime7", (instant1.compareTo(dateTime7) == 0) == instant1.equals(dateTime7));
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2572");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((long) (short) -1, locale9);
        boolean boolean11 = dateTimeZone1.isFixed();
        long long13 = dateTimeZone1.nextTransition(36009730L);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) 36009730L);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone17 = instant16.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant26.plus(readableDuration30);
        int int32 = instant16.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology33 = instant26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField38 = julianChronology37.centuries();
        java.lang.String str39 = julianChronology37.toString();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology37.yearOfEra();
        org.joda.time.DurationField durationField41 = julianChronology37.months();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology37.clockhourOfHalfday();
        boolean boolean43 = instant26.equals((java.lang.Object) julianChronology37);
        org.joda.time.Chronology chronology44 = instant26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = instant26.isSupported(dateTimeFieldType45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.Chronology chronology50 = gJChronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.millisOfDay();
        org.joda.time.DurationField durationField53 = gJChronology49.halfdays();
        org.joda.time.DurationField durationField54 = gJChronology49.millis();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology57 = gJChronology49.withZone(dateTimeZone56);
        org.joda.time.DurationField durationField58 = gJChronology49.minutes();
        org.joda.time.DurationField durationField59 = gJChronology49.weekyears();
        org.joda.time.DurationField durationField60 = gJChronology49.minutes();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology49.monthOfYear();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology49.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime65 = instant26.toMutableDateTime((org.joda.time.Chronology) gJChronology49);
        int int66 = instant14.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.MutableDateTime mutableDateTime67 = instant14.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime65", (instant24.compareTo(mutableDateTime65) == 0) == instant24.equals(mutableDateTime65));
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2573");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.Chronology chronology11 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = gJChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology18.getZone();
        long long26 = dateTimeZone24.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology27 = gJChronology10.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology40 = julianChronology35.withZone(dateTimeZone39);
        long long42 = dateTimeZone29.getMillisKeepLocal(dateTimeZone39, 10L);
        org.joda.time.Chronology chronology43 = gJChronology10.withZone(dateTimeZone39);
        org.joda.time.Chronology chronology44 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.minuteOfDay();
        boolean boolean46 = julianChronology3.equals((java.lang.Object) dateTimeField45);
        org.joda.time.DurationField durationField47 = julianChronology3.weeks();
        org.joda.time.Chronology chronology48 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField49 = chronology48.weeks();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField47 and durationField49", (durationField47.compareTo(durationField49) == 0) == durationField47.equals(durationField49));
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2574");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        int int14 = dateTimeZone5.getOffsetFromLocal((long) 278);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.monthOfYear();
        boolean boolean41 = instant25.equals((java.lang.Object) dateTimeField40);
        org.joda.time.Instant instant43 = instant25.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant43.isSupported(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = instant43.toString(dateTimeFormatter48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant53 = instant43.withDurationAdded(readableDuration51, 0);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant43.minus(readableDuration54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, (org.joda.time.ReadableInstant) instant64);
        java.lang.String str66 = instant64.toString();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.Instant instant73 = gJChronology69.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant75 = instant73.minus(readableDuration74);
        org.joda.time.Instant instant78 = instant75.withDurationAdded((-12219292800000L), 0);
        int int79 = instant64.compareTo((org.joda.time.ReadableInstant) instant75);
        org.joda.time.Instant instant81 = instant75.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = null;
        java.lang.String str83 = instant81.toString(dateTimeFormatter82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant85 = instant81.plus(readableDuration84);
        org.joda.time.DateTime dateTime86 = instant85.toDateTime();
        boolean boolean87 = instant55.isAfter((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.getDefault();
        int int90 = dateTimeZone88.getOffsetFromLocal(35L);
        org.joda.time.MutableDateTime mutableDateTime91 = dateTime86.toMutableDateTime(dateTimeZone88);
        java.lang.String str93 = dateTimeZone88.getName((long) (byte) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime86", (instant23.compareTo(dateTime86) == 0) == instant23.equals(dateTime86));
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2575");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        boolean boolean27 = instant8.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime28 = instant8.toMutableDateTime();
        boolean boolean29 = instant8.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime28", (instant8.compareTo(mutableDateTime28) == 0) == instant8.equals(mutableDateTime28));
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2576");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.Chronology chronology26 = instant19.getChronology();
        org.joda.time.Instant instant27 = instant19.toInstant();
        org.joda.time.Instant instant28 = instant27.toInstant();
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        java.lang.String str30 = instant28.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime29", (instant28.compareTo(dateTime29) == 0) == instant28.equals(dateTime29));
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2577");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.Instant instant30 = instant26.withMillis(36000001L);
        boolean boolean32 = instant26.isAfter((long) (-1));
        org.joda.time.Instant instant33 = instant26.toInstant();
        org.joda.time.MutableDateTime mutableDateTime34 = instant26.toMutableDateTime();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.plus(readableDuration37);
        long long39 = instant36.getMillis();
        java.lang.String str40 = instant36.toString();
        boolean boolean41 = instant36.isBeforeNow();
        org.joda.time.Instant instant43 = org.joda.time.Instant.parse("1582-10-15T00:00:00.035Z");
        org.joda.time.DateTime dateTime44 = instant43.toDateTimeISO();
        org.joda.time.Instant instant47 = instant43.withDurationAdded((long) 353, 36000000);
        org.joda.time.MutableDateTime mutableDateTime48 = instant43.toMutableDateTimeISO();
        org.joda.time.Instant instant50 = instant43.withMillis((long) 5);
        boolean boolean51 = instant36.isEqual((org.joda.time.ReadableInstant) instant43);
        boolean boolean52 = mutableDateTime34.isEqual((org.joda.time.ReadableInstant) instant36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime44", (instant43.compareTo(dateTime44) == 0) == instant43.equals(dateTime44));
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2578");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        int int5 = dateTimeZone3.getOffset(1800000071L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2579");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfDay();
        org.joda.time.Instant instant10 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = instant10.minus(9730L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField19 = julianChronology16.months();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone21.getName((-1L), locale24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone21.isLocalDateTimeGap(localDateTime26);
        boolean boolean29 = dateTimeZone21.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology30 = julianChronology16.withZone(dateTimeZone21);
        int int32 = dateTimeZone21.getOffset((-35999900L));
        java.lang.String str34 = dateTimeZone21.getShortName(0L);
        java.lang.String str35 = dateTimeZone21.getID();
        java.lang.String str37 = dateTimeZone21.getName(110L);
        org.joda.time.DateTime dateTime38 = instant10.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime38", (instant6.compareTo(dateTime38) == 0) == instant6.equals(dateTime38));
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2580");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.DateTime dateTime5 = instant4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        long long31 = instant15.getMillis();
        org.joda.time.Instant instant32 = instant15.toInstant();
        boolean boolean33 = instant15.isEqualNow();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime5", (instant1.compareTo(dateTime5) == 0) == instant1.equals(dateTime5));
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2581");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant9.withDurationAdded(readableDuration14, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant19 = instant16.withDurationAdded(readableDuration17, (int) (short) 10);
        org.joda.time.Instant instant20 = instant19.toInstant();
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        boolean boolean35 = instant30.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.monthOfYear();
        boolean boolean46 = instant30.equals((java.lang.Object) dateTimeField45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology49.getZone();
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, (org.joda.time.ReadableInstant) instant55);
        java.lang.String str57 = instant55.toString();
        boolean boolean58 = instant55.isEqualNow();
        boolean boolean59 = instant30.isEqual((org.joda.time.ReadableInstant) instant55);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.Chronology chronology63 = gJChronology62.withUTC();
        java.lang.String str64 = gJChronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology62.dayOfWeek();
        org.joda.time.Instant instant68 = gJChronology62.getGregorianCutover();
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.Instant instant70 = instant68.toInstant();
        boolean boolean71 = instant30.equals((java.lang.Object) instant70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, readableInstant73);
        org.joda.time.DateTimeZone dateTimeZone75 = gJChronology74.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology74.dayOfYear();
        org.joda.time.Instant instant78 = gJChronology74.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Instant instant80 = instant78.minus(readableDuration79);
        java.lang.String str81 = instant78.toString();
        org.joda.time.Instant instant83 = instant78.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone84 = instant78.getZone();
        org.joda.time.DateTimeZone dateTimeZone85 = instant78.getZone();
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.Instant instant88 = instant78.withDurationAdded(readableDuration86, (int) '#');
        boolean boolean89 = instant70.isBefore((org.joda.time.ReadableInstant) instant78);
        org.joda.time.Instant instant92 = instant70.withDurationAdded((-12219328800000L), (int) (byte) 100);
        org.joda.time.DateTime dateTime93 = instant92.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime94 = instant92.toMutableDateTimeISO();
        boolean boolean95 = dateTime21.equals((java.lang.Object) mutableDateTime94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant92 and dateTime93", (instant92.compareTo(dateTime93) == 0) == instant92.equals(dateTime93));
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2582");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        org.joda.time.Instant instant16 = instant13.plus(35L);
        java.lang.String str17 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        org.joda.time.MutableDateTime mutableDateTime20 = instant13.toMutableDateTime(dateTimeZone19);
        boolean boolean22 = mutableDateTime20.isBefore((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        boolean boolean28 = julianChronology26.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology29 = julianChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology26.era();
        org.joda.time.Instant instant32 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone33.getShortName((long) (byte) 1, locale35);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = mutableDateTime20.toDateTime((org.joda.time.Chronology) julianChronology26);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = julianChronology26.add(readablePeriod40, 162000000L, 7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime20", (instant6.compareTo(mutableDateTime20) == 0) == instant6.equals(mutableDateTime20));
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2583");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant14 = instant12.withMillis(52L);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        boolean boolean16 = instant15.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime17 = instant15.toMutableDateTime();
        org.joda.time.DateTime dateTime18 = instant15.toDateTime();
        int int19 = instant12.compareTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant15.minus(readableDuration20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology25.era();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology25.year();
        java.lang.String str31 = julianChronology25.toString();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology25.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = instant15.toMutableDateTime((org.joda.time.Chronology) julianChronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and instant15", (mutableDateTime17.compareTo(instant15) == 0) == mutableDateTime17.equals(instant15));
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2584");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = instant9.getZone();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant9.withDurationAdded(readableDuration15, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        boolean boolean23 = julianChronology21.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology24 = julianChronology21.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology26 = julianChronology21.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField27 = julianChronology21.days();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology21.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str31 = dateTimeZone30.getID();
        boolean boolean32 = dateTimeZone30.isFixed();
        long long34 = dateTimeZone30.previousTransition(100L);
        java.util.TimeZone timeZone35 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.Chronology chronology37 = julianChronology21.withZone(dateTimeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone36.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) instant49);
        long long52 = dateTimeZone47.nextTransition((long) 0);
        long long54 = dateTimeZone40.getMillisKeepLocal(dateTimeZone47, (long) (byte) 100);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone47.getShortName((-110L), locale56);
        java.lang.String str59 = dateTimeZone47.getShortName(9L);
        org.joda.time.DateTime dateTime60 = instant17.toDateTime(dateTimeZone47);
        java.lang.String str61 = instant17.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime60", (instant17.compareTo(dateTime60) == 0) == instant17.equals(dateTime60));
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2585");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology11 = gJChronology9.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getName((long) (byte) 10);
        long long24 = dateTimeZone17.convertLocalToUTC((-35999900L), false);
        long long27 = dateTimeZone17.adjustOffset((long) '#', false);
        int int29 = dateTimeZone17.getOffset((long) (byte) 10);
        org.joda.time.Chronology chronology30 = chronology11.withZone(dateTimeZone17);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = instant32.toString(dateTimeFormatter33);
        java.lang.String str35 = instant32.toString();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant32.withDurationAdded(readableDuration36, (int) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant38, (int) (short) 1);
        boolean boolean42 = instant38.isBefore((-11L));
        org.joda.time.DateTime dateTime43 = instant38.toDateTimeISO();
        long long44 = instant38.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime43", (instant8.compareTo(dateTime43) == 0) == instant8.equals(dateTime43));
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2586");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.minuteOfHour();
        org.joda.time.Chronology chronology17 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.Chronology chronology23 = gJChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.millisOfDay();
        org.joda.time.DurationField durationField26 = gJChronology22.halfdays();
        org.joda.time.DurationField durationField27 = gJChronology22.millis();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology30 = gJChronology22.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.minuteOfDay();
        org.joda.time.Instant instant32 = gJChronology22.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.weekyear();
        boolean boolean34 = julianChronology3.equals((java.lang.Object) dateTimeField33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField13 and durationField27", (durationField13.compareTo(durationField27) == 0) == durationField13.equals(durationField27));
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2587");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        long long2 = instant1.getMillis();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.minus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = instant4.getZone();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant4.plus(readableDuration6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.Chronology chronology18 = gJChronology13.withZone(dateTimeZone16);
        java.lang.String str20 = dateTimeZone16.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime22 = instant10.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant31);
        java.lang.String str33 = instant31.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.Instant instant40 = gJChronology36.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant40.minus(readableDuration41);
        org.joda.time.Instant instant45 = instant42.withDurationAdded((-12219292800000L), 0);
        int int46 = instant31.compareTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant31.minus(readableDuration47);
        java.util.Date date49 = instant31.toDate();
        boolean boolean51 = instant31.isBefore((-62112218399999L));
        org.joda.time.Instant instant54 = instant31.withDurationAdded((-35999899L), (int) ' ');
        boolean boolean55 = mutableDateTime22.isBefore((org.joda.time.ReadableInstant) instant31);
        int int56 = instant7.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        long long57 = instant7.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime22", (instant10.compareTo(mutableDateTime22) == 0) == instant10.equals(mutableDateTime22));
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2588");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant14.isSupported(dateTimeFieldType16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime15", (instant9.compareTo(mutableDateTime15) == 0) == instant9.equals(mutableDateTime15));
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2589");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        boolean boolean27 = instant8.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime28 = instant8.toMutableDateTime();
        boolean boolean30 = instant8.isBefore(35964030L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime28", (instant8.compareTo(mutableDateTime28) == 0) == instant8.equals(mutableDateTime28));
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2590");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone10.getShortName((long) (byte) 1, locale12);
        org.joda.time.Chronology chronology14 = julianChronology3.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.dayOfWeek();
        org.joda.time.DurationField durationField17 = julianChronology3.eras();
        org.joda.time.DurationField durationField18 = julianChronology3.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField18, and durationField17", !(durationField17.compareTo(durationField18) == 0) || (Math.signum(durationField17.compareTo(durationField17)) == Math.signum(durationField18.compareTo(durationField17))));
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2591");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = instant7.isSupported(dateTimeFieldType8);
        org.joda.time.Instant instant11 = instant7.withMillis((-60514215257464L));
        boolean boolean13 = instant7.isAfter((-179999601L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = instant24.getZone();
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.yearOfEra();
        org.joda.time.DurationField durationField29 = julianChronology27.centuries();
        org.joda.time.DateTime dateTime30 = instant7.toDateTime((org.joda.time.Chronology) julianChronology27);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology27.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime30", (instant1.compareTo(dateTime30) == 0) == instant1.equals(dateTime30));
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2592");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField8 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField12", Math.signum(durationField6.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField6)));
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2593");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        long long12 = julianChronology3.getDateTimeMillis((int) (byte) 1, 10, (int) (short) 1, 24);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean15 = dateTimeZone14.isFixed();
        java.lang.String str16 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getID();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getNameKey(10L);
        long long25 = dateTimeZone19.convertUTCToLocal((-12219328800000L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        boolean boolean31 = julianChronology29.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology32 = julianChronology29.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology34 = julianChronology29.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = julianChronology29.days();
        int int36 = julianChronology29.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField37 = julianChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology29.millisOfDay();
        boolean boolean39 = dateTimeZone19.equals((java.lang.Object) dateTimeField38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.Chronology chronology49 = gJChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology44.getZone();
        long long52 = dateTimeZone50.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology53 = gJChronology40.withZone(dateTimeZone50);
        long long55 = dateTimeZone14.getMillisKeepLocal(dateTimeZone50, (long) 19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant61 = instant58.withDurationAdded(readableDuration59, 0);
        org.joda.time.Instant instant63 = instant61.minus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        boolean boolean68 = dateTimeZone65.isStandardOffset((long) 4);
        org.joda.time.DateTime dateTime69 = instant61.toDateTime(dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        boolean boolean71 = dateTime69.isSupported(dateTimeFieldType70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology73 = julianChronology3.withZone(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant58 and dateTime69", (instant58.compareTo(dateTime69) == 0) == instant58.equals(dateTime69));
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2594");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        long long8 = gJChronology2.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology12.minuteOfDay();
        org.joda.time.DurationField durationField14 = julianChronology12.weekyears();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.getID();
        boolean boolean18 = dateTimeZone16.isFixed();
        long long20 = dateTimeZone16.previousTransition(100L);
        java.util.TimeZone timeZone21 = dateTimeZone16.toTimeZone();
        long long23 = dateTimeZone16.previousTransition(5201L);
        org.joda.time.Chronology chronology24 = julianChronology12.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField26 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology2.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField26", Math.signum(durationField14.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField14)));
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2595");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = instant8.toInstant();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(0L);
        int int17 = instant14.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) instant16);
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTime();
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant21.minus((long) 10);
        java.util.Date date26 = instant25.toDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField33 = julianChronology32.centuries();
        boolean boolean34 = instant25.equals((java.lang.Object) durationField33);
        java.lang.String str35 = instant25.toString();
        boolean boolean36 = instant25.isEqualNow();
        boolean boolean37 = instant25.isBeforeNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant25.plus(readableDuration38);
        boolean boolean40 = instant18.isEqual((org.joda.time.ReadableInstant) instant25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime19", (instant16.compareTo(mutableDateTime19) == 0) == instant16.equals(mutableDateTime19));
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2596");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.previousTransition(110L);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant22.plus(readableDuration26);
        java.util.Date date28 = instant27.toDate();
        org.joda.time.Instant instant30 = instant27.plus(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-12219292800000L), 0);
        boolean boolean44 = instant39.isEqual(35L);
        org.joda.time.Instant instant45 = instant39.toInstant();
        boolean boolean47 = instant45.isBefore((long) ' ');
        boolean boolean48 = instant30.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone49 = instant30.getZone();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime55 = instant30.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime55", (instant30.compareTo(mutableDateTime55) == 0) == instant30.equals(mutableDateTime55));
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2597");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T00:00:00.035Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        java.lang.String str6 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.dayOfYear();
        java.lang.String str8 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology5.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology5.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = instant1.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = mutableDateTime16.isSupported(dateTimeFieldType17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2598");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        long long10 = instant9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        boolean boolean16 = julianChronology14.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology14.secondOfDay();
        org.joda.time.DurationField durationField22 = julianChronology14.eras();
        org.joda.time.MutableDateTime mutableDateTime23 = instant9.toMutableDateTime((org.joda.time.Chronology) julianChronology14);
        org.joda.time.Instant instant24 = instant9.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime23", (instant24.compareTo(mutableDateTime23) == 0) == instant24.equals(mutableDateTime23));
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2599");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.dayOfWeek();
        java.lang.String str9 = julianChronology3.toString();
        org.joda.time.DurationField durationField10 = julianChronology3.eras();
        int int11 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.Chronology chronology17 = gJChronology14.withUTC();
        org.joda.time.DurationField durationField18 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.clockhourOfDay();
        java.lang.String str20 = gJChronology14.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        boolean boolean26 = julianChronology24.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField27 = julianChronology24.months();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone29.getName((-1L), locale32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone29.isLocalDateTimeGap(localDateTime34);
        boolean boolean37 = dateTimeZone29.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology38 = julianChronology24.withZone(dateTimeZone29);
        java.lang.String str40 = dateTimeZone29.getNameKey((long) (short) 100);
        int int42 = dateTimeZone29.getStandardOffset(1836000071L);
        org.joda.time.Chronology chronology43 = gJChronology14.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology44 = julianChronology3.withZone(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField18", Math.signum(durationField10.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField10)));
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2600");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.Chronology chronology11 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant18.minus(readableDuration19);
        org.joda.time.Instant instant23 = instant20.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant20.plus(readableDuration24);
        java.util.Date date26 = instant25.toDate();
        org.joda.time.Instant instant28 = instant25.plus(35L);
        java.lang.String str29 = instant28.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        boolean boolean32 = instant8.isBefore((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.plus(readableDuration35);
        org.joda.time.Instant instant38 = instant36.withMillis((long) (byte) -1);
        org.joda.time.Instant instant40 = instant38.plus((long) (short) 0);
        java.lang.String str41 = instant40.toString();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant40.plus(readableDuration42);
        org.joda.time.Instant instant45 = instant40.plus((-61907104799981L));
        org.joda.time.Instant instant47 = instant40.plus((-35999965L));
        int int48 = instant8.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant49 = instant8.toInstant();
        boolean boolean51 = instant49.isBefore((-35999970L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant49 and dateTime10", (instant49.compareTo(dateTime10) == 0) == instant49.equals(dateTime10));
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2601");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 10);
        boolean boolean5 = instant4.isAfterNow();
        boolean boolean7 = instant4.isBefore((-4319997428L));
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 0);
        java.util.Date date13 = instant9.toDate();
        long long14 = instant9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant23);
        java.lang.String str25 = instant23.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.Instant instant32 = gJChronology28.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.minus(readableDuration33);
        org.joda.time.Instant instant37 = instant34.withDurationAdded((-12219292800000L), 0);
        int int38 = instant23.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.Chronology chronology42 = gJChronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.dayOfWeek();
        org.joda.time.DurationField durationField44 = gJChronology41.years();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.weekyear();
        boolean boolean46 = instant23.equals((java.lang.Object) dateTimeField45);
        org.joda.time.Instant instant48 = instant23.withMillis(32L);
        boolean boolean49 = instant9.isEqual((org.joda.time.ReadableInstant) instant48);
        boolean boolean51 = instant48.isAfter((long) (byte) 1);
        org.joda.time.DateTime dateTime52 = instant48.toDateTimeISO();
        org.joda.time.Chronology chronology53 = instant48.getChronology();
        int int54 = instant4.compareTo((org.joda.time.ReadableInstant) instant48);
        boolean boolean55 = instant4.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant48 and dateTime52", (instant48.compareTo(dateTime52) == 0) == instant48.equals(dateTime52));
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2602");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        int int35 = instant20.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant20.minus(readableDuration36);
        int int38 = instant8.compareTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant20.plus(readableDuration39);
        org.joda.time.MutableDateTime mutableDateTime41 = instant40.toMutableDateTimeISO();
        boolean boolean43 = instant40.isBefore((-12960036000000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime41", (instant8.compareTo(mutableDateTime41) == 0) == instant8.equals(mutableDateTime41));
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2603");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.Instant instant8 = instant6.toInstant();
        org.joda.time.Instant instant11 = instant6.withDurationAdded((-36000001L), 1200);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        java.lang.String str24 = instant22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.Instant instant36 = instant33.withDurationAdded((-12219292800000L), 0);
        int int37 = instant22.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant22.minus(readableDuration38);
        java.util.Date date40 = instant22.toDate();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.Instant instant52 = instant49.withDurationAdded((-12219292800000L), 0);
        boolean boolean53 = instant22.isEqual((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant55 = instant22.minus((-35999968L));
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, (org.joda.time.ReadableInstant) instant64);
        java.lang.String str66 = instant64.toString();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.Instant instant73 = gJChronology69.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant75 = instant73.minus(readableDuration74);
        org.joda.time.Instant instant78 = instant75.withDurationAdded((-12219292800000L), 0);
        int int79 = instant64.compareTo((org.joda.time.ReadableInstant) instant75);
        long long80 = instant64.getMillis();
        org.joda.time.Instant instant81 = instant64.toInstant();
        org.joda.time.DateTimeZone dateTimeZone82 = instant64.getZone();
        long long84 = dateTimeZone82.previousTransition((long) (short) 100);
        long long87 = dateTimeZone82.convertLocalToUTC((long) (-1), false);
        org.joda.time.DateTime dateTime88 = instant22.toDateTime(dateTimeZone82);
        java.util.Date date89 = instant22.toDate();
        org.joda.time.Instant instant91 = instant22.minus(43129898499L);
        org.joda.time.DateTimeZone dateTimeZone92 = instant22.getZone();
        boolean boolean93 = instant11.equals((java.lang.Object) instant22);
        org.joda.time.DateTime dateTime94 = instant22.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        boolean boolean96 = instant22.isSupported(dateTimeFieldType95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime94", (instant22.compareTo(dateTime94) == 0) == instant22.equals(dateTime94));
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2604");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        boolean boolean14 = dateTimeZone12.isFixed();
        long long17 = dateTimeZone12.convertLocalToUTC((-35999990L), true);
        long long20 = dateTimeZone12.convertLocalToUTC((long) 9, true);
        int int22 = dateTimeZone12.getOffset((long) (-1));
        boolean boolean24 = dateTimeZone12.isStandardOffset((long) 3600000);
        org.joda.time.DateTime dateTime25 = mutableDateTime9.toDateTime(dateTimeZone12);
        boolean boolean27 = dateTime25.isAfter((-165600001L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2605");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.era();
        org.joda.time.DurationField durationField7 = gJChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField7, and durationField5", !(durationField5.compareTo(durationField7) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField7.compareTo(durationField5))));
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2606");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        java.lang.String str24 = instant22.toString();
        int int25 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) instant22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = gJChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.halfdayOfDay();
        boolean boolean35 = instant26.equals((java.lang.Object) gJChronology29);
        org.joda.time.DurationField durationField36 = gJChronology29.weekyears();
        int int37 = gJChronology29.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str40 = dateTimeZone39.getID();
        boolean boolean41 = dateTimeZone39.isFixed();
        long long43 = dateTimeZone39.previousTransition(100L);
        java.util.TimeZone timeZone44 = dateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone45 = dateTimeZone39.toTimeZone();
        java.lang.String str46 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology47 = gJChronology29.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime12.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = mutableDateTime48.isSupported(dateTimeFieldType49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime12", (instant6.compareTo(dateTime12) == 0) == instant6.equals(dateTime12));
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2607");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant17.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = instant19.isSupported(dateTimeFieldType21);
        int int23 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant26 = instant19.withDurationAdded((-107999990L), (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.Chronology chronology30 = gJChronology29.withUTC();
        org.joda.time.DurationField durationField31 = gJChronology29.millis();
        org.joda.time.Chronology chronology32 = gJChronology29.withUTC();
        org.joda.time.DurationField durationField33 = gJChronology29.seconds();
        long long37 = gJChronology29.add((-71999901L), 36001582L, 1200);
        long long43 = gJChronology29.getDateTimeMillis(110L, (int) (short) 10, (int) (short) 0, 1, (int) '4');
        org.joda.time.DateTime dateTime44 = instant19.toDateTime((org.joda.time.Chronology) gJChronology29);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean48 = dateTimeZone46.isStandardOffset((long) (-1));
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField50 = gJChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DurationField durationField52 = gJChronology49.seconds();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology49.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(20);
        org.joda.time.Chronology chronology56 = gJChronology49.withZone(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = dateTime44.toDateTime(dateTimeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime20", (instant19.compareTo(dateTime20) == 0) == instant19.equals(dateTime20));
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2608");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant25.toString(dateTimeFormatter26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant25.plus(readableDuration28);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        boolean boolean41 = instant39.isBefore(35999999L);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant39.plus(readableDuration42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        java.lang.String str48 = gJChronology46.toString();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology46.clockhourOfHalfday();
        org.joda.time.DateTime dateTime54 = instant43.toDateTime((org.joda.time.Chronology) gJChronology46);
        int int55 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Instant instant56 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.dayOfYear();
        org.joda.time.Instant instant63 = gJChronology59.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant63.minus(readableDuration64);
        org.joda.time.Instant instant68 = instant65.withDurationAdded((-12219292800000L), 0);
        boolean boolean70 = instant65.isEqual(35L);
        boolean boolean71 = instant56.isEqual((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Instant instant72 = instant56.toInstant();
        org.joda.time.Chronology chronology73 = instant56.getChronology();
        boolean boolean74 = dateTime54.isAfter((org.joda.time.ReadableInstant) instant56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime30", (instant17.compareTo(dateTime30) == 0) == instant17.equals(dateTime30));
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2609");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        boolean boolean16 = instant11.isEqual(35L);
        boolean boolean17 = instant2.isEqual((org.joda.time.ReadableInstant) instant11);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant11.plus(readableDuration18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        int int22 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant23 = instant21.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2610");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.halfdays();
        org.joda.time.DurationField durationField16 = gJChronology11.millis();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology19 = gJChronology11.withZone(dateTimeZone18);
        int int21 = dateTimeZone18.getStandardOffset((-12219292800000L));
        long long23 = dateTimeZone18.nextTransition((-59082429599991L));
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        boolean boolean25 = gJChronology2.equals((java.lang.Object) julianChronology24);
        org.joda.time.DurationField durationField26 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField15, and durationField16", !(durationField26.compareTo(durationField15) == 0) || (Math.signum(durationField26.compareTo(durationField16)) == Math.signum(durationField15.compareTo(durationField16))));
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2611");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.Chronology chronology14 = instant8.getChronology();
        org.joda.time.Instant instant15 = instant8.toInstant();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.Instant instant34 = gJChronology30.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.minus(readableDuration35);
        org.joda.time.Instant instant39 = instant36.withDurationAdded((-12219292800000L), 0);
        int int40 = instant25.compareTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.Chronology chronology44 = gJChronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.dayOfWeek();
        org.joda.time.DurationField durationField46 = gJChronology43.years();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology43.weekyear();
        boolean boolean48 = instant25.equals((java.lang.Object) dateTimeField47);
        org.joda.time.MutableDateTime mutableDateTime49 = instant25.toMutableDateTime();
        boolean boolean50 = instant15.isEqual((org.joda.time.ReadableInstant) instant25);
        org.joda.time.DateTimeZone dateTimeZone51 = instant15.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and mutableDateTime49", (instant25.compareTo(mutableDateTime49) == 0) == instant25.equals(mutableDateTime49));
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2612");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology11 = gJChronology9.withUTC();
        org.joda.time.Instant instant12 = gJChronology9.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant12.minus(readableDuration13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.plus(readableDuration17);
        org.joda.time.Instant instant20 = instant18.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTimeISO();
        boolean boolean23 = instant20.isAfter((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = instant20.isSupported(dateTimeFieldType24);
        boolean boolean27 = instant20.isBefore((long) 1582);
        boolean boolean28 = instant14.isBefore((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant29 = instant14.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime21", (instant20.compareTo(dateTime21) == 0) == instant20.equals(dateTime21));
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2613");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        boolean boolean7 = instant4.isAfterNow();
        java.lang.String str8 = instant4.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        org.joda.time.DateTime dateTime23 = instant17.toDateTime();
        boolean boolean24 = instant4.isBefore((org.joda.time.ReadableInstant) instant17);
        org.joda.time.MutableDateTime mutableDateTime25 = instant17.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime23", (instant17.compareTo(dateTime23) == 0) == instant17.equals(dateTime23));
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2614");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = instant1.toString(dateTimeFormatter2);
        java.lang.String str4 = instant1.toString();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant1.withDurationAdded(readableDuration5, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology10.getZone();
        java.lang.String str15 = dateTimeZone14.getID();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone14.getShortName((-60514215252321L), locale17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant7.toMutableDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = instant7.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime19", (instant7.compareTo(mutableDateTime19) == 0) == instant7.equals(mutableDateTime19));
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2615");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology20 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField22 = gJChronology2.months();
        org.joda.time.DurationField durationField23 = gJChronology2.hours();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant25.withDurationAdded(readableDuration26, 0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.Chronology chronology46 = gJChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology45.monthOfYear();
        boolean boolean53 = instant37.equals((java.lang.Object) dateTimeField52);
        org.joda.time.Instant instant55 = instant37.withMillis(1L);
        boolean boolean56 = instant28.isBefore((org.joda.time.ReadableInstant) instant55);
        org.joda.time.Instant instant58 = instant55.plus(3600000L);
        org.joda.time.DateTime dateTime59 = instant58.toDateTime();
        boolean boolean60 = gJChronology2.equals((java.lang.Object) dateTime59);
        org.joda.time.DurationField durationField61 = gJChronology2.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant58 and dateTime59", (instant58.compareTo(dateTime59) == 0) == instant58.equals(dateTime59));
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Chronology chronology16 = gJChronology11.withZone(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getName((long) (byte) 10);
        long long21 = dateTimeZone14.convertLocalToUTC((-35999900L), false);
        int int23 = dateTimeZone14.getOffsetFromLocal((long) 278);
        boolean boolean25 = dateTimeZone14.isStandardOffset((long) 1582);
        long long27 = dateTimeZone14.previousTransition((-12242483999903L));
        long long29 = dateTimeZone8.getMillisKeepLocal(dateTimeZone14, (long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, (org.joda.time.ReadableInstant) instant38);
        java.lang.String str40 = instant38.toString();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.Instant instant52 = instant49.withDurationAdded((-12219292800000L), 0);
        int int53 = instant38.compareTo((org.joda.time.ReadableInstant) instant49);
        long long54 = instant38.getMillis();
        org.joda.time.Instant instant55 = instant38.toInstant();
        long long56 = instant38.getMillis();
        org.joda.time.Instant instant58 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant61 = instant58.withDurationAdded(readableDuration59, 10);
        java.util.Date date62 = instant61.toDate();
        boolean boolean63 = instant38.isAfter((org.joda.time.ReadableInstant) instant61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = instant61.isSupported(dateTimeFieldType64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) instant61);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = instant61.toDateTime(dateTimeZone67);
        long long69 = instant61.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant61 and dateTime68", (instant61.compareTo(dateTime68) == 0) == instant61.equals(dateTime68));
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2617");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((java.lang.Object) instant1);
        java.util.Date date8 = instant7.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) instant18);
        java.lang.String str20 = instant18.toString();
        int int21 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((java.lang.Object) instant18);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((java.lang.Object) instant22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((java.lang.Object) instant23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        java.lang.String str29 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.dayOfWeek();
        org.joda.time.Instant instant33 = gJChronology27.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology27.halfdays();
        org.joda.time.MutableDateTime mutableDateTime36 = instant24.toMutableDateTime((org.joda.time.Chronology) gJChronology27);
        boolean boolean37 = instant7.isEqual((org.joda.time.ReadableInstant) instant24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime36", (instant1.compareTo(mutableDateTime36) == 0) == instant1.equals(mutableDateTime36));
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2618");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant3 = instant1.plus(110L);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str11 = dateTimeZone10.getID();
        org.joda.time.Chronology chronology12 = gJChronology7.withZone(dateTimeZone10);
        java.lang.String str14 = dateTimeZone10.getName((long) (byte) 10);
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone16.getName(36000001L, locale18);
        org.joda.time.MutableDateTime mutableDateTime20 = instant3.toMutableDateTime(dateTimeZone16);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2619");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        boolean boolean5 = instant3.isBefore((-107999990L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2620");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.seconds();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.dayOfWeek();
        org.joda.time.DurationField durationField19 = julianChronology11.months();
        org.joda.time.DateTime dateTime20 = instant7.toDateTime((org.joda.time.Chronology) julianChronology11);
        java.util.Date date21 = instant7.toDate();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        boolean boolean35 = instant30.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.monthOfYear();
        boolean boolean46 = instant30.equals((java.lang.Object) dateTimeField45);
        org.joda.time.Instant instant48 = instant30.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = instant48.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.dayOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant57.minus(readableDuration58);
        org.joda.time.Instant instant62 = instant59.withDurationAdded((-12219292800000L), 0);
        boolean boolean64 = instant59.isEqual(35L);
        org.joda.time.Instant instant65 = instant59.toInstant();
        boolean boolean67 = instant65.isBefore((long) ' ');
        boolean boolean68 = instant48.isAfter((org.joda.time.ReadableInstant) instant65);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69, readableInstant70);
        org.joda.time.Chronology chronology72 = gJChronology71.withUTC();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology71.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology71.millisOfDay();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology71.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology71.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology71.dayOfYear();
        org.joda.time.DurationField durationField78 = gJChronology71.hours();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology71.hourOfHalfday();
        int int80 = instant48.get(dateTimeField79);
        boolean boolean81 = instant7.isAfter((org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant7", (dateTime20.compareTo(instant7) == 0) == dateTime20.equals(instant7));
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2621");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        boolean boolean11 = mutableDateTime9.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        java.lang.String str15 = gJChronology14.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfYear();
        java.lang.String str17 = gJChronology14.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.monthOfYear();
        int int20 = mutableDateTime9.get(dateTimeField19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.Chronology chronology24 = gJChronology23.withUTC();
        java.lang.String str25 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.weekyearOfCentury();
        boolean boolean27 = mutableDateTime9.equals((java.lang.Object) gJChronology23);
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime9.getZone();
        org.joda.time.Instant instant29 = mutableDateTime9.toInstant();
        org.joda.time.Instant instant30 = new org.joda.time.Instant((java.lang.Object) mutableDateTime9);
        java.lang.String str31 = instant30.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2622");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        java.lang.String str9 = dateTimeZone7.getName((long) 0);
        long long12 = dateTimeZone7.adjustOffset(1L, true);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology2.add(readablePeriod14, (-107999989L), 24);
        org.joda.time.Instant instant18 = gJChronology2.getGregorianCutover();
        long long19 = instant18.getMillis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        java.lang.String str25 = dateTimeZone21.getNameKey(10L);
        java.lang.String str27 = dateTimeZone21.getName((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime28 = instant18.toMutableDateTime(dateTimeZone21);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(0L);
        long long31 = instant30.getMillis();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.minus(readableDuration32);
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant36.getZone();
        int int39 = dateTimeZone37.getStandardOffset((-71999900L));
        java.lang.String str40 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime41 = instant18.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        boolean boolean47 = julianChronology45.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField48 = julianChronology45.months();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone50.getName((-1L), locale53);
        org.joda.time.LocalDateTime localDateTime55 = null;
        boolean boolean56 = dateTimeZone50.isLocalDateTimeGap(localDateTime55);
        boolean boolean58 = dateTimeZone50.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology59 = julianChronology45.withZone(dateTimeZone50);
        int int61 = dateTimeZone50.getOffset((-35999900L));
        int int63 = dateTimeZone50.getOffset((long) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, readableInstant65);
        org.joda.time.Chronology chronology67 = gJChronology66.withUTC();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.dayOfWeek();
        org.joda.time.Chronology chronology69 = gJChronology66.withUTC();
        org.joda.time.DurationField durationField70 = gJChronology66.halfdays();
        org.joda.time.DateTimeZone dateTimeZone71 = gJChronology66.getZone();
        int int73 = dateTimeZone71.getOffset((long) 1);
        java.util.TimeZone timeZone74 = dateTimeZone71.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        java.lang.String str77 = dateTimeZone75.getName(36000010L);
        long long79 = dateTimeZone50.getMillisKeepLocal(dateTimeZone75, (-35999890L));
        org.joda.time.chrono.JulianChronology julianChronology80 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone75);
        org.joda.time.Chronology chronology81 = julianChronology80.withUTC();
        org.joda.time.DateTimeZone dateTimeZone82 = julianChronology80.getZone();
        long long84 = dateTimeZone37.getMillisKeepLocal(dateTimeZone82, (-35999996L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime28", (instant18.compareTo(mutableDateTime28) == 0) == instant18.equals(mutableDateTime28));
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2623");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant6.withDurationAdded(readableDuration20, 36000000);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime9", (instant24.compareTo(mutableDateTime9) == 0) == instant24.equals(mutableDateTime9));
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2624");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant75 = instant19.withDurationAdded(2780L, (int) (short) 0);
        java.util.Date date76 = instant19.toDate();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, readableInstant78);
        org.joda.time.Chronology chronology80 = gJChronology79.withUTC();
        java.lang.String str81 = gJChronology79.toString();
        org.joda.time.DurationField durationField82 = gJChronology79.eras();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology79.era();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology79.weekOfWeekyear();
        org.joda.time.Instant instant85 = gJChronology79.getGregorianCutover();
        boolean boolean86 = instant19.equals((java.lang.Object) instant85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField82", Math.signum(durationField6.compareTo(durationField82)) == -Math.signum(durationField82.compareTo(durationField6)));
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2625");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTime(dateTimeZone22);
        boolean boolean25 = mutableDateTime23.equals((java.lang.Object) (-35999900L));
        int int26 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Instant instant27 = mutableDateTime23.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        boolean boolean33 = julianChronology31.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology34 = julianChronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone35 = julianChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology31.yearOfEra();
        boolean boolean38 = instant27.equals((java.lang.Object) julianChronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and mutableDateTime23", (instant20.compareTo(mutableDateTime23) == 0) == instant20.equals(mutableDateTime23));
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2626");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant3 = instant1.plus(110L);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str11 = dateTimeZone10.getID();
        org.joda.time.Chronology chronology12 = gJChronology7.withZone(dateTimeZone10);
        java.lang.String str14 = dateTimeZone10.getName((long) (byte) 10);
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone16.getName(36000001L, locale18);
        org.joda.time.MutableDateTime mutableDateTime20 = instant3.toMutableDateTime(dateTimeZone16);
        java.util.Date date21 = mutableDateTime20.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2627");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField22 = gJChronology20.millis();
        long long26 = gJChronology20.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField27 = gJChronology20.millis();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology20.millisOfSecond();
        int int32 = instant15.get(dateTimeField31);
        org.joda.time.Instant instant33 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.plus(readableDuration34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology38.getZone();
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, (org.joda.time.ReadableInstant) instant44);
        java.lang.String str46 = instant44.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.dayOfYear();
        org.joda.time.Instant instant53 = gJChronology49.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant53.minus(readableDuration54);
        org.joda.time.Instant instant58 = instant55.withDurationAdded((-12219292800000L), 0);
        int int59 = instant44.compareTo((org.joda.time.ReadableInstant) instant55);
        long long60 = instant44.getMillis();
        org.joda.time.Instant instant61 = instant44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone62 = instant44.getZone();
        int int63 = instant35.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant65 = instant35.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant35.plus(readableDuration66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long72 = dateTimeZone70.previousTransition(0L);
        int int74 = dateTimeZone70.getStandardOffset(170401582L);
        org.joda.time.DateTime dateTime75 = instant35.toDateTime(dateTimeZone70);
        boolean boolean76 = instant15.isAfter((org.joda.time.ReadableInstant) instant35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime75", (instant35.compareTo(dateTime75) == 0) == instant35.equals(dateTime75));
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2628");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField14 = julianChronology13.centuries();
        java.lang.String str15 = julianChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.yearOfEra();
        org.joda.time.DurationField durationField17 = julianChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.minuteOfDay();
        boolean boolean22 = julianChronology13.equals((java.lang.Object) dateTimeField21);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology13.secondOfMinute();
        int int24 = julianChronology13.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField31 = julianChronology28.months();
        boolean boolean32 = julianChronology13.equals((java.lang.Object) julianChronology28);
        boolean boolean33 = instant8.equals((java.lang.Object) julianChronology13);
        org.joda.time.DurationField durationField34 = julianChronology13.hours();
        org.joda.time.DateTimeZone dateTimeZone35 = julianChronology13.getZone();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone35.getName((-731761172823L), locale37);
        java.lang.String str40 = dateTimeZone35.getName((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.Instant instant52 = instant49.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant49.plus(readableDuration53);
        org.joda.time.Instant instant55 = instant54.toInstant();
        org.joda.time.DateTime dateTime56 = instant54.toDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, (org.joda.time.ReadableInstant) instant54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant54 and dateTime56", (instant54.compareTo(dateTime56) == 0) == instant54.equals(dateTime56));
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2629");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfYear();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DurationField durationField15 = gJChronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        boolean boolean21 = julianChronology19.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology22 = julianChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology19.era();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology19.minuteOfHour();
        org.joda.time.DurationField durationField25 = julianChronology19.weeks();
        org.joda.time.DurationField durationField26 = julianChronology19.days();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology19.hourOfDay();
        java.lang.String str29 = julianChronology19.toString();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology19.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology19.weekyearOfCentury();
        boolean boolean34 = gJChronology11.equals((java.lang.Object) dateTimeField33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str41 = dateTimeZone40.getID();
        org.joda.time.Chronology chronology42 = gJChronology37.withZone(dateTimeZone40);
        java.lang.String str44 = dateTimeZone40.getName((long) (byte) 10);
        java.util.TimeZone timeZone45 = dateTimeZone40.toTimeZone();
        long long49 = dateTimeZone40.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        long long51 = dateTimeZone40.previousTransition(5201L);
        org.joda.time.Chronology chronology52 = gJChronology11.withZone(dateTimeZone40);
        org.joda.time.Chronology chronology53 = gJChronology2.withZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField15", Math.signum(durationField6.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField6)));
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2630");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = instant6.getZone();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant6.withDurationAdded(readableDuration13, 69);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        boolean boolean21 = julianChronology19.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology22 = julianChronology19.withUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology24 = julianChronology19.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = julianChronology19.days();
        int int26 = julianChronology19.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology19.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = instant6.toMutableDateTime((org.joda.time.Chronology) julianChronology19);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant30.withDurationAdded(readableDuration31, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = instant30.toString(dateTimeFormatter34);
        org.joda.time.Instant instant38 = instant30.withDurationAdded(0L, 1582);
        org.joda.time.Chronology chronology39 = instant30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = julianChronology42.minuteOfDay();
        org.joda.time.DurationField durationField44 = julianChronology42.weekyears();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str47 = dateTimeZone46.getID();
        boolean boolean48 = dateTimeZone46.isFixed();
        long long50 = dateTimeZone46.previousTransition(100L);
        java.util.TimeZone timeZone51 = dateTimeZone46.toTimeZone();
        long long53 = dateTimeZone46.previousTransition(5201L);
        org.joda.time.Chronology chronology54 = julianChronology42.withZone(dateTimeZone46);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.year();
        org.joda.time.DateTime dateTime58 = instant30.toDateTime((org.joda.time.Chronology) gJChronology55);
        boolean boolean59 = instant6.isEqual((org.joda.time.ReadableInstant) instant30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime28", (instant6.compareTo(mutableDateTime28) == 0) == instant6.equals(mutableDateTime28));
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2631");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.Chronology chronology14 = gJChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology17 = chronology14.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        boolean boolean31 = julianChronology29.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology32 = julianChronology29.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology34 = julianChronology29.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = julianChronology29.days();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str39 = dateTimeZone38.getID();
        boolean boolean40 = dateTimeZone38.isFixed();
        long long42 = dateTimeZone38.previousTransition(100L);
        java.util.TimeZone timeZone43 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.Chronology chronology45 = julianChronology29.withZone(dateTimeZone44);
        java.util.TimeZone timeZone46 = dateTimeZone44.toTimeZone();
        boolean boolean47 = instant24.equals((java.lang.Object) dateTimeZone44);
        org.joda.time.Chronology chronology48 = chronology17.withZone(dateTimeZone44);
        org.joda.time.Chronology chronology49 = gJChronology2.withZone(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField35", Math.signum(durationField5.compareTo(durationField35)) == -Math.signum(durationField35.compareTo(durationField5)));
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2632");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.dayOfYear();
        boolean boolean20 = instant8.equals((java.lang.Object) dateTimeField19);
        org.joda.time.Chronology chronology21 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = instant8.getZone();
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2633");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        java.util.Date date6 = instant5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant5.isSupported(dateTimeFieldType7);
        org.joda.time.Instant instant11 = instant5.withDurationAdded((long) '4', (int) (short) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant5.minus(readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        java.lang.String str19 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology16.getZone();
        org.joda.time.DurationField durationField22 = gJChronology16.seconds();
        org.joda.time.DateTime dateTime23 = instant13.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime23", (instant5.compareTo(dateTime23) == 0) == instant5.equals(dateTime23));
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2634");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.Instant instant16 = instant6.withDurationAdded((long) 100, 1582);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.Chronology chronology24 = gJChronology19.withZone(dateTimeZone22);
        java.lang.String str26 = dateTimeZone22.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology28 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) (-1));
        long long36 = dateTimeZone30.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long38 = dateTimeZone30.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology39 = julianChronology27.withZone(dateTimeZone30);
        long long41 = dateTimeZone30.previousTransition(0L);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, (-71999990L), (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone30.isLocalDateTimeGap(localDateTime45);
        org.joda.time.MutableDateTime mutableDateTime47 = instant16.toMutableDateTime(dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2635");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        java.lang.String str17 = dateTimeZone13.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.Chronology chronology19 = julianChronology18.withUTC();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        long long27 = dateTimeZone21.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long29 = dateTimeZone21.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology30 = julianChronology18.withZone(dateTimeZone21);
        long long32 = dateTimeZone21.previousTransition(0L);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (-71999990L), (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37);
        boolean boolean41 = julianChronology39.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField42 = julianChronology39.days();
        org.joda.time.DurationField durationField43 = julianChronology39.minutes();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology39.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str51 = dateTimeZone50.getID();
        org.joda.time.Chronology chronology52 = gJChronology47.withZone(dateTimeZone50);
        java.lang.String str54 = dateTimeZone50.getName((long) (byte) 10);
        java.util.TimeZone timeZone55 = dateTimeZone50.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.Chronology chronology57 = julianChronology39.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forID("+10:00");
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.Chronology chronology61 = julianChronology39.withZone(dateTimeZone59);
        long long63 = dateTimeZone21.getMillisKeepLocal(dateTimeZone59, 151199999L);
        org.joda.time.Chronology chronology64 = gJChronology2.withZone(dateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField42", (durationField5.compareTo(durationField42) == 0) == durationField5.equals(durationField42));
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2636");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant6.withDurationAdded(readableDuration12, 19);
        java.lang.String str15 = instant14.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime9", (instant14.compareTo(mutableDateTime9) == 0) == instant14.equals(mutableDateTime9));
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2637");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        long long4 = instant1.getMillis();
        org.joda.time.Chronology chronology5 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        boolean boolean9 = dateTimeZone7.isFixed();
        long long12 = dateTimeZone7.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology13.getZone();
        org.joda.time.DateTime dateTime16 = instant1.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant25.withDurationAdded(readableDuration28, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = instant25.getZone();
        boolean boolean33 = instant25.isEqual(18684000000L);
        boolean boolean34 = instant1.isBefore((org.joda.time.ReadableInstant) instant25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime16", (instant1.compareTo(dateTime16) == 0) == instant1.equals(dateTime16));
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2638");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTime dateTime73 = instant46.toDateTime();
        org.joda.time.Instant instant74 = instant46.toInstant();
        long long75 = instant46.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime73 and instant46", (dateTime73.compareTo(instant46) == 0) == dateTime73.equals(instant46));
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2639");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.plus(readableDuration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology28.getZone();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, (org.joda.time.ReadableInstant) instant34);
        java.lang.String str36 = instant34.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.Instant instant43 = gJChronology39.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.minus(readableDuration44);
        org.joda.time.Instant instant48 = instant45.withDurationAdded((-12219292800000L), 0);
        int int49 = instant34.compareTo((org.joda.time.ReadableInstant) instant45);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.Chronology chronology53 = gJChronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.dayOfWeek();
        org.joda.time.DurationField durationField55 = gJChronology52.years();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.weekyear();
        boolean boolean57 = instant34.equals((java.lang.Object) dateTimeField56);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant62 = instant59.withDurationAdded(readableDuration60, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = instant59.toString(dateTimeFormatter63);
        org.joda.time.Instant instant67 = instant59.withDurationAdded(0L, 1582);
        long long68 = instant67.getMillis();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant71 = instant67.withDurationAdded(readableDuration69, (int) (short) 100);
        boolean boolean72 = instant34.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.DateTime dateTime73 = instant67.toDateTimeISO();
        boolean boolean75 = dateTime73.isEqual((-386L));
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime73.toMutableDateTime(chronology76);
        boolean boolean78 = instant25.equals((java.lang.Object) dateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and mutableDateTime77", (instant25.compareTo(mutableDateTime77) == 0) == instant25.equals(mutableDateTime77));
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2640");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone40 = instant35.getZone();
        boolean boolean41 = instant35.isBeforeNow();
        java.util.Date date42 = instant35.toDate();
        boolean boolean44 = instant35.isEqual((-71936861L));
        org.joda.time.Instant instant45 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.dayOfYear();
        org.joda.time.Instant instant52 = gJChronology48.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant52.minus(readableDuration53);
        org.joda.time.Instant instant57 = instant54.withDurationAdded((-12219292800000L), 0);
        boolean boolean59 = instant54.isEqual(35L);
        boolean boolean60 = instant45.isEqual((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTimeZone dateTimeZone61 = instant54.getZone();
        int int63 = dateTimeZone61.getStandardOffset((-11L));
        org.joda.time.MutableDateTime mutableDateTime64 = instant35.toMutableDateTime(dateTimeZone61);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        boolean boolean66 = instant65.isAfterNow();
        boolean boolean67 = instant35.isBefore((org.joda.time.ReadableInstant) instant65);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant65.minus(readableDuration68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        java.lang.String str74 = gJChronology72.toString();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology72.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology72.dayOfWeek();
        org.joda.time.Instant instant78 = gJChronology72.getGregorianCutover();
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DateTime dateTime80 = instant78.toDateTime();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = instant78.toDateTime(chronology81);
        boolean boolean83 = instant65.isBefore((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime80", (instant17.compareTo(dateTime80) == 0) == instant17.equals(dateTime80));
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2641");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2642");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField31 = julianChronology30.centuries();
        java.lang.String str32 = julianChronology30.toString();
        java.lang.String str33 = julianChronology30.toString();
        org.joda.time.DurationField durationField34 = julianChronology30.weekyears();
        org.joda.time.DateTimeZone dateTimeZone35 = julianChronology30.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = instant8.toMutableDateTime(dateTimeZone35);
        org.joda.time.Instant instant38 = instant8.withMillis(65L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime36", (instant8.compareTo(mutableDateTime36) == 0) == instant8.equals(mutableDateTime36));
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2643");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) 36000000, locale5);
        int int8 = dateTimeZone3.getOffset((long) ' ');
        long long10 = dateTimeZone3.previousTransition(1L);
        java.lang.String str12 = dateTimeZone3.getShortName((long) (short) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.joda.time.Instant instant26 = instant23.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant23.plus(readableDuration27);
        java.util.Date date29 = instant28.toDate();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, (org.joda.time.ReadableInstant) instant38);
        java.lang.String str40 = instant38.toString();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.Instant instant52 = instant49.withDurationAdded((-12219292800000L), 0);
        int int53 = instant38.compareTo((org.joda.time.ReadableInstant) instant49);
        long long54 = instant38.getMillis();
        org.joda.time.Instant instant57 = instant38.withDurationAdded((long) '#', 278);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone59.getName(0L, locale61);
        java.lang.String str64 = dateTimeZone59.getName((-71999990L));
        org.joda.time.DateTime dateTime65 = instant57.toDateTime(dateTimeZone59);
        long long66 = dateTime65.getMillis();
        boolean boolean67 = instant28.isBefore((org.joda.time.ReadableInstant) dateTime65);
        int int68 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime65.toMutableDateTime(dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72);
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology73.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology73.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology73.getZone();
        org.joda.time.Instant instant79 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, (org.joda.time.ReadableInstant) instant79);
        java.lang.String str81 = instant79.toString();
        org.joda.time.DateTimeZone dateTimeZone82 = instant79.getZone();
        boolean boolean83 = dateTime65.equals((java.lang.Object) instant79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant57 and mutableDateTime70", (instant57.compareTo(mutableDateTime70) == 0) == instant57.equals(mutableDateTime70));
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2644");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.era();
        int int8 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Chronology chronology17 = gJChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology12.getZone();
        long long20 = dateTimeZone18.nextTransition((-12219292800000L));
        long long22 = dateTimeZone18.convertUTCToLocal((long) 1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone18.getName((long) (-1), locale24);
        long long29 = dateTimeZone18.convertLocalToUTC(1L, true, (long) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.Chronology chronology33 = gJChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.millisOfDay();
        org.joda.time.DurationField durationField36 = gJChronology32.halfdays();
        org.joda.time.DurationField durationField37 = gJChronology32.millis();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology40 = gJChronology32.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology32.minuteOfDay();
        org.joda.time.Instant instant42 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant44 = instant42.minus(0L);
        int int45 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) instant44);
        long long46 = instant44.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant44.isSupported(dateTimeFieldType47);
        org.joda.time.Instant instant49 = instant44.toInstant();
        boolean boolean50 = instant9.isAfter((org.joda.time.ReadableInstant) instant49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.dayOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime60 = instant57.toMutableDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = instant57.toDateTime();
        java.util.Date date62 = instant57.toDate();
        boolean boolean63 = instant57.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime64 = instant57.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66);
        java.lang.String str68 = gJChronology67.toString();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.dayOfYear();
        int int70 = instant57.get(dateTimeField69);
        long long71 = instant57.getMillis();
        long long72 = instant57.getMillis();
        boolean boolean73 = instant49.isAfter((org.joda.time.ReadableInstant) instant57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant49 and mutableDateTime60", (instant49.compareTo(mutableDateTime60) == 0) == instant49.equals(mutableDateTime60));
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2645");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.halfdays();
        org.joda.time.DurationField durationField16 = gJChronology11.millis();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology19 = gJChronology11.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology11.minutes();
        org.joda.time.DurationField durationField21 = gJChronology11.weekyears();
        org.joda.time.DurationField durationField22 = gJChronology11.weekyears();
        org.joda.time.DurationField durationField23 = gJChronology11.weeks();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        boolean boolean37 = instant32.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology40.monthOfYear();
        boolean boolean48 = instant32.equals((java.lang.Object) dateTimeField47);
        org.joda.time.Instant instant50 = instant32.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = instant50.isSupported(dateTimeFieldType51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = instant50.isSupported(dateTimeFieldType53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = instant50.toString(dateTimeFormatter55);
        boolean boolean58 = instant50.isAfter(3L);
        boolean boolean59 = gJChronology11.equals((java.lang.Object) instant50);
        org.joda.time.MutableDateTime mutableDateTime60 = instant50.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant50.minus(readableDuration61);
        boolean boolean63 = gJChronology2.equals((java.lang.Object) instant50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime60 and instant50", (mutableDateTime60.compareTo(instant50) == 0) == mutableDateTime60.equals(instant50));
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2646");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000100L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        boolean boolean16 = instant11.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.monthOfYear();
        boolean boolean27 = instant11.equals((java.lang.Object) dateTimeField26);
        org.joda.time.Instant instant29 = instant11.withMillis(1L);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant11.withDurationAdded(readableDuration30, 1);
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant33.withDurationAdded(readableDuration34, (-1));
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        boolean boolean48 = instant46.isBefore(35999999L);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant46.plus(readableDuration49);
        boolean boolean51 = mutableDateTime37.isBefore((org.joda.time.ReadableInstant) instant50);
        boolean boolean52 = instant1.isAfter((org.joda.time.ReadableInstant) instant50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and mutableDateTime37", (instant50.compareTo(mutableDateTime37) == 0) == instant50.equals(mutableDateTime37));
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2647");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField7 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = gJChronology2.add(readablePeriod12, (-5900380595998018L), 20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField11", Math.signum(durationField7.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField7)));
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2648");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        int int14 = dateTimeZone5.getOffsetFromLocal((long) 278);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.monthOfYear();
        boolean boolean41 = instant25.equals((java.lang.Object) dateTimeField40);
        org.joda.time.Instant instant43 = instant25.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant43.isSupported(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = instant43.toString(dateTimeFormatter48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.chrono.JulianChronology julianChronology54 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField55 = julianChronology54.weeks();
        org.joda.time.DurationField durationField56 = julianChronology54.millis();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology54.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = julianChronology54.yearOfCentury();
        int int60 = instant43.get(dateTimeField59);
        org.joda.time.DateTime dateTime61 = instant43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        org.joda.time.chrono.JulianChronology julianChronology65 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63);
        boolean boolean67 = julianChronology65.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField68 = julianChronology65.months();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        java.util.Locale locale73 = null;
        java.lang.String str74 = dateTimeZone70.getName((-1L), locale73);
        org.joda.time.LocalDateTime localDateTime75 = null;
        boolean boolean76 = dateTimeZone70.isLocalDateTimeGap(localDateTime75);
        boolean boolean78 = dateTimeZone70.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology79 = julianChronology65.withZone(dateTimeZone70);
        int int81 = dateTimeZone70.getOffset((-35999900L));
        java.lang.String str83 = dateTimeZone70.getShortName(0L);
        java.lang.String str84 = dateTimeZone70.getID();
        int int86 = dateTimeZone70.getStandardOffset((long) 1200);
        java.lang.String str87 = dateTimeZone70.getID();
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.chrono.GJChronology gJChronology89 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant88);
        long long92 = dateTimeZone70.adjustOffset(107999999L, true);
        org.joda.time.MutableDateTime mutableDateTime93 = instant43.toMutableDateTime(dateTimeZone70);
        boolean boolean95 = mutableDateTime93.isBefore((-60514215040097L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime61", (instant43.compareTo(dateTime61) == 0) == instant43.equals(dateTime61));
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2649");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant24 = instant19.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-36000000L), 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField32 = julianChronology31.centuries();
        org.joda.time.DurationField durationField33 = julianChronology31.weeks();
        org.joda.time.DurationField durationField34 = julianChronology31.years();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone37 = julianChronology31.getZone();
        org.joda.time.MutableDateTime mutableDateTime38 = instant24.toMutableDateTime(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = instant24.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime38", (instant24.compareTo(mutableDateTime38) == 0) == instant24.equals(mutableDateTime38));
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2650");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime(chronology2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.Chronology chronology9 = gJChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.millisOfDay();
        java.lang.String str12 = gJChronology8.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.yearOfEra();
        org.joda.time.DurationField durationField14 = gJChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime16 = instant5.toMutableDateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = instant25.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime31 = instant5.toDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime32 = instant0.toMutableDateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime16", (instant5.compareTo(mutableDateTime16) == 0) == instant5.equals(mutableDateTime16));
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2651");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.hourOfDay();
        long long24 = julianChronology3.add((long) (short) 100, (long) (short) 100, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField26 = julianChronology3.seconds();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        boolean boolean32 = julianChronology30.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology33 = julianChronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology35 = julianChronology30.withZone(dateTimeZone34);
        org.joda.time.DurationField durationField36 = julianChronology30.days();
        org.joda.time.Chronology chronology37 = julianChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology37.getZone();
        org.joda.time.Chronology chronology40 = julianChronology3.withZone(dateTimeZone39);
        org.joda.time.DurationField durationField41 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField41, durationField9, and durationField26", !(durationField41.compareTo(durationField9) == 0) || (Math.signum(durationField41.compareTo(durationField26)) == Math.signum(durationField9.compareTo(durationField26))));
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2652");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DurationField durationField32 = gJChronology30.millis();
        org.joda.time.Chronology chronology33 = gJChronology30.withUTC();
        org.joda.time.DurationField durationField34 = gJChronology30.seconds();
        org.joda.time.DateTime dateTime35 = instant26.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.Chronology chronology36 = instant26.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime35", (instant26.compareTo(dateTime35) == 0) == instant26.equals(dateTime35));
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTime(dateTimeZone22);
        boolean boolean25 = mutableDateTime23.equals((java.lang.Object) (-35999900L));
        int int26 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime23);
        long long28 = dateTimeZone7.nextTransition(9L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and mutableDateTime23", (instant20.compareTo(mutableDateTime23) == 0) == instant20.equals(mutableDateTime23));
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2654");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        org.joda.time.Chronology chronology10 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long24 = dateTimeZone17.previousTransition(5201L);
        org.joda.time.Chronology chronology25 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.year();
        org.joda.time.DateTime dateTime29 = instant1.toDateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forID("+10:00");
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone31);
        long long35 = dateTimeZone31.previousTransition(132477032786400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime29", (instant1.compareTo(dateTime29) == 0) == instant1.equals(dateTime29));
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2655");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.DurationField durationField15 = gJChronology12.years();
        org.joda.time.DurationField durationField16 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.yearOfEra();
        boolean boolean18 = instant6.equals((java.lang.Object) dateTimeField17);
        boolean boolean19 = instant6.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.Chronology chronology23 = gJChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.dayOfWeek();
        org.joda.time.Chronology chronology25 = gJChronology22.withUTC();
        org.joda.time.DurationField durationField26 = gJChronology22.halfdays();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology22.getZone();
        int int29 = dateTimeZone27.getOffset((long) 1);
        org.joda.time.DateTime dateTime30 = instant6.toDateTime(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime31 = instant6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        java.lang.String str42 = instant40.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.Instant instant49 = gJChronology45.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant49.minus(readableDuration50);
        org.joda.time.Instant instant54 = instant51.withDurationAdded((-12219292800000L), 0);
        int int55 = instant40.compareTo((org.joda.time.ReadableInstant) instant51);
        boolean boolean56 = mutableDateTime31.isEqual((org.joda.time.ReadableInstant) instant51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant51 and mutableDateTime9", (instant51.compareTo(mutableDateTime9) == 0) == instant51.equals(mutableDateTime9));
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2656");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        int int21 = instant8.get(dateTimeField20);
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        int int48 = instant33.compareTo((org.joda.time.ReadableInstant) instant44);
        long long49 = instant33.getMillis();
        org.joda.time.Instant instant50 = instant33.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = instant33.getZone();
        int int52 = instant24.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant54 = instant24.plus((-62158787999900L));
        org.joda.time.DateTime dateTime55 = instant24.toDateTime();
        boolean boolean56 = instant8.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Instant instant57 = dateTime55.toInstant();
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime55", (instant22.compareTo(dateTime55) == 0) == instant22.equals(dateTime55));
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2657");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.DateTime dateTime29 = instant28.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime29", (instant8.compareTo(dateTime29) == 0) == instant8.equals(dateTime29));
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2658");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-5970296843698911L));
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.minus(readableDuration9);
        java.lang.String str11 = instant8.toString();
        org.joda.time.Instant instant13 = instant8.minus((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = instant8.toString(dateTimeFormatter14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 1);
        org.joda.time.DateTime dateTime19 = instant8.toDateTime(dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.Instant instant27 = gJChronology23.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant27.minus(readableDuration28);
        org.joda.time.Instant instant32 = instant29.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant41);
        java.lang.String str43 = instant41.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        java.lang.String str48 = gJChronology46.toString();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.monthOfYear();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.dayOfWeek();
        org.joda.time.Instant instant52 = gJChronology46.getGregorianCutover();
        boolean boolean53 = instant41.equals((java.lang.Object) gJChronology46);
        boolean boolean54 = instant32.isAfter((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant56 = instant41.minus((-61543965598418L));
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.dayOfYear();
        org.joda.time.Instant instant63 = gJChronology59.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant63.minus(readableDuration64);
        org.joda.time.Instant instant68 = instant65.withDurationAdded((-12219292800000L), 0);
        boolean boolean70 = instant65.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72);
        org.joda.time.Chronology chronology74 = gJChronology73.withUTC();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology73.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology73.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology73.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology73.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology73.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology73.monthOfYear();
        boolean boolean81 = instant65.equals((java.lang.Object) dateTimeField80);
        org.joda.time.Instant instant83 = instant65.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = null;
        boolean boolean85 = instant83.isSupported(dateTimeFieldType84);
        org.joda.time.Chronology chronology86 = instant83.getChronology();
        org.joda.time.Instant instant88 = instant83.withMillis((-35999968L));
        int int89 = instant56.compareTo((org.joda.time.ReadableInstant) instant83);
        long long90 = instant83.getMillis();
        boolean boolean92 = instant83.isBefore((-60904828799341L));
        int int93 = dateTime19.compareTo((org.joda.time.ReadableInstant) instant83);
        boolean boolean94 = instant1.isBefore((org.joda.time.ReadableInstant) instant83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime19", (instant8.compareTo(dateTime19) == 0) == instant8.equals(dateTime19));
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2659");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone14.getName((-1L), locale17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone14.isLocalDateTimeGap(localDateTime19);
        boolean boolean22 = dateTimeZone14.isStandardOffset(36000000L);
        long long24 = dateTimeZone5.getMillisKeepLocal(dateTimeZone14, (long) (byte) -1);
        long long26 = dateTimeZone5.convertUTCToLocal((-107999989L));
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant28.withDurationAdded(readableDuration29, 0);
        java.util.Date date32 = instant28.toDate();
        long long33 = instant28.getMillis();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) instant42);
        java.lang.String str44 = instant42.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.Instant instant51 = gJChronology47.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.minus(readableDuration52);
        org.joda.time.Instant instant56 = instant53.withDurationAdded((-12219292800000L), 0);
        int int57 = instant42.compareTo((org.joda.time.ReadableInstant) instant53);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.Chronology chronology61 = gJChronology60.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.dayOfWeek();
        org.joda.time.DurationField durationField63 = gJChronology60.years();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology60.weekyear();
        boolean boolean65 = instant42.equals((java.lang.Object) dateTimeField64);
        org.joda.time.Instant instant67 = instant42.withMillis(32L);
        boolean boolean68 = instant28.isEqual((org.joda.time.ReadableInstant) instant67);
        boolean boolean70 = instant67.isAfter((long) (byte) 1);
        org.joda.time.DateTime dateTime71 = instant67.toDateTimeISO();
        boolean boolean73 = dateTime71.isEqual((-35999890L));
        org.joda.time.Chronology chronology74 = dateTime71.getChronology();
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology75.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant67 and dateTime71", (instant67.compareTo(dateTime71) == 0) == instant67.equals(dateTime71));
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2660");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = julianChronology3.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str12 = dateTimeZone11.getID();
        boolean boolean13 = dateTimeZone11.isFixed();
        long long15 = dateTimeZone11.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        java.lang.String str17 = dateTimeZone11.getID();
        int int19 = dateTimeZone11.getOffsetFromLocal((long) 1);
        java.lang.String str21 = dateTimeZone11.getName((long) 8);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        boolean boolean24 = instant23.isAfterNow();
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = instant23.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = instant23.isSupported(dateTimeFieldType28);
        java.lang.String str30 = instant23.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.getID();
        org.joda.time.Chronology chronology38 = gJChronology33.withZone(dateTimeZone36);
        long long41 = dateTimeZone36.convertLocalToUTC((long) (short) 10, false);
        long long44 = dateTimeZone36.convertLocalToUTC((-12219292800000L), true);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant49 = instant46.withDurationAdded(readableDuration47, 0);
        boolean boolean51 = instant49.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant54 = instant49.withDurationAdded(readableDuration52, 4);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.chrono.JulianChronology julianChronology58 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56);
        boolean boolean60 = julianChronology58.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology58.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology58.secondOfDay();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology58.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology58.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime65 = instant49.toMutableDateTime((org.joda.time.Chronology) julianChronology58);
        int int66 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) mutableDateTime65);
        int int67 = instant23.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateTimeZone dateTimeZone68 = mutableDateTime65.getZone();
        int int69 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.Chronology chronology70 = julianChronology3.withZone(dateTimeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant46 and mutableDateTime65", (instant46.compareTo(mutableDateTime65) == 0) == instant46.equals(mutableDateTime65));
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2661");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.Instant instant5 = instant2.withDurationAdded((-35999900L), 72009726);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime1", (instant2.compareTo(mutableDateTime1) == 0) == instant2.equals(mutableDateTime1));
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2662");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.seconds();
        long long13 = julianChronology3.add(36000000L, (long) 1, (-1));
        org.joda.time.DurationField durationField14 = julianChronology3.days();
        org.joda.time.DurationField durationField15 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.yearOfCentury();
        org.joda.time.DurationField durationField17 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField9, and durationField14", !(durationField17.compareTo(durationField9) == 0) || (Math.signum(durationField17.compareTo(durationField14)) == Math.signum(durationField9.compareTo(durationField14))));
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2663");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.Instant instant4 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.dayOfYear();
        org.joda.time.Instant instant11 = gJChronology7.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.minus(readableDuration12);
        org.joda.time.Instant instant16 = instant13.withDurationAdded((-12219292800000L), 0);
        boolean boolean18 = instant13.isEqual(35L);
        boolean boolean19 = instant4.isEqual((org.joda.time.ReadableInstant) instant13);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = instant13.toDateTime(dateTimeZone20);
        boolean boolean22 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime25 = dateTime2.toDateTime(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime21", (instant11.compareTo(dateTime21) == 0) == instant11.equals(dateTime21));
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2664");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        int int35 = instant20.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant20.minus(readableDuration36);
        int int38 = instant8.compareTo((org.joda.time.ReadableInstant) instant20);
        java.lang.String str39 = instant20.toString();
        boolean boolean41 = instant20.isEqual((-1L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.Chronology chronology45 = gJChronology44.withUTC();
        org.joda.time.DateTime dateTime46 = instant20.toDateTime(chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.dayOfYear();
        org.joda.time.Instant instant53 = gJChronology49.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime56 = instant53.toMutableDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = instant53.toDateTime();
        java.util.Date date58 = instant53.toDate();
        boolean boolean59 = instant53.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime60 = instant53.toMutableDateTimeISO();
        org.joda.time.Instant instant63 = instant53.withDurationAdded((long) 100, 1582);
        org.joda.time.Instant instant65 = instant53.plus((long) 24);
        boolean boolean66 = dateTime46.isEqual((org.joda.time.ReadableInstant) instant53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant53 and mutableDateTime56", (instant53.compareTo(mutableDateTime56) == 0) == instant53.equals(mutableDateTime56));
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2665");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField13 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = gJChronology2.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField17, and durationField13", !(durationField13.compareTo(durationField17) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField17.compareTo(durationField13))));
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2666");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DurationField durationField11 = gJChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.Instant instant14 = gJChronology9.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField21 = julianChronology18.months();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone23.getName((-1L), locale26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone23.isLocalDateTimeGap(localDateTime28);
        boolean boolean31 = dateTimeZone23.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology32 = julianChronology18.withZone(dateTimeZone23);
        java.lang.String str34 = dateTimeZone23.getNameKey((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime35 = instant14.toMutableDateTime(dateTimeZone23);
        long long37 = dateTimeZone23.nextTransition((-59082465599891L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime35", (instant8.compareTo(mutableDateTime35) == 0) == instant8.equals(mutableDateTime35));
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2667");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField5 = gJChronology2.months();
        org.joda.time.DurationField durationField6 = gJChronology2.weeks();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        long long8 = instant7.getMillis();
        java.lang.String str9 = instant7.toString();
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.minuteOfHour();
        org.joda.time.DurationField durationField18 = gJChronology13.weeks();
        org.joda.time.DurationField durationField19 = gJChronology13.days();
        boolean boolean20 = instant7.equals((java.lang.Object) gJChronology13);
        org.joda.time.DurationField durationField21 = gJChronology13.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime10", (instant7.compareTo(mutableDateTime10) == 0) == instant7.equals(mutableDateTime10));
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2668");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-1L));
        java.lang.String str2 = instant1.toString();
        boolean boolean4 = instant1.isAfter((-6211221911999790L));
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfWeek();
        org.joda.time.Chronology chronology10 = gJChronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology13 = chronology10.withZone(dateTimeZone12);
        java.lang.String str14 = dateTimeZone12.getID();
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        java.lang.String str17 = dateTimeZone12.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime27 = instant24.toMutableDateTime(dateTimeZone26);
        boolean boolean29 = mutableDateTime27.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        java.lang.String str33 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.dayOfYear();
        java.lang.String str35 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.monthOfYear();
        int int38 = mutableDateTime27.get(dateTimeField37);
        int int39 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Instant instant40 = mutableDateTime27.toInstant();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.Chronology chronology44 = gJChronology43.withUTC();
        org.joda.time.DurationField durationField45 = gJChronology43.millis();
        long long49 = gJChronology43.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField50 = gJChronology43.millis();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology43.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime27.toMutableDateTime((org.joda.time.Chronology) gJChronology43);
        boolean boolean55 = instant1.isEqual((org.joda.time.ReadableInstant) mutableDateTime54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime27", (instant24.compareTo(mutableDateTime27) == 0) == instant24.equals(mutableDateTime27));
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2669");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-61851808789984L), 5);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.clockhourOfDay();
        org.joda.time.Chronology chronology32 = gJChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 1);
        org.joda.time.Chronology chronology36 = gJChronology27.withZone(dateTimeZone35);
        long long39 = dateTimeZone35.adjustOffset(1836000731L, true);
        org.joda.time.MutableDateTime mutableDateTime40 = instant22.toMutableDateTime(dateTimeZone35);
        long long43 = dateTimeZone35.adjustOffset((long) 36000, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and mutableDateTime40", (instant22.compareTo(mutableDateTime40) == 0) == instant22.equals(mutableDateTime40));
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2670");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant14 = instant12.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.joda.time.Instant instant26 = instant23.withDurationAdded((-12219292800000L), 0);
        boolean boolean28 = instant23.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.monthOfYear();
        boolean boolean39 = instant23.equals((java.lang.Object) dateTimeField38);
        org.joda.time.Instant instant41 = instant23.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = instant41.isSupported(dateTimeFieldType42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.Instant instant50 = gJChronology46.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant50.minus(readableDuration51);
        org.joda.time.Instant instant55 = instant52.withDurationAdded((-12219292800000L), 0);
        boolean boolean57 = instant52.isEqual(35L);
        org.joda.time.Instant instant58 = instant52.toInstant();
        boolean boolean60 = instant58.isBefore((long) ' ');
        boolean boolean61 = instant41.isAfter((org.joda.time.ReadableInstant) instant58);
        int int62 = instant14.compareTo((org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64);
        org.joda.time.Chronology chronology66 = gJChronology65.withUTC();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology65.dayOfWeek();
        org.joda.time.DurationField durationField68 = gJChronology65.years();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology65.weekyear();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology65.weekyear();
        org.joda.time.DateTimeZone dateTimeZone71 = gJChronology65.getZone();
        long long75 = gJChronology65.add(1L, (long) (byte) -1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField76 = gJChronology65.secondOfDay();
        org.joda.time.DateTime dateTime77 = instant58.toDateTime((org.joda.time.Chronology) gJChronology65);
        org.joda.time.DurationField durationField78 = gJChronology65.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime77", (instant12.compareTo(dateTime77) == 0) == instant12.equals(dateTime77));
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2671");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        org.joda.time.DurationField durationField12 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology3.getZone();
        org.joda.time.DurationField durationField15 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.minuteOfHour();
        org.joda.time.DurationField durationField23 = gJChronology18.weeks();
        org.joda.time.DurationField durationField24 = gJChronology18.days();
        org.joda.time.Chronology chronology25 = gJChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        boolean boolean36 = instant35.isAfterNow();
        boolean boolean37 = instant35.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = instant35.getZone();
        int int40 = dateTimeZone38.getStandardOffset(132477032786400000L);
        long long44 = dateTimeZone38.convertLocalToUTC(36000000L, true, (-61543965598418L));
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone38.getName((-35999976L), locale46);
        org.joda.time.Chronology chronology48 = gJChronology18.withZone(dateTimeZone38);
        org.joda.time.Chronology chronology49 = julianChronology3.withZone(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField24", (durationField9.compareTo(durationField24) == 0) == durationField9.equals(durationField24));
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2672");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-60514215252321L));
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField6 = julianChronology5.centuries();
        org.joda.time.DurationField durationField7 = julianChronology5.weeks();
        org.joda.time.DurationField durationField8 = julianChronology5.days();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = julianChronology5.add(readablePeriod9, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone14.getShortName((-35999890L), locale16);
        org.joda.time.Chronology chronology18 = julianChronology5.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        boolean boolean24 = julianChronology22.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology25 = julianChronology22.withUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology27 = julianChronology22.withZone(dateTimeZone26);
        org.joda.time.DurationField durationField28 = julianChronology22.days();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.getID();
        boolean boolean33 = dateTimeZone31.isFixed();
        long long35 = dateTimeZone31.previousTransition(100L);
        java.util.TimeZone timeZone36 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.Chronology chronology38 = julianChronology22.withZone(dateTimeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        boolean boolean41 = julianChronology5.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime dateTime42 = instant1.toDateTime(dateTimeZone40);
        long long44 = dateTimeZone40.nextTransition((-35992119L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime42", (instant1.compareTo(dateTime42) == 0) == instant1.equals(dateTime42));
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2673");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.dayOfYear();
        org.joda.time.Instant instant11 = gJChronology7.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.minus(readableDuration12);
        org.joda.time.Instant instant16 = instant13.withDurationAdded((-12219292800000L), 0);
        boolean boolean18 = instant13.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.Chronology chronology22 = gJChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology21.monthOfYear();
        boolean boolean29 = instant13.equals((java.lang.Object) dateTimeField28);
        org.joda.time.Instant instant31 = instant13.withMillis(1L);
        boolean boolean32 = instant4.isBefore((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Instant instant34 = instant31.plus(3600000L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.Instant instant37 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.plus(readableDuration38);
        long long40 = instant37.getMillis();
        org.joda.time.Chronology chronology41 = instant37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        boolean boolean45 = dateTimeZone43.isFixed();
        long long48 = dateTimeZone43.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology49.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = julianChronology49.getZone();
        org.joda.time.DateTime dateTime52 = instant37.toDateTime(dateTimeZone51);
        boolean boolean53 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.dayOfYear();
        org.joda.time.Instant instant60 = gJChronology56.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant60.minus(readableDuration61);
        org.joda.time.Instant instant65 = instant62.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant62.plus(readableDuration66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        boolean boolean69 = instant62.isEqual(readableInstant68);
        org.joda.time.Chronology chronology70 = instant62.getChronology();
        org.joda.time.Chronology chronology71 = instant62.getChronology();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant73 = instant62.minus(readableDuration72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = instant62.isSupported(dateTimeFieldType74);
        boolean boolean76 = instant62.isEqualNow();
        boolean boolean77 = dateTime35.isEqual((org.joda.time.ReadableInstant) instant62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime52", (instant31.compareTo(dateTime52) == 0) == instant31.equals(dateTime52));
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2674");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant12);
        java.lang.String str14 = instant12.toString();
        boolean boolean15 = instant12.isEqualNow();
        int int16 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.MutableDateTime mutableDateTime17 = instant12.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Chronology chronology25 = gJChronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology20.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = instant12.toMutableDateTime(dateTimeZone26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant29.withDurationAdded(readableDuration30, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = instant29.toString(dateTimeFormatter33);
        org.joda.time.Instant instant37 = instant29.withDurationAdded(0L, 1582);
        long long38 = instant37.getMillis();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant37.withDurationAdded(readableDuration39, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = instant37.isSupported(dateTimeFieldType42);
        int int44 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime17", (instant12.compareTo(mutableDateTime17) == 0) == instant12.equals(mutableDateTime17));
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2675");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        long long33 = instant17.getMillis();
        long long34 = instant17.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant17.withDurationAdded(readableDuration35, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant17.plus(readableDuration38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant17.minus(readableDuration40);
        org.joda.time.Instant instant43 = instant41.plus((-36000001L));
        boolean boolean44 = instant7.isBefore((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(19, (int) (short) 0);
        org.joda.time.DateTime dateTime48 = instant7.toDateTime(dateTimeZone47);
        org.joda.time.Instant instant50 = instant7.plus(1644572762450L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime48", (instant7.compareTo(dateTime48) == 0) == instant7.equals(dateTime48));
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2676");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone7.getName((-1L), locale10);
        long long13 = dateTimeZone7.previousTransition((long) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.DurationField durationField19 = julianChronology17.millis();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology17.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = julianChronology17.add(readablePeriod21, (long) 36000000, 4);
        boolean boolean25 = dateTimeZone7.equals((java.lang.Object) 36000000);
        long long27 = dateTimeZone7.nextTransition((-36000001L));
        java.lang.String str29 = dateTimeZone7.getShortName(0L);
        org.joda.time.MutableDateTime mutableDateTime30 = instant3.toMutableDateTime(dateTimeZone7);
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.plus(readableDuration32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) instant42);
        java.lang.String str44 = instant42.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.Instant instant51 = gJChronology47.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.minus(readableDuration52);
        org.joda.time.Instant instant56 = instant53.withDurationAdded((-12219292800000L), 0);
        int int57 = instant42.compareTo((org.joda.time.ReadableInstant) instant53);
        long long58 = instant42.getMillis();
        org.joda.time.Instant instant59 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone60 = instant42.getZone();
        int int61 = instant33.compareTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant63 = instant33.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant63.plus(readableDuration64);
        long long66 = instant63.getMillis();
        org.joda.time.Instant instant68 = instant63.plus((-71999990L));
        long long69 = instant68.getMillis();
        boolean boolean70 = mutableDateTime30.isBefore((org.joda.time.ReadableInstant) instant68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = instant68.toDateTime(chronology71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime30", (instant1.compareTo(mutableDateTime30) == 0) == instant1.equals(mutableDateTime30));
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2677");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTime dateTime27 = instant8.toDateTimeISO();
        org.joda.time.Instant instant28 = instant8.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime27", (instant28.compareTo(dateTime27) == 0) == instant28.equals(dateTime27));
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.Instant instant14 = gJChronology10.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = instant14.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = instant14.toDateTime();
        java.util.Date date19 = instant14.toDate();
        boolean boolean20 = gJChronology2.equals((java.lang.Object) instant14);
        int int21 = gJChronology2.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime17", (instant14.compareTo(mutableDateTime17) == 0) == instant14.equals(mutableDateTime17));
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2679");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) ' ', locale5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.Instant instant13 = gJChronology9.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant13.minus(readableDuration14);
        org.joda.time.Instant instant18 = instant15.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant15.plus(readableDuration19);
        org.joda.time.Instant instant21 = instant15.toInstant();
        org.joda.time.Instant instant23 = new org.joda.time.Instant(0L);
        int int24 = instant21.compareTo((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((java.lang.Object) instant23);
        org.joda.time.MutableDateTime mutableDateTime26 = instant25.toMutableDateTime();
        int int27 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime26", (instant23.compareTo(mutableDateTime26) == 0) == instant23.equals(mutableDateTime26));
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2680");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        long long33 = instant17.getMillis();
        long long34 = instant17.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant17.withDurationAdded(readableDuration35, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant17.plus(readableDuration38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant17.minus(readableDuration40);
        org.joda.time.Instant instant43 = instant41.plus((-36000001L));
        boolean boolean44 = instant7.isBefore((org.joda.time.ReadableInstant) instant41);
        org.joda.time.MutableDateTime mutableDateTime45 = instant41.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = instant41.toDateTime(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime45", (instant1.compareTo(mutableDateTime45) == 0) == instant1.equals(mutableDateTime45));
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2681");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant10.plus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        java.lang.String str23 = instant21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        int int36 = instant21.compareTo((org.joda.time.ReadableInstant) instant32);
        long long37 = instant21.getMillis();
        org.joda.time.Instant instant38 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone39 = instant21.getZone();
        int int40 = instant12.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant21.withDurationAdded(readableDuration41, 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = instant21.toDateTime(chronology44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str47 = dateTimeZone5.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime45", (instant21.compareTo(dateTime45) == 0) == instant21.equals(dateTime45));
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2682");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime20 = instant4.toMutableDateTime((org.joda.time.Chronology) julianChronology13);
        long long21 = mutableDateTime20.getMillis();
        boolean boolean23 = mutableDateTime20.isAfter(0L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = julianChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology27.minuteOfHour();
        org.joda.time.DurationField durationField33 = julianChronology27.months();
        org.joda.time.Chronology chronology34 = julianChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology27.year();
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime20.toMutableDateTime((org.joda.time.Chronology) julianChronology27);
        int int40 = julianChronology27.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime20", (instant1.compareTo(mutableDateTime20) == 0) == instant1.equals(mutableDateTime20));
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2683");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gJChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField3 = gJChronology0.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField3, and durationField1", !(durationField1.compareTo(durationField3) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField3.compareTo(durationField1))));
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2684");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        int int11 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        long long15 = dateTimeZone12.convertLocalToUTC((-12242483999903L), false);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant19 = instant17.plus(110L);
        boolean boolean21 = instant19.isAfter((long) 36000000);
        boolean boolean22 = dateTimeZone12.equals((java.lang.Object) instant19);
        org.joda.time.Chronology chronology23 = instant19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology27.hourOfHalfday();
        java.lang.String str32 = julianChronology27.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        boolean boolean38 = julianChronology36.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology39 = julianChronology36.withUTC();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology41 = julianChronology36.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField42 = julianChronology36.seconds();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology36.year();
        org.joda.time.DateTimeZone dateTimeZone45 = julianChronology36.getZone();
        org.joda.time.DateTimeZone dateTimeZone46 = julianChronology36.getZone();
        org.joda.time.Chronology chronology47 = julianChronology27.withZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone49);
        boolean boolean53 = julianChronology51.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology54 = julianChronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology51.era();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology51.minuteOfHour();
        org.joda.time.DurationField durationField57 = julianChronology51.weeks();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology51.hourOfHalfday();
        boolean boolean59 = dateTimeZone46.equals((java.lang.Object) julianChronology51);
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone46.isLocalDateTimeGap(localDateTime60);
        int int63 = dateTimeZone46.getStandardOffset(151200024L);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, readableInstant65);
        org.joda.time.DateTimeZone dateTimeZone67 = gJChronology66.getZone();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology66.dayOfYear();
        org.joda.time.Instant instant70 = gJChronology66.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Instant instant72 = instant70.minus(readableDuration71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant70.plus(readableDuration73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, (org.joda.time.ReadableInstant) instant74);
        org.joda.time.Instant instant77 = new org.joda.time.Instant((long) (short) 10);
        boolean boolean79 = instant77.isBefore(72320035L);
        org.joda.time.DateTimeZone dateTimeZone80 = instant77.getZone();
        org.joda.time.DateTime dateTime81 = instant77.toDateTimeISO();
        boolean boolean82 = instant74.isBefore((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = instant19.isAfter((org.joda.time.ReadableInstant) instant74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant77 and dateTime81", (instant77.compareTo(dateTime81) == 0) == instant77.equals(dateTime81));
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2685");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        java.lang.String str14 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfWeek();
        org.joda.time.Instant instant18 = gJChronology12.getGregorianCutover();
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField24 = julianChronology23.centuries();
        java.lang.String str25 = julianChronology23.toString();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology23.yearOfEra();
        org.joda.time.DurationField durationField27 = julianChronology23.months();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology30.minuteOfDay();
        boolean boolean32 = julianChronology23.equals((java.lang.Object) dateTimeField31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology23.secondOfMinute();
        int int34 = julianChronology23.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        boolean boolean40 = julianChronology38.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField41 = julianChronology38.months();
        boolean boolean42 = julianChronology23.equals((java.lang.Object) julianChronology38);
        boolean boolean43 = instant18.equals((java.lang.Object) julianChronology23);
        org.joda.time.Instant instant45 = instant18.plus((-35999890L));
        org.joda.time.DateTimeZone dateTimeZone46 = instant18.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.Chronology chronology50 = gJChronology49.withUTC();
        java.lang.String str51 = gJChronology49.toString();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.monthOfYear();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology49.millisOfDay();
        org.joda.time.Chronology chronology54 = gJChronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology49.clockhourOfHalfday();
        org.joda.time.Chronology chronology56 = gJChronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.weekyear();
        boolean boolean58 = instant18.equals((java.lang.Object) chronology56);
        org.joda.time.DateTime dateTime59 = instant18.toDateTime();
        int int60 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) instant18);
        boolean boolean62 = dateTimeZone9.isStandardOffset((-5970296843698911L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime59", (instant18.compareTo(dateTime59) == 0) == instant18.equals(dateTime59));
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2686");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.joda.time.DurationField durationField12 = gJChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField12, and durationField8", !(durationField8.compareTo(durationField12) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField12.compareTo(durationField8))));
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2687");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant17.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = instant19.isSupported(dateTimeFieldType21);
        int int23 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant19);
        java.lang.String str24 = instant19.toString();
        org.joda.time.Instant instant26 = org.joda.time.Instant.parse("1970-01-01T09:59:59.999+10:00");
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.Chronology chronology30 = gJChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.millisOfDay();
        java.lang.String str33 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.year();
        org.joda.time.DurationField durationField35 = gJChronology29.centuries();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology29.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology29.getZone();
        boolean boolean38 = instant26.equals((java.lang.Object) dateTimeZone37);
        boolean boolean39 = instant19.isBefore((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((-59011667999903L));
        org.joda.time.Instant instant42 = instant41.toInstant();
        java.lang.String str43 = instant42.toString();
        boolean boolean44 = instant19.isAfter((org.joda.time.ReadableInstant) instant42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant26", (dateTime20.compareTo(instant26) == 0) == dateTime20.equals(instant26));
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2688");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Chronology chronology25 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = julianChronology16.seconds();
        boolean boolean27 = instant13.equals((java.lang.Object) durationField26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant13.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology32.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        org.joda.time.Chronology chronology41 = julianChronology32.withZone(dateTimeZone40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone40.getShortName((long) (short) 100, locale43);
        long long48 = dateTimeZone40.convertLocalToUTC(36000001L, false, (-32399903L));
        org.joda.time.DateTime dateTime49 = instant29.toDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.dayOfYear();
        org.joda.time.Instant instant56 = gJChronology52.getGregorianCutover();
        java.util.Date date57 = instant56.toDate();
        org.joda.time.Instant instant59 = instant56.withMillis((long) (short) -1);
        boolean boolean60 = instant29.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime49", (instant9.compareTo(dateTime49) == 0) == instant9.equals(dateTime49));
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2689");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        org.joda.time.Chronology chronology10 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long24 = dateTimeZone17.previousTransition(5201L);
        org.joda.time.Chronology chronology25 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.year();
        org.joda.time.DateTime dateTime29 = instant1.toDateTime((org.joda.time.Chronology) gJChronology26);
        java.lang.Class<?> wildcardClass30 = gJChronology26.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime29", (instant1.compareTo(dateTime29) == 0) == instant1.equals(dateTime29));
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = instant6.toMutableDateTime(dateTimeZone31);
        long long33 = mutableDateTime32.getMillis();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((java.lang.Object) mutableDateTime32);
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime32", (instant6.compareTo(mutableDateTime32) == 0) == instant6.equals(mutableDateTime32));
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2691");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant24.plus(readableDuration28);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTimeISO();
        boolean boolean31 = instant15.isAfter((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant15.minus(readableDuration32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and mutableDateTime30", (instant22.compareTo(mutableDateTime30) == 0) == instant22.equals(mutableDateTime30));
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2692");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = instant6.toMutableDateTimeISO();
        org.joda.time.Instant instant31 = instant6.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = instant31.isSupported(dateTimeFieldType32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and mutableDateTime30", (instant31.compareTo(mutableDateTime30) == 0) == instant31.equals(mutableDateTime30));
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2693");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-59011667999903L));
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, (int) (short) 0);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        java.lang.String str6 = dateTime5.toString();
        boolean boolean8 = dateTime5.isAfter(36000660L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = instant15.toMutableDateTime(dateTimeZone17);
        boolean boolean20 = mutableDateTime18.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime18.getZone();
        boolean boolean22 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long27 = dateTimeZone25.previousTransition(0L);
        long long29 = dateTimeZone25.previousTransition(110L);
        boolean boolean30 = mutableDateTime18.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant32.withDurationAdded(readableDuration33, 0);
        boolean boolean37 = instant35.isEqual((long) 1);
        org.joda.time.Instant instant39 = instant35.withMillis(25200L);
        boolean boolean40 = mutableDateTime18.isBefore((org.joda.time.ReadableInstant) instant35);
        boolean boolean41 = dateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime18);
        java.lang.String str42 = mutableDateTime18.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime5", (instant1.compareTo(dateTime5) == 0) == instant1.equals(dateTime5));
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2694");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Chronology chronology11 = julianChronology2.withZone(dateTimeZone10);
        org.joda.time.DurationField durationField12 = julianChronology2.millis();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology2.year();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField19 = julianChronology18.centuries();
        org.joda.time.DurationField durationField20 = julianChronology18.weeks();
        org.joda.time.DurationField durationField21 = julianChronology18.years();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology18.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology18.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.Chronology chronology26 = julianChronology2.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField12, and durationField19", !(durationField27.compareTo(durationField12) == 0) || (Math.signum(durationField27.compareTo(durationField19)) == Math.signum(durationField12.compareTo(durationField19))));
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2695");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.Instant instant14 = instant10.withDurationAdded(36001582L, (int) (short) -1);
        org.joda.time.Instant instant16 = instant10.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        boolean boolean22 = julianChronology20.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology23 = julianChronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology25 = julianChronology20.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = julianChronology20.days();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology20.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str30 = dateTimeZone29.getID();
        boolean boolean31 = dateTimeZone29.isFixed();
        long long33 = dateTimeZone29.previousTransition(100L);
        java.util.TimeZone timeZone34 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.Chronology chronology36 = julianChronology20.withZone(dateTimeZone35);
        java.util.TimeZone timeZone37 = dateTimeZone35.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime39 = instant10.toMutableDateTime(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime40 = instant10.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime39", (instant10.compareTo(mutableDateTime39) == 0) == instant10.equals(mutableDateTime39));
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2696");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeZone dateTimeZone42 = instant1.getZone();
        org.joda.time.DateTime dateTime43 = instant1.toDateTimeISO();
        java.lang.String str44 = instant1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime43", (instant1.compareTo(dateTime43) == 0) == instant1.equals(dateTime43));
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2697");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        org.joda.time.Instant instant12 = instant6.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.minuteOfHour();
        org.joda.time.DurationField durationField18 = julianChronology16.months();
        org.joda.time.DateTime dateTime19 = instant6.toDateTime((org.joda.time.Chronology) julianChronology16);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology24.getZone();
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, (org.joda.time.ReadableInstant) instant30);
        java.lang.String str32 = instant30.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        java.lang.String str37 = gJChronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology35.dayOfWeek();
        org.joda.time.Instant instant41 = gJChronology35.getGregorianCutover();
        boolean boolean42 = instant30.equals((java.lang.Object) gJChronology35);
        boolean boolean43 = instant30.isBeforeNow();
        org.joda.time.Instant instant46 = instant30.withDurationAdded(3129100L, 1970);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant30.plus(readableDuration47);
        org.joda.time.Chronology chronology49 = instant30.getChronology();
        boolean boolean50 = instant21.isBefore((org.joda.time.ReadableInstant) instant30);
        boolean boolean51 = dateTime19.isEqual((org.joda.time.ReadableInstant) instant21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2698");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        int int17 = instant1.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Chronology chronology18 = instant11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField23 = julianChronology22.centuries();
        java.lang.String str24 = julianChronology22.toString();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.yearOfEra();
        org.joda.time.DurationField durationField26 = julianChronology22.months();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology22.clockhourOfHalfday();
        boolean boolean28 = instant11.equals((java.lang.Object) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Chronology chronology36 = gJChronology31.withZone(dateTimeZone34);
        java.lang.String str38 = dateTimeZone34.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology39.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.Chronology chronology49 = gJChronology44.withZone(dateTimeZone47);
        java.lang.String str51 = dateTimeZone47.getName((long) (byte) 10);
        long long54 = dateTimeZone47.convertLocalToUTC((-35999900L), false);
        int int56 = dateTimeZone47.getOffsetFromLocal((long) 278);
        boolean boolean58 = dateTimeZone47.isStandardOffset((long) 4);
        org.joda.time.Chronology chronology59 = julianChronology39.withZone(dateTimeZone47);
        long long63 = dateTimeZone47.convertLocalToUTC((long) (short) 1, false, 151200000L);
        long long66 = dateTimeZone47.adjustOffset(0L, false);
        java.util.TimeZone timeZone67 = dateTimeZone47.toTimeZone();
        boolean boolean68 = instant11.equals((java.lang.Object) dateTimeZone47);
        long long69 = instant11.getMillis();
        org.joda.time.MutableDateTime mutableDateTime70 = instant11.toMutableDateTime();
        boolean boolean72 = instant11.isAfter((-48717335529L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime70", (instant11.compareTo(mutableDateTime70) == 0) == instant11.equals(mutableDateTime70));
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2699");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        boolean boolean21 = instant6.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.Chronology chronology25 = gJChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.dayOfWeek();
        org.joda.time.Chronology chronology27 = gJChronology24.withUTC();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology30 = chronology27.withZone(dateTimeZone29);
        java.lang.String str31 = dateTimeZone29.getID();
        long long35 = dateTimeZone29.convertLocalToUTC(151200000L, true, 11L);
        java.lang.String str36 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime37 = instant6.toDateTime(dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant6.minus(readableDuration38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and dateTime37", (mutableDateTime9.compareTo(dateTime37) == 0) == mutableDateTime9.equals(dateTime37));
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2700");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        boolean boolean15 = instant9.isAfter((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        long long22 = dateTimeZone17.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        boolean boolean24 = instant9.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        int int48 = instant33.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant50 = instant44.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = instant50.toString(dateTimeFormatter51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant50.plus(readableDuration53);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Instant instant57 = dateTime55.toInstant();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.dayOfYear();
        org.joda.time.Instant instant67 = gJChronology63.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant67.minus(readableDuration68);
        org.joda.time.Instant instant72 = instant69.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant69.plus(readableDuration73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, (org.joda.time.ReadableInstant) instant74);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology75.millisOfSecond();
        org.joda.time.DurationField durationField77 = gJChronology75.days();
        org.joda.time.DateTime dateTime78 = dateTime55.toDateTime((org.joda.time.Chronology) gJChronology75);
        org.joda.time.Chronology chronology79 = dateTime78.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and dateTime55", (instant42.compareTo(dateTime55) == 0) == instant42.equals(dateTime55));
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2701");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant14 = instant12.withMillis(52L);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        boolean boolean16 = instant15.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime17 = instant15.toMutableDateTime();
        org.joda.time.DateTime dateTime18 = instant15.toDateTime();
        int int19 = instant12.compareTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant15.minus(readableDuration20);
        org.joda.time.Instant instant23 = instant21.plus((-107999901L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime17", (instant21.compareTo(mutableDateTime17) == 0) == instant21.equals(mutableDateTime17));
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2702");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        long long2 = instant1.getMillis();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.minus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = instant4.getZone();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant4.plus(readableDuration6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) (-1));
        java.lang.String str11 = dateTimeZone8.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime21", (instant18.compareTo(mutableDateTime21) == 0) == instant18.equals(mutableDateTime21));
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2703");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        java.lang.String str36 = instant33.toString();
        org.joda.time.Instant instant38 = instant33.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone39 = instant33.getZone();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant33.withDurationAdded(readableDuration40, (int) '4');
        boolean boolean43 = instant23.isBefore((org.joda.time.ReadableInstant) instant33);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45);
        boolean boolean49 = julianChronology47.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology50 = julianChronology47.withUTC();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology52 = julianChronology47.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField53 = julianChronology47.days();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology47.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str57 = dateTimeZone56.getID();
        boolean boolean58 = dateTimeZone56.isFixed();
        long long60 = dateTimeZone56.previousTransition(100L);
        java.util.TimeZone timeZone61 = dateTimeZone56.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.Chronology chronology63 = julianChronology47.withZone(dateTimeZone62);
        java.util.TimeZone timeZone64 = dateTimeZone62.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology65.getZone();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology69.getZone();
        org.joda.time.Instant instant75 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, (org.joda.time.ReadableInstant) instant75);
        long long78 = dateTimeZone73.nextTransition((long) 0);
        long long80 = dateTimeZone66.getMillisKeepLocal(dateTimeZone73, (long) (byte) 100);
        java.util.Locale locale82 = null;
        java.lang.String str83 = dateTimeZone66.getName((-35999900L), locale82);
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        java.lang.String str86 = dateTimeZone66.getNameKey((-107999990L));
        org.joda.time.MutableDateTime mutableDateTime87 = instant23.toMutableDateTime(dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.Instant instant89 = instant23.minus(readableDuration88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime87", (instant19.compareTo(mutableDateTime87) == 0) == instant19.equals(mutableDateTime87));
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2704");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        int int19 = dateTimeZone8.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = julianChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.clockhourOfDay();
        long long27 = julianChronology20.getDateTimeMillis((int) (short) 100, 1, (int) (short) 1, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        boolean boolean33 = julianChronology31.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField34 = julianChronology31.months();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone36.getName((-1L), locale39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone36.isLocalDateTimeGap(localDateTime41);
        boolean boolean44 = dateTimeZone36.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology45 = julianChronology31.withZone(dateTimeZone36);
        int int47 = dateTimeZone36.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        boolean boolean50 = dateTimeZone36.isStandardOffset(52L);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        long long53 = dateTimeZone36.getMillisKeepLocal(dateTimeZone51, (-35999990L));
        org.joda.time.Chronology chronology54 = julianChronology20.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField55 = julianChronology20.eras();
        org.joda.time.DurationField durationField56 = julianChronology20.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField56 and durationField55", Math.signum(durationField56.compareTo(durationField55)) == -Math.signum(durationField55.compareTo(durationField56)));
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2705");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        long long9 = instant7.getMillis();
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        boolean boolean12 = instant11.isAfterNow();
        org.joda.time.Instant instant13 = instant11.toInstant();
        int int14 = instant7.compareTo((org.joda.time.ReadableInstant) instant13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime10", (instant7.compareTo(mutableDateTime10) == 0) == instant7.equals(mutableDateTime10));
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2706");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField12 = julianChronology11.centuries();
        java.lang.String str13 = julianChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.yearOfEra();
        org.joda.time.DurationField durationField15 = julianChronology11.months();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology18.minuteOfDay();
        boolean boolean20 = julianChronology11.equals((java.lang.Object) dateTimeField19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology11.secondOfMinute();
        int int22 = julianChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        boolean boolean28 = julianChronology26.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField29 = julianChronology26.months();
        boolean boolean30 = julianChronology11.equals((java.lang.Object) julianChronology26);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology11.dayOfYear();
        org.joda.time.DateTime dateTime32 = instant6.toDateTime((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone33 = instant6.getZone();
        long long35 = dateTimeZone33.nextTransition((-12237976800000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime32", (instant6.compareTo(dateTime32) == 0) == instant6.equals(dateTime32));
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2707");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        java.lang.String str12 = dateTimeZone7.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        boolean boolean24 = mutableDateTime22.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.dayOfYear();
        java.lang.String str30 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.monthOfYear();
        int int33 = mutableDateTime22.get(dateTimeField32);
        int int34 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Instant instant35 = mutableDateTime22.toInstant();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str38 = dateTimeZone37.getID();
        boolean boolean39 = dateTimeZone37.isFixed();
        long long41 = dateTimeZone37.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37);
        java.lang.String str43 = dateTimeZone37.getID();
        int int45 = dateTimeZone37.getOffsetFromLocal((long) 1);
        long long47 = dateTimeZone37.convertUTCToLocal(151199999L);
        boolean boolean48 = dateTimeZone37.isFixed();
        long long52 = dateTimeZone37.convertLocalToUTC((-12219364799999L), true, (long) 43203104);
        int int54 = dateTimeZone37.getStandardOffset(353L);
        long long56 = dateTimeZone37.convertUTCToLocal(10371503448098510L);
        org.joda.time.DateTime dateTime57 = instant35.toDateTime(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime22", (instant19.compareTo(mutableDateTime22) == 0) == instant19.equals(mutableDateTime22));
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2708");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long4 = dateTimeZone2.previousTransition(0L);
        int int6 = dateTimeZone2.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = instant15.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant27);
        java.lang.String str29 = instant27.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        org.joda.time.Instant instant41 = instant38.withDurationAdded((-12219292800000L), 0);
        int int42 = instant27.compareTo((org.joda.time.ReadableInstant) instant38);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant27.minus(readableDuration43);
        int int45 = instant15.compareTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.MutableDateTime mutableDateTime46 = instant27.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, (org.joda.time.ReadableInstant) instant27, 5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime46", (instant15.compareTo(mutableDateTime46) == 0) == instant15.equals(mutableDateTime46));
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2709");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        long long8 = instant6.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant6.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long24 = dateTimeZone17.previousTransition(5201L);
        org.joda.time.Chronology chronology25 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology13.year();
        int int27 = instant6.get(dateTimeField26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant6.minus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str36 = dateTimeZone35.getID();
        org.joda.time.Chronology chronology37 = gJChronology32.withZone(dateTimeZone35);
        java.lang.String str39 = dateTimeZone35.getName((long) (byte) 10);
        java.util.TimeZone timeZone40 = dateTimeZone35.toTimeZone();
        long long44 = dateTimeZone35.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime45 = instant29.toMutableDateTime(dateTimeZone35);
        java.lang.String str46 = dateTimeZone35.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime45", (instant6.compareTo(mutableDateTime45) == 0) == instant6.equals(mutableDateTime45));
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2710");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        int int17 = instant1.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.millisOfSecond();
        org.joda.time.Chronology chronology22 = julianChronology20.withUTC();
        java.lang.String str23 = julianChronology20.toString();
        org.joda.time.MutableDateTime mutableDateTime24 = instant11.toMutableDateTime((org.joda.time.Chronology) julianChronology20);
        boolean boolean25 = instant11.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime24", (instant11.compareTo(mutableDateTime24) == 0) == instant11.equals(mutableDateTime24));
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2711");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = instant9.getZone();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant9.withDurationAdded(readableDuration15, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        boolean boolean23 = julianChronology21.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology24 = julianChronology21.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology26 = julianChronology21.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField27 = julianChronology21.days();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology21.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str31 = dateTimeZone30.getID();
        boolean boolean32 = dateTimeZone30.isFixed();
        long long34 = dateTimeZone30.previousTransition(100L);
        java.util.TimeZone timeZone35 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.Chronology chronology37 = julianChronology21.withZone(dateTimeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone36.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) instant49);
        long long52 = dateTimeZone47.nextTransition((long) 0);
        long long54 = dateTimeZone40.getMillisKeepLocal(dateTimeZone47, (long) (byte) 100);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone47.getShortName((-110L), locale56);
        java.lang.String str59 = dateTimeZone47.getShortName(9L);
        org.joda.time.DateTime dateTime60 = instant17.toDateTime(dateTimeZone47);
        long long63 = dateTimeZone47.adjustOffset(2506L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime60", (instant9.compareTo(dateTime60) == 0) == instant9.equals(dateTime60));
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2712");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.dayOfMonth();
        org.joda.time.DurationField durationField3 = gJChronology0.millis();
        org.joda.time.DurationField durationField4 = gJChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology0.minuteOfHour();
        org.joda.time.DurationField durationField8 = gJChronology0.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField3, and durationField4", !(durationField8.compareTo(durationField3) == 0) || (Math.signum(durationField8.compareTo(durationField4)) == Math.signum(durationField3.compareTo(durationField4))));
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2713");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) ' ');
        long long8 = dateTimeZone3.convertLocalToUTC(100L, true);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = instant17.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField26 = julianChronology25.centuries();
        java.lang.String str27 = julianChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology25.yearOfEra();
        org.joda.time.DurationField durationField29 = julianChronology25.months();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology32.minuteOfDay();
        boolean boolean34 = julianChronology25.equals((java.lang.Object) dateTimeField33);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology25.secondOfDay();
        org.joda.time.DurationField durationField38 = julianChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology25.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime40 = instant17.toMutableDateTime((org.joda.time.Chronology) julianChronology25);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.Chronology chronology44 = gJChronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.millisOfDay();
        org.joda.time.DurationField durationField47 = gJChronology43.halfdays();
        org.joda.time.DurationField durationField48 = gJChronology43.millis();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology51 = gJChronology43.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology43.minuteOfDay();
        org.joda.time.Instant instant53 = gJChronology43.getGregorianCutover();
        org.joda.time.Instant instant55 = instant53.withMillis(52L);
        long long56 = instant55.getMillis();
        boolean boolean57 = mutableDateTime40.isEqual((org.joda.time.ReadableInstant) instant55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        boolean boolean63 = julianChronology61.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology64 = julianChronology61.withUTC();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology66 = julianChronology61.withZone(dateTimeZone65);
        org.joda.time.DurationField durationField67 = julianChronology61.days();
        org.joda.time.Chronology chronology68 = julianChronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology61.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField70 = julianChronology61.secondOfDay();
        org.joda.time.DurationField durationField71 = julianChronology61.hours();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        long long75 = julianChronology61.add(readablePeriod72, (-68399903L), (int) '#');
        org.joda.time.DateTimeField dateTimeField76 = julianChronology61.dayOfMonth();
        org.joda.time.Chronology chronology77 = julianChronology61.withUTC();
        org.joda.time.DurationField durationField78 = julianChronology61.millis();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 1);
        long long83 = dateTimeZone81.convertUTCToLocal(3600000L);
        int int85 = dateTimeZone81.getStandardOffset((-60514215227594L));
        org.joda.time.chrono.GJChronology gJChronology86 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81);
        org.joda.time.Chronology chronology87 = julianChronology61.withZone(dateTimeZone81);
        org.joda.time.DateTime dateTime88 = instant55.toDateTime((org.joda.time.Chronology) julianChronology61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime40", (instant17.compareTo(mutableDateTime40) == 0) == instant17.equals(mutableDateTime40));
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isAfterNow();
        boolean boolean29 = instant26.isAfter((-361917494L));
        boolean boolean31 = instant26.isBefore((-12237976800000L));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.Instant instant38 = gJChronology34.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant38.minus(readableDuration39);
        org.joda.time.Instant instant43 = instant40.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant40.plus(readableDuration44);
        java.util.Date date46 = instant45.toDate();
        org.joda.time.Instant instant48 = instant45.plus(35L);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant48.equals((java.lang.Object) ' ');
        boolean boolean67 = instant26.isBefore((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTime dateTime68 = instant26.toDateTime();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant70 = instant26.minus(readableDuration69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant70 and dateTime68", (instant70.compareTo(dateTime68) == 0) == instant70.equals(dateTime68));
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2715");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology8.add(readablePeriod10, (-12219292800000L), (int) (short) 10);
        org.joda.time.DurationField durationField14 = gJChronology8.eras();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField16 = gJChronology8.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField16, and durationField14", !(durationField14.compareTo(durationField16) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField16.compareTo(durationField14))));
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2716");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        int int36 = dateTimeZone32.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime37 = instant27.toDateTime(dateTimeZone32);
        org.joda.time.Instant instant39 = instant27.plus((long) 1200);
        org.joda.time.Instant instant41 = instant27.plus((-12242483999903L));
        org.joda.time.MutableDateTime mutableDateTime42 = instant27.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant27.plus(readableDuration43);
        boolean boolean46 = instant27.isEqual(7L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and instant27", (dateTime37.compareTo(instant27) == 0) == dateTime37.equals(instant27));
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2717");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.dayOfYear();
        boolean boolean20 = instant8.equals((java.lang.Object) dateTimeField19);
        org.joda.time.Chronology chronology21 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        org.joda.time.DurationField durationField27 = gJChronology25.millis();
        long long31 = gJChronology25.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField32 = gJChronology25.millis();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = gJChronology25.months();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str42 = dateTimeZone41.getID();
        org.joda.time.Chronology chronology43 = gJChronology38.withZone(dateTimeZone41);
        long long46 = dateTimeZone41.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone47 = dateTimeZone41.toTimeZone();
        long long50 = dateTimeZone41.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology51 = gJChronology25.withZone(dateTimeZone41);
        org.joda.time.Instant instant52 = gJChronology25.getGregorianCutover();
        long long53 = instant52.getMillis();
        boolean boolean54 = instant8.isAfter((org.joda.time.ReadableInstant) instant52);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime57 = null;
        boolean boolean58 = dateTimeZone56.isLocalDateTimeGap(localDateTime57);
        org.joda.time.DateTime dateTime59 = instant52.toDateTime(dateTimeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2718");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology18.getZone();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) instant24);
        java.lang.String str26 = instant24.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        int int39 = instant24.compareTo((org.joda.time.ReadableInstant) instant35);
        long long40 = instant24.getMillis();
        org.joda.time.Instant instant43 = instant24.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant46 = instant43.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str49 = dateTimeZone48.getID();
        boolean boolean50 = dateTimeZone48.isFixed();
        int int52 = dateTimeZone48.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime53 = instant43.toDateTime(dateTimeZone48);
        org.joda.time.Instant instant55 = instant43.plus((long) 1200);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = instant43.isSupported(dateTimeFieldType56);
        boolean boolean59 = instant43.isAfter(1644572762450L);
        boolean boolean60 = instant15.equals((java.lang.Object) 1644572762450L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime53", (instant43.compareTo(dateTime53) == 0) == instant43.equals(dateTime53));
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2719");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.Chronology chronology31 = instant27.getChronology();
        org.joda.time.Chronology chronology32 = instant27.getChronology();
        org.joda.time.Chronology chronology33 = instant27.getChronology();
        org.joda.time.Instant instant36 = instant27.withDurationAdded((long) 36000, 353);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology39.getZone();
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, (org.joda.time.ReadableInstant) instant45);
        java.lang.String str47 = instant45.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.Instant instant54 = gJChronology50.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant54.minus(readableDuration55);
        org.joda.time.Instant instant59 = instant56.withDurationAdded((-12219292800000L), 0);
        int int60 = instant45.compareTo((org.joda.time.ReadableInstant) instant56);
        long long61 = instant45.getMillis();
        org.joda.time.Instant instant64 = instant45.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant67 = instant64.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        org.joda.time.MutableDateTime mutableDateTime70 = instant67.toMutableDateTime(dateTimeZone69);
        boolean boolean71 = instant36.isAfter((org.joda.time.ReadableInstant) instant67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime70", (instant30.compareTo(mutableDateTime70) == 0) == instant30.equals(mutableDateTime70));
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2720");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) (short) 10, false);
        long long25 = dateTimeZone17.convertLocalToUTC((-12219292800000L), true);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant27.withDurationAdded(readableDuration28, 0);
        boolean boolean32 = instant30.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant30.withDurationAdded(readableDuration33, 4);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37);
        boolean boolean41 = julianChronology39.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology39.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = instant30.toMutableDateTime((org.joda.time.Chronology) julianChronology39);
        int int47 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) mutableDateTime46);
        int int48 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone50);
        org.joda.time.DurationField durationField53 = julianChronology52.centuries();
        java.lang.String str54 = julianChronology52.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = julianChronology52.getZone();
        org.joda.time.Instant instant56 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant56.plus(readableDuration57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.dayOfYear();
        org.joda.time.Instant instant65 = gJChronology61.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant65.minus(readableDuration66);
        org.joda.time.Instant instant70 = instant67.withDurationAdded((-12219292800000L), 0);
        boolean boolean72 = instant67.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology75.millisOfDay();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology75.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology75.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology75.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology75.monthOfYear();
        boolean boolean83 = instant67.equals((java.lang.Object) dateTimeField82);
        org.joda.time.Instant instant85 = instant67.withMillis(1L);
        boolean boolean86 = instant56.equals((java.lang.Object) 1L);
        org.joda.time.chrono.GJChronology gJChronology87 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, (org.joda.time.ReadableInstant) instant56);
        boolean boolean88 = mutableDateTime46.isBefore((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Chronology chronology89 = instant56.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime46", (instant27.compareTo(mutableDateTime46) == 0) == instant27.equals(mutableDateTime46));
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2721");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        long long25 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant8.withDurationAdded(readableDuration26, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant8.plus(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant8.isSupported(dateTimeFieldType31);
        org.joda.time.Instant instant34 = instant8.minus((long) 4200000);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology37.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        org.joda.time.Chronology chronology46 = julianChronology37.withZone(dateTimeZone45);
        org.joda.time.DurationField durationField47 = julianChronology37.minutes();
        org.joda.time.DateTime dateTime48 = instant34.toDateTime((org.joda.time.Chronology) julianChronology37);
        boolean boolean49 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant34.plus(readableDuration50);
        org.joda.time.DateTimeZone dateTimeZone52 = instant51.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant51 and dateTime48", (instant51.compareTo(dateTime48) == 0) == instant51.equals(dateTime48));
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2722");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.plus(readableDuration24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = instant25.isAfter(readableInstant26);
        org.joda.time.Instant instant29 = instant25.withMillis((-424799991L));
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant34 = instant31.withDurationAdded(readableDuration32, 0);
        java.util.Date date35 = instant31.toDate();
        long long36 = instant31.getMillis();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology39.getZone();
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, (org.joda.time.ReadableInstant) instant45);
        java.lang.String str47 = instant45.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.Instant instant54 = gJChronology50.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant54.minus(readableDuration55);
        org.joda.time.Instant instant59 = instant56.withDurationAdded((-12219292800000L), 0);
        int int60 = instant45.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.Chronology chronology64 = gJChronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.dayOfWeek();
        org.joda.time.DurationField durationField66 = gJChronology63.years();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology63.weekyear();
        boolean boolean68 = instant45.equals((java.lang.Object) dateTimeField67);
        org.joda.time.Instant instant70 = instant45.withMillis(32L);
        boolean boolean71 = instant31.isEqual((org.joda.time.ReadableInstant) instant70);
        boolean boolean73 = instant70.isEqual((long) 0);
        org.joda.time.MutableDateTime mutableDateTime74 = instant70.toMutableDateTime();
        int int75 = instant29.compareTo((org.joda.time.ReadableInstant) mutableDateTime74);
        boolean boolean77 = instant29.isAfter((-62149679999990L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant70 and mutableDateTime74", (instant70.compareTo(mutableDateTime74) == 0) == instant70.equals(mutableDateTime74));
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2723");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        long long25 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant8.withDurationAdded(readableDuration26, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        boolean boolean32 = dateTimeZone30.isFixed();
        long long35 = dateTimeZone30.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime37 = instant28.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime37.getZone();
        java.lang.String str40 = dateTimeZone38.getName(254368512115440000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime37", (instant8.compareTo(mutableDateTime37) == 0) == instant8.equals(mutableDateTime37));
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2724");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology3.getZone();
        org.joda.time.DurationField durationField10 = julianChronology3.hours();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long24 = dateTimeZone17.previousTransition(5201L);
        org.joda.time.Chronology chronology25 = julianChronology13.withZone(dateTimeZone17);
        java.lang.String str27 = dateTimeZone17.getName(3600000L);
        boolean boolean28 = julianChronology3.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.DurationField durationField33 = gJChronology31.hours();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone35.getName((-1L), locale38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone35.isLocalDateTimeGap(localDateTime40);
        boolean boolean43 = dateTimeZone35.isStandardOffset(36000000L);
        java.lang.String str44 = dateTimeZone35.toString();
        int int46 = dateTimeZone35.getOffset((-6211221911999790L));
        org.joda.time.Chronology chronology47 = gJChronology31.withZone(dateTimeZone35);
        int int49 = dateTimeZone35.getStandardOffset(36000052L);
        long long51 = dateTimeZone35.convertUTCToLocal((-35999965L));
        org.joda.time.Chronology chronology52 = julianChronology3.withZone(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField33", (durationField10.compareTo(durationField33) == 0) == durationField10.equals(durationField33));
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2725");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.Chronology chronology26 = instant8.getChronology();
        boolean boolean27 = instant8.isAfterNow();
        org.joda.time.Instant instant29 = instant8.withMillis(118860000L);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant34 = instant31.withDurationAdded(readableDuration32, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = instant31.toString(dateTimeFormatter35);
        org.joda.time.Instant instant39 = instant31.withDurationAdded(0L, 1582);
        org.joda.time.MutableDateTime mutableDateTime40 = instant31.toMutableDateTimeISO();
        boolean boolean41 = instant29.isEqual((org.joda.time.ReadableInstant) instant31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime40", (instant8.compareTo(mutableDateTime40) == 0) == instant8.equals(mutableDateTime40));
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2726");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology22 = gJChronology14.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology14.minutes();
        org.joda.time.DurationField durationField24 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField25 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField26 = gJChronology14.weeks();
        boolean boolean27 = instant8.equals((java.lang.Object) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.dayOfWeek();
        org.joda.time.Chronology chronology33 = gJChronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology36 = chronology33.withZone(dateTimeZone35);
        java.lang.String str37 = dateTimeZone35.getID();
        java.lang.String str39 = dateTimeZone35.getName((-110L));
        org.joda.time.MutableDateTime mutableDateTime40 = instant8.toMutableDateTime(dateTimeZone35);
        java.util.Date date41 = instant8.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime40", (mutableDateTime11.compareTo(mutableDateTime40) == 0) == mutableDateTime11.equals(mutableDateTime40));
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2727");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Chronology chronology9 = instant6.getChronology();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, 0);
        boolean boolean16 = instant14.isEqual((long) 1);
        boolean boolean17 = instant14.isBeforeNow();
        boolean boolean18 = instant6.isEqual((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Instant instant20 = instant14.withMillis(312910024L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.plus(readableDuration21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        org.joda.time.DurationField durationField27 = gJChronology25.millis();
        org.joda.time.Chronology chronology28 = gJChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.minuteOfDay();
        int int34 = instant22.get(dateTimeField33);
        org.joda.time.Chronology chronology35 = instant22.getChronology();
        boolean boolean37 = instant22.isEqual((long) 3920);
        org.joda.time.DateTime dateTime38 = instant22.toDateTime();
        boolean boolean40 = instant22.isBefore((long) 45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime38", (instant22.compareTo(dateTime38) == 0) == instant22.equals(dateTime38));
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2728");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.dayOfYear();
        org.joda.time.Instant instant11 = gJChronology7.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.minus(readableDuration12);
        org.joda.time.Instant instant16 = instant13.withDurationAdded((-12219292800000L), 0);
        boolean boolean18 = instant13.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.Chronology chronology22 = gJChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology21.monthOfYear();
        boolean boolean29 = instant13.equals((java.lang.Object) dateTimeField28);
        org.joda.time.Instant instant31 = instant13.withMillis(1L);
        boolean boolean32 = instant4.isBefore((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Instant instant34 = instant31.plus(3600000L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.Instant instant38 = instant34.withDurationAdded((-61832704789991L), (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone39 = instant38.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and dateTime35", (instant34.compareTo(dateTime35) == 0) == instant34.equals(dateTime35));
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2729");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        int int36 = dateTimeZone32.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime37 = instant27.toDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        org.joda.time.DurationField durationField42 = gJChronology40.millis();
        org.joda.time.DurationField durationField43 = gJChronology40.months();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        int int46 = dateTimeZone44.getStandardOffset((-3743994852L));
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime37.toMutableDateTime(dateTimeZone44);
        boolean boolean48 = mutableDateTime47.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime37", (instant27.compareTo(dateTime37) == 0) == instant27.equals(dateTime37));
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2730");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone24 = dateTimeZone18.toTimeZone();
        long long27 = dateTimeZone18.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.Instant instant29 = gJChronology2.getGregorianCutover();
        long long30 = instant29.getMillis();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str39 = dateTimeZone38.getID();
        org.joda.time.Chronology chronology40 = gJChronology35.withZone(dateTimeZone38);
        java.lang.String str42 = dateTimeZone38.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime44 = instant32.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, (org.joda.time.ReadableInstant) instant53);
        java.lang.String str55 = instant53.toString();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.Instant instant62 = gJChronology58.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant62.minus(readableDuration63);
        org.joda.time.Instant instant67 = instant64.withDurationAdded((-12219292800000L), 0);
        int int68 = instant53.compareTo((org.joda.time.ReadableInstant) instant64);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant70 = instant53.minus(readableDuration69);
        java.util.Date date71 = instant53.toDate();
        boolean boolean73 = instant53.isBefore((-62112218399999L));
        org.joda.time.Instant instant76 = instant53.withDurationAdded((-35999899L), (int) ' ');
        boolean boolean77 = mutableDateTime44.isBefore((org.joda.time.ReadableInstant) instant53);
        boolean boolean78 = instant29.isAfter((org.joda.time.ReadableInstant) mutableDateTime44);
        boolean boolean79 = instant29.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and mutableDateTime44", (instant32.compareTo(mutableDateTime44) == 0) == instant32.equals(mutableDateTime44));
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2731");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone17 = instant16.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField22 = julianChronology21.centuries();
        java.lang.String str23 = julianChronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology21.yearOfEra();
        org.joda.time.DurationField durationField25 = julianChronology21.months();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology28.minuteOfDay();
        boolean boolean30 = julianChronology21.equals((java.lang.Object) dateTimeField29);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology21.secondOfMinute();
        int int32 = julianChronology21.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        boolean boolean38 = julianChronology36.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField39 = julianChronology36.months();
        boolean boolean40 = julianChronology21.equals((java.lang.Object) julianChronology36);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology21.dayOfYear();
        org.joda.time.DateTime dateTime42 = instant16.toDateTime((org.joda.time.Chronology) julianChronology21);
        int int43 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTime dateTime44 = instant16.toDateTimeISO();
        org.joda.time.Instant instant45 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant45.plus(readableDuration46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology50.getZone();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, (org.joda.time.ReadableInstant) instant56);
        java.lang.String str58 = instant56.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.dayOfYear();
        org.joda.time.Instant instant65 = gJChronology61.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant65.minus(readableDuration66);
        org.joda.time.Instant instant70 = instant67.withDurationAdded((-12219292800000L), 0);
        int int71 = instant56.compareTo((org.joda.time.ReadableInstant) instant67);
        long long72 = instant56.getMillis();
        org.joda.time.Instant instant73 = instant56.toInstant();
        org.joda.time.DateTimeZone dateTimeZone74 = instant56.getZone();
        int int75 = instant47.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Instant instant77 = instant47.plus((-62158787999900L));
        long long78 = instant77.getMillis();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.chrono.GJChronology gJChronology81 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79, readableInstant80);
        org.joda.time.DateTimeZone dateTimeZone82 = gJChronology81.getZone();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology81.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology81.dayOfYear();
        org.joda.time.Instant instant85 = gJChronology81.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.Instant instant87 = instant85.minus(readableDuration86);
        org.joda.time.Instant instant90 = instant87.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration91 = null;
        org.joda.time.Instant instant92 = instant87.plus(readableDuration91);
        java.util.Date date93 = instant92.toDate();
        java.lang.String str94 = instant92.toString();
        boolean boolean95 = instant92.isBeforeNow();
        boolean boolean96 = instant77.isBefore((org.joda.time.ReadableInstant) instant92);
        boolean boolean97 = instant16.isBefore((org.joda.time.ReadableInstant) instant92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime44", (dateTime42.compareTo(dateTime44) == 0) == dateTime42.equals(dateTime44));
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2732");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T00:00:00.000Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant4.withDurationAdded(readableDuration5, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant4.toString(dateTimeFormatter8);
        org.joda.time.Instant instant12 = instant4.withDurationAdded(0L, 1582);
        org.joda.time.MutableDateTime mutableDateTime13 = instant4.toMutableDateTimeISO();
        boolean boolean14 = instant1.isEqual((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Instant instant15 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and mutableDateTime13", (instant4.compareTo(mutableDateTime13) == 0) == instant4.equals(mutableDateTime13));
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2733");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.Chronology chronology11 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.dayOfWeek();
        org.joda.time.Chronology chronology13 = gJChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology16 = chronology13.withZone(dateTimeZone15);
        java.lang.String str17 = dateTimeZone15.getID();
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone15.isLocalDateTimeGap(localDateTime18);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone15.getShortName((long) (byte) 10, locale23);
        org.joda.time.DateTime dateTime25 = instant5.toDateTime(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime26 = instant5.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant5.minus(readableDuration27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime26", (dateTime25.compareTo(mutableDateTime26) == 0) == dateTime25.equals(mutableDateTime26));
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2734");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = instant26.isAfter(readableInstant29);
        org.joda.time.MutableDateTime mutableDateTime31 = instant26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = instant26.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime31", (instant26.compareTo(mutableDateTime31) == 0) == instant26.equals(mutableDateTime31));
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2735");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.Instant instant10 = instant7.plus(1338L);
        boolean boolean11 = instant10.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2736");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant10.plus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        java.lang.String str23 = instant21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        int int36 = instant21.compareTo((org.joda.time.ReadableInstant) instant32);
        long long37 = instant21.getMillis();
        org.joda.time.Instant instant38 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone39 = instant21.getZone();
        int int40 = instant12.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant21.withDurationAdded(readableDuration41, 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = instant21.toDateTime(chronology44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = dateTime45.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.Chronology chronology51 = gJChronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology50.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.Instant instant62 = gJChronology58.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime65 = instant62.toMutableDateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = instant62.toDateTime();
        java.util.Date date67 = instant62.toDate();
        boolean boolean68 = gJChronology50.equals((java.lang.Object) instant62);
        org.joda.time.Instant instant71 = instant62.withDurationAdded((-62159565599948L), (int) (byte) 100);
        boolean boolean73 = instant62.isAfter((-62158787999900L));
        boolean boolean74 = instant62.isEqualNow();
        boolean boolean75 = instant62.isAfterNow();
        boolean boolean76 = dateTime45.isAfter((org.joda.time.ReadableInstant) instant62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant62 and mutableDateTime65", (instant62.compareTo(mutableDateTime65) == 0) == instant62.equals(mutableDateTime65));
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2737");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone40 = instant35.getZone();
        boolean boolean41 = instant35.isBeforeNow();
        java.util.Date date42 = instant35.toDate();
        org.joda.time.DateTime dateTime43 = instant35.toDateTimeISO();
        org.joda.time.Chronology chronology44 = instant35.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime43", (instant35.compareTo(dateTime43) == 0) == instant35.equals(dateTime43));
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2738");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField31 = julianChronology30.centuries();
        java.lang.String str32 = julianChronology30.toString();
        java.lang.String str33 = julianChronology30.toString();
        org.joda.time.DurationField durationField34 = julianChronology30.weekyears();
        org.joda.time.DateTimeZone dateTimeZone35 = julianChronology30.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = instant8.toMutableDateTime(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isStandardOffset(1644536753308L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime36", (instant6.compareTo(mutableDateTime36) == 0) == instant6.equals(mutableDateTime36));
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2739");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        java.lang.String str9 = dateTimeZone7.getName((long) 0);
        long long12 = dateTimeZone7.adjustOffset(1L, true);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.Chronology chronology29 = gJChronology24.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology24.getZone();
        long long32 = dateTimeZone30.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology33 = gJChronology16.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        boolean boolean43 = julianChronology41.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology44 = julianChronology41.withUTC();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology46 = julianChronology41.withZone(dateTimeZone45);
        long long48 = dateTimeZone35.getMillisKeepLocal(dateTimeZone45, 10L);
        org.joda.time.Chronology chronology49 = gJChronology16.withZone(dateTimeZone45);
        org.joda.time.Chronology chronology50 = gJChronology16.withUTC();
        org.joda.time.DurationField durationField51 = gJChronology16.years();
        org.joda.time.Chronology chronology52 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology16.minuteOfHour();
        org.joda.time.DurationField durationField54 = gJChronology16.halfdays();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology57.getZone();
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, (org.joda.time.ReadableInstant) instant63);
        java.lang.String str65 = instant63.toString();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67);
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology68.getZone();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.dayOfYear();
        org.joda.time.Instant instant72 = gJChronology68.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant72.minus(readableDuration73);
        org.joda.time.Instant instant77 = instant74.withDurationAdded((-12219292800000L), 0);
        int int78 = instant63.compareTo((org.joda.time.ReadableInstant) instant74);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Instant instant80 = instant63.minus(readableDuration79);
        java.util.Date date81 = instant63.toDate();
        boolean boolean82 = gJChronology16.equals((java.lang.Object) instant63);
        org.joda.time.Instant instant84 = instant63.plus((long) (byte) 100);
        org.joda.time.Instant instant85 = instant63.toInstant();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology88 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone87);
        org.joda.time.DateTimeField dateTimeField89 = julianChronology88.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField90 = julianChronology88.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField91 = julianChronology88.dayOfYear();
        org.joda.time.DateTimeField dateTimeField92 = julianChronology88.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime93 = instant85.toMutableDateTime((org.joda.time.Chronology) julianChronology88);
        org.joda.time.Instant instant94 = mutableDateTime93.toInstant();
        int int95 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime93);
        int int97 = dateTimeZone7.getOffsetFromLocal((long) 85517911);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant63 and mutableDateTime93", (instant63.compareTo(mutableDateTime93) == 0) == instant63.equals(mutableDateTime93));
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2740");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        java.lang.String str4 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = julianChronology9.year();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology9.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology9.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime14 = instant1.toMutableDateTime((org.joda.time.Chronology) julianChronology9);
        long long15 = instant1.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime14", (instant1.compareTo(mutableDateTime14) == 0) == instant1.equals(mutableDateTime14));
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) ' ');
        java.lang.String str15 = dateTimeZone12.getID();
        boolean boolean17 = dateTimeZone12.isStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone12.isLocalDateTimeGap(localDateTime18);
        int int21 = dateTimeZone12.getOffset(288097310L);
        java.lang.String str23 = dateTimeZone12.getShortName((-60514215249476L));
        org.joda.time.Chronology chronology24 = gJChronology2.withZone(dateTimeZone12);
        java.lang.String str25 = gJChronology2.toString();
        org.joda.time.DurationField durationField26 = gJChronology2.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField26, and durationField5", !(durationField5.compareTo(durationField26) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField26.compareTo(durationField5))));
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2742");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        java.lang.String str19 = dateTimeZone8.getNameKey((long) (short) 100);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTime dateTime31 = instant29.toDateTime();
        boolean boolean32 = instant29.isAfterNow();
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = instant29.toString(dateTimeFormatter34);
        org.joda.time.Instant instant38 = instant29.withDurationAdded((-71999990L), (int) (short) -1);
        org.joda.time.DateTime dateTime39 = instant29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.Chronology chronology43 = gJChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology42.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.Chronology chronology55 = gJChronology50.withZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology50.getZone();
        long long58 = dateTimeZone56.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology59 = gJChronology42.withZone(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean63 = dateTimeZone61.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.chrono.JulianChronology julianChronology67 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone65);
        boolean boolean69 = julianChronology67.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology70 = julianChronology67.withUTC();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology72 = julianChronology67.withZone(dateTimeZone71);
        long long74 = dateTimeZone61.getMillisKeepLocal(dateTimeZone71, 10L);
        org.joda.time.Chronology chronology75 = gJChronology42.withZone(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = instant29.toDateTime(dateTimeZone71);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = dateTime76.isSupported(dateTimeFieldType77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and dateTime31", (instant29.compareTo(dateTime31) == 0) == instant29.equals(dateTime31));
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2743");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        boolean boolean31 = instant11.isAfter((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant33 = instant11.withMillis((-60514215321380L));
        boolean boolean34 = instant11.isAfterNow();
        int int35 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant11);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant11.withDurationAdded(readableDuration36, (int) (short) 10);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant40.withDurationAdded(readableDuration41, 0);
        boolean boolean45 = instant43.isEqual((long) 1);
        boolean boolean46 = instant43.isBeforeNow();
        org.joda.time.Instant instant49 = instant43.withDurationAdded((-12219364799999L), 1);
        boolean boolean50 = instant11.isBefore((org.joda.time.ReadableInstant) instant49);
        org.joda.time.DateTime dateTime51 = instant11.toDateTimeISO();
        org.joda.time.Instant instant54 = instant11.withDurationAdded(72000052L, 35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime51", (instant11.compareTo(dateTime51) == 0) == instant11.equals(dateTime51));
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2744");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField22 = gJChronology20.millis();
        long long26 = gJChronology20.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField27 = gJChronology20.millis();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology20.millisOfSecond();
        int int32 = instant15.get(dateTimeField31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField37 = julianChronology36.centuries();
        java.lang.String str38 = julianChronology36.toString();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology36.yearOfEra();
        org.joda.time.DurationField durationField40 = julianChronology36.months();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = julianChronology43.minuteOfDay();
        boolean boolean45 = julianChronology36.equals((java.lang.Object) dateTimeField44);
        org.joda.time.DateTimeField dateTimeField46 = julianChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology36.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime49 = instant15.toMutableDateTime((org.joda.time.Chronology) julianChronology36);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology36.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime49", (instant15.compareTo(mutableDateTime49) == 0) == instant15.equals(mutableDateTime49));
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2745");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DurationField durationField8 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField9 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField7, and durationField8", !(durationField10.compareTo(durationField7) == 0) || (Math.signum(durationField10.compareTo(durationField8)) == Math.signum(durationField7.compareTo(durationField8))));
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2746");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant17.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        boolean boolean22 = instant19.isAfter((long) (byte) 0);
        int int23 = instant11.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant24 = instant19.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        int int48 = instant33.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.Chronology chronology52 = gJChronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.dayOfWeek();
        org.joda.time.DurationField durationField54 = gJChronology51.years();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.weekyear();
        boolean boolean56 = instant33.equals((java.lang.Object) dateTimeField55);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant61 = instant58.withDurationAdded(readableDuration59, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = instant58.toString(dateTimeFormatter62);
        org.joda.time.Instant instant66 = instant58.withDurationAdded(0L, 1582);
        long long67 = instant66.getMillis();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant70 = instant66.withDurationAdded(readableDuration68, (int) (short) 100);
        boolean boolean71 = instant33.isAfter((org.joda.time.ReadableInstant) instant66);
        org.joda.time.DateTime dateTime72 = instant66.toDateTimeISO();
        boolean boolean74 = dateTime72.isBefore((-36000000L));
        boolean boolean75 = instant24.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime20", (instant24.compareTo(dateTime20) == 0) == instant24.equals(dateTime20));
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2747");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField16 = julianChronology15.centuries();
        org.joda.time.DurationField durationField17 = julianChronology15.weeks();
        org.joda.time.DurationField durationField18 = julianChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.dayOfYear();
        boolean boolean20 = gJChronology2.equals((java.lang.Object) julianChronology15);
        org.joda.time.DurationField durationField21 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology2.getZone();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = gJChronology2.add(readablePeriod23, (-6211224827991830L), 2022);
        org.joda.time.DurationField durationField27 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField17 and durationField27", (durationField17.compareTo(durationField27) == 0) == durationField17.equals(durationField27));
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2748");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant5 = instant2.withDurationAdded(readableDuration3, 0);
        org.joda.time.Instant instant7 = instant5.minus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant7.minus(readableDuration9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant7", (mutableDateTime8.compareTo(instant7) == 0) == mutableDateTime8.equals(instant7));
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        int int14 = dateTimeZone5.getOffsetFromLocal((long) 278);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.monthOfYear();
        boolean boolean41 = instant25.equals((java.lang.Object) dateTimeField40);
        org.joda.time.Instant instant43 = instant25.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant43.isSupported(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = instant43.toString(dateTimeFormatter48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant53 = instant43.withDurationAdded(readableDuration51, 0);
        org.joda.time.MutableDateTime mutableDateTime54 = instant53.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology57.getZone();
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, (org.joda.time.ReadableInstant) instant63);
        java.lang.String str65 = instant63.toString();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67);
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology68.getZone();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.dayOfYear();
        org.joda.time.Instant instant72 = gJChronology68.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant72.minus(readableDuration73);
        org.joda.time.Instant instant77 = instant74.withDurationAdded((-12219292800000L), 0);
        int int78 = instant63.compareTo((org.joda.time.ReadableInstant) instant74);
        long long79 = instant63.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        boolean boolean81 = instant63.isSupported(dateTimeFieldType80);
        org.joda.time.MutableDateTime mutableDateTime82 = instant63.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant84 = instant63.minus(readableDuration83);
        boolean boolean85 = mutableDateTime54.isBefore((org.joda.time.ReadableInstant) instant84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant84 and mutableDateTime82", (instant84.compareTo(mutableDateTime82) == 0) == instant84.equals(mutableDateTime82));
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2750");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = instant7.isSupported(dateTimeFieldType8);
        org.joda.time.Instant instant11 = instant7.withMillis((-60514215257464L));
        boolean boolean13 = instant7.isAfter((-179999601L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = instant24.getZone();
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.yearOfEra();
        org.joda.time.DurationField durationField29 = julianChronology27.centuries();
        org.joda.time.DateTime dateTime30 = instant7.toDateTime((org.joda.time.Chronology) julianChronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant7.isSupported(dateTimeFieldType31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime30", (instant7.compareTo(dateTime30) == 0) == instant7.equals(dateTime30));
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2751");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1L);
        boolean boolean6 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(100L);
        boolean boolean9 = instant5.isEqual((org.joda.time.ReadableInstant) instant8);
        long long10 = instant5.getMillis();
        org.joda.time.Instant instant12 = instant5.minus(126000000L);
        org.joda.time.Instant instant13 = instant5.toInstant();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant15.minus((long) 10);
        java.util.Date date20 = instant19.toDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        int int25 = dateTimeZone22.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField27 = julianChronology26.centuries();
        boolean boolean28 = instant19.equals((java.lang.Object) durationField27);
        org.joda.time.MutableDateTime mutableDateTime29 = instant19.toMutableDateTime();
        int int30 = instant13.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = instant19.isEqual(readableInstant31);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant34.withDurationAdded(readableDuration35, 0);
        java.util.Date date38 = instant34.toDate();
        long long39 = instant34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology42.getZone();
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, (org.joda.time.ReadableInstant) instant48);
        java.lang.String str50 = instant48.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.dayOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant57.minus(readableDuration58);
        org.joda.time.Instant instant62 = instant59.withDurationAdded((-12219292800000L), 0);
        int int63 = instant48.compareTo((org.joda.time.ReadableInstant) instant59);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, readableInstant65);
        org.joda.time.Chronology chronology67 = gJChronology66.withUTC();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.dayOfWeek();
        org.joda.time.DurationField durationField69 = gJChronology66.years();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology66.weekyear();
        boolean boolean71 = instant48.equals((java.lang.Object) dateTimeField70);
        org.joda.time.Instant instant73 = instant48.withMillis(32L);
        boolean boolean74 = instant34.isEqual((org.joda.time.ReadableInstant) instant73);
        org.joda.time.Instant instant76 = instant73.minus((long) 1200);
        boolean boolean77 = instant19.isBefore((org.joda.time.ReadableInstant) instant76);
        org.joda.time.DateTime dateTime78 = instant76.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime29", (instant19.compareTo(mutableDateTime29) == 0) == instant19.equals(mutableDateTime29));
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2752");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        java.lang.String str3 = dateTimeZone1.getNameKey(35L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.Instant instant10 = gJChronology6.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = instant10.toDateTime();
        java.util.Date date15 = instant10.toDate();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = gJChronology18.withZone(dateTimeZone21);
        java.lang.String str25 = dateTimeZone21.getName((long) (byte) 10);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        long long30 = dateTimeZone21.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean31 = instant10.equals((java.lang.Object) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime32 = instant10.toMutableDateTimeISO();
        boolean boolean33 = dateTimeZone1.equals((java.lang.Object) instant10);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime13", (instant10.compareTo(mutableDateTime13) == 0) == instant10.equals(mutableDateTime13));
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2753");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        org.joda.time.Instant instant4 = mutableDateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology7.yearOfCentury();
        org.joda.time.DurationField durationField12 = gJChronology7.days();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology7.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = instant4.toMutableDateTime((org.joda.time.Chronology) gJChronology7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime3", (instant0.compareTo(mutableDateTime3) == 0) == instant0.equals(mutableDateTime3));
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2754");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        java.lang.String str24 = instant22.toString();
        int int25 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) instant22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = gJChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.halfdayOfDay();
        boolean boolean35 = instant26.equals((java.lang.Object) gJChronology29);
        org.joda.time.DurationField durationField36 = gJChronology29.weekyears();
        int int37 = gJChronology29.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str40 = dateTimeZone39.getID();
        boolean boolean41 = dateTimeZone39.isFixed();
        long long43 = dateTimeZone39.previousTransition(100L);
        java.util.TimeZone timeZone44 = dateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone45 = dateTimeZone39.toTimeZone();
        java.lang.String str46 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology47 = gJChronology29.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime12.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = mutableDateTime48.isSupported(dateTimeFieldType49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime12", (instant6.compareTo(dateTime12) == 0) == instant6.equals(dateTime12));
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2755");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.Instant instant28 = instant23.minus((-435599901L));
        boolean boolean29 = instant28.isBeforeNow();
        org.joda.time.Instant instant31 = instant28.minus((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology40 = julianChronology35.withZone(dateTimeZone39);
        org.joda.time.DurationField durationField41 = julianChronology35.days();
        int int42 = julianChronology35.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone43 = julianChronology35.getZone();
        org.joda.time.MutableDateTime mutableDateTime44 = instant28.toMutableDateTime((org.joda.time.Chronology) julianChronology35);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology35.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime44", (instant28.compareTo(mutableDateTime44) == 0) == instant28.equals(mutableDateTime44));
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2756");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(36000000L);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = instant12.toMutableDateTime(dateTimeZone18);
        int int25 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant27.withDurationAdded(readableDuration28, 0);
        java.util.Date date31 = instant27.toDate();
        org.joda.time.Instant instant33 = instant27.plus((long) (byte) 0);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant40 = instant37.withDurationAdded(readableDuration38, 0);
        java.util.Date date41 = instant37.toDate();
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTime dateTime43 = instant37.toDateTime();
        boolean boolean44 = instant12.isAfter((org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime43", (instant27.compareTo(dateTime43) == 0) == instant27.equals(dateTime43));
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2757");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeZone dateTimeZone42 = instant1.getZone();
        org.joda.time.DateTime dateTime43 = instant1.toDateTimeISO();
        boolean boolean44 = instant1.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime43", (instant1.compareTo(dateTime43) == 0) == instant1.equals(dateTime43));
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2758");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        org.joda.time.Instant instant16 = instant13.plus(35L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.Instant instant31 = instant25.toInstant();
        boolean boolean33 = instant31.isBefore((long) ' ');
        boolean boolean34 = instant16.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = instant16.getZone();
        long long36 = instant16.getMillis();
        org.joda.time.MutableDateTime mutableDateTime37 = instant16.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        java.lang.String str42 = gJChronology40.toString();
        org.joda.time.DurationField durationField43 = gJChronology40.eras();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.era();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str52 = dateTimeZone51.getID();
        org.joda.time.Chronology chronology53 = gJChronology48.withZone(dateTimeZone51);
        long long56 = dateTimeZone51.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str58 = dateTimeZone51.getName((long) (short) -1);
        org.joda.time.Chronology chronology59 = gJChronology40.withZone(dateTimeZone51);
        boolean boolean60 = mutableDateTime37.equals((java.lang.Object) dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.chrono.JulianChronology julianChronology64 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone62);
        boolean boolean66 = julianChronology64.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology67 = julianChronology64.withUTC();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology64.era();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology64.minuteOfHour();
        org.joda.time.DurationField durationField70 = julianChronology64.weeks();
        org.joda.time.DurationField durationField71 = julianChronology64.days();
        org.joda.time.DateTimeField dateTimeField72 = julianChronology64.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField73 = julianChronology64.hourOfDay();
        java.lang.String str74 = julianChronology64.toString();
        org.joda.time.DateTimeField dateTimeField75 = julianChronology64.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology64.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone77 = julianChronology64.getZone();
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77);
        boolean boolean79 = mutableDateTime37.equals((java.lang.Object) gJChronology78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField43 and durationField70", Math.signum(durationField43.compareTo(durationField70)) == -Math.signum(durationField70.compareTo(durationField43)));
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2759");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.plus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean40 = instant35.isEqual(35L);
        boolean boolean41 = instant21.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean42 = instant9.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant43 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology47.year();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = julianChronology47.getZone();
        org.joda.time.DurationField durationField51 = julianChronology47.eras();
        org.joda.time.DateTimeZone dateTimeZone52 = julianChronology47.getZone();
        boolean boolean53 = instant43.equals((java.lang.Object) julianChronology47);
        boolean boolean54 = instant43.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.chrono.JulianChronology julianChronology58 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField59 = julianChronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology58.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone64.getName((long) 36000000, locale66);
        int int69 = dateTimeZone64.getOffset((long) ' ');
        org.joda.time.Chronology chronology70 = julianChronology58.withZone(dateTimeZone64);
        org.joda.time.DurationField durationField71 = julianChronology58.months();
        org.joda.time.DurationField durationField72 = julianChronology58.minutes();
        boolean boolean73 = instant43.equals((java.lang.Object) julianChronology58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField51 and durationField71", Math.signum(durationField51.compareTo(durationField71)) == -Math.signum(durationField71.compareTo(durationField51)));
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2760");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        boolean boolean9 = instant8.isAfterNow();
        boolean boolean10 = instant8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = instant8.getZone();
        org.joda.time.Instant instant14 = instant8.withDurationAdded(32409730L, 3600000);
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTimeISO();
        boolean boolean16 = instant14.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getNameKey(10L);
        long long25 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) (short) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        long long30 = dateTimeZone19.convertLocalToUTC((-143999601L), true, (-386L));
        org.joda.time.DateTime dateTime31 = instant14.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.Instant instant38 = gJChronology34.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant38.minus(readableDuration39);
        org.joda.time.Instant instant43 = instant40.withDurationAdded((-12219292800000L), 0);
        boolean boolean45 = instant40.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.Chronology chronology49 = gJChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology48.monthOfYear();
        boolean boolean56 = instant40.equals((java.lang.Object) dateTimeField55);
        org.joda.time.Instant instant58 = instant40.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = instant58.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.dayOfYear();
        org.joda.time.Instant instant67 = gJChronology63.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant67.minus(readableDuration68);
        org.joda.time.Instant instant72 = instant69.withDurationAdded((-12219292800000L), 0);
        boolean boolean74 = instant69.isEqual(35L);
        org.joda.time.Instant instant75 = instant69.toInstant();
        boolean boolean77 = instant75.isBefore((long) ' ');
        boolean boolean78 = instant58.isAfter((org.joda.time.ReadableInstant) instant75);
        org.joda.time.Instant instant80 = instant58.minus(4L);
        org.joda.time.Chronology chronology81 = instant58.getChronology();
        boolean boolean83 = instant58.isAfter((-107999950L));
        org.joda.time.DateTimeZone dateTimeZone84 = instant58.getZone();
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Instant instant86 = instant58.minus(readableDuration85);
        org.joda.time.Instant instant87 = new org.joda.time.Instant();
        boolean boolean88 = instant87.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime89 = instant87.toMutableDateTime();
        boolean boolean90 = instant58.isBefore((org.joda.time.ReadableInstant) instant87);
        org.joda.time.chrono.GJChronology gJChronology91 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime15", (instant14.compareTo(mutableDateTime15) == 0) == instant14.equals(mutableDateTime15));
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2761");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, 0);
        boolean boolean17 = instant15.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant15.withDurationAdded(readableDuration18, 4);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant23 = instant20.withDurationAdded(readableDuration21, 3600000);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant32.plus(readableDuration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        boolean boolean51 = instant46.isEqual(35L);
        boolean boolean52 = instant32.isAfter((org.joda.time.ReadableInstant) instant46);
        boolean boolean53 = instant20.isAfter((org.joda.time.ReadableInstant) instant46);
        boolean boolean54 = instant8.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime59 = instant8.toMutableDateTime(dateTimeZone56);
        boolean boolean61 = instant8.isBefore((-71936861L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime59", (instant12.compareTo(mutableDateTime59) == 0) == instant12.equals(mutableDateTime59));
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2762");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = instant8.getZone();
        org.joda.time.Instant instant28 = instant8.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.Chronology chronology33 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.era();
        org.joda.time.DurationField durationField35 = gJChronology31.months();
        org.joda.time.DurationField durationField36 = gJChronology31.minutes();
        org.joda.time.MutableDateTime mutableDateTime37 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology31);
        org.joda.time.Instant instant38 = instant8.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant38 and mutableDateTime37", (instant38.compareTo(mutableDateTime37) == 0) == instant38.equals(mutableDateTime37));
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2763");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.Instant instant18 = instant15.withMillis((-422964038L));
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        boolean boolean20 = instant19.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime21 = instant19.toMutableDateTime();
        org.joda.time.DateTime dateTime22 = instant19.toDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant19.plus(readableDuration23);
        boolean boolean25 = instant18.isEqual((org.joda.time.ReadableInstant) instant19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant19", (mutableDateTime21.compareTo(instant19) == 0) == mutableDateTime21.equals(instant19));
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2764");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        org.joda.time.DateTime dateTime12 = instant10.toDateTime();
        boolean boolean13 = julianChronology3.equals((java.lang.Object) instant10);
        org.joda.time.Instant instant16 = instant10.withDurationAdded(18684000000L, (int) (byte) 100);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((-60514215308675L));
        boolean boolean20 = instant18.isAfter((-35999900L));
        boolean boolean21 = instant16.isAfter((org.joda.time.ReadableInstant) instant18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime12", (instant10.compareTo(dateTime12) == 0) == instant10.equals(dateTime12));
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2765");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        boolean boolean11 = dateTimeZone8.isStandardOffset((long) 4);
        org.joda.time.DateTime dateTime12 = instant4.toDateTime(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime13 = instant4.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime12", (instant4.compareTo(dateTime12) == 0) == instant4.equals(dateTime12));
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2766");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime1", (instant2.compareTo(mutableDateTime1) == 0) == instant2.equals(mutableDateTime1));
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2767");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        java.lang.String str17 = dateTimeZone13.getName((long) (byte) 10);
        long long20 = dateTimeZone13.convertLocalToUTC((-35999900L), false);
        int int22 = dateTimeZone13.getOffsetFromLocal((long) 278);
        boolean boolean24 = dateTimeZone13.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.Instant instant36 = instant33.withDurationAdded((-12219292800000L), 0);
        boolean boolean38 = instant33.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.Chronology chronology42 = gJChronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.monthOfYear();
        boolean boolean49 = instant33.equals((java.lang.Object) dateTimeField48);
        org.joda.time.Instant instant51 = instant33.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = instant51.isSupported(dateTimeFieldType52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant51.isSupported(dateTimeFieldType54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = instant51.toString(dateTimeFormatter56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.Instant instant61 = instant51.withDurationAdded((long) 0, (int) 'a');
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.Instant instant63 = instant61.toInstant();
        org.joda.time.Instant instant65 = instant61.plus((-12219292800000L));
        boolean boolean66 = instant61.isEqualNow();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant61.minus(readableDuration67);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        boolean boolean70 = dateTime7.isAfter((org.joda.time.ReadableInstant) instant68);
        org.joda.time.Instant instant72 = instant68.withMillis(61544001598418L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime7", (instant1.compareTo(dateTime7) == 0) == instant1.equals(dateTime7));
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2768");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        long long32 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant8.minus(readableDuration33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField41 = gJChronology37.weeks();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology37.getZone();
        int int45 = dateTimeZone43.getStandardOffset((long) (byte) 0);
        java.lang.String str47 = dateTimeZone43.getShortName((long) (short) -1);
        int int49 = dateTimeZone43.getOffsetFromLocal((-62159565599948L));
        org.joda.time.MutableDateTime mutableDateTime50 = instant8.toMutableDateTime(dateTimeZone43);
        long long51 = instant8.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime50", (instant8.compareTo(mutableDateTime50) == 0) == instant8.equals(mutableDateTime50));
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2769");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology22 = gJChronology14.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology14.minutes();
        org.joda.time.DurationField durationField24 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField25 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField26 = gJChronology14.weeks();
        boolean boolean27 = instant8.equals((java.lang.Object) gJChronology14);
        boolean boolean29 = instant8.isAfter((long) 19);
        long long30 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant8.minus(readableDuration31);
        org.joda.time.Instant instant34 = instant32.plus((-1199766959970902L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and mutableDateTime11", (instant32.compareTo(mutableDateTime11) == 0) == instant32.equals(mutableDateTime11));
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2770");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        boolean boolean14 = dateTimeZone12.isFixed();
        long long17 = dateTimeZone12.convertLocalToUTC((-35999990L), true);
        long long20 = dateTimeZone12.convertLocalToUTC((long) 9, true);
        int int22 = dateTimeZone12.getOffset((long) (-1));
        boolean boolean24 = dateTimeZone12.isStandardOffset((long) 3600000);
        org.joda.time.DateTime dateTime25 = mutableDateTime9.toDateTime(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2771");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology10.getZone();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) instant16);
        java.lang.String str18 = instant16.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.Instant instant25 = gJChronology21.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.minus(readableDuration26);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((-12219292800000L), 0);
        int int31 = instant16.compareTo((org.joda.time.ReadableInstant) instant27);
        long long32 = instant16.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant16.isSupported(dateTimeFieldType33);
        org.joda.time.MutableDateTime mutableDateTime35 = instant16.toMutableDateTimeISO();
        int int36 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant16);
        long long38 = dateTimeZone7.nextTransition((long) 72000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime35", (instant16.compareTo(mutableDateTime35) == 0) == instant16.equals(mutableDateTime35));
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2772");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) instant14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.Chronology chronology19 = gJChronology18.withUTC();
        java.lang.String str20 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfWeek();
        org.joda.time.Instant instant24 = gJChronology18.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.millisOfSecond();
        org.joda.time.DurationField durationField26 = gJChronology18.halfdays();
        org.joda.time.MutableDateTime mutableDateTime27 = instant15.toMutableDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime27.getZone();
        org.joda.time.Chronology chronology29 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        org.joda.time.Instant instant41 = instant38.withDurationAdded((-12219292800000L), 0);
        boolean boolean43 = instant38.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology46.monthOfYear();
        boolean boolean54 = instant38.equals((java.lang.Object) dateTimeField53);
        org.joda.time.Instant instant56 = instant38.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = instant56.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.dayOfYear();
        org.joda.time.Instant instant65 = gJChronology61.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant65.minus(readableDuration66);
        org.joda.time.Instant instant70 = instant67.withDurationAdded((-12219292800000L), 0);
        boolean boolean72 = instant67.isEqual(35L);
        org.joda.time.Instant instant73 = instant67.toInstant();
        boolean boolean75 = instant73.isBefore((long) ' ');
        boolean boolean76 = instant56.isAfter((org.joda.time.ReadableInstant) instant73);
        boolean boolean77 = instant56.isBeforeNow();
        org.joda.time.DateTime dateTime78 = instant56.toDateTimeISO();
        boolean boolean79 = instant56.isAfterNow();
        int int80 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Chronology chronology81 = instant56.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime27", (instant9.compareTo(mutableDateTime27) == 0) == instant9.equals(mutableDateTime27));
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2773");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        java.lang.String str15 = instant13.toString();
        org.joda.time.Instant instant18 = instant13.withDurationAdded((-110L), (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTime();
        boolean boolean21 = instant18.isBefore((-60514214976386L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime19", (instant18.compareTo(mutableDateTime19) == 0) == instant18.equals(mutableDateTime19));
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2774");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        org.joda.time.Instant instant12 = instant6.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.millisOfDay();
        org.joda.time.DurationField durationField19 = gJChronology15.halfdays();
        org.joda.time.DurationField durationField20 = gJChronology15.millis();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology23 = gJChronology15.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology15.halfdayOfDay();
        org.joda.time.DurationField durationField26 = gJChronology15.centuries();
        org.joda.time.DurationField durationField27 = gJChronology15.days();
        org.joda.time.DurationField durationField28 = gJChronology15.weeks();
        org.joda.time.MutableDateTime mutableDateTime29 = instant6.toMutableDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DurationField durationField30 = gJChronology15.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2775");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        java.util.Date date6 = instant5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        int int11 = dateTimeZone8.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField13 = julianChronology12.centuries();
        boolean boolean14 = instant5.equals((java.lang.Object) durationField13);
        java.lang.String str15 = instant5.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        org.joda.time.MutableDateTime mutableDateTime18 = instant5.toMutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant5.minus(readableDuration19);
        long long21 = instant5.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and instant5", (mutableDateTime18.compareTo(instant5) == 0) == mutableDateTime18.equals(instant5));
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2776");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField16 = julianChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology13.year();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology13.halfdayOfDay();
        org.joda.time.Chronology chronology20 = julianChronology13.withUTC();
        org.joda.time.DateTime dateTime21 = instant9.toDateTime(chronology20);
        org.joda.time.Instant instant22 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology37.getZone();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, (org.joda.time.ReadableInstant) instant43);
        java.lang.String str45 = instant43.toString();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.Chronology chronology49 = gJChronology48.withUTC();
        java.lang.String str50 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.dayOfWeek();
        org.joda.time.Instant instant54 = gJChronology48.getGregorianCutover();
        boolean boolean55 = instant43.equals((java.lang.Object) gJChronology48);
        boolean boolean56 = instant34.isAfter((org.joda.time.ReadableInstant) instant43);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant59 = instant43.withDurationAdded(readableDuration57, (int) (byte) 1);
        boolean boolean61 = instant59.isEqual(0L);
        long long62 = instant59.getMillis();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64);
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology65.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology65.getZone();
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69, (org.joda.time.ReadableInstant) instant71);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology72.clockhourOfHalfday();
        org.joda.time.Chronology chronology74 = gJChronology72.withUTC();
        org.joda.time.Instant instant75 = gJChronology72.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Instant instant77 = instant75.minus(readableDuration76);
        org.joda.time.DateTimeZone dateTimeZone78 = instant75.getZone();
        boolean boolean79 = instant59.isAfter((org.joda.time.ReadableInstant) instant75);
        boolean boolean80 = instant9.equals((java.lang.Object) instant59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant9", (dateTime21.compareTo(instant9) == 0) == dateTime21.equals(instant9));
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2777");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.Instant instant28 = instant23.minus((-435599901L));
        boolean boolean29 = instant28.isBeforeNow();
        org.joda.time.Instant instant31 = instant28.minus((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology40 = julianChronology35.withZone(dateTimeZone39);
        org.joda.time.DurationField durationField41 = julianChronology35.days();
        int int42 = julianChronology35.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone43 = julianChronology35.getZone();
        org.joda.time.MutableDateTime mutableDateTime44 = instant28.toMutableDateTime((org.joda.time.Chronology) julianChronology35);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology35.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime44", (instant28.compareTo(mutableDateTime44) == 0) == instant28.equals(mutableDateTime44));
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2778");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant14 = instant12.withMillis(52L);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        boolean boolean16 = instant15.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime17 = instant15.toMutableDateTime();
        org.joda.time.DateTime dateTime18 = instant15.toDateTime();
        int int19 = instant12.compareTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant22 = instant12.withDurationAdded((-60514215303803L), 16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime17", (instant15.compareTo(mutableDateTime17) == 0) == instant15.equals(mutableDateTime17));
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2779");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.eras();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.Chronology chronology9 = julianChronology3.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField11 = julianChronology3.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField11, and durationField5", !(durationField5.compareTo(durationField11) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField11.compareTo(durationField5))));
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2780");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Chronology chronology13 = gJChronology8.withZone(dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getName((long) (byte) 10);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean19 = gJChronology2.equals((java.lang.Object) timeZone16);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology2.getZone();
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        java.lang.String str29 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.dayOfWeek();
        org.joda.time.Instant instant33 = gJChronology27.getGregorianCutover();
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.Instant instant36 = instant33.minus((-35999900L));
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.clockhourOfDay();
        org.joda.time.Chronology chronology45 = gJChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology40.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology40.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology40.clockhourOfHalfday();
        boolean boolean49 = instant36.equals((java.lang.Object) dateTimeField48);
        boolean boolean50 = dateTimeZone21.equals((java.lang.Object) boolean49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and mutableDateTime37", (instant36.compareTo(mutableDateTime37) == 0) == instant36.equals(mutableDateTime37));
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2781");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.Instant instant28 = instant23.minus((-435599901L));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DurationField durationField33 = gJChronology31.millis();
        org.joda.time.Chronology chronology34 = gJChronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        boolean boolean40 = julianChronology38.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology41 = julianChronology38.withUTC();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology43 = julianChronology38.withZone(dateTimeZone42);
        java.lang.String str44 = dateTimeZone42.getID();
        boolean boolean45 = gJChronology31.equals((java.lang.Object) str44);
        org.joda.time.DurationField durationField46 = gJChronology31.seconds();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology31.weekyear();
        org.joda.time.DurationField durationField48 = gJChronology31.weeks();
        org.joda.time.Chronology chronology49 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology31.weekyearOfCentury();
        boolean boolean51 = instant28.equals((java.lang.Object) dateTimeField50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.Chronology chronology56 = gJChronology54.withUTC();
        org.joda.time.DurationField durationField57 = gJChronology54.months();
        org.joda.time.DurationField durationField58 = gJChronology54.weeks();
        org.joda.time.Instant instant59 = gJChronology54.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTime();
        int int61 = instant28.compareTo((org.joda.time.ReadableInstant) instant59);
        org.joda.time.MutableDateTime mutableDateTime62 = instant28.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant59 and mutableDateTime60", (instant59.compareTo(mutableDateTime60) == 0) == instant59.equals(mutableDateTime60));
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2782");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((-62159565599948L));
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.minus(readableDuration17);
        org.joda.time.Instant instant21 = instant18.withDurationAdded((-12219292800000L), 0);
        boolean boolean23 = instant18.isEqual(35L);
        boolean boolean24 = instant9.isEqual((org.joda.time.ReadableInstant) instant18);
        org.joda.time.MutableDateTime mutableDateTime25 = instant9.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant9);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime25", (instant9.compareTo(mutableDateTime25) == 0) == instant9.equals(mutableDateTime25));
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2783");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.DateTime dateTime5 = instant4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        long long10 = dateTimeZone6.convertLocalToUTC(1764000071L, false, (-331798418L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime5", (instant1.compareTo(dateTime5) == 0) == instant1.equals(dateTime5));
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2784");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.year();
        org.joda.time.DurationField durationField8 = gJChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Chronology chronology16 = gJChronology11.withZone(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getName((long) (byte) 10);
        long long21 = dateTimeZone14.convertLocalToUTC((-35999900L), false);
        int int23 = dateTimeZone14.getOffsetFromLocal((long) 278);
        boolean boolean25 = dateTimeZone14.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.Instant instant32 = gJChronology28.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.minus(readableDuration33);
        org.joda.time.Instant instant37 = instant34.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant34.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.Chronology chronology43 = gJChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology42.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology42.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology42.monthOfYear();
        boolean boolean50 = instant34.equals((java.lang.Object) dateTimeField49);
        org.joda.time.Instant instant52 = instant34.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = instant52.isSupported(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant52.isSupported(dateTimeFieldType55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = instant52.toString(dateTimeFormatter57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) instant52);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.chrono.JulianChronology julianChronology63 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone61);
        org.joda.time.DurationField durationField64 = julianChronology63.weeks();
        org.joda.time.DurationField durationField65 = julianChronology63.millis();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology63.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology63.yearOfCentury();
        int int69 = instant52.get(dateTimeField68);
        org.joda.time.DateTime dateTime70 = instant52.toDateTime();
        java.util.Date date71 = dateTime70.toDate();
        boolean boolean72 = gJChronology2.equals((java.lang.Object) date71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant52 and dateTime70", (instant52.compareTo(dateTime70) == 0) == instant52.equals(dateTime70));
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2785");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        org.joda.time.Instant instant16 = instant13.plus(35L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.Instant instant31 = instant25.toInstant();
        boolean boolean33 = instant31.isBefore((long) ' ');
        boolean boolean34 = instant16.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = instant16.getZone();
        long long36 = instant16.getMillis();
        org.joda.time.MutableDateTime mutableDateTime37 = instant16.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        java.lang.String str42 = gJChronology40.toString();
        org.joda.time.DurationField durationField43 = gJChronology40.eras();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.era();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str52 = dateTimeZone51.getID();
        org.joda.time.Chronology chronology53 = gJChronology48.withZone(dateTimeZone51);
        long long56 = dateTimeZone51.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str58 = dateTimeZone51.getName((long) (short) -1);
        org.joda.time.Chronology chronology59 = gJChronology40.withZone(dateTimeZone51);
        boolean boolean60 = mutableDateTime37.equals((java.lang.Object) dateTimeZone51);
        java.util.TimeZone timeZone61 = dateTimeZone51.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime37", (instant16.compareTo(mutableDateTime37) == 0) == instant16.equals(mutableDateTime37));
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2786");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.seconds();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology12 = julianChronology3.withZone(dateTimeZone11);
        int int14 = dateTimeZone11.getOffsetFromLocal(6400L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant23);
        java.lang.String str25 = instant23.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.Instant instant32 = gJChronology28.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.minus(readableDuration33);
        org.joda.time.Instant instant37 = instant34.withDurationAdded((-12219292800000L), 0);
        int int38 = instant23.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant23.minus(readableDuration39);
        java.util.Date date41 = instant23.toDate();
        boolean boolean43 = instant23.isBefore((-62112218399999L));
        org.joda.time.Instant instant44 = instant23.toInstant();
        int int45 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant47 = instant44.withMillis((-16883395099642550L));
        org.joda.time.DateTime dateTime48 = instant44.toDateTime();
        org.joda.time.Instant instant50 = instant44.withMillis((-4235995058188048L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant44 and dateTime48", (instant44.compareTo(dateTime48) == 0) == instant44.equals(dateTime48));
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2787");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        long long14 = instant13.getMillis();
        org.joda.time.MutableDateTime mutableDateTime15 = instant13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) ' ');
        long long24 = dateTimeZone19.convertLocalToUTC(100L, true);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = instant33.getZone();
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant33);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = instant33.isSupported(dateTimeFieldType38);
        int int40 = instant13.compareTo((org.joda.time.ReadableInstant) instant33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime15", (instant13.compareTo(mutableDateTime15) == 0) == instant13.equals(mutableDateTime15));
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2788");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getName((long) (byte) 10);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long26 = dateTimeZone17.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean27 = instant6.equals((java.lang.Object) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime28 = instant6.toMutableDateTimeISO();
        long long29 = instant6.getMillis();
        org.joda.time.Instant instant31 = instant6.minus((-35039992L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) (-1));
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField37 = gJChronology36.hours();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfSecond();
        org.joda.time.DateTime dateTime39 = instant31.toDateTime((org.joda.time.Chronology) gJChronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2789");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        boolean boolean6 = instant5.isEqualNow();
        org.joda.time.Instant instant8 = instant5.plus(31799999L);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-126000001L), 360000000);
        java.util.Date date12 = instant11.toDate();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        org.joda.time.DurationField durationField17 = gJChronology15.millis();
        long long21 = gJChronology15.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField22 = gJChronology15.millis();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology15.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = gJChronology15.months();
        boolean boolean26 = instant11.equals((java.lang.Object) gJChronology15);
        boolean boolean27 = instant11.isBeforeNow();
        org.joda.time.DateTime dateTime28 = instant11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        boolean boolean34 = julianChronology32.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology32.era();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology32.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology32.era();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology32.year();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology32.clockhourOfDay();
        org.joda.time.DurationField durationField41 = julianChronology32.millis();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology32.minuteOfHour();
        int int45 = instant11.get(dateTimeField44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField17 and durationField41", (durationField17.compareTo(durationField41) == 0) == durationField17.equals(durationField41));
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2790");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.Instant instant30 = instant26.withMillis(36000001L);
        boolean boolean32 = instant26.isAfter((long) (-1));
        org.joda.time.Instant instant33 = instant26.toInstant();
        org.joda.time.MutableDateTime mutableDateTime34 = instant26.toMutableDateTime();
        org.joda.time.Instant instant35 = instant26.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and mutableDateTime34", (instant35.compareTo(mutableDateTime34) == 0) == instant35.equals(mutableDateTime34));
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2791");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        int int8 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField11 = gJChronology2.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField11, and durationField5", !(durationField5.compareTo(durationField11) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField11.compareTo(durationField5))));
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2792");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology22 = gJChronology14.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology14.minutes();
        org.joda.time.DurationField durationField24 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField25 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField26 = gJChronology14.weeks();
        boolean boolean27 = instant8.equals((java.lang.Object) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.dayOfWeek();
        org.joda.time.Chronology chronology33 = gJChronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology36 = chronology33.withZone(dateTimeZone35);
        java.lang.String str37 = dateTimeZone35.getID();
        java.lang.String str39 = dateTimeZone35.getName((-110L));
        org.joda.time.MutableDateTime mutableDateTime40 = instant8.toMutableDateTime(dateTimeZone35);
        long long44 = dateTimeZone35.convertLocalToUTC((-52L), true, (long) 1200);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime11", (instant8.compareTo(mutableDateTime11) == 0) == instant8.equals(mutableDateTime11));
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2793");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant32 = instant2.plus((-62158787999900L));
        org.joda.time.DateTime dateTime33 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        long long36 = dateTimeZone34.previousTransition((long) 349200000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime33", (instant0.compareTo(dateTime33) == 0) == instant0.equals(dateTime33));
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2794");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        boolean boolean74 = instant19.isBefore(4L);
        org.joda.time.Instant instant77 = instant19.withDurationAdded((long) 1200, 69);
        long long78 = instant19.getMillis();
        org.joda.time.ReadableInstant readableInstant79 = null;
        boolean boolean80 = instant19.isEqual(readableInstant79);
        org.joda.time.Instant instant82 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone83 = instant82.getZone();
        org.joda.time.DateTime dateTime84 = instant82.toDateTime();
        long long85 = instant82.getMillis();
        org.joda.time.ReadableInstant readableInstant86 = null;
        boolean boolean87 = instant82.isBefore(readableInstant86);
        org.joda.time.Chronology chronology88 = instant82.getChronology();
        org.joda.time.DateTimeZone dateTimeZone89 = instant82.getZone();
        org.joda.time.MutableDateTime mutableDateTime90 = instant19.toMutableDateTime(dateTimeZone89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant46 and dateTime84", (instant46.compareTo(dateTime84) == 0) == instant46.equals(dateTime84));
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2795");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField37 = gJChronology2.years();
        org.joda.time.Chronology chronology38 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.Chronology chronology41 = gJChronology2.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology2.getZone();
        org.joda.time.DurationField durationField43 = gJChronology2.months();
        org.joda.time.DurationField durationField44 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology2.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField37 and durationField44", (durationField37.compareTo(durationField44) == 0) == durationField37.equals(durationField44));
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2796");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        long long33 = instant17.getMillis();
        long long34 = instant17.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant17.withDurationAdded(readableDuration35, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant17.plus(readableDuration38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant17.minus(readableDuration40);
        org.joda.time.Instant instant43 = instant41.plus((-36000001L));
        boolean boolean44 = instant7.isBefore((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant46 = instant7.plus(43129898596L);
        org.joda.time.MutableDateTime mutableDateTime47 = instant7.toMutableDateTime();
        org.joda.time.Instant instant49 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant49.plus(readableDuration50);
        org.joda.time.Instant instant53 = instant49.minus((long) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.dayOfYear();
        org.joda.time.Instant instant60 = gJChronology56.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime63 = instant60.toMutableDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = instant60.toDateTime();
        java.util.Date date65 = instant60.toDate();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67);
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology68.getZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str72 = dateTimeZone71.getID();
        org.joda.time.Chronology chronology73 = gJChronology68.withZone(dateTimeZone71);
        java.lang.String str75 = dateTimeZone71.getName((long) (byte) 10);
        java.util.TimeZone timeZone76 = dateTimeZone71.toTimeZone();
        long long80 = dateTimeZone71.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean81 = instant60.equals((java.lang.Object) (byte) 10);
        boolean boolean82 = instant53.isBefore((org.joda.time.ReadableInstant) instant60);
        org.joda.time.Instant instant85 = instant60.withDurationAdded((long) (byte) 1, (int) (byte) 0);
        boolean boolean86 = instant7.isBefore((org.joda.time.ReadableInstant) instant85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime47", (instant7.compareTo(mutableDateTime47) == 0) == instant7.equals(mutableDateTime47));
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2797");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant43 = instant40.minus(0L);
        org.joda.time.Chronology chronology44 = instant40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, (org.joda.time.ReadableInstant) instant53);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.DurationField durationField56 = gJChronology54.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.weekyear();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology60.getZone();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology60.dayOfYear();
        org.joda.time.Instant instant64 = gJChronology60.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime67 = instant64.toMutableDateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = instant64.toDateTime();
        java.util.Date date69 = instant64.toDate();
        boolean boolean70 = instant64.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime71 = instant64.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, readableInstant73);
        java.lang.String str75 = gJChronology74.toString();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.dayOfYear();
        int int77 = instant64.get(dateTimeField76);
        boolean boolean78 = gJChronology54.equals((java.lang.Object) instant64);
        org.joda.time.Instant instant79 = instant64.toInstant();
        boolean boolean80 = instant40.isBefore((org.joda.time.ReadableInstant) instant64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant64 and mutableDateTime67", (instant64.compareTo(mutableDateTime67) == 0) == instant64.equals(mutableDateTime67));
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2798");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        org.joda.time.DurationField durationField7 = julianChronology3.eras();
        org.joda.time.DateTimeZone dateTimeZone8 = julianChronology3.getZone();
        java.lang.String str9 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfMonth();
        org.joda.time.DurationField durationField11 = julianChronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField11, and durationField7", !(durationField7.compareTo(durationField11) == 0) || (Math.signum(durationField7.compareTo(durationField7)) == Math.signum(durationField11.compareTo(durationField7))));
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2799");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField8 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.millisOfDay();
        org.joda.time.Instant instant10 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField15 = julianChronology14.centuries();
        org.joda.time.DurationField durationField16 = julianChronology14.weeks();
        org.joda.time.DurationField durationField17 = julianChronology14.years();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.yearOfEra();
        org.joda.time.DurationField durationField19 = julianChronology14.days();
        org.joda.time.Chronology chronology20 = julianChronology14.withUTC();
        org.joda.time.MutableDateTime mutableDateTime21 = instant10.toMutableDateTime(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField16", (durationField8.compareTo(durationField16) == 0) == durationField8.equals(durationField16));
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2800");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.plus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean40 = instant35.isEqual(35L);
        boolean boolean41 = instant21.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean42 = instant9.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology45.getZone();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant51);
        java.lang.String str53 = instant51.toString();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.dayOfYear();
        org.joda.time.Instant instant60 = gJChronology56.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant60.minus(readableDuration61);
        org.joda.time.Instant instant65 = instant62.withDurationAdded((-12219292800000L), 0);
        int int66 = instant51.compareTo((org.joda.time.ReadableInstant) instant62);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant51.minus(readableDuration67);
        java.util.Date date69 = instant51.toDate();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology72.getZone();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.dayOfYear();
        org.joda.time.Instant instant76 = gJChronology72.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant76.minus(readableDuration77);
        org.joda.time.Instant instant81 = instant78.withDurationAdded((-12219292800000L), 0);
        boolean boolean82 = instant51.isEqual((org.joda.time.ReadableInstant) instant78);
        org.joda.time.DateTime dateTime83 = instant78.toDateTime();
        boolean boolean84 = instant35.isAfter((org.joda.time.ReadableInstant) instant78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime83", (instant35.compareTo(dateTime83) == 0) == instant35.equals(dateTime83));
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2801");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.Chronology chronology10 = gJChronology5.withZone(dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology13.dayOfMonth();
        org.joda.time.DurationField durationField16 = julianChronology13.seconds();
        java.lang.String str17 = julianChronology13.toString();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) julianChronology13);
        boolean boolean19 = dateTime18.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2802");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.Chronology chronology26 = instant8.getChronology();
        boolean boolean27 = instant8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology31.getZone();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, (org.joda.time.ReadableInstant) instant37);
        java.lang.String str39 = instant37.toString();
        int int40 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((java.lang.Object) instant37);
        boolean boolean43 = instant37.isAfter((-107999990L));
        boolean boolean45 = instant37.isAfter((-12219292799965L));
        boolean boolean46 = instant8.isAfter((org.joda.time.ReadableInstant) instant37);
        long long47 = instant8.getMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology50.getZone();
        java.lang.String str55 = dateTimeZone54.getID();
        long long57 = dateTimeZone54.nextTransition((long) 10);
        long long59 = dateTimeZone54.nextTransition((-35999900L));
        java.lang.String str61 = dateTimeZone54.getName((-62158787999900L));
        java.util.TimeZone timeZone62 = dateTimeZone54.toTimeZone();
        org.joda.time.DateTime dateTime63 = instant8.toDateTime(dateTimeZone54);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = instant65.toString(dateTimeFormatter66);
        java.lang.String str68 = instant65.toString();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant71 = instant65.withDurationAdded(readableDuration69, (int) (short) 0);
        boolean boolean72 = dateTime63.isBefore((org.joda.time.ReadableInstant) instant65);
        org.joda.time.DateTimeZone dateTimeZone73 = instant65.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime63", (instant8.compareTo(dateTime63) == 0) == instant8.equals(dateTime63));
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2803");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        boolean boolean2 = mutableDateTime1.isEqualNow();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant4.withDurationAdded(readableDuration5, 0);
        boolean boolean8 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant4);
        long long9 = instant4.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2804");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField10 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField4, and durationField6", !(durationField11.compareTo(durationField4) == 0) || (Math.signum(durationField11.compareTo(durationField6)) == Math.signum(durationField4.compareTo(durationField6))));
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2805");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.Instant instant11 = instant9.minus((-35999991L));
        java.lang.String str12 = instant9.toString();
        org.joda.time.DateTime dateTime13 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant9.withDurationAdded(readableDuration14, (int) ' ');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime13", (instant16.compareTo(dateTime13) == 0) == instant16.equals(dateTime13));
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2806");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField4, and durationField5", !(durationField8.compareTo(durationField4) == 0) || (Math.signum(durationField8.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2807");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        boolean boolean36 = instant33.isEqualNow();
        boolean boolean37 = instant8.isEqual((org.joda.time.ReadableInstant) instant33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        java.lang.String str42 = gJChronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.dayOfWeek();
        org.joda.time.Instant instant46 = gJChronology40.getGregorianCutover();
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.Instant instant48 = instant46.toInstant();
        boolean boolean49 = instant8.equals((java.lang.Object) instant48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.dayOfYear();
        org.joda.time.Instant instant56 = gJChronology52.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant56.minus(readableDuration57);
        java.lang.String str59 = instant56.toString();
        org.joda.time.Instant instant61 = instant56.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone62 = instant56.getZone();
        org.joda.time.DateTimeZone dateTimeZone63 = instant56.getZone();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant66 = instant56.withDurationAdded(readableDuration64, (int) '#');
        boolean boolean67 = instant48.isBefore((org.joda.time.ReadableInstant) instant56);
        boolean boolean69 = instant56.isEqual((-35999890L));
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology72.getZone();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.dayOfYear();
        org.joda.time.Instant instant76 = gJChronology72.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant76.minus(readableDuration77);
        boolean boolean79 = instant78.isAfterNow();
        boolean boolean80 = instant78.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone81 = instant78.getZone();
        org.joda.time.Instant instant84 = instant78.withDurationAdded(32409730L, 3600000);
        boolean boolean85 = instant56.isAfter((org.joda.time.ReadableInstant) instant78);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.MutableDateTime mutableDateTime87 = instant56.toMutableDateTime(dateTimeZone86);
        org.joda.time.Instant instant89 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.Instant instant91 = instant89.plus(readableDuration90);
        org.joda.time.Instant instant93 = instant89.minus((long) 10);
        org.joda.time.Chronology chronology94 = null;
        org.joda.time.DateTime dateTime95 = instant89.toDateTime(chronology94);
        int int96 = mutableDateTime87.compareTo((org.joda.time.ReadableInstant) instant89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant89 and dateTime95", (instant89.compareTo(dateTime95) == 0) == instant89.equals(dateTime95));
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2808");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.hourOfDay();
        long long24 = julianChronology3.add((long) (short) 100, (long) (short) 100, (int) (byte) 0);
        int int25 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField26 = julianChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone27 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.Instant instant34 = gJChronology30.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.minus(readableDuration35);
        java.lang.String str37 = instant34.toString();
        org.joda.time.Instant instant39 = instant34.minus((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = instant34.toString(dateTimeFormatter40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        org.joda.time.Instant instant53 = instant50.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant50.plus(readableDuration54);
        org.joda.time.DateTime dateTime56 = instant50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        org.joda.time.Chronology chronology60 = gJChronology59.withUTC();
        java.lang.String str61 = gJChronology59.toString();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.monthOfYear();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.dayOfWeek();
        org.joda.time.Instant instant65 = gJChronology59.getGregorianCutover();
        int int66 = dateTime56.compareTo((org.joda.time.ReadableInstant) instant65);
        boolean boolean67 = instant34.isAfter((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean68 = julianChronology3.equals((java.lang.Object) boolean67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and dateTime56", (instant34.compareTo(dateTime56) == 0) == instant34.equals(dateTime56));
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2809");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        boolean boolean31 = julianChronology29.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology32 = julianChronology29.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology34 = julianChronology29.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = julianChronology29.days();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology29.millisOfSecond();
        java.lang.String str37 = julianChronology29.toString();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology29.hourOfHalfday();
        int int39 = instant8.get(dateTimeField38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology42.getZone();
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, (org.joda.time.ReadableInstant) instant48);
        java.lang.String str50 = instant48.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.dayOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant57.minus(readableDuration58);
        org.joda.time.Instant instant62 = instant59.withDurationAdded((-12219292800000L), 0);
        int int63 = instant48.compareTo((org.joda.time.ReadableInstant) instant59);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant48.minus(readableDuration64);
        java.util.Date date66 = instant48.toDate();
        boolean boolean68 = instant48.isBefore((-62112218399999L));
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology71 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = julianChronology71.secondOfMinute();
        long long76 = julianChronology71.add((-35999900L), 0L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField77 = julianChronology71.dayOfWeek();
        int int78 = instant48.get(dateTimeField77);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Instant instant80 = instant48.plus(readableDuration79);
        org.joda.time.Instant instant82 = instant48.withMillis((-59011667999904L));
        int int83 = instant8.compareTo((org.joda.time.ReadableInstant) instant82);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone85);
        org.joda.time.chrono.JulianChronology julianChronology87 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone85);
        org.joda.time.DurationField durationField88 = julianChronology87.weeks();
        org.joda.time.DateTimeZone dateTimeZone89 = julianChronology87.getZone();
        org.joda.time.DateTimeZone dateTimeZone90 = julianChronology87.getZone();
        org.joda.time.Chronology chronology91 = julianChronology87.withUTC();
        org.joda.time.DateTimeField dateTimeField92 = julianChronology87.clockhourOfHalfday();
        org.joda.time.DateTime dateTime93 = instant82.toDateTime((org.joda.time.Chronology) julianChronology87);
        org.joda.time.DurationField durationField94 = julianChronology87.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant82 and dateTime93", (instant82.compareTo(dateTime93) == 0) == instant82.equals(dateTime93));
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2810");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant33.withDurationAdded(readableDuration34, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = instant33.toString(dateTimeFormatter37);
        org.joda.time.Instant instant41 = instant33.withDurationAdded(0L, 1582);
        long long42 = instant41.getMillis();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant45 = instant41.withDurationAdded(readableDuration43, (int) (short) 100);
        boolean boolean46 = instant8.isAfter((org.joda.time.ReadableInstant) instant41);
        java.lang.String str47 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = instant8.toDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology52.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology56.getZone();
        org.joda.time.Chronology chronology61 = julianChronology52.withZone(dateTimeZone60);
        org.joda.time.DurationField durationField62 = julianChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology52.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime49.toMutableDateTime((org.joda.time.Chronology) julianChronology52);
        boolean boolean65 = dateTime49.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime64", (instant8.compareTo(mutableDateTime64) == 0) == instant8.equals(mutableDateTime64));
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2811");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.era();
        long long13 = gJChronology2.add((-7467298001999790L), 151200000L, 36000000);
        org.joda.time.DurationField durationField14 = gJChronology2.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField14, and durationField8", !(durationField8.compareTo(durationField14) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField14.compareTo(durationField8))));
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2812");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.monthOfYear();
        org.joda.time.DurationField durationField12 = julianChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone14.getName((-1L), locale17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone14.isLocalDateTimeGap(localDateTime19);
        long long23 = dateTimeZone14.adjustOffset((long) (byte) -1, true);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, 36000001L, 1);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.Chronology chronology29 = julianChronology3.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        java.lang.String str39 = instant36.toString();
        org.joda.time.Instant instant41 = instant36.minus((long) 36000000);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        boolean boolean44 = instant41.isBefore(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = instant41.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime dateTime47 = instant41.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = instant41.toDateTime(dateTimeZone50);
        int int52 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTime dateTime53 = instant41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology57.getZone();
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, (org.joda.time.ReadableInstant) instant63);
        java.lang.String str65 = instant63.toString();
        int int66 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((java.lang.Object) instant63);
        org.joda.time.Instant instant68 = new org.joda.time.Instant((java.lang.Object) instant67);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((java.lang.Object) instant68);
        org.joda.time.Instant instant71 = instant68.minus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone72 = instant71.getZone();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant71.minus(readableDuration73);
        boolean boolean75 = dateTime53.isBefore((org.joda.time.ReadableInstant) instant74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and dateTime47", (instant41.compareTo(dateTime47) == 0) == instant41.equals(dateTime47));
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2813");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        boolean boolean3 = instant0.isBeforeNow();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 0);
        java.util.Date date9 = instant5.toDate();
        long long10 = instant5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        java.lang.String str21 = instant19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        int int34 = instant19.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.dayOfWeek();
        org.joda.time.DurationField durationField40 = gJChronology37.years();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology37.weekyear();
        boolean boolean42 = instant19.equals((java.lang.Object) dateTimeField41);
        org.joda.time.Instant instant44 = instant19.withMillis(32L);
        boolean boolean45 = instant5.isEqual((org.joda.time.ReadableInstant) instant44);
        boolean boolean46 = instant0.equals((java.lang.Object) instant5);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant5.minus(readableDuration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant5.withDurationAdded(readableDuration49, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField56 = julianChronology55.weeks();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology55.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = julianChronology55.add(readablePeriod59, 4L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology55.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.chrono.JulianChronology julianChronology68 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone66);
        boolean boolean70 = julianChronology68.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology71 = julianChronology68.withUTC();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology73 = julianChronology68.withZone(dateTimeZone72);
        long long75 = dateTimeZone72.convertUTCToLocal((-107999990L));
        org.joda.time.Chronology chronology76 = julianChronology55.withZone(dateTimeZone72);
        org.joda.time.MutableDateTime mutableDateTime77 = instant51.toMutableDateTime(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        org.joda.time.chrono.JulianChronology julianChronology81 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone79);
        boolean boolean83 = julianChronology81.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField84 = julianChronology81.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology81.secondOfDay();
        long long89 = julianChronology81.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeField dateTimeField90 = julianChronology81.millisOfSecond();
        org.joda.time.DurationField durationField91 = julianChronology81.seconds();
        org.joda.time.DateTime dateTime92 = instant51.toDateTime((org.joda.time.Chronology) julianChronology81);
        java.lang.String str93 = instant51.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant51 and dateTime92", (instant51.compareTo(dateTime92) == 0) == instant51.equals(dateTime92));
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2814");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.Chronology chronology26 = gJChronology21.withZone(dateTimeZone24);
        long long29 = dateTimeZone24.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str31 = dateTimeZone24.getName((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str34 = dateTimeZone33.getID();
        boolean boolean35 = dateTimeZone33.isFixed();
        int int37 = dateTimeZone33.getOffsetFromLocal((-12219292800000L));
        java.lang.String str38 = dateTimeZone33.getID();
        boolean boolean39 = dateTimeZone24.equals((java.lang.Object) str38);
        org.joda.time.Chronology chronology40 = gJChronology2.withZone(dateTimeZone24);
        long long43 = dateTimeZone24.convertLocalToUTC((-60514215291895L), true);
        long long47 = dateTimeZone24.convertLocalToUTC((-62111872799990L), true, (-60514215168419L));
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.Instant instant54 = gJChronology50.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone55 = instant54.getZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField60 = julianChronology59.centuries();
        java.lang.String str61 = julianChronology59.toString();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology59.yearOfEra();
        org.joda.time.DurationField durationField63 = julianChronology59.months();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology66 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = julianChronology66.minuteOfDay();
        boolean boolean68 = julianChronology59.equals((java.lang.Object) dateTimeField67);
        org.joda.time.DateTimeField dateTimeField69 = julianChronology59.secondOfMinute();
        int int70 = julianChronology59.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone72);
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone72);
        boolean boolean76 = julianChronology74.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField77 = julianChronology74.months();
        boolean boolean78 = julianChronology59.equals((java.lang.Object) julianChronology74);
        org.joda.time.DateTimeField dateTimeField79 = julianChronology59.dayOfYear();
        org.joda.time.DateTime dateTime80 = instant54.toDateTime((org.joda.time.Chronology) julianChronology59);
        org.joda.time.DateTimeZone dateTimeZone81 = instant54.getZone();
        org.joda.time.MutableDateTime mutableDateTime82 = instant54.toMutableDateTime();
        int int83 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) instant54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime80 and mutableDateTime82", (dateTime80.compareTo(mutableDateTime82) == 0) == dateTime80.equals(mutableDateTime82));
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2815");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = instant6.toMutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology33 = instant6.getChronology();
        org.joda.time.Chronology chronology34 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime32", (instant6.compareTo(mutableDateTime32) == 0) == instant6.equals(mutableDateTime32));
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2816");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        org.joda.time.Chronology chronology20 = instant6.getChronology();
        org.joda.time.Instant instant23 = instant6.withDurationAdded(72320035L, 15);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = instant23.isAfter(readableInstant24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2817");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.hourOfDay();
        java.lang.String str13 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        java.lang.String str19 = dateTimeZone15.getNameKey(10L);
        java.lang.String str21 = dateTimeZone15.getName((long) (byte) -1);
        org.joda.time.Chronology chronology22 = julianChronology3.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField9, and durationField10", !(durationField23.compareTo(durationField9) == 0) || (Math.signum(durationField23.compareTo(durationField10)) == Math.signum(durationField9.compareTo(durationField10))));
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2818");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean1 = instant0.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant4.plus(readableDuration5);
        org.joda.time.Instant instant8 = instant4.minus((long) 10);
        java.util.Date date9 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int14 = dateTimeZone11.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField16 = julianChronology15.centuries();
        boolean boolean17 = instant8.equals((java.lang.Object) durationField16);
        java.lang.String str18 = instant8.toString();
        boolean boolean19 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.dayOfYear();
        java.lang.String str25 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology22.getZone();
        int int29 = gJChronology22.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField30 = gJChronology22.halfdays();
        org.joda.time.DurationField durationField31 = gJChronology22.halfdays();
        org.joda.time.DurationField durationField32 = gJChronology22.months();
        org.joda.time.DateTime dateTime33 = instant8.toDateTime((org.joda.time.Chronology) gJChronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime2", (instant0.compareTo(mutableDateTime2) == 0) == instant0.equals(mutableDateTime2));
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = instant7.toDateTime();
        java.util.Date date12 = instant7.toDate();
        boolean boolean13 = instant7.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime14 = instant7.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant7.isSupported(dateTimeFieldType16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime11", (mutableDateTime10.compareTo(dateTime11) == 0) == mutableDateTime10.equals(dateTime11));
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2820");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = instant7.isSupported(dateTimeFieldType8);
        org.joda.time.Instant instant11 = instant7.withMillis((-60514215257464L));
        boolean boolean13 = instant7.isAfter((-179999601L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = instant24.getZone();
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.yearOfEra();
        org.joda.time.DurationField durationField29 = julianChronology27.centuries();
        org.joda.time.DateTime dateTime30 = instant7.toDateTime((org.joda.time.Chronology) julianChronology27);
        long long31 = instant7.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime30", (instant7.compareTo(dateTime30) == 0) == instant7.equals(dateTime30));
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2821");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = julianChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField9", (durationField6.compareTo(durationField9) == 0) == durationField6.equals(durationField9));
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2822");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        org.joda.time.DateTime dateTime12 = instant10.toDateTime();
        boolean boolean13 = julianChronology3.equals((java.lang.Object) instant10);
        org.joda.time.Instant instant16 = instant10.withDurationAdded(18684000000L, (int) (byte) 100);
        org.joda.time.Instant instant17 = instant10.toInstant();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(1L);
        java.lang.String str20 = instant19.toString();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.minus(readableDuration21);
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        boolean boolean24 = instant10.equals((java.lang.Object) instant22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant10", (dateTime12.compareTo(instant10) == 0) == dateTime12.equals(instant10));
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2823");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant25.toString(dateTimeFormatter26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant25.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) instant39);
        java.lang.String str41 = instant39.toString();
        int int42 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((java.lang.Object) instant39);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((java.lang.Object) instant43);
        java.util.Date date45 = instant44.toDate();
        org.joda.time.Instant instant47 = instant44.withMillis((long) (byte) 10);
        int int48 = instant29.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = instant29.isSupported(dateTimeFieldType49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant29.plus(readableDuration51);
        boolean boolean53 = instant29.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime54 = instant29.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.Chronology chronology58 = gJChronology57.withUTC();
        org.joda.time.DurationField durationField59 = gJChronology57.millis();
        long long63 = gJChronology57.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField64 = gJChronology57.millis();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology57.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology57.clockhourOfHalfday();
        org.joda.time.DurationField durationField67 = gJChronology57.months();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, readableInstant69);
        org.joda.time.DateTimeZone dateTimeZone71 = gJChronology70.getZone();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str74 = dateTimeZone73.getID();
        org.joda.time.Chronology chronology75 = gJChronology70.withZone(dateTimeZone73);
        long long78 = dateTimeZone73.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone79 = dateTimeZone73.toTimeZone();
        long long82 = dateTimeZone73.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology83 = gJChronology57.withZone(dateTimeZone73);
        org.joda.time.Instant instant84 = gJChronology57.getGregorianCutover();
        org.joda.time.DurationField durationField85 = gJChronology57.millis();
        org.joda.time.DurationField durationField86 = gJChronology57.minutes();
        org.joda.time.DateTime dateTime87 = mutableDateTime54.toDateTime((org.joda.time.Chronology) gJChronology57);
        java.lang.String str88 = dateTime87.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime54", (instant17.compareTo(mutableDateTime54) == 0) == instant17.equals(mutableDateTime54));
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2824");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.Chronology chronology26 = instant8.getChronology();
        boolean boolean27 = instant8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime34", (instant8.compareTo(mutableDateTime34) == 0) == instant8.equals(mutableDateTime34));
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2825");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.weeks();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfDay();
        int int12 = gJChronology2.getMinimumDaysInFirstWeek();
        long long16 = gJChronology2.add((long) '#', (long) 69, 10);
        int int17 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.dayOfYear();
        org.joda.time.Chronology chronology19 = gJChronology2.withUTC();
        org.joda.time.Instant instant20 = gJChronology2.getGregorianCutover();
        java.lang.String str21 = instant20.toString();
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone24.getName((-1L), locale27);
        long long30 = dateTimeZone24.previousTransition((long) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField35 = julianChronology34.weeks();
        org.joda.time.DurationField durationField36 = julianChronology34.millis();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology34.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        long long41 = julianChronology34.add(readablePeriod38, (long) 36000000, 4);
        boolean boolean42 = dateTimeZone24.equals((java.lang.Object) 36000000);
        boolean boolean43 = dateTimeZone24.isFixed();
        org.joda.time.Chronology chronology44 = chronology22.withZone(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField35", (durationField9.compareTo(durationField35) == 0) == durationField9.equals(durationField35));
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2826");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        int int35 = instant20.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant20.minus(readableDuration36);
        int int38 = instant8.compareTo((org.joda.time.ReadableInstant) instant20);
        java.lang.String str39 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology42.getZone();
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, (org.joda.time.ReadableInstant) instant48);
        java.lang.String str50 = instant48.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.dayOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant57.minus(readableDuration58);
        org.joda.time.Instant instant62 = instant59.withDurationAdded((-12219292800000L), 0);
        int int63 = instant48.compareTo((org.joda.time.ReadableInstant) instant59);
        long long64 = instant48.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = instant48.isSupported(dateTimeFieldType65);
        org.joda.time.MutableDateTime mutableDateTime67 = instant48.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime68 = instant48.toDateTimeISO();
        int int69 = instant20.compareTo((org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime67", (instant8.compareTo(mutableDateTime67) == 0) == instant8.equals(mutableDateTime67));
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2827");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant8.withDurationAdded(readableDuration27, 1);
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant30.withDurationAdded(readableDuration31, (-1));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DurationField durationField38 = gJChronology36.millis();
        long long42 = gJChronology36.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField43 = gJChronology36.millis();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology36.hourOfHalfday();
        org.joda.time.DurationField durationField45 = gJChronology36.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology36.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = instant33.toMutableDateTime((org.joda.time.Chronology) gJChronology36);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant52 = instant49.withDurationAdded(readableDuration50, 0);
        boolean boolean54 = instant52.isEqual((long) 1);
        boolean boolean55 = instant52.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = instant52.isEqual(readableInstant56);
        org.joda.time.MutableDateTime mutableDateTime58 = instant52.toMutableDateTimeISO();
        boolean boolean59 = instant33.isEqual((org.joda.time.ReadableInstant) instant52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime47", (instant33.compareTo(mutableDateTime47) == 0) == instant33.equals(mutableDateTime47));
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2828");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = julianChronology5.centuries();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology5.secondOfDay();
        org.joda.time.DurationField durationField8 = julianChronology5.eras();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology5.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField8", Math.signum(durationField6.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField6)));
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2829");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.Instant instant19 = gJChronology13.getGregorianCutover();
        boolean boolean20 = instant8.equals((java.lang.Object) gJChronology13);
        boolean boolean21 = instant8.isBeforeNow();
        org.joda.time.Instant instant24 = instant8.withDurationAdded(3129100L, 1970);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        org.joda.time.DurationField durationField29 = gJChronology27.millis();
        long long33 = gJChronology27.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology27.weekyearOfCentury();
        org.joda.time.DateTime dateTime36 = instant24.toDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology27.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime36", (instant24.compareTo(dateTime36) == 0) == instant24.equals(dateTime36));
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2830");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-12219292800000L), 0);
        boolean boolean14 = instant9.isEqual(35L);
        boolean boolean15 = instant0.isEqual((org.joda.time.ReadableInstant) instant9);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = instant9.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField22 = julianChronology21.weeks();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology21.getZone();
        org.joda.time.Chronology chronology25 = julianChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology21.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = julianChronology21.add(readablePeriod27, (-322983537587417045L), 19);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology21.era();
        int int32 = instant9.get(dateTimeField31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime17", (instant9.compareTo(dateTime17) == 0) == instant9.equals(dateTime17));
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2831");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.monthOfYear();
        org.joda.time.DurationField durationField12 = julianChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone14.getName((-1L), locale17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone14.isLocalDateTimeGap(localDateTime19);
        long long23 = dateTimeZone14.adjustOffset((long) (byte) -1, true);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, 36000001L, 1);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.Chronology chronology29 = julianChronology3.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        java.lang.String str39 = instant36.toString();
        org.joda.time.Instant instant41 = instant36.minus((long) 36000000);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        boolean boolean44 = instant41.isBefore(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = instant41.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime dateTime47 = instant41.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = instant41.toDateTime(dateTimeZone50);
        int int52 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology55.getZone();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.dayOfYear();
        org.joda.time.Instant instant59 = gJChronology55.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant61 = instant59.minus(readableDuration60);
        java.lang.String str62 = instant59.toString();
        org.joda.time.Instant instant64 = instant59.minus((long) 36000000);
        boolean boolean66 = instant64.isEqual((-119274517260204080L));
        boolean boolean67 = instant41.isEqual((org.joda.time.ReadableInstant) instant64);
        java.util.Date date68 = instant64.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and dateTime47", (instant41.compareTo(dateTime47) == 0) == instant41.equals(dateTime47));
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2832");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Chronology chronology11 = julianChronology2.withZone(dateTimeZone10);
        org.joda.time.DurationField durationField12 = julianChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        boolean boolean22 = julianChronology20.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology23 = julianChronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology25 = julianChronology20.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = julianChronology20.seconds();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology20.year();
        org.joda.time.DateTimeZone dateTimeZone29 = julianChronology20.getZone();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone29.isLocalDateTimeGap(localDateTime32);
        java.lang.String str35 = dateTimeZone29.getNameKey((long) 97);
        org.joda.time.Chronology chronology36 = julianChronology2.withZone(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField12 and durationField26", (durationField12.compareTo(durationField26) == 0) == durationField12.equals(durationField26));
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2833");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant17.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = instant19.isSupported(dateTimeFieldType21);
        int int23 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant19);
        long long24 = instant19.getMillis();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.secondOfDay();
        long long36 = julianChronology28.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeField dateTimeField37 = julianChronology28.year();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        boolean boolean42 = dateTimeZone40.isFixed();
        long long45 = dateTimeZone40.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.Chronology chronology47 = julianChronology28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime48 = instant19.toDateTime((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology28.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime20", (instant19.compareTo(dateTime20) == 0) == instant19.equals(dateTime20));
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyear();
        org.joda.time.Instant instant14 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        boolean boolean21 = julianChronology19.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField22 = julianChronology19.months();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone24.getName((-1L), locale27);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone24.isLocalDateTimeGap(localDateTime29);
        boolean boolean32 = dateTimeZone24.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology33 = julianChronology19.withZone(dateTimeZone24);
        int int35 = dateTimeZone24.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        boolean boolean38 = dateTimeZone24.isStandardOffset(52L);
        org.joda.time.MutableDateTime mutableDateTime39 = instant14.toMutableDateTime(dateTimeZone24);
        boolean boolean40 = mutableDateTime39.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime15", (instant14.compareTo(dateTime15) == 0) == instant14.equals(dateTime15));
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2835");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.hourOfDay();
        boolean boolean18 = julianChronology3.equals((java.lang.Object) gJChronology13);
        org.joda.time.DurationField durationField19 = julianChronology3.months();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.secondOfDay();
        org.joda.time.DurationField durationField21 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField4, and durationField5", !(durationField21.compareTo(durationField4) == 0) || (Math.signum(durationField21.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2836");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant18);
        org.joda.time.Instant instant21 = instant18.toInstant();
        java.util.Date date22 = instant18.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and instant18", (mutableDateTime19.compareTo(instant18) == 0) == mutableDateTime19.equals(instant18));
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2837");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant12);
        java.lang.String str14 = instant12.toString();
        int int15 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) instant12);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((java.lang.Object) instant16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) instant17);
        org.joda.time.Instant instant20 = instant17.minus((long) ' ');
        boolean boolean21 = instant0.isBefore((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Instant instant22 = instant0.toInstant();
        boolean boolean24 = instant22.isAfter(16010L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.Chronology chronology32 = gJChronology27.withZone(dateTimeZone30);
        long long35 = dateTimeZone30.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone36 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.Instant instant40 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant40.plus(readableDuration41);
        org.joda.time.Instant instant44 = instant42.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant44.isSupported(dateTimeFieldType46);
        int int48 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) instant44);
        java.lang.String str49 = instant44.toString();
        java.util.Date date50 = instant44.toDate();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.Chronology chronology54 = gJChronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.millisOfDay();
        org.joda.time.DurationField durationField57 = gJChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.hourOfHalfday();
        org.joda.time.DurationField durationField59 = gJChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology53.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology53.weekyear();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63);
        org.joda.time.Chronology chronology65 = gJChronology64.withUTC();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology64.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.millisOfDay();
        org.joda.time.DurationField durationField68 = gJChronology64.halfdays();
        org.joda.time.DurationField durationField69 = gJChronology64.millis();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology72 = gJChronology64.withZone(dateTimeZone71);
        org.joda.time.DurationField durationField73 = gJChronology64.minutes();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology64.halfdayOfDay();
        org.joda.time.DurationField durationField75 = gJChronology64.centuries();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology64.hourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology64.dayOfMonth();
        boolean boolean78 = gJChronology53.equals((java.lang.Object) dateTimeField77);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology53.centuryOfEra();
        boolean boolean80 = instant44.equals((java.lang.Object) gJChronology53);
        boolean boolean81 = instant22.isAfter((org.joda.time.ReadableInstant) instant44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime45", (instant2.compareTo(dateTime45) == 0) == instant2.equals(dateTime45));
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2838");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Instant instant4 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant4.plus(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        long long31 = instant15.getMillis();
        org.joda.time.Instant instant32 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = instant15.getZone();
        int int34 = instant6.compareTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant36 = instant6.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.plus(readableDuration37);
        long long39 = instant36.getMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(19, (int) (short) 0);
        java.lang.String str43 = dateTimeZone42.getID();
        org.joda.time.MutableDateTime mutableDateTime44 = instant36.toMutableDateTime(dateTimeZone42);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((java.lang.Object) mutableDateTime44);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) mutableDateTime44, (int) (short) 1);
        org.joda.time.DurationField durationField48 = gJChronology47.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and mutableDateTime44", (instant36.compareTo(mutableDateTime44) == 0) == instant36.equals(mutableDateTime44));
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2839");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        java.lang.String str11 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.yearOfEra();
        java.lang.String str15 = gJChronology9.toString();
        boolean boolean16 = instant1.equals((java.lang.Object) gJChronology9);
        org.joda.time.Chronology chronology17 = instant1.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = instant1.toString(dateTimeFormatter18);
        org.joda.time.DateTime dateTime20 = instant1.toDateTime();
        org.joda.time.DateTime dateTime21 = instant1.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime20", (instant1.compareTo(dateTime20) == 0) == instant1.equals(dateTime20));
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2840");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = instant7.toMutableDateTimeISO();
        boolean boolean11 = mutableDateTime9.isBefore(278L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2841");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        long long26 = instant8.getMillis();
        org.joda.time.Instant instant28 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant28.withDurationAdded(readableDuration29, 10);
        java.util.Date date32 = instant31.toDate();
        boolean boolean33 = instant8.isAfter((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant31.isSupported(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTime(dateTimeZone44);
        boolean boolean47 = mutableDateTime45.equals((java.lang.Object) (-35999900L));
        boolean boolean48 = instant31.isBefore((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.Instant instant50 = org.joda.time.Instant.parse("1582-10-15T10:00:00.000+10:00");
        boolean boolean51 = instant31.isBefore((org.joda.time.ReadableInstant) instant50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime45", (instant17.compareTo(mutableDateTime45) == 0) == instant17.equals(mutableDateTime45));
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2842");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.Instant instant8 = instant6.withMillis((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.clockhourOfDay();
        org.joda.time.Chronology chronology16 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.weekyear();
        boolean boolean18 = instant6.equals((java.lang.Object) gJChronology11);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        boolean boolean24 = julianChronology22.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology25 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology22.era();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone29.getShortName((long) (byte) 1, locale31);
        org.joda.time.Chronology chronology33 = julianChronology22.withZone(dateTimeZone29);
        boolean boolean35 = dateTimeZone29.isStandardOffset((-73965769918558030L));
        org.joda.time.DateTime dateTime36 = instant6.toDateTime(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime37 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, (org.joda.time.ReadableInstant) instant47);
        java.lang.String str49 = instant47.toString();
        int int50 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((java.lang.Object) instant47);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((java.lang.Object) instant51);
        org.joda.time.Instant instant54 = instant52.minus(5201L);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant58 = instant56.plus(110L);
        boolean boolean60 = instant58.isAfter((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.Chronology chronology64 = gJChronology63.withUTC();
        java.lang.String str65 = gJChronology63.toString();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.monthOfYear();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology63.dayOfWeek();
        org.joda.time.Instant instant69 = gJChronology63.getGregorianCutover();
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        boolean boolean71 = instant58.isAfter((org.joda.time.ReadableInstant) instant69);
        boolean boolean72 = instant52.isEqual((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant74 = instant52.plus((-5970296843698911L));
        org.joda.time.Instant instant75 = instant52.toInstant();
        boolean boolean76 = instant6.isEqual((org.joda.time.ReadableInstant) instant52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and mutableDateTime37", (dateTime36.compareTo(mutableDateTime37) == 0) == dateTime36.equals(mutableDateTime37));
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2843");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.year();
        java.lang.String str9 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Chronology chronology17 = gJChronology12.withZone(dateTimeZone15);
        long long20 = dateTimeZone15.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone21 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.Chronology chronology23 = julianChronology3.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField24 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology3.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField24", Math.signum(durationField6.compareTo(durationField24)) == -Math.signum(durationField24.compareTo(durationField6)));
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2844");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.plus(readableDuration25);
        int int27 = instant11.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        boolean boolean33 = julianChronology31.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.weekOfWeekyear();
        org.joda.time.DurationField durationField36 = julianChronology31.weeks();
        org.joda.time.DateTimeZone dateTimeZone37 = julianChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology31.millisOfDay();
        int int39 = instant11.get(dateTimeField38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DurationField durationField41 = gJChronology40.years();
        org.joda.time.Chronology chronology42 = gJChronology40.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField41", (durationField5.compareTo(durationField41) == 0) == durationField5.equals(durationField41));
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2845");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = instant6.toMutableDateTime(dateTimeZone31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((java.lang.Object) mutableDateTime32);
        org.joda.time.Instant instant35 = instant33.plus(51360008L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime32", (instant6.compareTo(mutableDateTime32) == 0) == instant6.equals(mutableDateTime32));
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2846");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = instant9.getZone();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant9.withDurationAdded(readableDuration15, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        boolean boolean23 = julianChronology21.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology24 = julianChronology21.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology26 = julianChronology21.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField27 = julianChronology21.days();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology21.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str31 = dateTimeZone30.getID();
        boolean boolean32 = dateTimeZone30.isFixed();
        long long34 = dateTimeZone30.previousTransition(100L);
        java.util.TimeZone timeZone35 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.Chronology chronology37 = julianChronology21.withZone(dateTimeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone36.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) instant49);
        long long52 = dateTimeZone47.nextTransition((long) 0);
        long long54 = dateTimeZone40.getMillisKeepLocal(dateTimeZone47, (long) (byte) 100);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone47.getShortName((-110L), locale56);
        java.lang.String str59 = dateTimeZone47.getShortName(9L);
        org.joda.time.DateTime dateTime60 = instant17.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str67 = dateTimeZone66.getID();
        org.joda.time.Chronology chronology68 = gJChronology63.withZone(dateTimeZone66);
        long long71 = dateTimeZone66.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone72 = dateTimeZone66.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        boolean boolean74 = dateTimeZone73.isFixed();
        org.joda.time.Instant instant76 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant76.plus(readableDuration77);
        org.joda.time.Instant instant80 = instant78.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime81 = instant80.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        boolean boolean83 = instant80.isSupported(dateTimeFieldType82);
        int int84 = dateTimeZone73.getOffset((org.joda.time.ReadableInstant) instant80);
        java.lang.String str85 = instant80.toString();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone87);
        org.joda.time.chrono.JulianChronology julianChronology89 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone87);
        org.joda.time.DurationField durationField90 = julianChronology89.centuries();
        java.lang.String str91 = julianChronology89.toString();
        org.joda.time.DateTimeField dateTimeField92 = julianChronology89.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField93 = julianChronology89.secondOfMinute();
        boolean boolean94 = instant80.equals((java.lang.Object) dateTimeField93);
        int int95 = dateTime60.compareTo((org.joda.time.ReadableInstant) instant80);
        org.joda.time.MutableDateTime mutableDateTime96 = instant80.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime60", (instant9.compareTo(dateTime60) == 0) == instant9.equals(dateTime60));
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2847");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        java.lang.String str2 = gJChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.dayOfYear();
        org.joda.time.Chronology chronology4 = gJChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) (-1));
        org.joda.time.Chronology chronology10 = gJChronology0.withZone(dateTimeZone7);
        java.lang.String str12 = dateTimeZone7.getNameKey((-60514215303803L));
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant22.plus(readableDuration26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = instant22.isEqual(readableInstant28);
        org.joda.time.Chronology chronology30 = instant22.getChronology();
        org.joda.time.Instant instant32 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.plus(readableDuration33);
        org.joda.time.Instant instant36 = instant34.withMillis((long) (byte) -1);
        boolean boolean37 = instant36.isEqualNow();
        int int38 = instant22.compareTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.dayOfYear();
        java.lang.String str44 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology41.getZone();
        org.joda.time.DurationField durationField48 = gJChronology41.seconds();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.monthOfYear();
        int int50 = instant36.get(dateTimeField49);
        org.joda.time.Instant instant51 = instant36.toInstant();
        long long52 = instant36.getMillis();
        org.joda.time.Instant instant53 = instant36.toInstant();
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant36, (int) (short) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone58 = instant57.getZone();
        org.joda.time.DateTime dateTime59 = instant57.toDateTime();
        java.lang.String str60 = instant57.toString();
        org.joda.time.MutableDateTime mutableDateTime61 = instant57.toMutableDateTime();
        boolean boolean62 = instant36.isEqual((org.joda.time.ReadableInstant) instant57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime59", (instant32.compareTo(dateTime59) == 0) == instant32.equals(dateTime59));
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2848");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        org.joda.time.DateTime dateTime12 = instant10.toDateTime();
        boolean boolean13 = julianChronology3.equals((java.lang.Object) instant10);
        org.joda.time.DurationField durationField14 = julianChronology3.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime12", (instant10.compareTo(dateTime12) == 0) == instant10.equals(dateTime12));
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2849");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DurationField durationField6 = gJChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        boolean boolean12 = julianChronology10.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.minuteOfHour();
        org.joda.time.DurationField durationField16 = julianChronology10.weeks();
        org.joda.time.DurationField durationField17 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.hourOfDay();
        java.lang.String str20 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.weekyearOfCentury();
        boolean boolean25 = gJChronology2.equals((java.lang.Object) dateTimeField24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology33 = gJChronology28.withZone(dateTimeZone31);
        java.lang.String str35 = dateTimeZone31.getName((long) (byte) 10);
        java.util.TimeZone timeZone36 = dateTimeZone31.toTimeZone();
        long long40 = dateTimeZone31.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        long long42 = dateTimeZone31.previousTransition(5201L);
        org.joda.time.Chronology chronology43 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField44 = gJChronology2.minutes();
        org.joda.time.DurationField durationField45 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField45, durationField6, and durationField16", !(durationField45.compareTo(durationField6) == 0) || (Math.signum(durationField45.compareTo(durationField16)) == Math.signum(durationField6.compareTo(durationField16))));
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2850");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Chronology chronology27 = gJChronology22.withZone(dateTimeZone25);
        long long30 = dateTimeZone25.convertLocalToUTC((long) (short) 10, false);
        long long33 = dateTimeZone25.convertLocalToUTC((-12219292800000L), true);
        org.joda.time.Chronology chronology34 = gJChronology2.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField36 = gJChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField41 = julianChronology40.centuries();
        java.lang.String str42 = julianChronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology40.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField50 = julianChronology49.centuries();
        org.joda.time.DurationField durationField51 = julianChronology49.weeks();
        org.joda.time.DurationField durationField52 = julianChronology49.minutes();
        org.joda.time.DurationField durationField53 = julianChronology49.weekyears();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone55.getName((-1L), locale58);
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone55.isLocalDateTimeGap(localDateTime60);
        java.lang.String str62 = dateTimeZone55.getID();
        java.lang.String str64 = dateTimeZone55.getNameKey((long) 4);
        org.joda.time.Chronology chronology65 = julianChronology49.withZone(dateTimeZone55);
        org.joda.time.Chronology chronology66 = julianChronology40.withZone(dateTimeZone55);
        boolean boolean67 = gJChronology2.equals((java.lang.Object) chronology66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField52", (durationField11.compareTo(durationField52) == 0) == durationField11.equals(durationField52));
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2851");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        boolean boolean21 = instant6.isBefore((-1L));
        boolean boolean22 = instant6.isBeforeNow();
        boolean boolean23 = instant6.isEqualNow();
        org.joda.time.Instant instant25 = instant6.plus((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        boolean boolean32 = julianChronology30.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology33 = julianChronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology35 = julianChronology30.withZone(dateTimeZone34);
        org.joda.time.DurationField durationField36 = julianChronology30.seconds();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology30.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology30.year();
        org.joda.time.DateTimeZone dateTimeZone39 = julianChronology30.getZone();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = julianChronology30.add(readablePeriod40, (-35999900L), (int) '#');
        org.joda.time.DurationField durationField44 = julianChronology30.months();
        org.joda.time.DateTime dateTime45 = instant6.toDateTime((org.joda.time.Chronology) julianChronology30);
        org.joda.time.MutableDateTime mutableDateTime46 = instant6.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and dateTime45", (mutableDateTime9.compareTo(dateTime45) == 0) == mutableDateTime9.equals(dateTime45));
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2852");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.plus((long) (short) 0);
        java.lang.String str8 = instant7.toString();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant7.plus(readableDuration9);
        org.joda.time.Instant instant12 = instant7.plus((-61907104799981L));
        java.util.Date date13 = instant12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        boolean boolean19 = julianChronology17.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology17.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology31 = julianChronology28.withUTC();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology33 = julianChronology28.withZone(dateTimeZone32);
        org.joda.time.DurationField durationField34 = julianChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology28.year();
        org.joda.time.DateTimeZone dateTimeZone37 = julianChronology28.getZone();
        org.joda.time.Chronology chronology38 = julianChronology17.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = instant12.toDateTime(dateTimeZone37);
        boolean boolean40 = dateTimeZone37.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime39", (instant12.compareTo(dateTime39) == 0) == instant12.equals(dateTime39));
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2853");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        long long15 = dateTimeZone5.adjustOffset((long) '#', false);
        int int17 = dateTimeZone5.getStandardOffset((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime27 = instant24.toMutableDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = instant24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = gJChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.secondOfDay();
        org.joda.time.DateTime dateTime39 = instant24.toDateTime((org.joda.time.Chronology) gJChronology31);
        int int40 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime27", (instant24.compareTo(mutableDateTime27) == 0) == instant24.equals(mutableDateTime27));
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2854");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.Chronology chronology26 = instant8.getChronology();
        boolean boolean27 = instant8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.Chronology chronology35 = mutableDateTime34.getChronology();
        org.joda.time.Instant instant37 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.plus(readableDuration38);
        org.joda.time.Instant instant41 = instant37.minus((long) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = instant37.toDateTime(chronology42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long49 = dateTimeZone45.convertLocalToUTC((-35999991L), false, 9110L);
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeZone45.getName((-71999989L), locale51);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime43.toMutableDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology54 = chronology35.withZone(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime34", (instant8.compareTo(mutableDateTime34) == 0) == instant8.equals(mutableDateTime34));
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2855");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField9 = gJChronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = gJChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology12.getZone();
        org.joda.time.DurationField durationField19 = gJChronology12.years();
        int int20 = gJChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.clockhourOfHalfday();
        org.joda.time.DurationField durationField32 = gJChronology30.seconds();
        org.joda.time.Chronology chronology33 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology30.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        int int39 = dateTimeZone37.getStandardOffset(43129898499L);
        long long41 = dateTimeZone37.nextTransition(35999999L);
        long long43 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, 297L);
        boolean boolean44 = dateTimeZone35.isFixed();
        org.joda.time.Chronology chronology45 = gJChronology12.withZone(dateTimeZone35);
        long long47 = dateTimeZone35.previousTransition((-60514175703803L));
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        org.joda.time.Chronology chronology49 = gJChronology2.withZone(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField32", (durationField9.compareTo(durationField32) == 0) == durationField9.equals(durationField32));
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2856");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        boolean boolean13 = instant6.isAfter((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField18 = julianChronology17.centuries();
        org.joda.time.DurationField durationField19 = julianChronology17.weeks();
        org.joda.time.DurationField durationField20 = julianChronology17.days();
        org.joda.time.DurationField durationField21 = julianChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology17.hourOfHalfday();
        org.joda.time.Chronology chronology23 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology17.millisOfDay();
        int int25 = instant6.get(dateTimeField24);
        org.joda.time.DateTime dateTime26 = instant6.toDateTimeISO();
        boolean boolean27 = instant6.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime26", (instant6.compareTo(dateTime26) == 0) == instant6.equals(dateTime26));
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2857");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        int int14 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField15 = julianChronology3.months();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.secondOfMinute();
        int int17 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology3.minuteOfDay();
        org.joda.time.DurationField durationField20 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField4, and durationField7", !(durationField20.compareTo(durationField4) == 0) || (Math.signum(durationField20.compareTo(durationField7)) == Math.signum(durationField4.compareTo(durationField7))));
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2858");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        java.lang.String str3 = dateTimeZone1.getNameKey(35L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.Instant instant10 = gJChronology6.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = instant10.toDateTime();
        java.util.Date date15 = instant10.toDate();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = gJChronology18.withZone(dateTimeZone21);
        java.lang.String str25 = dateTimeZone21.getName((long) (byte) 10);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        long long30 = dateTimeZone21.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean31 = instant10.equals((java.lang.Object) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime32 = instant10.toMutableDateTimeISO();
        boolean boolean33 = dateTimeZone1.equals((java.lang.Object) instant10);
        boolean boolean34 = dateTimeZone1.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime13", (instant10.compareTo(mutableDateTime13) == 0) == instant10.equals(mutableDateTime13));
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2859");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField30 = julianChronology29.centuries();
        java.lang.String str31 = julianChronology29.toString();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology29.yearOfEra();
        org.joda.time.DurationField durationField33 = julianChronology29.months();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology29.hourOfHalfday();
        org.joda.time.DateTime dateTime35 = instant25.toDateTime((org.joda.time.Chronology) julianChronology29);
        org.joda.time.DurationField durationField36 = julianChronology29.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime35", (instant17.compareTo(dateTime35) == 0) == instant17.equals(dateTime35));
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2860");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        java.lang.String str8 = gJChronology7.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) (-1));
        long long18 = dateTimeZone12.convertLocalToUTC((long) 4, true, (long) (short) -1);
        boolean boolean19 = gJChronology7.equals((java.lang.Object) dateTimeZone12);
        org.joda.time.Chronology chronology20 = gJChronology2.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField21 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        boolean boolean27 = julianChronology25.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology28 = julianChronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology30 = julianChronology25.withZone(dateTimeZone29);
        long long32 = dateTimeZone29.convertUTCToLocal((-107999990L));
        java.util.TimeZone timeZone33 = dateTimeZone29.toTimeZone();
        long long36 = dateTimeZone29.adjustOffset((-59082429599991L), true);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone29.getName((long) 10, locale38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant41.plus(readableDuration42);
        org.joda.time.Instant instant45 = instant43.withMillis((long) (byte) -1);
        boolean boolean46 = instant45.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone47 = instant45.getZone();
        long long48 = instant45.getMillis();
        boolean boolean49 = instant45.isEqualNow();
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology51 = gJChronology2.withZone(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField21", Math.signum(durationField4.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField4)));
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2861");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        boolean boolean9 = instant8.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime10 = instant8.toMutableDateTime();
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Chronology chronology27 = gJChronology22.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology22.getZone();
        long long30 = dateTimeZone28.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology31 = gJChronology14.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37);
        boolean boolean41 = julianChronology39.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology42 = julianChronology39.withUTC();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology44 = julianChronology39.withZone(dateTimeZone43);
        long long46 = dateTimeZone33.getMillisKeepLocal(dateTimeZone43, 10L);
        org.joda.time.Chronology chronology47 = gJChronology14.withZone(dateTimeZone43);
        long long49 = dateTimeZone43.nextTransition((long) (byte) -1);
        int int51 = dateTimeZone43.getOffsetFromLocal(0L);
        long long55 = dateTimeZone43.convertLocalToUTC((long) 'a', true, (long) 4);
        java.util.TimeZone timeZone56 = dateTimeZone43.toTimeZone();
        long long58 = dateTimeZone43.nextTransition(9730L);
        java.util.TimeZone timeZone59 = dateTimeZone43.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime10.toMutableDateTime(dateTimeZone43);
        org.joda.time.Instant instant61 = mutableDateTime60.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime10", (instant6.compareTo(mutableDateTime10) == 0) == instant6.equals(mutableDateTime10));
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2862");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant16 = instant14.minus(5201L);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant20 = instant18.plus(110L);
        boolean boolean22 = instant20.isAfter((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.Instant instant31 = gJChronology25.getGregorianCutover();
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        boolean boolean33 = instant20.isAfter((org.joda.time.ReadableInstant) instant31);
        boolean boolean34 = instant14.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone36.getName((-1L), locale39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone36.isLocalDateTimeGap(localDateTime41);
        boolean boolean44 = dateTimeZone36.isStandardOffset(36000000L);
        long long46 = dateTimeZone36.convertUTCToLocal(187199999L);
        org.joda.time.DateTime dateTime47 = instant14.toDateTime(dateTimeZone36);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone36.getName(0L, locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime47", (instant9.compareTo(dateTime47) == 0) == instant9.equals(dateTime47));
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2863");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone8.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, 35999999L);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone1.getName((-31L), locale17);
        int int20 = dateTimeZone1.getStandardOffset((long) 69);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone1.getShortName((long) 3600000, locale22);
        java.util.TimeZone timeZone24 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) instant49);
        java.lang.String str51 = instant49.toString();
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((java.lang.Object) instant49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.clockhourOfHalfday();
        org.joda.time.DurationField durationField60 = gJChronology56.weeks();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology56.halfdayOfDay();
        boolean boolean62 = instant53.equals((java.lang.Object) gJChronology56);
        org.joda.time.DurationField durationField63 = gJChronology56.weekyears();
        int int64 = gJChronology56.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str67 = dateTimeZone66.getID();
        boolean boolean68 = dateTimeZone66.isFixed();
        long long70 = dateTimeZone66.previousTransition(100L);
        java.util.TimeZone timeZone71 = dateTimeZone66.toTimeZone();
        java.util.TimeZone timeZone72 = dateTimeZone66.toTimeZone();
        java.lang.String str73 = dateTimeZone66.getID();
        org.joda.time.Chronology chronology74 = gJChronology56.withZone(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime39.toMutableDateTime(dateTimeZone66);
        int int76 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) mutableDateTime75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and dateTime39", (instant33.compareTo(dateTime39) == 0) == instant33.equals(dateTime39));
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2864");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.secondOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.hours();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField9, and durationField13", !(durationField15.compareTo(durationField9) == 0) || (Math.signum(durationField15.compareTo(durationField13)) == Math.signum(durationField9.compareTo(durationField13))));
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2865");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.clockhourOfHalfday();
        org.joda.time.Chronology chronology25 = gJChronology23.withUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology33 = gJChronology28.withZone(dateTimeZone31);
        java.lang.String str35 = dateTimeZone31.getName((long) (byte) 10);
        long long38 = dateTimeZone31.convertLocalToUTC((-35999900L), false);
        long long41 = dateTimeZone31.adjustOffset((long) '#', false);
        int int43 = dateTimeZone31.getOffset((long) (byte) 10);
        org.joda.time.Chronology chronology44 = chronology25.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime45 = instant13.toDateTime(chronology25);
        org.joda.time.DurationField durationField46 = chronology25.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime45", (instant6.compareTo(dateTime45) == 0) == instant6.equals(dateTime45));
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2866");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant33.withDurationAdded(readableDuration34, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = instant33.toString(dateTimeFormatter37);
        org.joda.time.Instant instant41 = instant33.withDurationAdded(0L, 1582);
        long long42 = instant41.getMillis();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant45 = instant41.withDurationAdded(readableDuration43, (int) (short) 100);
        boolean boolean46 = instant8.isAfter((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTime dateTime47 = instant41.toDateTimeISO();
        boolean boolean49 = dateTime47.isEqual((-386L));
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime47.toMutableDateTime(chronology50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology54 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.dayOfYear();
        org.joda.time.Instant instant61 = gJChronology57.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant61.minus(readableDuration62);
        org.joda.time.Instant instant66 = instant63.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant63.plus(readableDuration67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, (org.joda.time.ReadableInstant) instant68);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology69.millisOfSecond();
        org.joda.time.DurationField durationField71 = gJChronology69.minutes();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology69.dayOfMonth();
        org.joda.time.DurationField durationField74 = gJChronology69.centuries();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology69.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime76 = mutableDateTime51.toMutableDateTime((org.joda.time.Chronology) gJChronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime47", (instant8.compareTo(dateTime47) == 0) == instant8.equals(dateTime47));
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2867");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.Instant instant8 = instant4.withMillis(25200L);
        org.joda.time.DateTime dateTime9 = instant4.toDateTime();
        org.joda.time.Instant instant12 = instant4.withDurationAdded(3129100L, 278);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime9", (instant4.compareTo(dateTime9) == 0) == instant4.equals(dateTime9));
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2868");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        boolean boolean31 = julianChronology29.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology32 = julianChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology29.hourOfHalfday();
        java.lang.String str34 = julianChronology29.toString();
        org.joda.time.MutableDateTime mutableDateTime35 = instant25.toMutableDateTime((org.joda.time.Chronology) julianChronology29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology39.getZone();
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, (org.joda.time.ReadableInstant) instant45);
        java.lang.String str47 = instant45.toString();
        int int48 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((java.lang.Object) instant45);
        org.joda.time.DateTimeZone dateTimeZone50 = instant45.getZone();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant53 = instant45.withDurationAdded(readableDuration51, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55);
        boolean boolean59 = julianChronology57.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology60 = julianChronology57.withUTC();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology62 = julianChronology57.withZone(dateTimeZone61);
        org.joda.time.DurationField durationField63 = julianChronology57.days();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology57.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str67 = dateTimeZone66.getID();
        boolean boolean68 = dateTimeZone66.isFixed();
        long long70 = dateTimeZone66.previousTransition(100L);
        java.util.TimeZone timeZone71 = dateTimeZone66.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.Chronology chronology73 = julianChronology57.withZone(dateTimeZone72);
        java.util.TimeZone timeZone74 = dateTimeZone72.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone76 = gJChronology75.getZone();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, readableInstant78);
        org.joda.time.DateTimeZone dateTimeZone80 = gJChronology79.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology79.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology79.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone83 = gJChronology79.getZone();
        org.joda.time.Instant instant85 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology86 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone83, (org.joda.time.ReadableInstant) instant85);
        long long88 = dateTimeZone83.nextTransition((long) 0);
        long long90 = dateTimeZone76.getMillisKeepLocal(dateTimeZone83, (long) (byte) 100);
        java.util.Locale locale92 = null;
        java.lang.String str93 = dateTimeZone83.getShortName((-110L), locale92);
        java.lang.String str95 = dateTimeZone83.getShortName(9L);
        org.joda.time.DateTime dateTime96 = instant53.toDateTime(dateTimeZone83);
        boolean boolean97 = julianChronology29.equals((java.lang.Object) instant53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime35", (instant8.compareTo(mutableDateTime35) == 0) == instant8.equals(mutableDateTime35));
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2869");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.dayOfYear();
        org.joda.time.Instant instant11 = gJChronology7.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.minus(readableDuration12);
        org.joda.time.Instant instant16 = instant13.withDurationAdded((-12219292800000L), 0);
        boolean boolean18 = instant13.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.Chronology chronology22 = gJChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology21.monthOfYear();
        boolean boolean29 = instant13.equals((java.lang.Object) dateTimeField28);
        org.joda.time.Instant instant31 = instant13.withMillis(1L);
        boolean boolean32 = instant4.isBefore((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Instant instant34 = instant31.plus(3600000L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.Instant instant37 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.plus(readableDuration38);
        long long40 = instant37.getMillis();
        org.joda.time.Chronology chronology41 = instant37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        boolean boolean45 = dateTimeZone43.isFixed();
        long long48 = dateTimeZone43.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology49.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = julianChronology49.getZone();
        org.joda.time.DateTime dateTime52 = instant37.toDateTime(dateTimeZone51);
        boolean boolean53 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = dateTime35.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime52", (instant31.compareTo(dateTime52) == 0) == instant31.equals(dateTime52));
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2870");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.millisOfDay();
        org.joda.time.DurationField durationField13 = gJChronology9.halfdays();
        org.joda.time.DurationField durationField14 = gJChronology9.millis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology17 = gJChronology9.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.minuteOfDay();
        int int19 = instant4.get(dateTimeField18);
        org.joda.time.Instant instant22 = instant4.withDurationAdded((long) 9, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.millisOfDay();
        org.joda.time.DurationField durationField30 = gJChronology26.halfdays();
        org.joda.time.DurationField durationField31 = gJChronology26.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology34 = gJChronology26.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology26.halfdayOfDay();
        org.joda.time.DurationField durationField37 = gJChronology26.centuries();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology26.secondOfDay();
        long long42 = gJChronology26.add((long) 9, 0L, 0);
        org.joda.time.Instant instant43 = gJChronology26.getGregorianCutover();
        boolean boolean44 = instant22.isAfter((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant46 = instant22.plus((-35999275L));
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.Chronology chronology50 = gJChronology49.withUTC();
        java.lang.String str51 = gJChronology49.toString();
        org.joda.time.DurationField durationField52 = gJChronology49.eras();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology49.era();
        org.joda.time.DurationField durationField54 = gJChronology49.eras();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology49.dayOfYear();
        int int56 = instant46.get(dateTimeField55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField13 and durationField52", Math.signum(durationField13.compareTo(durationField52)) == -Math.signum(durationField52.compareTo(durationField13)));
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.Instant instant31 = gJChronology25.getGregorianCutover();
        boolean boolean32 = instant20.equals((java.lang.Object) gJChronology25);
        boolean boolean33 = instant11.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant35 = instant20.minus((-61543965598418L));
        org.joda.time.Instant instant36 = instant35.toInstant();
        org.joda.time.MutableDateTime mutableDateTime37 = instant35.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, (org.joda.time.ReadableInstant) instant46);
        java.lang.String str48 = instant46.toString();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        int int61 = instant46.compareTo((org.joda.time.ReadableInstant) instant57);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant46.minus(readableDuration62);
        java.util.Date date64 = instant46.toDate();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66);
        org.joda.time.DateTimeZone dateTimeZone68 = gJChronology67.getZone();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology67.dayOfYear();
        org.joda.time.Instant instant71 = gJChronology67.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant73 = instant71.minus(readableDuration72);
        org.joda.time.Instant instant76 = instant73.withDurationAdded((-12219292800000L), 0);
        boolean boolean77 = instant46.isEqual((org.joda.time.ReadableInstant) instant73);
        org.joda.time.DateTimeZone dateTimeZone78 = instant73.getZone();
        org.joda.time.DateTime dateTime79 = instant73.toDateTimeISO();
        boolean boolean80 = dateTime79.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.chrono.GJChronology gJChronology83 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81, readableInstant82);
        org.joda.time.Chronology chronology84 = gJChronology83.withUTC();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology83.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology83.millisOfDay();
        org.joda.time.DurationField durationField87 = gJChronology83.halfdays();
        org.joda.time.DurationField durationField88 = gJChronology83.millis();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology91 = gJChronology83.withZone(dateTimeZone90);
        org.joda.time.DurationField durationField92 = gJChronology83.minutes();
        org.joda.time.DateTimeField dateTimeField93 = gJChronology83.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField94 = gJChronology83.weekyear();
        org.joda.time.Instant instant95 = gJChronology83.getGregorianCutover();
        org.joda.time.Instant instant96 = gJChronology83.getGregorianCutover();
        org.joda.time.Chronology chronology97 = gJChronology83.withUTC();
        org.joda.time.MutableDateTime mutableDateTime98 = dateTime79.toMutableDateTime((org.joda.time.Chronology) gJChronology83);
        int int99 = instant35.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime98", (instant6.compareTo(mutableDateTime98) == 0) == instant6.equals(mutableDateTime98));
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2872");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.MutableDateTime mutableDateTime12 = instant6.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime12.toMutableDateTime(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant23);
        java.lang.String str25 = instant23.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.Instant instant32 = gJChronology28.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.minus(readableDuration33);
        org.joda.time.Instant instant37 = instant34.withDurationAdded((-12219292800000L), 0);
        int int38 = instant23.compareTo((org.joda.time.ReadableInstant) instant34);
        long long39 = instant23.getMillis();
        long long40 = instant23.getMillis();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant23.withDurationAdded(readableDuration41, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant23.plus(readableDuration44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant23.isSupported(dateTimeFieldType46);
        org.joda.time.Instant instant49 = instant23.minus((long) 4200000);
        org.joda.time.Instant instant51 = instant49.withMillis((-71999989L));
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53);
        boolean boolean57 = julianChronology55.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology58 = julianChronology55.withUTC();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology60 = julianChronology55.withZone(dateTimeZone59);
        org.joda.time.DurationField durationField61 = julianChronology55.days();
        org.joda.time.Chronology chronology62 = julianChronology55.withUTC();
        org.joda.time.DurationField durationField63 = julianChronology55.centuries();
        org.joda.time.DateTime dateTime64 = instant51.toDateTime((org.joda.time.Chronology) julianChronology55);
        int int65 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) instant51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime14", (instant6.compareTo(mutableDateTime14) == 0) == instant6.equals(mutableDateTime14));
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2873");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField16 = gJChronology2.years();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        java.lang.String str18 = gJChronology2.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField16 and durationField17", (durationField16.compareTo(durationField17) == 0) == durationField16.equals(durationField17));
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2874");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DurationField durationField19 = gJChronology16.years();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        boolean boolean26 = julianChronology24.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology27 = julianChronology24.withUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = julianChronology24.getZone();
        org.joda.time.Chronology chronology29 = gJChronology16.withZone(dateTimeZone28);
        long long33 = gJChronology16.add((-12219292800000L), (long) (short) 0, (int) (short) 0);
        org.joda.time.DurationField durationField34 = gJChronology16.seconds();
        org.joda.time.DurationField durationField35 = gJChronology16.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTime dateTime38 = instant11.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.MutableDateTime mutableDateTime39 = instant11.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant11.withDurationAdded(readableDuration40, 1969);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and mutableDateTime39", (dateTime38.compareTo(mutableDateTime39) == 0) == dateTime38.equals(mutableDateTime39));
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2875");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DurationField durationField11 = gJChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = instant19.toDateTime();
        java.util.Date date24 = instant19.toDate();
        boolean boolean25 = instant19.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime26 = instant19.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfYear();
        int int32 = instant19.get(dateTimeField31);
        boolean boolean33 = gJChronology9.equals((java.lang.Object) instant19);
        long long34 = instant19.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant19.withDurationAdded(readableDuration35, 1582);
        boolean boolean39 = instant19.isBefore(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and instant19", (mutableDateTime22.compareTo(instant19) == 0) == mutableDateTime22.equals(instant19));
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2876");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        int int17 = instant1.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.MutableDateTime mutableDateTime18 = instant11.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant21 = instant11.withDurationAdded(readableDuration19, 24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime18", (instant21.compareTo(mutableDateTime18) == 0) == instant21.equals(mutableDateTime18));
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2877");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T10:00:00.000+10:00");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str10 = dateTimeZone9.getID();
        org.joda.time.Chronology chronology11 = gJChronology6.withZone(dateTimeZone9);
        java.lang.String str13 = dateTimeZone9.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean15 = dateTimeZone3.equals((java.lang.Object) dateTimeZone9);
        long long18 = dateTimeZone3.convertLocalToUTC((long) (byte) -1, true);
        org.joda.time.MutableDateTime mutableDateTime19 = instant1.toMutableDateTime(dateTimeZone3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant21.minus((long) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = instant21.toDateTime(chronology26);
        int int28 = instant1.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Instant instant29 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime27", (instant21.compareTo(dateTime27) == 0) == instant21.equals(dateTime27));
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2878");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        boolean boolean12 = julianChronology10.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.Chronology chronology15 = gJChronology2.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology2.getZone();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        boolean boolean23 = dateTimeZone21.isFixed();
        long long25 = dateTimeZone21.previousTransition(100L);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone37 = instant36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.joda.time.DurationField durationField42 = julianChronology41.centuries();
        java.lang.String str43 = julianChronology41.toString();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology41.yearOfEra();
        org.joda.time.DurationField durationField45 = julianChronology41.months();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology48.minuteOfDay();
        boolean boolean50 = julianChronology41.equals((java.lang.Object) dateTimeField49);
        org.joda.time.DateTimeField dateTimeField51 = julianChronology41.secondOfMinute();
        int int52 = julianChronology41.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.chrono.JulianChronology julianChronology56 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone54);
        boolean boolean58 = julianChronology56.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField59 = julianChronology56.months();
        boolean boolean60 = julianChronology41.equals((java.lang.Object) julianChronology56);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology41.dayOfYear();
        org.joda.time.DateTime dateTime62 = instant36.toDateTime((org.joda.time.Chronology) julianChronology41);
        int int63 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) instant36);
        org.joda.time.DateTime dateTime64 = instant36.toDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and dateTime62", (instant36.compareTo(dateTime62) == 0) == instant36.equals(dateTime62));
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2879");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField13 = julianChronology12.centuries();
        java.lang.String str14 = julianChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology12.dayOfYear();
        org.joda.time.DurationField durationField19 = julianChronology12.hours();
        boolean boolean20 = mutableDateTime7.equals((java.lang.Object) durationField19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        boolean boolean26 = julianChronology24.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology24.millisOfSecond();
        long long32 = julianChronology24.getDateTimeMillis((int) (byte) -1, 4, 1, (int) '4');
        org.joda.time.DurationField durationField33 = julianChronology24.centuries();
        org.joda.time.DurationField durationField34 = julianChronology24.days();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology24.clockhourOfDay();
        org.joda.time.DateTime dateTime37 = mutableDateTime7.toDateTime((org.joda.time.Chronology) julianChronology24);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology24.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTime(dateTimeZone22);
        boolean boolean25 = mutableDateTime23.equals((java.lang.Object) (-35999900L));
        int int26 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Instant instant27 = mutableDateTime23.toInstant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, (org.joda.time.ReadableInstant) instant36);
        java.lang.String str38 = instant36.toString();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant36.withDurationAdded(readableDuration39, (int) (byte) -1);
        boolean boolean43 = instant36.isBefore(809L);
        boolean boolean44 = instant36.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone45 = instant36.getZone();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.weekyear();
        org.joda.time.Instant instant50 = gJChronology48.getGregorianCutover();
        org.joda.time.Instant instant53 = instant50.withDurationAdded((long) (-3600000), 5);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        java.lang.String str57 = gJChronology56.toString();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.dayOfYear();
        java.lang.String str59 = gJChronology56.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology56.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology56.monthOfYear();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology56.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology56.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology56.weekyear();
        int int65 = gJChronology56.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology56.getZone();
        long long68 = dateTimeZone66.previousTransition((-12959999999999L));
        java.lang.String str70 = dateTimeZone66.getNameKey((-7433151155985290L));
        org.joda.time.MutableDateTime mutableDateTime71 = instant53.toMutableDateTime(dateTimeZone66);
        int int72 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.MutableDateTime mutableDateTime73 = instant27.toMutableDateTime(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and mutableDateTime23", (instant20.compareTo(mutableDateTime23) == 0) == instant20.equals(mutableDateTime23));
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2881");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = instant8.toDateTime();
        org.joda.time.Instant instant14 = instant8.withMillis(100L);
        boolean boolean15 = instant1.isAfter((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        int int28 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((java.lang.Object) instant25);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((java.lang.Object) instant29);
        java.util.Date date31 = instant30.toDate();
        org.joda.time.Instant instant33 = instant30.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.Chronology chronology49 = gJChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology44.getZone();
        long long52 = dateTimeZone50.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology53 = gJChronology36.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean57 = dateTimeZone55.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        boolean boolean63 = julianChronology61.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology64 = julianChronology61.withUTC();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology66 = julianChronology61.withZone(dateTimeZone65);
        long long68 = dateTimeZone55.getMillisKeepLocal(dateTimeZone65, 10L);
        org.joda.time.Chronology chronology69 = gJChronology36.withZone(dateTimeZone65);
        long long71 = dateTimeZone65.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime72 = instant30.toMutableDateTime(dateTimeZone65);
        int int73 = instant8.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant74 = instant8.toInstant();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant74.plus(readableDuration75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant76 and mutableDateTime11", (instant76.compareTo(mutableDateTime11) == 0) == instant76.equals(mutableDateTime11));
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2882");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        boolean boolean10 = instant8.isBefore(35999999L);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant8.plus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        java.lang.String str17 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.clockhourOfHalfday();
        org.joda.time.DateTime dateTime23 = instant12.toDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        boolean boolean37 = instant32.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology40.monthOfYear();
        boolean boolean48 = instant32.equals((java.lang.Object) dateTimeField47);
        long long49 = instant32.getMillis();
        boolean boolean50 = instant12.isAfter((org.joda.time.ReadableInstant) instant32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime23", (instant12.compareTo(dateTime23) == 0) == instant12.equals(dateTime23));
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2883");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        boolean boolean7 = instant4.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime8 = instant4.toMutableDateTimeISO();
        boolean boolean9 = instant4.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and mutableDateTime8", (instant4.compareTo(mutableDateTime8) == 0) == instant4.equals(mutableDateTime8));
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2884");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        long long4 = instant1.getMillis();
        boolean boolean6 = instant1.isEqual((-421199991L));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant1.withDurationAdded(readableDuration7, (int) (byte) 1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime3", (instant9.compareTo(dateTime3) == 0) == instant9.equals(dateTime3));
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2885");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField7 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.millisOfSecond();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField10 = julianChronology3.minutes();
        org.joda.time.DurationField durationField11 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField7, and durationField10", !(durationField11.compareTo(durationField7) == 0) || (Math.signum(durationField11.compareTo(durationField10)) == Math.signum(durationField7.compareTo(durationField10))));
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2886");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-60514215282090L));
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 2022);
        boolean boolean6 = instant1.isAfter((-61638141598800L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Chronology chronology14 = gJChronology9.withZone(dateTimeZone12);
        java.lang.String str16 = dateTimeZone12.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        java.lang.String str18 = julianChronology17.toString();
        org.joda.time.DurationField durationField19 = julianChronology17.millis();
        org.joda.time.DurationField durationField20 = julianChronology17.days();
        org.joda.time.DurationField durationField21 = julianChronology17.weekyears();
        org.joda.time.DurationField durationField22 = julianChronology17.days();
        org.joda.time.MutableDateTime mutableDateTime23 = instant1.toMutableDateTime((org.joda.time.Chronology) julianChronology17);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.Chronology chronology39 = gJChronology34.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology34.getZone();
        long long42 = dateTimeZone40.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology43 = gJChronology26.withZone(dateTimeZone40);
        org.joda.time.Chronology chronology44 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology26.dayOfYear();
        org.joda.time.DurationField durationField46 = gJChronology26.halfdays();
        org.joda.time.DurationField durationField47 = gJChronology26.halfdays();
        org.joda.time.DurationField durationField48 = gJChronology26.seconds();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology26.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology26.getZone();
        org.joda.time.MutableDateTime mutableDateTime51 = instant1.toMutableDateTime(dateTimeZone50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime23", (instant1.compareTo(mutableDateTime23) == 0) == instant1.equals(mutableDateTime23));
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2887");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTime dateTime40 = instant35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime51 = instant48.toMutableDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = instant48.toDateTime();
        java.util.Date date53 = instant48.toDate();
        boolean boolean54 = instant48.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime55 = instant48.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, (org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology60.getZone();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology60.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology60.getZone();
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, (org.joda.time.ReadableInstant) instant66);
        java.lang.String str68 = instant66.toString();
        int int69 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((java.lang.Object) instant66);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72);
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology73.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology73.clockhourOfHalfday();
        org.joda.time.DurationField durationField77 = gJChronology73.weeks();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology73.halfdayOfDay();
        boolean boolean79 = instant70.equals((java.lang.Object) gJChronology73);
        org.joda.time.Instant instant81 = new org.joda.time.Instant((long) 'a');
        boolean boolean82 = instant70.isAfter((org.joda.time.ReadableInstant) instant81);
        boolean boolean83 = instant48.isEqual((org.joda.time.ReadableInstant) instant70);
        java.lang.String str84 = instant48.toString();
        boolean boolean85 = dateTime40.isAfter((org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant48 and mutableDateTime51", (instant48.compareTo(mutableDateTime51) == 0) == instant48.equals(mutableDateTime51));
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2888");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = julianChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology2.clockhourOfDay();
        int int9 = julianChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.era();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology13.hourOfDay();
        int int19 = julianChronology13.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        boolean boolean25 = julianChronology23.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField26 = julianChronology23.months();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone28.getName((-1L), locale31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone28.isLocalDateTimeGap(localDateTime33);
        boolean boolean36 = dateTimeZone28.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology37 = julianChronology23.withZone(dateTimeZone28);
        int int39 = dateTimeZone28.getOffset((-35999900L));
        int int41 = dateTimeZone28.getOffset((long) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.Chronology chronology45 = gJChronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.dayOfWeek();
        org.joda.time.Chronology chronology47 = gJChronology44.withUTC();
        org.joda.time.DurationField durationField48 = gJChronology44.halfdays();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology44.getZone();
        int int51 = dateTimeZone49.getOffset((long) 1);
        java.util.TimeZone timeZone52 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getName(36000010L);
        long long57 = dateTimeZone28.getMillisKeepLocal(dateTimeZone53, (-35999890L));
        java.lang.String str59 = dateTimeZone28.getShortName(288097310L);
        org.joda.time.Chronology chronology60 = julianChronology13.withZone(dateTimeZone28);
        org.joda.time.Chronology chronology61 = julianChronology2.withZone(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField7 and durationField26", (durationField7.compareTo(durationField26) == 0) == durationField7.equals(durationField26));
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2889");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DurationField durationField11 = gJChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = instant19.toDateTime();
        java.util.Date date24 = instant19.toDate();
        boolean boolean25 = instant19.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime26 = instant19.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfYear();
        int int32 = instant19.get(dateTimeField31);
        boolean boolean33 = gJChronology9.equals((java.lang.Object) instant19);
        org.joda.time.Instant instant34 = instant19.toInstant();
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = instant19.isBefore(readableInstant35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and instant19", (mutableDateTime22.compareTo(instant19) == 0) == mutableDateTime22.equals(instant19));
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2890");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        boolean boolean14 = instant11.isBefore(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = instant11.isSupported(dateTimeFieldType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = instant11.isEqual(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) (-1));
        long long32 = dateTimeZone26.convertLocalToUTC((long) 4, true, (long) (short) -1);
        boolean boolean33 = gJChronology21.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.DurationField durationField34 = gJChronology21.minutes();
        org.joda.time.DurationField durationField35 = gJChronology21.halfdays();
        org.joda.time.Chronology chronology36 = gJChronology21.withUTC();
        org.joda.time.MutableDateTime mutableDateTime37 = instant11.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology21.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime37", (instant11.compareTo(mutableDateTime37) == 0) == instant11.equals(mutableDateTime37));
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2891");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long15 = dateTimeZone12.adjustOffset(1L, false);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant27 = instant22.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.millisOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.halfdays();
        org.joda.time.DurationField durationField35 = gJChronology30.millis();
        org.joda.time.DateTime dateTime36 = instant27.toDateTime((org.joda.time.Chronology) gJChronology30);
        boolean boolean37 = instant27.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = instant27.getZone();
        boolean boolean39 = instant27.isAfterNow();
        int int40 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant27);
        long long43 = dateTimeZone12.adjustOffset(223199999L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime36", (instant27.compareTo(dateTime36) == 0) == instant27.equals(dateTime36));
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2892");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean1 = instant0.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.DateTime dateTime3 = instant0.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant0.plus(readableDuration4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        int int20 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((java.lang.Object) instant17);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((java.lang.Object) instant21);
        java.util.Date date23 = instant22.toDate();
        org.joda.time.Instant instant25 = instant22.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str40 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology41 = gJChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology36.getZone();
        long long44 = dateTimeZone42.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology45 = gJChronology28.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean49 = dateTimeZone47.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        boolean boolean55 = julianChronology53.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology56 = julianChronology53.withUTC();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology58 = julianChronology53.withZone(dateTimeZone57);
        long long60 = dateTimeZone47.getMillisKeepLocal(dateTimeZone57, 10L);
        org.joda.time.Chronology chronology61 = gJChronology28.withZone(dateTimeZone57);
        long long63 = dateTimeZone57.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime64 = instant22.toMutableDateTime(dateTimeZone57);
        int int65 = instant7.compareTo((org.joda.time.ReadableInstant) mutableDateTime64);
        long long66 = instant7.getMillis();
        boolean boolean68 = instant7.isAfter(2780L);
        boolean boolean70 = instant7.isBefore((-5900380595998018L));
        boolean boolean71 = instant0.isEqual((org.joda.time.ReadableInstant) instant7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant0", (mutableDateTime2.compareTo(instant0) == 0) == mutableDateTime2.equals(instant0));
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2893");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField16 = julianChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField18 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField9, and durationField10", !(durationField18.compareTo(durationField9) == 0) || (Math.signum(durationField18.compareTo(durationField10)) == Math.signum(durationField9.compareTo(durationField10))));
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2894");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.era();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField9", Math.signum(durationField5.compareTo(durationField9)) == -Math.signum(durationField9.compareTo(durationField5)));
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2895");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        int int35 = instant20.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant20.minus(readableDuration36);
        int int38 = instant8.compareTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime39 = instant8.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = instant8.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime39", (instant20.compareTo(dateTime39) == 0) == instant20.equals(dateTime39));
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2896");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant16 = instant14.minus(5201L);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant20 = instant18.plus(110L);
        boolean boolean22 = instant20.isAfter((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.Instant instant31 = gJChronology25.getGregorianCutover();
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        boolean boolean33 = instant20.isAfter((org.joda.time.ReadableInstant) instant31);
        boolean boolean34 = instant14.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone36.getName((-1L), locale39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone36.isLocalDateTimeGap(localDateTime41);
        boolean boolean44 = dateTimeZone36.isStandardOffset(36000000L);
        long long46 = dateTimeZone36.convertUTCToLocal(187199999L);
        org.joda.time.DateTime dateTime47 = instant14.toDateTime(dateTimeZone36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = instant14.toString(dateTimeFormatter48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime47", (instant9.compareTo(dateTime47) == 0) == instant9.equals(dateTime47));
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2897");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.DateTime dateTime5 = instant4.toDateTimeISO();
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime5.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = dateTime5.isSupported(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = julianChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = julianChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField22 = julianChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = julianChronology13.withZone(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime((org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology13.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime5", (instant1.compareTo(dateTime5) == 0) == instant1.equals(dateTime5));
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2898");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTime(dateTimeZone22);
        boolean boolean25 = mutableDateTime23.equals((java.lang.Object) (-35999900L));
        int int26 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Instant instant27 = mutableDateTime23.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant27.plus(readableDuration28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and mutableDateTime23", (instant20.compareTo(mutableDateTime23) == 0) == instant20.equals(mutableDateTime23));
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2899");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) instant14);
        org.joda.time.Instant instant17 = instant14.minus((long) ' ');
        boolean boolean18 = instant14.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime19 = instant14.toMutableDateTime();
        org.joda.time.Chronology chronology20 = instant14.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime19", (instant9.compareTo(mutableDateTime19) == 0) == instant9.equals(mutableDateTime19));
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2900");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        boolean boolean19 = instant14.isAfter(223199999L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant23.withMillis((long) (byte) -1);
        org.joda.time.Instant instant27 = instant25.minus((long) (short) 10);
        org.joda.time.Instant instant29 = instant27.plus((long) 126000000);
        boolean boolean30 = instant14.isEqual((org.joda.time.ReadableInstant) instant27);
        boolean boolean32 = instant14.isBefore(25200L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        org.joda.time.DurationField durationField37 = gJChronology35.millis();
        org.joda.time.Chronology chronology38 = gJChronology35.withUTC();
        org.joda.time.DurationField durationField39 = gJChronology35.seconds();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology35.year();
        org.joda.time.Instant instant41 = gJChronology35.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology35.getZone();
        org.joda.time.DateTime dateTime43 = instant14.toDateTime((org.joda.time.Chronology) gJChronology35);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology46.getZone();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, (org.joda.time.ReadableInstant) instant52);
        java.lang.String str54 = gJChronology53.toString();
        org.joda.time.DurationField durationField55 = gJChronology53.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.weekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.weekyear();
        boolean boolean59 = gJChronology35.equals((java.lang.Object) gJChronology53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime43", (instant9.compareTo(dateTime43) == 0) == instant9.equals(dateTime43));
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2901");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTime dateTime73 = instant46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75, readableInstant76);
        org.joda.time.DateTimeZone dateTimeZone78 = gJChronology77.getZone();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology77.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology77.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone81 = gJChronology77.getZone();
        org.joda.time.Instant instant83 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81, (org.joda.time.ReadableInstant) instant83);
        java.lang.String str85 = instant83.toString();
        int int86 = dateTimeZone74.getOffset((org.joda.time.ReadableInstant) instant83);
        org.joda.time.Instant instant87 = new org.joda.time.Instant((java.lang.Object) instant83);
        org.joda.time.DateTimeZone dateTimeZone88 = instant83.getZone();
        org.joda.time.DateTime dateTime89 = instant46.toDateTime(dateTimeZone88);
        long long92 = dateTimeZone88.adjustOffset((-3743975152L), false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant46 and dateTime73", (instant46.compareTo(dateTime73) == 0) == instant46.equals(dateTime73));
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2902");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        boolean boolean21 = instant6.isBefore((-1L));
        long long22 = instant6.getMillis();
        java.lang.String str23 = instant6.toString();
        org.joda.time.Instant instant25 = instant6.plus((-12242483999903L));
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.millisOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.secondOfMinute();
        boolean boolean34 = instant25.equals((java.lang.Object) gJChronology28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2903");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        boolean boolean4 = instant3.isAfterNow();
        org.joda.time.DateTime dateTime5 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        boolean boolean9 = dateTimeZone7.isFixed();
        int int11 = dateTimeZone7.getOffset(100L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime5.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField17 = julianChronology16.centuries();
        org.joda.time.DurationField durationField18 = julianChronology16.weeks();
        org.joda.time.DurationField durationField19 = julianChronology16.days();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = julianChronology16.add(readablePeriod20, 36000000L, 0);
        org.joda.time.DurationField durationField24 = julianChronology16.days();
        boolean boolean25 = mutableDateTime12.equals((java.lang.Object) julianChronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime5", (instant1.compareTo(dateTime5) == 0) == instant1.equals(dateTime5));
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2904");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = gJChronology16.weeks();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        boolean boolean22 = instant13.equals((java.lang.Object) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTime dateTime33 = instant31.toDateTime();
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = dateTime33.isSupported(dateTimeFieldType35);
        boolean boolean37 = instant13.isEqual((org.joda.time.ReadableInstant) dateTime33);
        long long38 = instant13.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime33", (instant9.compareTo(dateTime33) == 0) == instant9.equals(dateTime33));
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2905");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.Instant instant12 = gJChronology8.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        boolean boolean17 = julianChronology3.equals((java.lang.Object) mutableDateTime15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = mutableDateTime15.toString(dateTimeFormatter18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Chronology chronology27 = gJChronology22.withZone(dateTimeZone25);
        java.lang.String str29 = dateTimeZone25.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.Chronology chronology31 = julianChronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) (-1));
        long long39 = dateTimeZone33.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long41 = dateTimeZone33.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology42 = julianChronology30.withZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology45.getZone();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant51);
        java.lang.String str53 = instant51.toString();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant56 = instant51.withDurationAdded(readableDuration54, (int) (byte) -1);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.clockhourOfHalfday();
        boolean boolean59 = mutableDateTime15.equals((java.lang.Object) gJChronology57);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime15", (instant12.compareTo(mutableDateTime15) == 0) == instant12.equals(mutableDateTime15));
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2906");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.seconds();
        org.joda.time.DurationField durationField7 = gJChronology2.weekyears();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField9 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.Chronology chronology11 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        org.joda.time.DurationField durationField13 = gJChronology2.millis();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField4, and durationField6", !(durationField14.compareTo(durationField4) == 0) || (Math.signum(durationField14.compareTo(durationField6)) == Math.signum(durationField4.compareTo(durationField6))));
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2907");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        java.lang.String str10 = dateTimeZone6.getNameKey(10L);
        long long12 = dateTimeZone6.convertUTCToLocal((-12219328800000L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = julianChronology16.days();
        int int23 = julianChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField24 = julianChronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology16.millisOfDay();
        boolean boolean26 = dateTimeZone6.equals((java.lang.Object) dateTimeField25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Chronology chronology36 = gJChronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology31.getZone();
        long long39 = dateTimeZone37.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology40 = gJChronology27.withZone(dateTimeZone37);
        long long42 = dateTimeZone1.getMillisKeepLocal(dateTimeZone37, (long) 19);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField44 = julianChronology43.years();
        org.joda.time.DurationField durationField45 = julianChronology43.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField44", (durationField24.compareTo(durationField44) == 0) == durationField24.equals(durationField44));
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2908");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.Instant instant19 = gJChronology13.getGregorianCutover();
        boolean boolean20 = instant8.equals((java.lang.Object) gJChronology13);
        boolean boolean21 = instant8.isBeforeNow();
        org.joda.time.Instant instant24 = instant8.withDurationAdded(3129100L, 1970);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        org.joda.time.DurationField durationField29 = gJChronology27.millis();
        long long33 = gJChronology27.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology27.weekyearOfCentury();
        org.joda.time.DateTime dateTime36 = instant24.toDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant24.minus(readableDuration37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.Instant instant40 = gJChronology39.getGregorianCutover();
        boolean boolean41 = instant40.isEqualNow();
        java.util.Date date42 = instant40.toDate();
        boolean boolean43 = instant24.isBefore((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant24", (dateTime36.compareTo(instant24) == 0) == dateTime36.equals(instant24));
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2909");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        long long7 = dateTimeZone1.previousTransition((long) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.DurationField durationField13 = julianChronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology11.add(readablePeriod15, (long) 36000000, 4);
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) 36000000);
        java.lang.String str20 = dateTimeZone1.getID();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology26.secondOfMinute();
        org.joda.time.DurationField durationField28 = julianChronology26.centuries();
        org.joda.time.DurationField durationField29 = julianChronology26.weeks();
        org.joda.time.DurationField durationField30 = julianChronology26.days();
        org.joda.time.DurationField durationField31 = julianChronology26.centuries();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology26.year();
        org.joda.time.DurationField durationField33 = julianChronology26.minutes();
        org.joda.time.DurationField durationField34 = julianChronology26.days();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology26.monthOfYear();
        boolean boolean36 = dateTimeZone23.equals((java.lang.Object) dateTimeField35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField12 and durationField29", (durationField12.compareTo(durationField29) == 0) == durationField12.equals(durationField29));
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2910");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Chronology chronology11 = julianChronology2.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology2.era();
        org.joda.time.DurationField durationField13 = julianChronology2.halfdays();
        org.joda.time.DurationField durationField14 = julianChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = julianChronology17.getZone();
        int int22 = dateTimeZone20.getOffsetFromLocal(4L);
        java.lang.String str24 = dateTimeZone20.getNameKey(36000001L);
        org.joda.time.Chronology chronology25 = julianChronology2.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.millisOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.halfdays();
        org.joda.time.DurationField durationField35 = gJChronology30.millis();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology38 = gJChronology30.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology30.minutes();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology30.halfdayOfDay();
        org.joda.time.DurationField durationField41 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology30.dayOfMonth();
        int int44 = gJChronology30.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology30.centuryOfEra();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = instant49.isSupported(dateTimeFieldType50);
        org.joda.time.Chronology chronology52 = instant49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = instant49.getZone();
        org.joda.time.Chronology chronology54 = gJChronology30.withZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = julianChronology2.withZone(dateTimeZone53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField13 and durationField34", (durationField13.compareTo(durationField34) == 0) == durationField13.equals(durationField34));
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2911");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfWeek();
        org.joda.time.DurationField durationField10 = gJChronology7.years();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology7.minuteOfDay();
        boolean boolean12 = gJChronology2.equals((java.lang.Object) gJChronology7);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology16.era();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology16.minuteOfHour();
        org.joda.time.DurationField durationField22 = julianChronology16.weeks();
        org.joda.time.DurationField durationField23 = julianChronology16.days();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology16.millisOfDay();
        org.joda.time.DurationField durationField26 = julianChronology16.millis();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology16.weekOfWeekyear();
        org.joda.time.Chronology chronology32 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        org.joda.time.Chronology chronology34 = gJChronology2.withZone(dateTimeZone33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.plus(readableDuration37);
        org.joda.time.Instant instant40 = instant38.withMillis((long) (byte) -1);
        boolean boolean41 = instant40.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField46 = julianChronology45.centuries();
        java.lang.String str47 = julianChronology45.toString();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology45.yearOfEra();
        org.joda.time.DurationField durationField49 = julianChronology45.months();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.Chronology chronology53 = gJChronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology52.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology60.getZone();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str64 = dateTimeZone63.getID();
        org.joda.time.Chronology chronology65 = gJChronology60.withZone(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology60.getZone();
        long long68 = dateTimeZone66.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology69 = gJChronology52.withZone(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean73 = dateTimeZone71.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.chrono.JulianChronology julianChronology77 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone75);
        boolean boolean79 = julianChronology77.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology80 = julianChronology77.withUTC();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology82 = julianChronology77.withZone(dateTimeZone81);
        long long84 = dateTimeZone71.getMillisKeepLocal(dateTimeZone81, 10L);
        org.joda.time.Chronology chronology85 = gJChronology52.withZone(dateTimeZone81);
        org.joda.time.Chronology chronology86 = gJChronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.minuteOfDay();
        boolean boolean88 = julianChronology45.equals((java.lang.Object) dateTimeField87);
        org.joda.time.DurationField durationField89 = julianChronology45.weeks();
        org.joda.time.DateTime dateTime90 = instant40.toDateTime((org.joda.time.Chronology) julianChronology45);
        org.joda.time.ReadableDuration readableDuration91 = null;
        org.joda.time.Instant instant92 = instant40.plus(readableDuration91);
        org.joda.time.chrono.GJChronology gJChronology93 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant92 and dateTime90", (instant92.compareTo(dateTime90) == 0) == instant92.equals(dateTime90));
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2912");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.DurationField durationField15 = gJChronology12.years();
        org.joda.time.DurationField durationField16 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.yearOfEra();
        boolean boolean18 = instant6.equals((java.lang.Object) dateTimeField17);
        boolean boolean19 = instant6.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.centuryOfEra();
        boolean boolean25 = instant6.equals((java.lang.Object) gJChronology22);
        boolean boolean26 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant6.plus(readableDuration27);
        org.joda.time.MutableDateTime mutableDateTime29 = instant28.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime9", (instant28.compareTo(mutableDateTime9) == 0) == instant28.equals(mutableDateTime9));
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2913");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = instant6.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 1);
        org.joda.time.DateTime dateTime17 = instant6.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.millisOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.halfdays();
        org.joda.time.DurationField durationField25 = gJChronology20.millis();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology28 = gJChronology20.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology20.minutes();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology20.weekyear();
        org.joda.time.Instant instant32 = gJChronology20.getGregorianCutover();
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-107999965L), 86399991);
        org.joda.time.Instant instant37 = instant35.withMillis((-5869878872193832L));
        boolean boolean38 = instant6.isEqual((org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime17", (instant6.compareTo(dateTime17) == 0) == instant6.equals(dateTime17));
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2914");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        boolean boolean21 = instant11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = instant11.getZone();
        boolean boolean23 = instant11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = instant11.getZone();
        org.joda.time.MutableDateTime mutableDateTime25 = instant11.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant11.withDurationAdded(readableDuration26, 14400000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime25", (dateTime20.compareTo(mutableDateTime25) == 0) == dateTime20.equals(mutableDateTime25));
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2915");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) (-1));
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName(35999991L, locale6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.Instant instant14 = gJChronology10.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = instant14.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = instant14.toDateTime();
        java.util.Date date19 = instant14.toDate();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Chronology chronology27 = gJChronology22.withZone(dateTimeZone25);
        java.lang.String str29 = dateTimeZone25.getName((long) (byte) 10);
        java.util.TimeZone timeZone30 = dateTimeZone25.toTimeZone();
        long long34 = dateTimeZone25.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean35 = instant14.equals((java.lang.Object) (byte) 10);
        boolean boolean37 = instant14.isAfter((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant14);
        java.lang.String str40 = dateTimeZone1.getName((-21361518036971028L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime17", (instant14.compareTo(mutableDateTime17) == 0) == instant14.equals(mutableDateTime17));
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2916");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000001L);
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        org.joda.time.Instant instant5 = instant3.toInstant();
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = instant5.toMutableDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime7.toMutableDateTime(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) instant18);
        java.lang.String str20 = instant18.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.Instant instant27 = gJChronology23.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant27.minus(readableDuration28);
        org.joda.time.Instant instant32 = instant29.withDurationAdded((-12219292800000L), 0);
        int int33 = instant18.compareTo((org.joda.time.ReadableInstant) instant29);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant18.minus(readableDuration34);
        java.util.Date date36 = instant18.toDate();
        org.joda.time.Instant instant37 = instant18.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        java.lang.String str42 = gJChronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology40.getZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48);
        org.joda.time.DurationField durationField51 = julianChronology50.centuries();
        java.lang.String str52 = julianChronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology50.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology50.dayOfYear();
        org.joda.time.DurationField durationField57 = julianChronology50.hours();
        boolean boolean58 = dateTimeZone46.equals((java.lang.Object) julianChronology50);
        org.joda.time.MutableDateTime mutableDateTime59 = instant37.toMutableDateTime(dateTimeZone46);
        boolean boolean60 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime7", (instant3.compareTo(mutableDateTime7) == 0) == instant3.equals(mutableDateTime7));
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2917");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T00:00:00.035Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Instant instant5 = instant1.withDurationAdded((long) 353, 36000000);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.Chronology chronology9 = gJChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology8.monthOfYear();
        org.joda.time.DurationField durationField17 = gJChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology8.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology8.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = instant1.toDateTime(dateTimeZone20);
        java.lang.String str23 = instant1.toString();
        boolean boolean24 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant1.plus(readableDuration25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant1.isSupported(dateTimeFieldType27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant1", (dateTime2.compareTo(instant1) == 0) == dateTime2.equals(instant1));
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2918");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.plus(readableDuration15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.Instant instant34 = gJChronology30.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.minus(readableDuration35);
        org.joda.time.Instant instant39 = instant36.withDurationAdded((-12219292800000L), 0);
        int int40 = instant25.compareTo((org.joda.time.ReadableInstant) instant36);
        long long41 = instant25.getMillis();
        org.joda.time.Instant instant42 = instant25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone43 = instant25.getZone();
        int int44 = instant16.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant46 = instant16.plus((-62158787999900L));
        long long47 = instant46.getMillis();
        boolean boolean48 = instant13.isBefore((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant50 = instant46.plus((-11L));
        boolean boolean52 = instant50.isAfter((-35999991L));
        org.joda.time.DateTimeZone dateTimeZone53 = instant50.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology56.getZone();
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, (org.joda.time.ReadableInstant) instant62);
        java.lang.String str64 = instant62.toString();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66);
        org.joda.time.DateTimeZone dateTimeZone68 = gJChronology67.getZone();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology67.dayOfYear();
        org.joda.time.Instant instant71 = gJChronology67.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant73 = instant71.minus(readableDuration72);
        org.joda.time.Instant instant76 = instant73.withDurationAdded((-12219292800000L), 0);
        int int77 = instant62.compareTo((org.joda.time.ReadableInstant) instant73);
        long long78 = instant62.getMillis();
        org.joda.time.Instant instant81 = instant62.withDurationAdded((long) '#', 278);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.util.Locale locale85 = null;
        java.lang.String str86 = dateTimeZone83.getName(0L, locale85);
        java.lang.String str88 = dateTimeZone83.getName((-71999990L));
        org.joda.time.DateTime dateTime89 = instant81.toDateTime(dateTimeZone83);
        boolean boolean90 = instant50.isAfter((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Instant instant92 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration93 = null;
        org.joda.time.Instant instant94 = instant92.plus(readableDuration93);
        long long95 = instant92.getMillis();
        org.joda.time.MutableDateTime mutableDateTime96 = instant92.toMutableDateTimeISO();
        long long97 = mutableDateTime96.getMillis();
        boolean boolean98 = instant50.isEqual((org.joda.time.ReadableInstant) mutableDateTime96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant81 and dateTime89", (instant81.compareTo(dateTime89) == 0) == instant81.equals(dateTime89));
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2919");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(0L);
        long long9 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant8.minus(readableDuration10);
        boolean boolean12 = instant1.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.MutableDateTime mutableDateTime13 = instant8.toMutableDateTime();
        boolean boolean15 = instant8.isAfter(20016000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime13", (instant8.compareTo(mutableDateTime13) == 0) == instant8.equals(mutableDateTime13));
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2920");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.Instant instant12 = gJChronology8.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        boolean boolean17 = julianChronology3.equals((java.lang.Object) mutableDateTime15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = mutableDateTime15.toString(dateTimeFormatter18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Chronology chronology27 = gJChronology22.withZone(dateTimeZone25);
        java.lang.String str29 = dateTimeZone25.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.Chronology chronology31 = julianChronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) (-1));
        long long39 = dateTimeZone33.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long41 = dateTimeZone33.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology42 = julianChronology30.withZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology45.getZone();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant51);
        java.lang.String str53 = instant51.toString();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant56 = instant51.withDurationAdded(readableDuration54, (int) (byte) -1);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.clockhourOfHalfday();
        boolean boolean59 = mutableDateTime15.equals((java.lang.Object) gJChronology57);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology57.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime15", (instant12.compareTo(mutableDateTime15) == 0) == instant12.equals(mutableDateTime15));
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2921");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.Instant instant8 = instant4.withMillis(25200L);
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.plus(readableDuration10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.DurationField durationField17 = chronology15.hours();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology15.getZone();
        org.joda.time.DateTime dateTime19 = instant11.toDateTime(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        boolean boolean23 = dateTime19.isEqual((org.joda.time.ReadableInstant) instant21);
        int int24 = instant8.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime34 = instant31.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.dayOfWeek();
        org.joda.time.DurationField durationField40 = gJChronology37.years();
        org.joda.time.DurationField durationField41 = gJChronology37.hours();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.yearOfEra();
        boolean boolean43 = instant31.equals((java.lang.Object) dateTimeField42);
        boolean boolean44 = instant31.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        java.lang.String str48 = gJChronology47.toString();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.centuryOfEra();
        boolean boolean50 = instant31.equals((java.lang.Object) gJChronology47);
        boolean boolean51 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant31.plus(readableDuration52);
        int int54 = instant8.compareTo((org.joda.time.ReadableInstant) instant31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField17 and durationField41", (durationField17.compareTo(durationField41) == 0) == durationField17.equals(durationField41));
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2922");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.minus(readableDuration8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant6.withDurationAdded(readableDuration10, 8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology16.era();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology16.era();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology16.year();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField28 = julianChronology27.weeks();
        org.joda.time.DurationField durationField29 = julianChronology27.millis();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology27.yearOfCentury();
        org.joda.time.DurationField durationField33 = julianChronology27.minutes();
        boolean boolean34 = julianChronology16.equals((java.lang.Object) julianChronology27);
        org.joda.time.DateTime dateTime35 = instant12.toDateTime((org.joda.time.Chronology) julianChronology27);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology27.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime35", (instant6.compareTo(dateTime35) == 0) == instant6.equals(dateTime35));
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2923");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.DateTime dateTime13 = instant6.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant6.withDurationAdded(readableDuration14, 5);
        org.joda.time.Instant instant18 = instant6.minus((-12839710758129L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant6", (mutableDateTime9.compareTo(instant6) == 0) == mutableDateTime9.equals(instant6));
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2924");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.Chronology chronology30 = gJChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfWeek();
        org.joda.time.DurationField durationField32 = gJChronology29.years();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.weekyear();
        boolean boolean34 = instant11.equals((java.lang.Object) dateTimeField33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.Instant instant41 = gJChronology37.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant41.minus(readableDuration42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.plus(readableDuration44);
        boolean boolean46 = instant11.isBefore((org.joda.time.ReadableInstant) instant45);
        boolean boolean47 = instant2.isBefore((org.joda.time.ReadableInstant) instant45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology50.getZone();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, (org.joda.time.ReadableInstant) instant56);
        java.lang.String str58 = instant56.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.dayOfYear();
        org.joda.time.Instant instant65 = gJChronology61.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant65.minus(readableDuration66);
        org.joda.time.Instant instant70 = instant67.withDurationAdded((-12219292800000L), 0);
        int int71 = instant56.compareTo((org.joda.time.ReadableInstant) instant67);
        long long72 = instant56.getMillis();
        org.joda.time.Instant instant73 = instant56.toInstant();
        org.joda.time.Chronology chronology74 = instant56.getChronology();
        org.joda.time.MutableDateTime mutableDateTime75 = instant56.toMutableDateTime();
        int int76 = instant2.compareTo((org.joda.time.ReadableInstant) instant56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime75", (instant11.compareTo(mutableDateTime75) == 0) == instant11.equals(mutableDateTime75));
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2925");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = instant6.toMutableDateTime(dateTimeZone31);
        long long33 = mutableDateTime32.getMillis();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((java.lang.Object) mutableDateTime32);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime32", (instant6.compareTo(mutableDateTime32) == 0) == instant6.equals(mutableDateTime32));
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2926");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        java.lang.String str42 = instant40.toString();
        int int43 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((java.lang.Object) instant40);
        boolean boolean46 = instant40.isAfter((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        boolean boolean50 = dateTimeZone48.isFixed();
        long long53 = dateTimeZone48.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        boolean boolean55 = instant40.equals((java.lang.Object) dateTimeZone48);
        int int56 = instant30.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology60.year();
        org.joda.time.DurationField durationField62 = julianChronology60.eras();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology60.yearOfCentury();
        org.joda.time.DateTime dateTime67 = instant40.toDateTime((org.joda.time.Chronology) julianChronology60);
        org.joda.time.DateTimeField dateTimeField68 = julianChronology60.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime67", (instant8.compareTo(dateTime67) == 0) == instant8.equals(dateTime67));
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2927");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        long long11 = instant10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DurationField durationField16 = gJChronology14.millis();
        org.joda.time.Chronology chronology17 = gJChronology14.withUTC();
        org.joda.time.DurationField durationField18 = gJChronology14.seconds();
        boolean boolean19 = instant10.equals((java.lang.Object) durationField18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant21.withDurationAdded(readableDuration22, 10);
        org.joda.time.Instant instant26 = instant24.withMillis((-35999990L));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant35);
        java.lang.String str37 = instant35.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        int int50 = instant35.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant52 = instant46.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = instant52.toString(dateTimeFormatter53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant52.plus(readableDuration55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology60.getZone();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology60.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology60.getZone();
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, (org.joda.time.ReadableInstant) instant66);
        java.lang.String str68 = instant66.toString();
        int int69 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((java.lang.Object) instant66);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((java.lang.Object) instant70);
        java.util.Date date72 = instant71.toDate();
        org.joda.time.Instant instant74 = instant71.withMillis((long) (byte) 10);
        int int75 = instant56.compareTo((org.joda.time.ReadableInstant) instant74);
        boolean boolean76 = instant24.isAfter((org.joda.time.ReadableInstant) instant74);
        boolean boolean77 = instant10.isAfter((org.joda.time.ReadableInstant) instant24);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Instant instant79 = instant10.plus(readableDuration78);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone81);
        org.joda.time.chrono.JulianChronology julianChronology83 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone81);
        boolean boolean85 = julianChronology83.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology86 = julianChronology83.withUTC();
        org.joda.time.DateTimeZone dateTimeZone87 = julianChronology83.getZone();
        org.joda.time.chrono.GJChronology gJChronology88 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone87);
        org.joda.time.DateTimeField dateTimeField89 = gJChronology88.weekOfWeekyear();
        org.joda.time.DurationField durationField90 = gJChronology88.weeks();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology88.hourOfDay();
        org.joda.time.DateTime dateTime92 = instant10.toDateTime((org.joda.time.Chronology) gJChronology88);
        org.joda.time.Chronology chronology93 = gJChronology88.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime92", (instant6.compareTo(dateTime92) == 0) == instant6.equals(dateTime92));
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2928");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        boolean boolean14 = instant11.isBefore(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = instant11.isSupported(dateTimeFieldType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = instant11.isEqual(readableInstant17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant11.toMutableDateTimeISO();
        java.lang.String str20 = mutableDateTime19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField25 = julianChronology24.centuries();
        java.lang.String str26 = julianChronology24.toString();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology24.yearOfEra();
        org.joda.time.DurationField durationField28 = julianChronology24.months();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology24.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology24.yearOfCentury();
        org.joda.time.Chronology chronology32 = julianChronology24.withUTC();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime19.toMutableDateTime(chronology32);
        boolean boolean34 = mutableDateTime33.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime19", (instant11.compareTo(mutableDateTime19) == 0) == instant11.equals(mutableDateTime19));
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2929");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant6.plus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        boolean boolean16 = julianChronology14.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology17 = julianChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.minuteOfHour();
        org.joda.time.DurationField durationField20 = julianChronology14.weeks();
        org.joda.time.DurationField durationField21 = julianChronology14.days();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology14.dayOfMonth();
        org.joda.time.DurationField durationField23 = julianChronology14.days();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField25 = julianChronology14.months();
        org.joda.time.DateTime dateTime26 = instant10.toDateTime((org.joda.time.Chronology) julianChronology14);
        org.joda.time.Instant instant27 = dateTime26.toInstant();
        boolean boolean28 = instant27.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime26", (instant6.compareTo(dateTime26) == 0) == instant6.equals(dateTime26));
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2930");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.Instant instant19 = gJChronology13.getGregorianCutover();
        boolean boolean20 = instant8.equals((java.lang.Object) gJChronology13);
        boolean boolean21 = instant8.isBeforeNow();
        org.joda.time.Instant instant24 = instant8.withDurationAdded(3129100L, 1970);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant8.plus(readableDuration25);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime27", (instant26.compareTo(dateTime27) == 0) == instant26.equals(dateTime27));
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2931");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.Instant instant15 = instant13.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.Chronology chronology19 = gJChronology18.withUTC();
        org.joda.time.DurationField durationField20 = gJChronology18.millis();
        long long24 = gJChronology18.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField25 = gJChronology18.millis();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField28 = gJChronology18.centuries();
        org.joda.time.DurationField durationField29 = gJChronology18.hours();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology18.getZone();
        org.joda.time.DurationField durationField32 = gJChronology18.millis();
        org.joda.time.MutableDateTime mutableDateTime33 = instant13.toMutableDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology18.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime33", (instant6.compareTo(mutableDateTime33) == 0) == instant6.equals(mutableDateTime33));
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2932");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.Chronology chronology32 = gJChronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology27.minuteOfDay();
        boolean boolean34 = instant8.equals((java.lang.Object) gJChronology27);
        org.joda.time.DateTime dateTime35 = instant8.toDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = dateTime35.toString(dateTimeFormatter36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant39.plus(readableDuration40);
        org.joda.time.Instant instant43 = instant41.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = instant43.isSupported(dateTimeFieldType45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.dayOfYear();
        org.joda.time.Instant instant53 = gJChronology49.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant53.minus(readableDuration54);
        org.joda.time.Instant instant58 = instant55.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant55.plus(readableDuration59);
        java.util.Date date61 = instant60.toDate();
        org.joda.time.Instant instant63 = instant60.plus(35L);
        int int64 = instant43.compareTo((org.joda.time.ReadableInstant) instant60);
        org.joda.time.MutableDateTime mutableDateTime65 = instant43.toMutableDateTime();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = instant43.toMutableDateTime(chronology66);
        boolean boolean68 = dateTime35.isBefore((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant70 = org.joda.time.Instant.parse("2022-02-11T09:46:16.274Z");
        org.joda.time.Instant instant72 = new org.joda.time.Instant(36000001L);
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone75 = instant74.getZone();
        org.joda.time.Instant instant76 = instant74.toInstant();
        boolean boolean77 = instant70.isEqual((org.joda.time.ReadableInstant) instant76);
        boolean boolean78 = dateTime35.equals((java.lang.Object) instant76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime44", (instant43.compareTo(dateTime44) == 0) == instant43.equals(dateTime44));
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2933");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-60514215252321L));
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField6 = julianChronology5.centuries();
        org.joda.time.DurationField durationField7 = julianChronology5.weeks();
        org.joda.time.DurationField durationField8 = julianChronology5.days();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = julianChronology5.add(readablePeriod9, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone14.getShortName((-35999890L), locale16);
        org.joda.time.Chronology chronology18 = julianChronology5.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        boolean boolean24 = julianChronology22.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology25 = julianChronology22.withUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology27 = julianChronology22.withZone(dateTimeZone26);
        org.joda.time.DurationField durationField28 = julianChronology22.days();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.getID();
        boolean boolean33 = dateTimeZone31.isFixed();
        long long35 = dateTimeZone31.previousTransition(100L);
        java.util.TimeZone timeZone36 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.Chronology chronology38 = julianChronology22.withZone(dateTimeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        boolean boolean41 = julianChronology5.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime dateTime42 = instant1.toDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.dayOfYear();
        org.joda.time.Instant instant52 = gJChronology48.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant52.minus(readableDuration53);
        org.joda.time.Instant instant57 = instant54.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant54.plus(readableDuration58);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, (org.joda.time.ReadableInstant) instant59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = instant59.isAfter(readableInstant61);
        org.joda.time.Instant instant64 = instant59.withMillis(35999999L);
        org.joda.time.Instant instant66 = instant64.withMillis((-12219364800000L));
        org.joda.time.DateTime dateTime67 = instant66.toDateTime();
        int int68 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) instant66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime42", (instant1.compareTo(dateTime42) == 0) == instant1.equals(dateTime42));
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2934");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(126000000);
        java.lang.String str2 = dateTimeZone1.getID();
        java.util.TimeZone timeZone3 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        int int18 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((java.lang.Object) instant15);
        org.joda.time.DateTimeZone dateTimeZone20 = instant15.getZone();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant23 = instant15.withDurationAdded(readableDuration21, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField33 = julianChronology27.days();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology27.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.getID();
        boolean boolean38 = dateTimeZone36.isFixed();
        long long40 = dateTimeZone36.previousTransition(100L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Chronology chronology43 = julianChronology27.withZone(dateTimeZone42);
        java.util.TimeZone timeZone44 = dateTimeZone42.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology49.getZone();
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, (org.joda.time.ReadableInstant) instant55);
        long long58 = dateTimeZone53.nextTransition((long) 0);
        long long60 = dateTimeZone46.getMillisKeepLocal(dateTimeZone53, (long) (byte) 100);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeZone53.getShortName((-110L), locale62);
        java.lang.String str65 = dateTimeZone53.getShortName(9L);
        org.joda.time.DateTime dateTime66 = instant23.toDateTime(dateTimeZone53);
        int int67 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime66);
        int int69 = dateTimeZone5.getStandardOffset((-35999984L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime66", (instant15.compareTo(dateTime66) == 0) == instant15.equals(dateTime66));
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        org.joda.time.DateTime dateTime11 = instant8.toDateTimeISO();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = instant13.toString(dateTimeFormatter14);
        java.lang.String str16 = instant13.toString();
        org.joda.time.Instant instant18 = instant13.plus((-386L));
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) instant18);
        boolean boolean20 = instant18.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime11", (instant8.compareTo(dateTime11) == 0) == instant8.equals(dateTime11));
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2936");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.hourOfHalfday();
        java.lang.String str8 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        boolean boolean14 = julianChronology12.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology15 = julianChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology17 = julianChronology12.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField18 = julianChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology12.getZone();
        org.joda.time.Chronology chronology23 = julianChronology3.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology27.era();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology27.minuteOfHour();
        org.joda.time.DurationField durationField33 = julianChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology27.hourOfHalfday();
        boolean boolean35 = dateTimeZone22.equals((java.lang.Object) julianChronology27);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone22.isLocalDateTimeGap(localDateTime36);
        int int39 = dateTimeZone22.getStandardOffset(151200024L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.dayOfYear();
        org.joda.time.Instant instant46 = gJChronology42.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant46.minus(readableDuration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant46.plus(readableDuration49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) instant50);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) 10);
        boolean boolean55 = instant53.isBefore(72320035L);
        org.joda.time.DateTimeZone dateTimeZone56 = instant53.getZone();
        org.joda.time.DateTime dateTime57 = instant53.toDateTimeISO();
        boolean boolean58 = instant50.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.chrono.JulianChronology julianChronology64 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone62);
        boolean boolean66 = julianChronology64.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology67 = julianChronology64.withUTC();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology64.era();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology64.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime70 = instant60.toMutableDateTime((org.joda.time.Chronology) julianChronology64);
        org.joda.time.DateTimeZone dateTimeZone71 = instant60.getZone();
        int int72 = instant50.compareTo((org.joda.time.ReadableInstant) instant60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant53 and dateTime57", (instant53.compareTo(dateTime57) == 0) == instant53.equals(dateTime57));
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2937");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone24 = dateTimeZone18.toTimeZone();
        long long27 = dateTimeZone18.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.Instant instant29 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant31 = instant29.plus(151200349L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.Instant instant38 = gJChronology34.getGregorianCutover();
        java.lang.String str39 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.clockhourOfHalfday();
        long long44 = gJChronology34.add((-71999990L), 36009730L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology34.dayOfMonth();
        org.joda.time.DateTime dateTime47 = instant31.toDateTime((org.joda.time.Chronology) gJChronology34);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology34.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime47", (instant31.compareTo(dateTime47) == 0) == instant31.equals(dateTime47));
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2938");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant15.plus(readableDuration18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology22.getZone();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) instant28);
        java.lang.String str30 = instant28.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-12219292800000L), 0);
        int int43 = instant28.compareTo((org.joda.time.ReadableInstant) instant39);
        long long44 = instant28.getMillis();
        org.joda.time.Instant instant45 = instant28.toInstant();
        org.joda.time.Chronology chronology46 = instant28.getChronology();
        boolean boolean47 = instant28.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology51.getZone();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, (org.joda.time.ReadableInstant) instant57);
        java.lang.String str59 = instant57.toString();
        int int60 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((java.lang.Object) instant57);
        boolean boolean63 = instant57.isAfter((-107999990L));
        boolean boolean65 = instant57.isAfter((-12219292799965L));
        boolean boolean66 = instant28.isAfter((org.joda.time.ReadableInstant) instant57);
        boolean boolean67 = instant15.isEqual((org.joda.time.ReadableInstant) instant57);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant70 = instant15.withDurationAdded(readableDuration68, 40);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72);
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology73.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology73.clockhourOfHalfday();
        org.joda.time.DurationField durationField77 = gJChronology73.weeks();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology73.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology73.getZone();
        org.joda.time.LocalDateTime localDateTime80 = null;
        boolean boolean81 = dateTimeZone79.isLocalDateTimeGap(localDateTime80);
        org.joda.time.MutableDateTime mutableDateTime82 = instant15.toMutableDateTime(dateTimeZone79);
        long long84 = dateTimeZone8.getMillisKeepLocal(dateTimeZone79, 0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime82", (instant15.compareTo(mutableDateTime82) == 0) == instant15.equals(mutableDateTime82));
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2939");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant6.plus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        boolean boolean16 = julianChronology14.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology17 = julianChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.minuteOfHour();
        org.joda.time.DurationField durationField20 = julianChronology14.weeks();
        org.joda.time.DurationField durationField21 = julianChronology14.days();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology14.dayOfMonth();
        org.joda.time.DurationField durationField23 = julianChronology14.days();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField25 = julianChronology14.months();
        org.joda.time.DateTime dateTime26 = instant10.toDateTime((org.joda.time.Chronology) julianChronology14);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology14.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime26", (instant6.compareTo(dateTime26) == 0) == instant6.equals(dateTime26));
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2940");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(36000000L);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField12 = gJChronology11.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology11.days();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology21 = julianChronology18.withUTC();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology23 = julianChronology18.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField24 = julianChronology18.days();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str28 = dateTimeZone27.getID();
        boolean boolean29 = dateTimeZone27.isFixed();
        long long31 = dateTimeZone27.previousTransition(100L);
        java.util.TimeZone timeZone32 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.Chronology chronology34 = julianChronology18.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = julianChronology18.days();
        org.joda.time.DurationField durationField36 = julianChronology18.months();
        org.joda.time.DurationField durationField37 = julianChronology18.weekyears();
        boolean boolean38 = gJChronology11.equals((java.lang.Object) durationField37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField13 and durationField24", (durationField13.compareTo(durationField24) == 0) == durationField13.equals(durationField24));
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2941");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        long long15 = dateTimeZone12.adjustOffset((-6211221875988790L), false);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant24.plus(readableDuration28);
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology33.clockhourOfDay();
        int int35 = instant29.get(dateTimeField34);
        org.joda.time.DateTimeZone dateTimeZone36 = instant29.getZone();
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.Instant instant38 = instant29.toInstant();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, (org.joda.time.ReadableInstant) instant47);
        org.joda.time.DateTime dateTime49 = instant47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.Chronology chronology53 = gJChronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology52.dayOfYear();
        boolean boolean59 = instant47.equals((java.lang.Object) dateTimeField58);
        org.joda.time.DateTime dateTime60 = instant47.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone62.getName((-1L), locale65);
        long long68 = dateTimeZone62.previousTransition((long) '#');
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.chrono.JulianChronology julianChronology72 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone70);
        org.joda.time.DurationField durationField73 = julianChronology72.weeks();
        org.joda.time.DurationField durationField74 = julianChronology72.millis();
        org.joda.time.DateTimeField dateTimeField75 = julianChronology72.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        long long79 = julianChronology72.add(readablePeriod76, (long) 36000000, 4);
        boolean boolean80 = dateTimeZone62.equals((java.lang.Object) 36000000);
        boolean boolean81 = dateTimeZone62.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        boolean boolean83 = dateTimeZone62.isFixed();
        org.joda.time.DateTime dateTime84 = instant47.toDateTime(dateTimeZone62);
        int int85 = instant38.compareTo((org.joda.time.ReadableInstant) instant47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField4 and durationField74", (durationField4.compareTo(durationField74) == 0) == durationField4.equals(durationField74));
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2942");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant25.toString(dateTimeFormatter26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant25.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        java.lang.String str39 = instant36.toString();
        org.joda.time.Instant instant41 = instant36.minus((long) 36000000);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        boolean boolean43 = instant25.isAfter((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology46.getZone();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, (org.joda.time.ReadableInstant) instant52);
        java.lang.String str54 = instant52.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.dayOfYear();
        org.joda.time.Instant instant61 = gJChronology57.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant61.minus(readableDuration62);
        org.joda.time.Instant instant66 = instant63.withDurationAdded((-12219292800000L), 0);
        int int67 = instant52.compareTo((org.joda.time.ReadableInstant) instant63);
        long long68 = instant52.getMillis();
        org.joda.time.Instant instant69 = instant52.toInstant();
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        boolean boolean71 = instant25.isEqual((org.joda.time.ReadableInstant) instant69);
        org.joda.time.Instant instant72 = instant69.toInstant();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74);
        org.joda.time.DateTimeZone dateTimeZone76 = gJChronology75.getZone();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology75.dayOfYear();
        org.joda.time.Instant instant79 = gJChronology75.getGregorianCutover();
        org.joda.time.Chronology chronology80 = instant79.getChronology();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Instant instant82 = instant79.minus(readableDuration81);
        long long83 = instant79.getMillis();
        boolean boolean84 = instant69.isAfter((org.joda.time.ReadableInstant) instant79);
        long long85 = instant69.getMillis();
        java.lang.Object obj86 = null;
        boolean boolean87 = instant69.equals(obj86);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.chrono.GJChronology gJChronology90 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone88, readableInstant89);
        java.lang.String str91 = gJChronology90.toString();
        org.joda.time.DateTimeField dateTimeField92 = gJChronology90.dayOfYear();
        java.lang.String str93 = gJChronology90.toString();
        org.joda.time.DateTimeField dateTimeField94 = gJChronology90.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField95 = gJChronology90.clockhourOfHalfday();
        org.joda.time.DateTime dateTime96 = instant69.toDateTime((org.joda.time.Chronology) gJChronology90);
        org.joda.time.DateTimeField dateTimeField97 = gJChronology90.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime96", (instant8.compareTo(dateTime96) == 0) == instant8.equals(dateTime96));
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2943");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DurationField durationField7 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField7", Math.signum(durationField6.compareTo(durationField7)) == -Math.signum(durationField7.compareTo(durationField6)));
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2944");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = instant8.isEqual(readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        java.lang.String str20 = dateTimeZone17.getName((long) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime21 = instant8.toMutableDateTime(dateTimeZone17);
        java.lang.String str23 = dateTimeZone17.getShortName(45L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime21", (instant6.compareTo(mutableDateTime21) == 0) == instant6.equals(mutableDateTime21));
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2945");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, (long) 36000000, 4);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.hourOfDay();
        int int12 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField13 = julianChronology3.halfdays();
        org.joda.time.DurationField durationField14 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField4, and durationField5", !(durationField14.compareTo(durationField4) == 0) || (Math.signum(durationField14.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2946");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1L);
        boolean boolean6 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(100L);
        boolean boolean9 = instant5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology12.add(readablePeriod14, (long) (short) -1, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology12.getZone();
        org.joda.time.DateTime dateTime19 = instant8.toDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.Instant instant22 = instant8.withDurationAdded((-14690980799883592L), 20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long31 = instant29.getMillis();
        org.joda.time.MutableDateTime mutableDateTime32 = instant29.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        boolean boolean38 = julianChronology36.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology36.millisOfDay();
        org.joda.time.Instant instant41 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant44 = instant41.withDurationAdded(readableDuration42, 10);
        java.util.Date date45 = instant44.toDate();
        boolean boolean46 = julianChronology36.equals((java.lang.Object) instant44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.Chronology chronology50 = gJChronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology49.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology49.yearOfCentury();
        org.joda.time.DurationField durationField56 = gJChronology49.seconds();
        boolean boolean57 = instant44.equals((java.lang.Object) durationField56);
        boolean boolean58 = mutableDateTime32.isAfter((org.joda.time.ReadableInstant) instant44);
        boolean boolean59 = instant22.isEqual((org.joda.time.ReadableInstant) mutableDateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime19", (instant8.compareTo(dateTime19) == 0) == instant8.equals(dateTime19));
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2947");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        boolean boolean3 = instant0.isBeforeNow();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 0);
        java.util.Date date9 = instant5.toDate();
        long long10 = instant5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        java.lang.String str21 = instant19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        int int34 = instant19.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.dayOfWeek();
        org.joda.time.DurationField durationField40 = gJChronology37.years();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology37.weekyear();
        boolean boolean42 = instant19.equals((java.lang.Object) dateTimeField41);
        org.joda.time.Instant instant44 = instant19.withMillis(32L);
        boolean boolean45 = instant5.isEqual((org.joda.time.ReadableInstant) instant44);
        boolean boolean46 = instant0.equals((java.lang.Object) instant5);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant5.minus(readableDuration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant5.withDurationAdded(readableDuration49, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField56 = julianChronology55.weeks();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology55.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = julianChronology55.add(readablePeriod59, 4L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology55.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.chrono.JulianChronology julianChronology68 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone66);
        boolean boolean70 = julianChronology68.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology71 = julianChronology68.withUTC();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology73 = julianChronology68.withZone(dateTimeZone72);
        long long75 = dateTimeZone72.convertUTCToLocal((-107999990L));
        org.joda.time.Chronology chronology76 = julianChronology55.withZone(dateTimeZone72);
        org.joda.time.MutableDateTime mutableDateTime77 = instant51.toMutableDateTime(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        org.joda.time.chrono.JulianChronology julianChronology81 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone79);
        boolean boolean83 = julianChronology81.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField84 = julianChronology81.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology81.secondOfDay();
        long long89 = julianChronology81.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeField dateTimeField90 = julianChronology81.millisOfSecond();
        org.joda.time.DurationField durationField91 = julianChronology81.seconds();
        org.joda.time.DateTime dateTime92 = instant51.toDateTime((org.joda.time.Chronology) julianChronology81);
        org.joda.time.DurationField durationField93 = julianChronology81.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime92", (instant5.compareTo(dateTime92) == 0) == instant5.equals(dateTime92));
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2948");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Chronology chronology25 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = julianChronology16.seconds();
        boolean boolean27 = instant13.equals((java.lang.Object) durationField26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant13.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology32.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        org.joda.time.Chronology chronology41 = julianChronology32.withZone(dateTimeZone40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone40.getShortName((long) (short) 100, locale43);
        long long48 = dateTimeZone40.convertLocalToUTC(36000001L, false, (-32399903L));
        org.joda.time.DateTime dateTime49 = instant29.toDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone50.getName((-484113670992584L), locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime49", (instant9.compareTo(dateTime49) == 0) == instant9.equals(dateTime49));
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2949");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(100);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant12);
        java.lang.String str14 = instant12.toString();
        int int15 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) instant12);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((java.lang.Object) instant16);
        org.joda.time.Instant instant19 = instant17.minus(5201L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant23 = instant21.plus(110L);
        boolean boolean25 = instant23.isAfter((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        java.lang.String str30 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.dayOfWeek();
        org.joda.time.Instant instant34 = gJChronology28.getGregorianCutover();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        boolean boolean36 = instant23.isAfter((org.joda.time.ReadableInstant) instant34);
        boolean boolean37 = instant17.isEqual((org.joda.time.ReadableInstant) instant23);
        boolean boolean38 = dateTimeZone1.equals((java.lang.Object) instant17);
        org.joda.time.Instant instant40 = instant17.withMillis((-60514215168419L));
        org.joda.time.Instant instant42 = new org.joda.time.Instant(0L);
        long long43 = instant42.getMillis();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.millisOfDay();
        org.joda.time.DurationField durationField50 = gJChronology46.halfdays();
        org.joda.time.DurationField durationField51 = gJChronology46.millis();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology54 = gJChronology46.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology46.minutes();
        org.joda.time.DurationField durationField56 = gJChronology46.weekyears();
        org.joda.time.DurationField durationField57 = gJChronology46.minutes();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology46.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology46.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime60 = instant42.toMutableDateTime((org.joda.time.Chronology) gJChronology46);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.Chronology chronology64 = gJChronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.millisOfDay();
        org.joda.time.DurationField durationField67 = gJChronology63.halfdays();
        org.joda.time.DurationField durationField68 = gJChronology63.millis();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology71 = gJChronology63.withZone(dateTimeZone70);
        int int73 = dateTimeZone70.getStandardOffset((-12219292800000L));
        long long75 = dateTimeZone70.nextTransition((-59082429599991L));
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76, readableInstant77);
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology78.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology78.dayOfYear();
        org.joda.time.Instant instant82 = gJChronology78.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone83 = instant82.getZone();
        long long84 = instant82.getMillis();
        int int85 = dateTimeZone70.getOffset((org.joda.time.ReadableInstant) instant82);
        boolean boolean86 = instant42.isBefore((org.joda.time.ReadableInstant) instant82);
        boolean boolean87 = instant40.isBefore((org.joda.time.ReadableInstant) instant82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and mutableDateTime60", (instant42.compareTo(mutableDateTime60) == 0) == instant42.equals(mutableDateTime60));
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2950");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        boolean boolean8 = instant5.isAfter((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant5.isSupported(dateTimeFieldType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant5.minus(readableDuration11);
        java.lang.String str13 = instant5.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant5", (dateTime6.compareTo(instant5) == 0) == dateTime6.equals(instant5));
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2951");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.DateTime dateTime14 = instant8.toDateTime();
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = dateTime14.isAfter(readableInstant15);
        boolean boolean17 = dateTime14.isBeforeNow();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant19.withDurationAdded(readableDuration20, 0);
        org.joda.time.Instant instant24 = instant22.minus((long) (short) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime26 = instant24.toMutableDateTime();
        org.joda.time.Instant instant28 = instant24.plus((long) (-3600000));
        boolean boolean29 = dateTime14.isAfter((org.joda.time.ReadableInstant) instant24);
        java.lang.String str30 = dateTime14.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime25", (instant24.compareTo(dateTime25) == 0) == instant24.equals(dateTime25));
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2952");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant12);
        java.lang.String str14 = instant12.toString();
        int int15 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) instant12);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((java.lang.Object) instant16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) instant17);
        org.joda.time.Instant instant20 = instant17.minus((long) ' ');
        boolean boolean21 = instant0.isBefore((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = instant0.isSupported(dateTimeFieldType22);
        org.joda.time.Instant instant24 = instant0.toInstant();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((java.lang.Object) instant0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.Instant instant32 = gJChronology28.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology28.hourOfHalfday();
        org.joda.time.Chronology chronology35 = gJChronology28.withUTC();
        org.joda.time.MutableDateTime mutableDateTime36 = instant0.toMutableDateTime(chronology35);
        org.joda.time.MutableDateTime mutableDateTime37 = instant0.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime36", (instant0.compareTo(mutableDateTime36) == 0) == instant0.equals(mutableDateTime36));
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2953");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = gJChronology8.years();
        org.joda.time.DurationField durationField11 = gJChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField11", (durationField10.compareTo(durationField11) == 0) == durationField10.equals(durationField11));
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2954");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        long long10 = gJChronology2.add((-6211221875988790L), (-12219292799965L), 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        java.lang.String str20 = dateTimeZone18.getName((long) 0);
        long long23 = dateTimeZone18.adjustOffset(1L, true);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) ' ');
        java.lang.String str31 = dateTimeZone28.getID();
        boolean boolean32 = dateTimeZone18.equals((java.lang.Object) dateTimeZone28);
        org.joda.time.Chronology chronology33 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str40 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology41 = gJChronology36.withZone(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone45 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.Instant instant49 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant49.plus(readableDuration50);
        org.joda.time.Instant instant53 = instant51.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime54 = instant53.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant53.isSupported(dateTimeFieldType55);
        int int57 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) instant53);
        long long58 = instant53.getMillis();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str65 = dateTimeZone64.getID();
        org.joda.time.Chronology chronology66 = gJChronology61.withZone(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = gJChronology61.getZone();
        long long69 = dateTimeZone67.nextTransition((-12219292800000L));
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology72.getZone();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.dayOfYear();
        org.joda.time.Instant instant76 = gJChronology72.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant76.minus(readableDuration77);
        java.lang.String str79 = instant76.toString();
        org.joda.time.Instant instant81 = instant76.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone82 = instant76.getZone();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant85 = instant76.withDurationAdded(readableDuration83, (int) '4');
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.chrono.GJChronology gJChronology87 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, (org.joda.time.ReadableInstant) instant85);
        boolean boolean88 = instant53.isEqual((org.joda.time.ReadableInstant) instant85);
        boolean boolean89 = gJChronology2.equals((java.lang.Object) instant53);
        org.joda.time.DateTimeField dateTimeField90 = gJChronology2.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant53 and dateTime54", (instant53.compareTo(dateTime54) == 0) == instant53.equals(dateTime54));
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2955");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-12219292800000L), 0);
        boolean boolean14 = instant9.isEqual(35L);
        boolean boolean15 = instant0.isEqual((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant9.plus(readableDuration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.millisOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.halfdays();
        org.joda.time.DurationField durationField25 = gJChronology20.millis();
        org.joda.time.DateTime dateTime26 = instant9.toDateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTime dateTime27 = instant9.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime26", (instant9.compareTo(dateTime26) == 0) == instant9.equals(dateTime26));
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2956");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        org.joda.time.MutableDateTime mutableDateTime32 = instant8.toMutableDateTime();
        org.joda.time.DateTime dateTime33 = instant8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.Instant instant40 = gJChronology36.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant40.minus(readableDuration41);
        org.joda.time.Instant instant45 = instant42.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant42.plus(readableDuration46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = instant42.isEqual(readableInstant48);
        org.joda.time.Chronology chronology50 = instant42.getChronology();
        org.joda.time.Chronology chronology51 = instant42.getChronology();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant42.minus(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant42.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.Instant instant62 = gJChronology58.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant62.minus(readableDuration63);
        org.joda.time.Instant instant67 = instant64.withDurationAdded((-12219292800000L), 0);
        boolean boolean69 = instant64.isEqual(35L);
        org.joda.time.Instant instant70 = instant64.toInstant();
        boolean boolean72 = instant70.isBefore((long) ' ');
        long long73 = instant70.getMillis();
        boolean boolean74 = instant42.isEqual((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Instant instant75 = instant70.toInstant();
        org.joda.time.Chronology chronology76 = instant75.getChronology();
        int int77 = dateTime33.compareTo((org.joda.time.ReadableInstant) instant75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime32", (instant8.compareTo(mutableDateTime32) == 0) == instant8.equals(mutableDateTime32));
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2957");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.plus(readableDuration15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.Instant instant34 = gJChronology30.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.minus(readableDuration35);
        org.joda.time.Instant instant39 = instant36.withDurationAdded((-12219292800000L), 0);
        int int40 = instant25.compareTo((org.joda.time.ReadableInstant) instant36);
        long long41 = instant25.getMillis();
        org.joda.time.Instant instant42 = instant25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone43 = instant25.getZone();
        int int44 = instant16.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant46 = instant16.plus((-62158787999900L));
        long long47 = instant46.getMillis();
        boolean boolean48 = instant13.isBefore((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant50 = instant46.plus((-11L));
        boolean boolean52 = instant50.isAfter((-35999991L));
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant55 = instant50.withDurationAdded(readableDuration53, (int) (short) 100);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        org.joda.time.Chronology chronology60 = gJChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66);
        org.joda.time.DateTimeZone dateTimeZone68 = gJChronology67.getZone();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str71 = dateTimeZone70.getID();
        org.joda.time.Chronology chronology72 = gJChronology67.withZone(dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology67.getZone();
        long long75 = dateTimeZone73.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology76 = gJChronology59.withZone(dateTimeZone73);
        org.joda.time.Chronology chronology77 = gJChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology59.monthOfYear();
        org.joda.time.DurationField durationField79 = gJChronology59.halfdays();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology59.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology59.hourOfHalfday();
        java.lang.String str82 = gJChronology59.toString();
        org.joda.time.DateTime dateTime83 = instant55.toDateTime((org.joda.time.Chronology) gJChronology59);
        org.joda.time.DurationField durationField84 = gJChronology59.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and dateTime83", (instant50.compareTo(dateTime83) == 0) == instant50.equals(dateTime83));
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2958");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfYear();
        java.lang.String str11 = gJChronology2.toString();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology2.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField12", (durationField9.compareTo(durationField12) == 0) == durationField9.equals(durationField12));
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2959");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        boolean boolean12 = dateTimeZone10.isFixed();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        java.lang.String str23 = instant21.toString();
        boolean boolean24 = instant21.isEqualNow();
        int int25 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) instant21);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTime dateTime27 = instant8.toDateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = instant8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        java.lang.String str38 = instant35.toString();
        org.joda.time.Instant instant40 = instant35.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone41 = instant35.getZone();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant44 = instant35.withDurationAdded(readableDuration42, 69);
        int int45 = instant8.compareTo((org.joda.time.ReadableInstant) instant44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and mutableDateTime28", (dateTime27.compareTo(mutableDateTime28) == 0) == dateTime27.equals(mutableDateTime28));
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2960");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        java.lang.String str15 = instant13.toString();
        boolean boolean16 = instant13.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime17 = instant13.toMutableDateTimeISO();
        org.joda.time.Chronology chronology18 = instant13.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime17", (instant13.compareTo(mutableDateTime17) == 0) == instant13.equals(mutableDateTime17));
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2961");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = instant26.getChronology();
        org.joda.time.Instant instant31 = instant26.withMillis((-35999968L));
        org.joda.time.MutableDateTime mutableDateTime32 = instant26.toMutableDateTime();
        long long33 = instant26.getMillis();
        org.joda.time.MutableDateTime mutableDateTime34 = instant26.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = mutableDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology39.getZone();
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, (org.joda.time.ReadableInstant) instant45);
        org.joda.time.DateTime dateTime47 = instant45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.Chronology chronology51 = gJChronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology50.dayOfYear();
        boolean boolean57 = instant45.equals((java.lang.Object) dateTimeField56);
        org.joda.time.DateTime dateTime58 = instant45.toDateTimeISO();
        boolean boolean59 = mutableDateTime34.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime32", (instant26.compareTo(mutableDateTime32) == 0) == instant26.equals(mutableDateTime32));
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2962");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField9, and durationField5", !(durationField5.compareTo(durationField9) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField9.compareTo(durationField5))));
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2963");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        boolean boolean13 = instant10.isAfter(110L);
        org.joda.time.DateTime dateTime14 = instant10.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.Chronology chronology18 = gJChronology17.withUTC();
        org.joda.time.DurationField durationField19 = gJChronology17.millis();
        org.joda.time.Chronology chronology20 = gJChronology17.withUTC();
        org.joda.time.DurationField durationField21 = gJChronology17.seconds();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.weekOfWeekyear();
        org.joda.time.Instant instant23 = gJChronology17.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.clockhourOfDay();
        int int26 = instant10.get(dateTimeField25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime14", (instant10.compareTo(dateTime14) == 0) == instant10.equals(dateTime14));
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2964");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.dayOfYear();
        boolean boolean20 = instant8.equals((java.lang.Object) dateTimeField19);
        org.joda.time.Chronology chronology21 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        java.lang.String str31 = instant28.toString();
        org.joda.time.Instant instant33 = instant28.minus((long) 36000000);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        boolean boolean36 = instant33.isBefore(100L);
        boolean boolean37 = instant8.isAfter((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant38 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone39 = instant8.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant8", (dateTime10.compareTo(instant8) == 0) == dateTime10.equals(instant8));
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2965");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        java.lang.String str8 = instant7.toString();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant7.plus(readableDuration9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        boolean boolean12 = instant11.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant11.toMutableDateTime();
        org.joda.time.DateTime dateTime14 = instant11.toDateTimeISO();
        boolean boolean15 = instant7.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime13", (instant11.compareTo(mutableDateTime13) == 0) == instant11.equals(mutableDateTime13));
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2966");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.Instant instant8 = instant6.withMillis((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.clockhourOfDay();
        org.joda.time.Chronology chronology16 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.weekyear();
        boolean boolean18 = instant6.equals((java.lang.Object) gJChronology11);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        boolean boolean24 = julianChronology22.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology25 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology22.era();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone29.getShortName((long) (byte) 1, locale31);
        org.joda.time.Chronology chronology33 = julianChronology22.withZone(dateTimeZone29);
        boolean boolean35 = dateTimeZone29.isStandardOffset((-73965769918558030L));
        org.joda.time.DateTime dateTime36 = instant6.toDateTime(dateTimeZone29);
        boolean boolean38 = dateTime36.isEqual((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, (org.joda.time.ReadableInstant) instant47);
        org.joda.time.DateTime dateTime49 = instant47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.Chronology chronology53 = gJChronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology52.dayOfYear();
        boolean boolean59 = instant47.equals((java.lang.Object) dateTimeField58);
        org.joda.time.Chronology chronology60 = instant47.getChronology();
        org.joda.time.DateTime dateTime61 = instant47.toDateTime();
        boolean boolean62 = dateTime36.isBefore((org.joda.time.ReadableInstant) instant47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime49", (instant1.compareTo(dateTime49) == 0) == instant1.equals(dateTime49));
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2967");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        boolean boolean14 = instant11.isBefore(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = instant11.isSupported(dateTimeFieldType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = instant11.isEqual(readableInstant17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant11.toMutableDateTimeISO();
        java.lang.String str20 = mutableDateTime19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField25 = julianChronology24.centuries();
        java.lang.String str26 = julianChronology24.toString();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology24.yearOfEra();
        org.joda.time.DurationField durationField28 = julianChronology24.months();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology24.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology24.yearOfCentury();
        org.joda.time.Chronology chronology32 = julianChronology24.withUTC();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime19.toMutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime19", (instant11.compareTo(mutableDateTime19) == 0) == instant11.equals(mutableDateTime19));
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2968");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant3 = instant1.plus(110L);
        org.joda.time.Instant instant4 = instant3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        boolean boolean10 = julianChronology8.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField11 = julianChronology8.months();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone13.getName((-1L), locale16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone13.isLocalDateTimeGap(localDateTime18);
        boolean boolean21 = dateTimeZone13.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology22 = julianChronology8.withZone(dateTimeZone13);
        int int24 = dateTimeZone13.getOffset((-35999900L));
        int int26 = dateTimeZone13.getOffset((long) '#');
        org.joda.time.DateTime dateTime27 = instant4.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.millisOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.halfdays();
        org.joda.time.DurationField durationField35 = gJChronology30.millis();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology38 = gJChronology30.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology30.minutes();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology30.halfdayOfDay();
        org.joda.time.DurationField durationField41 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology30.secondOfDay();
        long long46 = gJChronology30.add((long) 9, 0L, 0);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology30.clockhourOfHalfday();
        org.joda.time.DateTime dateTime48 = dateTime27.toDateTime((org.joda.time.Chronology) gJChronology30);
        boolean boolean49 = dateTime48.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime27", (instant3.compareTo(dateTime27) == 0) == instant3.equals(dateTime27));
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2969");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        long long9 = dateTimeZone6.convertLocalToUTC((long) 0, true);
        int int11 = dateTimeZone6.getOffsetFromLocal(0L);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.Instant instant14 = org.joda.time.Instant.parse("1582-10-15T00:00:00.035Z");
        org.joda.time.DateTime dateTime15 = instant14.toDateTimeISO();
        org.joda.time.Instant instant18 = instant14.withDurationAdded((long) 353, 36000000);
        org.joda.time.MutableDateTime mutableDateTime19 = instant14.toMutableDateTimeISO();
        org.joda.time.Instant instant21 = instant14.withMillis((long) 5);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant14);
        java.lang.String str24 = dateTimeZone6.getNameKey(107999998L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime15", (instant14.compareTo(dateTime15) == 0) == instant14.equals(dateTime15));
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2970");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = gJChronology2.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2971");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology2.minutes();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DurationField durationField9 = gJChronology2.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField8", Math.signum(durationField6.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField6)));
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2972");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        org.joda.time.DurationField durationField12 = julianChronology3.seconds();
        org.joda.time.DurationField durationField13 = julianChronology3.seconds();
        org.joda.time.Chronology chronology14 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField15 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField9, and durationField12", !(durationField15.compareTo(durationField9) == 0) || (Math.signum(durationField15.compareTo(durationField12)) == Math.signum(durationField9.compareTo(durationField12))));
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2973");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = instant8.toDateTime();
        org.joda.time.Instant instant14 = instant8.withMillis(100L);
        boolean boolean15 = instant1.isAfter((org.joda.time.ReadableInstant) instant8);
        long long16 = instant8.getMillis();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        org.joda.time.DurationField durationField21 = gJChronology19.millis();
        long long25 = gJChronology19.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField26 = gJChronology19.millis();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology19.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology19.getZone();
        int int31 = dateTimeZone29.getStandardOffset((long) 8);
        java.lang.String str32 = dateTimeZone29.getID();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant34.withDurationAdded(readableDuration35, 0);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        java.util.Date date40 = instant37.toDate();
        boolean boolean41 = instant37.isBeforeNow();
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone44);
        boolean boolean48 = julianChronology46.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology46.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology46.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = julianChronology46.weeks();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology46.yearOfEra();
        org.joda.time.DurationField durationField53 = julianChronology46.seconds();
        int int54 = julianChronology46.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology46.weekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = julianChronology46.getZone();
        long long59 = dateTimeZone29.getMillisKeepLocal(dateTimeZone57, 86400000L);
        org.joda.time.MutableDateTime mutableDateTime60 = instant8.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.dayOfYear();
        org.joda.time.Instant instant67 = gJChronology63.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant67.minus(readableDuration68);
        org.joda.time.Instant instant72 = instant69.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant69.plus(readableDuration73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        boolean boolean76 = instant69.isEqual(readableInstant75);
        org.joda.time.Chronology chronology77 = instant69.getChronology();
        org.joda.time.Chronology chronology78 = instant69.getChronology();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Instant instant80 = instant69.minus(readableDuration79);
        org.joda.time.DateTimeZone dateTimeZone81 = instant80.getZone();
        boolean boolean82 = instant80.isEqualNow();
        boolean boolean83 = instant8.isBefore((org.joda.time.ReadableInstant) instant80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and instant8", (mutableDateTime11.compareTo(instant8) == 0) == mutableDateTime11.equals(instant8));
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2974");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant16 = instant14.minus(5201L);
        org.joda.time.Instant instant18 = instant14.plus((-71999900L));
        java.lang.String str19 = instant14.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = instant14.toMutableDateTimeISO();
        org.joda.time.Instant instant22 = instant14.plus((-60514215076241L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime20", (instant9.compareTo(mutableDateTime20) == 0) == instant9.equals(mutableDateTime20));
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2975");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.minuteOfDay();
        int int8 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField9 = julianChronology3.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField9, and durationField5", !(durationField5.compareTo(durationField9) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField9.compareTo(durationField5))));
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2976");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone17 = instant16.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField22 = julianChronology21.centuries();
        java.lang.String str23 = julianChronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology21.yearOfEra();
        org.joda.time.DurationField durationField25 = julianChronology21.months();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology28.minuteOfDay();
        boolean boolean30 = julianChronology21.equals((java.lang.Object) dateTimeField29);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology21.secondOfMinute();
        int int32 = julianChronology21.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        boolean boolean38 = julianChronology36.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField39 = julianChronology36.months();
        boolean boolean40 = julianChronology21.equals((java.lang.Object) julianChronology36);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology21.dayOfYear();
        org.joda.time.DateTime dateTime42 = instant16.toDateTime((org.joda.time.Chronology) julianChronology21);
        int int43 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45);
        boolean boolean49 = julianChronology47.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology50 = julianChronology47.withUTC();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology52 = julianChronology47.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField53 = julianChronology47.days();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology47.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str57 = dateTimeZone56.getID();
        boolean boolean58 = dateTimeZone56.isFixed();
        long long60 = dateTimeZone56.previousTransition(100L);
        java.util.TimeZone timeZone61 = dateTimeZone56.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.Chronology chronology63 = julianChronology47.withZone(dateTimeZone62);
        java.util.TimeZone timeZone64 = dateTimeZone62.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology65.getZone();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology69.getZone();
        org.joda.time.Instant instant75 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, (org.joda.time.ReadableInstant) instant75);
        long long78 = dateTimeZone73.nextTransition((long) 0);
        long long80 = dateTimeZone66.getMillisKeepLocal(dateTimeZone73, (long) (byte) 100);
        java.lang.String str82 = dateTimeZone73.getNameKey((-60514215282090L));
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        boolean boolean84 = instant83.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime85 = instant83.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone86 = mutableDateTime85.getZone();
        org.joda.time.chrono.GJChronology gJChronology87 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, (org.joda.time.ReadableInstant) mutableDateTime85);
        boolean boolean89 = mutableDateTime85.isAfter(90000000L);
        org.joda.time.chrono.GJChronology gJChronology90 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) mutableDateTime85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime42", (instant16.compareTo(dateTime42) == 0) == instant16.equals(dateTime42));
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2977");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTime dateTime10 = instant9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        java.lang.String str20 = instant17.toString();
        org.joda.time.Instant instant22 = instant17.minus((long) 36000000);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        long long24 = instant22.getMillis();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        long long33 = gJChronology27.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology27.dayOfYear();
        org.joda.time.DurationField durationField36 = gJChronology27.weekyears();
        boolean boolean37 = instant22.equals((java.lang.Object) durationField36);
        org.joda.time.Instant instant39 = instant22.plus((-60514215195738L));
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.Chronology chronology43 = gJChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.dayOfWeek();
        org.joda.time.Chronology chronology45 = gJChronology42.withUTC();
        org.joda.time.DurationField durationField46 = gJChronology42.hours();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology42.clockhourOfDay();
        java.lang.String str48 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology42.halfdayOfDay();
        org.joda.time.Chronology chronology51 = gJChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology42.yearOfEra();
        org.joda.time.DateTime dateTime54 = instant39.toDateTime((org.joda.time.Chronology) gJChronology42);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant39.plus(readableDuration55);
        boolean boolean57 = dateTime10.isAfter((org.joda.time.ReadableInstant) instant56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant56 and dateTime54", (instant56.compareTo(dateTime54) == 0) == instant56.equals(dateTime54));
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2978");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int10 = dateTimeZone7.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        java.lang.String str40 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.dayOfWeek();
        org.joda.time.Instant instant44 = gJChronology38.getGregorianCutover();
        boolean boolean45 = instant33.equals((java.lang.Object) gJChronology38);
        boolean boolean46 = instant24.isAfter((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant48 = instant33.minus((-61543965598418L));
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant48);
        boolean boolean50 = instant48.isEqualNow();
        boolean boolean52 = instant48.isAfter((long) 3600000);
        org.joda.time.Instant instant55 = instant48.withDurationAdded((long) 5, (int) (short) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime57 = instant55.toMutableDateTime();
        org.joda.time.Chronology chronology58 = instant55.getChronology();
        java.lang.String str59 = chronology58.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant55 and dateTime56", (instant55.compareTo(dateTime56) == 0) == instant55.equals(dateTime56));
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2979");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.year();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField7, and durationField5", !(durationField5.compareTo(durationField7) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField7.compareTo(durationField5))));
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2980");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = instant1.toString(dateTimeFormatter2);
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.dayOfYear();
        org.joda.time.Instant instant11 = gJChronology7.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.minus(readableDuration12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant15.withDurationAdded(readableDuration16, 0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.Instant instant25 = gJChronology21.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.minus(readableDuration26);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((-12219292800000L), 0);
        boolean boolean32 = instant27.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology35.monthOfYear();
        boolean boolean43 = instant27.equals((java.lang.Object) dateTimeField42);
        org.joda.time.Instant instant45 = instant27.withMillis(1L);
        boolean boolean46 = instant18.isBefore((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Instant instant48 = instant45.plus(3600000L);
        org.joda.time.MutableDateTime mutableDateTime49 = instant45.toMutableDateTime();
        boolean boolean50 = instant13.isAfter((org.joda.time.ReadableInstant) mutableDateTime49);
        boolean boolean51 = instant4.isBefore((org.joda.time.ReadableInstant) instant13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant45 and mutableDateTime49", (instant45.compareTo(mutableDateTime49) == 0) == instant45.equals(mutableDateTime49));
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2981");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.era();
        org.joda.time.DurationField durationField7 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField10 = gJChronology2.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField10, and durationField5", !(durationField5.compareTo(durationField10) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField10.compareTo(durationField5))));
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2982");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = julianChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.weekyearOfCentury();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long24 = dateTimeZone17.previousTransition(5201L);
        org.joda.time.Chronology chronology25 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology13.year();
        java.lang.String str27 = julianChronology13.toString();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology13.monthOfYear();
        org.joda.time.DurationField durationField30 = julianChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone31 = julianChronology13.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology13.getZone();
        org.joda.time.Chronology chronology33 = julianChronology3.withZone(dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField30", (durationField8.compareTo(durationField30) == 0) == durationField8.equals(durationField30));
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2983");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.Chronology chronology6 = gJChronology5.withUTC();
        org.joda.time.DurationField durationField7 = gJChronology5.millis();
        long long11 = gJChronology5.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField12 = gJChronology5.millis();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology5.clockhourOfHalfday();
        org.joda.time.Instant instant15 = gJChronology5.getGregorianCutover();
        boolean boolean16 = instant1.isAfter((org.joda.time.ReadableInstant) instant15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone18.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTime dateTime21 = instant15.toDateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant15.withDurationAdded(readableDuration22, 8);
        org.joda.time.Instant instant26 = instant15.withMillis((-62111908799990L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant15", (dateTime21.compareTo(instant15) == 0) == dateTime21.equals(instant15));
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2984");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean1 = instant0.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.DateTime dateTime3 = instant0.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant0.plus(readableDuration4);
        long long6 = instant0.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant0", (mutableDateTime2.compareTo(instant0) == 0) == mutableDateTime2.equals(instant0));
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2985");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant13.minus(readableDuration14);
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTimeISO();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant21 = instant18.withDurationAdded(readableDuration19, 0);
        org.joda.time.Instant instant23 = instant21.minus((long) (short) -1);
        org.joda.time.Instant instant25 = instant23.withMillis((-1L));
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.clockhourOfDay();
        org.joda.time.Chronology chronology33 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology28.weekyear();
        boolean boolean35 = instant23.equals((java.lang.Object) gJChronology28);
        org.joda.time.DurationField durationField36 = gJChronology28.hours();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology28.yearOfEra();
        int int38 = instant15.get(dateTimeField37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime16", (instant15.compareTo(mutableDateTime16) == 0) == instant15.equals(mutableDateTime16));
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2986");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000001L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant12);
        java.lang.String str14 = instant12.toString();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) (byte) -1);
        boolean boolean19 = instant12.isBefore(809L);
        boolean boolean20 = instant12.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone21 = instant12.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.weekyear();
        org.joda.time.Instant instant26 = gJChronology24.getGregorianCutover();
        org.joda.time.Instant instant29 = instant26.withDurationAdded((long) (-3600000), 5);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        java.lang.String str33 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.dayOfYear();
        java.lang.String str35 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology32.weekyear();
        int int41 = gJChronology32.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology32.getZone();
        long long44 = dateTimeZone42.previousTransition((-12959999999999L));
        java.lang.String str46 = dateTimeZone42.getNameKey((-7433151155985290L));
        org.joda.time.MutableDateTime mutableDateTime47 = instant29.toMutableDateTime(dateTimeZone42);
        int int48 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.year();
        int int58 = instant51.get(dateTimeField57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.dayOfWeek();
        boolean boolean62 = instant51.equals((java.lang.Object) gJChronology59);
        boolean boolean63 = mutableDateTime47.equals((java.lang.Object) instant51);
        int int64 = instant3.compareTo((org.joda.time.ReadableInstant) instant51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and mutableDateTime47", (instant29.compareTo(mutableDateTime47) == 0) == instant29.equals(mutableDateTime47));
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2987");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        long long13 = instant11.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime12", (instant11.compareTo(dateTime12) == 0) == instant11.equals(dateTime12));
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2988");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = julianChronology2.minuteOfHour();
        org.joda.time.DurationField durationField5 = julianChronology2.millis();
        org.joda.time.DurationField durationField6 = julianChronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.millisOfDay();
        org.joda.time.DurationField durationField13 = gJChronology9.halfdays();
        org.joda.time.DurationField durationField14 = gJChronology9.millis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology17 = gJChronology9.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology9.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.Chronology chronology24 = gJChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Chronology chronology36 = gJChronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology31.getZone();
        long long39 = dateTimeZone37.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology40 = gJChronology23.withZone(dateTimeZone37);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone37.getShortName(31799999L, locale42);
        java.util.TimeZone timeZone44 = dateTimeZone37.toTimeZone();
        java.lang.String str45 = dateTimeZone37.toString();
        org.joda.time.Chronology chronology46 = gJChronology9.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology47 = julianChronology2.withZone(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField14", (durationField5.compareTo(durationField14) == 0) == durationField5.equals(durationField14));
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2989");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.Instant instant28 = instant23.minus((-435599901L));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DurationField durationField33 = gJChronology31.millis();
        org.joda.time.Chronology chronology34 = gJChronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        boolean boolean40 = julianChronology38.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology41 = julianChronology38.withUTC();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology43 = julianChronology38.withZone(dateTimeZone42);
        java.lang.String str44 = dateTimeZone42.getID();
        boolean boolean45 = gJChronology31.equals((java.lang.Object) str44);
        org.joda.time.DurationField durationField46 = gJChronology31.seconds();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology31.weekyear();
        org.joda.time.DurationField durationField48 = gJChronology31.weeks();
        org.joda.time.Chronology chronology49 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology31.weekyearOfCentury();
        boolean boolean51 = instant28.equals((java.lang.Object) dateTimeField50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.Chronology chronology56 = gJChronology54.withUTC();
        org.joda.time.DurationField durationField57 = gJChronology54.months();
        org.joda.time.DurationField durationField58 = gJChronology54.weeks();
        org.joda.time.Instant instant59 = gJChronology54.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTime();
        int int61 = instant28.compareTo((org.joda.time.ReadableInstant) instant59);
        org.joda.time.Instant instant63 = instant28.plus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant59 and mutableDateTime60", (instant59.compareTo(mutableDateTime60) == 0) == instant59.equals(mutableDateTime60));
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2990");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = instant8.isEqual(readableInstant14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant8.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant30.plus(readableDuration34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant35);
        long long40 = dateTimeZone20.convertLocalToUTC(1L, true, (-32399903L));
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTime dateTime42 = instant8.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone20.isLocalDateTimeGap(localDateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime42", (instant6.compareTo(dateTime42) == 0) == instant6.equals(dateTime42));
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2991");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.Instant instant43 = instant37.toInstant();
        boolean boolean45 = instant43.isBefore((long) ' ');
        boolean boolean46 = instant26.isAfter((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant48 = instant26.minus(4L);
        org.joda.time.Chronology chronology49 = instant26.getChronology();
        boolean boolean51 = instant26.isAfter((-107999950L));
        org.joda.time.DateTimeZone dateTimeZone52 = instant26.getZone();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant26.minus(readableDuration53);
        boolean boolean55 = instant26.isEqualNow();
        boolean boolean57 = instant26.isEqual((-129599672399904L));
        org.joda.time.Instant instant59 = instant26.plus((-59003805599996L));
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.Chronology chronology63 = gJChronology62.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.dayOfWeek();
        org.joda.time.Chronology chronology65 = gJChronology62.withUTC();
        org.joda.time.DurationField durationField66 = gJChronology62.halfdays();
        org.joda.time.Instant instant67 = gJChronology62.getGregorianCutover();
        java.lang.String str68 = instant67.toString();
        java.lang.String str69 = instant67.toString();
        boolean boolean70 = instant59.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72);
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology73.getZone();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str77 = dateTimeZone76.getID();
        org.joda.time.Chronology chronology78 = gJChronology73.withZone(dateTimeZone76);
        java.lang.String str80 = dateTimeZone76.getName((long) (byte) 10);
        long long83 = dateTimeZone76.convertLocalToUTC((-35999900L), false);
        long long86 = dateTimeZone76.adjustOffset((long) '#', false);
        int int88 = dateTimeZone76.getOffset((long) (byte) 10);
        long long91 = dateTimeZone76.adjustOffset((long) (byte) 1, false);
        org.joda.time.chrono.JulianChronology julianChronology92 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone76);
        org.joda.time.DateTime dateTime93 = instant59.toDateTime((org.joda.time.Chronology) julianChronology92);
        org.joda.time.DateTimeField dateTimeField94 = julianChronology92.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant59 and dateTime93", (instant59.compareTo(dateTime93) == 0) == instant59.equals(dateTime93));
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2992");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField10 = julianChronology9.centuries();
        org.joda.time.DurationField durationField11 = julianChronology9.weeks();
        org.joda.time.DurationField durationField12 = julianChronology9.days();
        org.joda.time.DurationField durationField13 = julianChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology9.hourOfHalfday();
        org.joda.time.Chronology chronology15 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology9.era();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology9.year();
        org.joda.time.DateTime dateTime18 = instant5.toDateTime((org.joda.time.Chronology) julianChronology9);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology9.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime18", (instant5.compareTo(dateTime18) == 0) == instant5.equals(dateTime18));
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2993");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        long long9 = gJChronology2.add((long) 126000000, 187199999L, 1200);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology16 = julianChronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology18 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField19 = julianChronology13.seconds();
        long long23 = julianChronology13.add(36000000L, (long) 1, (-1));
        org.joda.time.DurationField durationField24 = julianChronology13.days();
        org.joda.time.DurationField durationField25 = julianChronology13.days();
        boolean boolean26 = gJChronology2.equals((java.lang.Object) julianChronology13);
        org.joda.time.DurationField durationField27 = gJChronology2.years();
        org.joda.time.DurationField durationField28 = gJChronology2.seconds();
        org.joda.time.DurationField durationField29 = gJChronology2.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField19 and durationField28", (durationField19.compareTo(durationField28) == 0) == durationField19.equals(durationField28));
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2994");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        boolean boolean12 = julianChronology10.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.Chronology chronology15 = gJChronology2.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField16", Math.signum(durationField5.compareTo(durationField16)) == -Math.signum(durationField16.compareTo(durationField5)));
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2995");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = instant7.isSupported(dateTimeFieldType8);
        org.joda.time.Instant instant11 = instant7.withMillis((-60514215257464L));
        org.joda.time.Instant instant13 = org.joda.time.Instant.parse("1970-01-01T09:59:59.999+10:00");
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        java.lang.String str20 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.year();
        org.joda.time.DurationField durationField22 = gJChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology16.getZone();
        boolean boolean25 = instant13.equals((java.lang.Object) dateTimeZone24);
        boolean boolean27 = instant13.isEqual((-35999968L));
        org.joda.time.MutableDateTime mutableDateTime28 = instant13.toMutableDateTimeISO();
        boolean boolean29 = instant7.isBefore((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.Chronology chronology33 = gJChronology32.withUTC();
        java.lang.String str34 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.dayOfWeek();
        org.joda.time.Instant instant38 = gJChronology32.getGregorianCutover();
        boolean boolean39 = instant38.isEqualNow();
        org.joda.time.Instant instant41 = instant38.minus((-35999900L));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        boolean boolean47 = julianChronology45.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology48 = julianChronology45.withUTC();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology50 = julianChronology45.withZone(dateTimeZone49);
        org.joda.time.DurationField durationField51 = julianChronology45.days();
        org.joda.time.Chronology chronology52 = julianChronology45.withUTC();
        org.joda.time.Chronology chronology53 = julianChronology45.withUTC();
        boolean boolean54 = instant38.equals((java.lang.Object) julianChronology45);
        org.joda.time.DateTimeField dateTimeField55 = julianChronology45.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology45.weekyearOfCentury();
        int int57 = instant7.get(dateTimeField56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime28", (instant13.compareTo(mutableDateTime28) == 0) == instant13.equals(mutableDateTime28));
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2996");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean1 = instant0.isAfterNow();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = instant0.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant0.isSupported(dateTimeFieldType5);
        java.lang.String str7 = instant0.toString();
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology11.millis();
        org.joda.time.Chronology chronology14 = gJChronology11.withUTC();
        org.joda.time.DurationField durationField15 = gJChronology11.seconds();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.weekOfWeekyear();
        org.joda.time.Instant instant17 = gJChronology11.getGregorianCutover();
        boolean boolean18 = instant0.isEqual((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.secondOfMinute();
        org.joda.time.DurationField durationField25 = gJChronology21.eras();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology33 = gJChronology28.withZone(dateTimeZone31);
        long long36 = dateTimeZone31.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean39 = dateTimeZone38.isFixed();
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone38.getName((-71999990L), locale41);
        org.joda.time.Chronology chronology43 = gJChronology21.withZone(dateTimeZone38);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant49 = instant46.withDurationAdded(readableDuration47, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = instant46.toString(dateTimeFormatter50);
        org.joda.time.Instant instant54 = instant46.withDurationAdded(0L, 1582);
        int int55 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) instant46);
        boolean boolean56 = instant46.isBeforeNow();
        boolean boolean57 = instant0.isAfter((org.joda.time.ReadableInstant) instant46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField13 and durationField25", Math.signum(durationField13.compareTo(durationField25)) == -Math.signum(durationField25.compareTo(durationField13)));
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2997");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Chronology chronology9 = instant6.getChronology();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, 0);
        boolean boolean16 = instant14.isEqual((long) 1);
        boolean boolean17 = instant14.isBeforeNow();
        boolean boolean18 = instant6.isEqual((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Chronology chronology19 = instant6.getChronology();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant6.plus(readableDuration20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Chronology chronology35 = gJChronology30.withZone(dateTimeZone33);
        java.lang.String str37 = dateTimeZone33.getName((long) (byte) 10);
        java.util.TimeZone timeZone38 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = gJChronology24.equals((java.lang.Object) timeZone38);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology24.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology24.weekyearOfCentury();
        org.joda.time.DateTime dateTime45 = instant6.toDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47);
        boolean boolean51 = julianChronology49.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology52 = julianChronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology49.era();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology49.minuteOfHour();
        org.joda.time.DurationField durationField55 = julianChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology49.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = julianChronology49.add(readablePeriod57, (-60514215303803L), 36000000);
        org.joda.time.DurationField durationField61 = julianChronology49.seconds();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology49.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology49.weekyearOfCentury();
        org.joda.time.DateTime dateTime64 = instant6.toDateTime((org.joda.time.Chronology) julianChronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime45", (instant6.compareTo(dateTime45) == 0) == instant6.equals(dateTime45));
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2998");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField22 = gJChronology20.millis();
        long long26 = gJChronology20.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField27 = gJChronology20.millis();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology20.millisOfSecond();
        int int32 = instant15.get(dateTimeField31);
        org.joda.time.Instant instant35 = instant15.withDurationAdded((-35999900L), 4);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology38.getZone();
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, (org.joda.time.ReadableInstant) instant44);
        java.lang.String str46 = instant44.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.dayOfYear();
        org.joda.time.Instant instant53 = gJChronology49.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant53.minus(readableDuration54);
        org.joda.time.Instant instant58 = instant55.withDurationAdded((-12219292800000L), 0);
        int int59 = instant44.compareTo((org.joda.time.ReadableInstant) instant55);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.Chronology chronology63 = gJChronology62.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.dayOfWeek();
        org.joda.time.DurationField durationField65 = gJChronology62.years();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology62.weekyear();
        boolean boolean67 = instant44.equals((java.lang.Object) dateTimeField66);
        org.joda.time.Chronology chronology68 = instant44.getChronology();
        org.joda.time.DateTime dateTime69 = instant44.toDateTimeISO();
        org.joda.time.DateTime dateTime70 = instant44.toDateTime();
        int int71 = instant35.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant44 and dateTime69", (instant44.compareTo(dateTime69) == 0) == instant44.equals(dateTime69));
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test2999");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (long) '#', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField14, and durationField12", !(durationField12.compareTo(durationField14) == 0) || (Math.signum(durationField12.compareTo(durationField12)) == Math.signum(durationField14.compareTo(durationField12))));
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest5.test3000");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.Chronology chronology10 = gJChronology5.withZone(dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology13.dayOfMonth();
        org.joda.time.DurationField durationField16 = julianChronology13.seconds();
        java.lang.String str17 = julianChronology13.toString();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeZone dateTimeZone19 = instant1.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime18", (dateTime2.compareTo(dateTime18) == 0) == dateTime2.equals(dateTime18));
    }
}


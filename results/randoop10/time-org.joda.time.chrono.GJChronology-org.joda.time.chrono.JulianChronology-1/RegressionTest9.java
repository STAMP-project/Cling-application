import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekyear();
        java.lang.String str8 = gJChronology2.toString();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+10:00]" + "'", str8, "GJChronology[+10:00]");
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.hours();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology2.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = julianChronology2.getDateTimeMillis((int) (byte) 100, 126000000, 72009726, 100, 0, 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DurationField durationField4 = gJChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone6.getName((-1L), locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone6.isLocalDateTimeGap(localDateTime11);
        boolean boolean14 = dateTimeZone6.isStandardOffset(36000000L);
        java.lang.String str15 = dateTimeZone6.toString();
        int int17 = dateTimeZone6.getOffset((-6211221911999790L));
        org.joda.time.Chronology chronology18 = gJChronology2.withZone(dateTimeZone6);
        org.joda.time.ReadablePartial readablePartial19 = null;
        int[] intArray21 = new int[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            chronology18.validate(readablePartial19, intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32]");
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.hourOfDay();
        org.joda.time.DurationField durationField11 = gJChronology8.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.year();
        java.lang.String str9 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JulianChronology[+10:00]" + "'", str9, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology2.halfdays();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.hours();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology2.clockhourOfHalfday();
        int int7 = julianChronology2.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        boolean boolean11 = julianChronology9.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology12 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology9.hourOfHalfday();
        java.lang.String str14 = julianChronology9.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology21 = julianChronology18.withUTC();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology23 = julianChronology18.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField24 = julianChronology18.seconds();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology18.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology18.year();
        org.joda.time.DateTimeZone dateTimeZone27 = julianChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = julianChronology18.getZone();
        org.joda.time.Chronology chronology29 = julianChronology9.withZone(dateTimeZone28);
        long long31 = dateTimeZone2.getMillisKeepLocal(dateTimeZone28, (-35999900L));
        java.lang.String str33 = dateTimeZone2.getName((-71936861L));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) instant42);
        java.lang.String str44 = instant42.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.Instant instant51 = gJChronology47.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.minus(readableDuration52);
        org.joda.time.Instant instant56 = instant53.withDurationAdded((-12219292800000L), 0);
        int int57 = instant42.compareTo((org.joda.time.ReadableInstant) instant53);
        long long58 = instant42.getMillis();
        org.joda.time.Instant instant59 = instant42.toInstant();
        org.joda.time.Chronology chronology60 = instant42.getChronology();
        int int61 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant42);
        org.joda.time.chrono.JulianChronology julianChronology62 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone2);
        java.lang.String str63 = julianChronology62.toString();
        org.joda.time.ReadablePartial readablePartial64 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long66 = julianChronology62.set(readablePartial64, (-35997494L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(julianChronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JulianChronology[+10:00]" + "'", str14, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-71999900L) + "'", long31 == (-71999900L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str44, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 36000000L + "'", long58 == 36000000L);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(julianChronology62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "JulianChronology[UTC]" + "'", str63, "JulianChronology[UTC]");
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = julianChronology6.secondOfMinute();
        org.joda.time.DurationField durationField8 = julianChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone11.getShortName((long) (short) -1, locale13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.getID();
        boolean boolean18 = dateTimeZone16.isFixed();
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) (byte) 1);
        boolean boolean21 = dateTimeZone11.isFixed();
        int int23 = dateTimeZone11.getStandardOffset(151200000L);
        org.joda.time.Chronology chronology24 = julianChronology6.withZone(dateTimeZone11);
        long long26 = dateTimeZone2.getMillisKeepLocal(dateTimeZone11, (long) 18600000);
        boolean boolean28 = dateTimeZone11.isStandardOffset((-60514143303751L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 331800000L + "'", long26 == 331800000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        java.lang.String str9 = dateTimeZone7.getName((long) 0);
        long long12 = dateTimeZone7.adjustOffset(1L, true);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology2.add(readablePeriod14, (-107999989L), 24);
        org.joda.time.Instant instant18 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.era();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-107999989L) + "'", long17 == (-107999989L));
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        long long8 = instant6.getMillis();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-12219292800000L) + "'", long8 == (-12219292800000L));
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        boolean boolean16 = julianChronology14.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology17 = julianChronology14.withUTC();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology19 = julianChronology14.withZone(dateTimeZone18);
        long long21 = dateTimeZone18.convertUTCToLocal((-107999990L));
        org.joda.time.Chronology chronology22 = julianChronology3.withZone(dateTimeZone18);
        int int23 = julianChronology3.getMinimumDaysInFirstWeek();
        java.lang.String str24 = julianChronology3.toString();
        org.joda.time.DurationField durationField25 = julianChronology3.seconds();
        org.joda.time.Chronology chronology26 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology3.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-107999990L) + "'", long21 == (-107999990L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JulianChronology[+10:00]" + "'", str24, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.era();
        org.joda.time.DurationField durationField7 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        boolean boolean14 = julianChronology12.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology15 = julianChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology17 = julianChronology12.withZone(dateTimeZone16);
        long long20 = dateTimeZone16.adjustOffset((long) (short) 0, false);
        long long23 = dateTimeZone16.adjustOffset((-71999990L), false);
        org.joda.time.Chronology chronology24 = gJChronology2.withZone(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-71999990L) + "'", long23 == (-71999990L));
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField13 = julianChronology3.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField8 = julianChronology3.weekyears();
        org.joda.time.DurationField durationField9 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.weekyearOfCentury();
        org.joda.time.Chronology chronology11 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Chronology chronology13 = gJChronology8.withZone(dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getName((long) (byte) 10);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean19 = gJChronology2.equals((java.lang.Object) timeZone16);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.minuteOfHour();
        java.lang.String str21 = gJChronology2.toString();
        org.joda.time.DurationField durationField22 = gJChronology2.days();
        org.joda.time.DurationField durationField23 = gJChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology2.getZone();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GJChronology[+10:00]" + "'", str21, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.secondOfDay();
        org.joda.time.ReadablePartial readablePartial16 = null;
        int[] intArray18 = new int[] { 'a' };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial16, intArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[97]");
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        boolean boolean3 = instant0.isBeforeNow();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 0);
        java.util.Date date9 = instant5.toDate();
        long long10 = instant5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        java.lang.String str21 = instant19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        int int34 = instant19.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.dayOfWeek();
        org.joda.time.DurationField durationField40 = gJChronology37.years();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology37.weekyear();
        boolean boolean42 = instant19.equals((java.lang.Object) dateTimeField41);
        org.joda.time.Instant instant44 = instant19.withMillis(32L);
        boolean boolean45 = instant5.isEqual((org.joda.time.ReadableInstant) instant44);
        boolean boolean46 = instant0.equals((java.lang.Object) instant5);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant5.minus(readableDuration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000000L + "'", long10 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str21, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DurationField durationField5 = chronology3.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology3.getZone();
        boolean boolean7 = dateTimeZone6.isFixed();
        long long9 = dateTimeZone6.nextTransition((-73965769918558030L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-73965769918558030L) + "'", long9 == (-73965769918558030L));
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.halfdayOfDay();
        org.joda.time.DurationField durationField21 = gJChronology18.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        boolean boolean12 = julianChronology10.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.Chronology chronology15 = gJChronology2.withZone(dateTimeZone14);
        boolean boolean16 = dateTimeZone14.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology2.getDateTimeMillis(4200000, 19, 72000, 20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField37 = gJChronology2.years();
        org.joda.time.Chronology chronology38 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.Chronology chronology41 = gJChronology2.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology2.getZone();
        org.joda.time.DurationField durationField43 = gJChronology2.months();
        org.joda.time.DurationField durationField44 = gJChronology2.weekyears();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 11L + "'", long34 == 11L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-59011667999903L));
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, (int) (short) 0);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime5.getZone();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0099-12-30T00:00:00.097+10:00" + "'", str6, "0099-12-30T00:00:00.097+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        int int11 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        boolean boolean17 = julianChronology15.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField18 = julianChronology15.months();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone20.getName((-1L), locale23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone20.isLocalDateTimeGap(localDateTime25);
        boolean boolean28 = dateTimeZone20.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology29 = julianChronology15.withZone(dateTimeZone20);
        int int31 = dateTimeZone20.getOffset((-35999900L));
        java.lang.String str33 = dateTimeZone20.getShortName(0L);
        java.lang.String str34 = dateTimeZone20.getID();
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        long long38 = dateTimeZone20.adjustOffset(52L, false);
        org.joda.time.Chronology chronology39 = julianChronology3.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField8 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        int int11 = julianChronology3.getMinimumDaysInFirstWeek();
        java.lang.String str12 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField14 = julianChronology3.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = julianChronology3.getDateTimeMillis(19, 1969, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JulianChronology[+10:00]" + "'", str12, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.hours();
        java.lang.String str13 = gJChronology2.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology2.getDateTimeMillis(36000000, 36000, 3600000, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+10:00]" + "'", str13, "GJChronology[+10:00]");
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.util.Date date7 = instant6.toDate();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.plus(readableDuration10);
        java.lang.String str12 = instant9.toString();
        boolean boolean13 = instant6.isAfter((org.joda.time.ReadableInstant) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Chronology chronology23 = instant20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime24 = instant20.toMutableDateTimeISO();
        boolean boolean25 = instant9.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str12, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.minus(readableDuration15);
        java.lang.String str17 = instant14.toString();
        org.joda.time.Instant instant19 = instant14.minus(18684000000L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, (org.joda.time.ReadableInstant) instant53);
        java.lang.String str55 = instant53.toString();
        boolean boolean56 = instant53.isEqualNow();
        boolean boolean57 = instant28.isEqual((org.joda.time.ReadableInstant) instant53);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.Chronology chronology61 = gJChronology60.withUTC();
        java.lang.String str62 = gJChronology60.toString();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology60.monthOfYear();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology60.dayOfWeek();
        org.joda.time.Instant instant66 = gJChronology60.getGregorianCutover();
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.Instant instant68 = instant66.toInstant();
        boolean boolean69 = instant28.equals((java.lang.Object) instant68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology72.getZone();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.dayOfYear();
        org.joda.time.Instant instant76 = gJChronology72.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant76.minus(readableDuration77);
        java.lang.String str79 = instant76.toString();
        org.joda.time.Instant instant81 = instant76.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone82 = instant76.getZone();
        org.joda.time.DateTimeZone dateTimeZone83 = instant76.getZone();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant86 = instant76.withDurationAdded(readableDuration84, (int) '#');
        boolean boolean87 = instant68.isBefore((org.joda.time.ReadableInstant) instant76);
        long long88 = instant76.getMillis();
        boolean boolean89 = instant19.isEqual((org.joda.time.ReadableInstant) instant76);
        org.joda.time.MutableDateTime mutableDateTime90 = instant19.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str17, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str55, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(gJChronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GJChronology[+10:00]" + "'", str62, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str79, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-12219292800000L) + "'", long88 == (-12219292800000L));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(mutableDateTime90);
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.Instant instant32 = gJChronology28.getGregorianCutover();
        java.lang.String str33 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology28.clockhourOfHalfday();
        long long38 = gJChronology28.add((-71999990L), 36009730L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology28.dayOfMonth();
        org.joda.time.DurationField durationField41 = gJChronology28.centuries();
        org.joda.time.DurationField durationField42 = gJChronology28.halfdays();
        org.joda.time.MutableDateTime mutableDateTime43 = instant25.toMutableDateTime((org.joda.time.Chronology) gJChronology28);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GJChronology[+10:00]" + "'", str33, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 288097310L + "'", long38 == 288097310L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.hourOfDay();
        long long24 = julianChronology3.add((long) (short) 100, (long) (short) 100, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology3.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = julianChronology3.get(readablePeriod26, (-60514287226856L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = julianChronology13.hours();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35999990L) + "'", long10 == (-35999990L));
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) 36000001);
        java.lang.String str16 = dateTimeZone12.getName(6532309281596915L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35999990L) + "'", long10 == (-35999990L));
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((-35999890L), locale3);
        long long7 = dateTimeZone1.adjustOffset((-35999899L), true);
        int int9 = dateTimeZone1.getStandardOffset(5201L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.minus(readableDuration17);
        org.joda.time.Instant instant21 = instant18.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant18.plus(readableDuration22);
        org.joda.time.Instant instant24 = instant18.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant18.minus(readableDuration25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant18, 895);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 895");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-35999899L) + "'", long7 == (-35999899L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfWeek();
        org.joda.time.DurationField durationField11 = julianChronology3.months();
        org.joda.time.DurationField durationField12 = julianChronology3.seconds();
        org.joda.time.DurationField durationField13 = julianChronology3.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(353, 4200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 4200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        boolean boolean12 = julianChronology10.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.Chronology chronology15 = gJChronology2.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.millisOfSecond();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology11 = julianChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) (-1));
        long long19 = dateTimeZone13.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long21 = dateTimeZone13.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology22 = julianChronology10.withZone(dateTimeZone13);
        long long24 = dateTimeZone13.previousTransition(0L);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (-71999990L), (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone13.isLocalDateTimeGap(localDateTime28);
        java.lang.String str30 = dateTimeZone13.toString();
        long long32 = dateTimeZone13.previousTransition((-12959963999999L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-35999899L) + "'", long21 == (-35999899L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.001" + "'", str30, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-12959963999999L) + "'", long32 == (-12959963999999L));
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int10 = dateTimeZone7.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        java.lang.String str40 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.dayOfWeek();
        org.joda.time.Instant instant44 = gJChronology38.getGregorianCutover();
        boolean boolean45 = instant33.equals((java.lang.Object) gJChronology38);
        boolean boolean46 = instant24.isAfter((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant48 = instant33.minus((-61543965598418L));
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = gJChronology49.get(readablePeriod51, (-5900380595998018L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str35, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GJChronology[+10:00]" + "'", str40, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = instant19.toDateTime();
        java.util.Date date24 = instant19.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.Chronology chronology32 = gJChronology27.withZone(dateTimeZone30);
        java.lang.String str34 = dateTimeZone30.getName((long) (byte) 10);
        java.util.TimeZone timeZone35 = dateTimeZone30.toTimeZone();
        long long39 = dateTimeZone30.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean40 = instant19.equals((java.lang.Object) (byte) 10);
        int int41 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0, 32400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 32400000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str11, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-35999990L) + "'", long39 == (-35999990L));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = julianChronology3.seconds();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.minuteOfDay();
        java.lang.String str13 = julianChronology3.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = julianChronology3.getDateTimeMillis((int) (short) 100, 36000000, (int) (short) 1, 1969, (int) (short) 10, 4, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JulianChronology[+10:00]" + "'", str13, "JulianChronology[+10:00]");
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.previousTransition(110L);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField14 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfDay();
        java.lang.String str16 = gJChronology2.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = gJChronology2.getDateTimeMillis((int) (byte) -1, 36000001, 3920, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000001 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 110L + "'", long12 == 110L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+10:00]" + "'", str16, "GJChronology[+10:00]");
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.era();
        org.joda.time.DurationField durationField4 = gJChronology0.eras();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology0.year();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DurationField durationField6 = julianChronology3.years();
        org.joda.time.DurationField durationField7 = julianChronology3.hours();
        org.joda.time.Chronology chronology8 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean12 = dateTimeZone10.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        long long23 = dateTimeZone10.getMillisKeepLocal(dateTimeZone20, 10L);
        int int25 = dateTimeZone20.getStandardOffset(11L);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone20.isLocalDateTimeGap(localDateTime26);
        org.joda.time.Chronology chronology28 = julianChronology3.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 11L + "'", long23 == 11L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        boolean boolean9 = julianChronology7.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology10 = julianChronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology12 = julianChronology7.withZone(dateTimeZone11);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, 10L);
        int int16 = dateTimeZone11.getStandardOffset(11L);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField19 = julianChronology18.hours();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology18.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField25 = julianChronology24.centuries();
        org.joda.time.DurationField durationField26 = julianChronology24.weeks();
        org.joda.time.DurationField durationField27 = julianChronology24.days();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = julianChronology24.add(readablePeriod28, 36000000L, 0);
        org.joda.time.DateTimeField dateTimeField32 = julianChronology24.weekOfWeekyear();
        boolean boolean33 = julianChronology18.equals((java.lang.Object) julianChronology24);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = julianChronology24.getDateTimeMillis(1, 660, 72009726, (int) ' ', 40, (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11L + "'", long14 == 11L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 36000000L + "'", long31 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.weekyear();
        org.joda.time.DurationField durationField7 = julianChronology3.days();
        org.joda.time.DurationField durationField8 = julianChronology3.centuries();
        java.lang.Class<?> wildcardClass9 = julianChronology3.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Chronology chronology11 = julianChronology2.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology2.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = julianChronology2.get(readablePartial15, (-60514215257783L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) (-1));
        long long13 = dateTimeZone7.convertLocalToUTC((long) 4, true, (long) (short) -1);
        boolean boolean14 = gJChronology2.equals((java.lang.Object) dateTimeZone7);
        org.joda.time.DurationField durationField15 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.centuryOfEra();
        java.lang.String str18 = gJChronology2.toString();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GJChronology[+10:00]" + "'", str18, "GJChronology[+10:00]");
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        java.lang.String str14 = dateTimeZone12.getName((long) 0);
        long long17 = dateTimeZone12.adjustOffset(1L, true);
        org.joda.time.Chronology chronology18 = gJChronology7.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) ' ');
        java.lang.String str25 = dateTimeZone22.getID();
        boolean boolean26 = dateTimeZone12.equals((java.lang.Object) dateTimeZone22);
        org.joda.time.Chronology chronology27 = gJChronology2.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField28 = gJChronology2.centuries();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        int int14 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.secondOfDay();
        long long20 = gJChronology2.add((-60886717200000L), (-12219400799999L), (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = gJChronology2.getDateTimeMillis(3600000, 100, 1200, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-183080725199990L) + "'", long20 == (-183080725199990L));
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = julianChronology3.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.dayOfWeek();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = julianChronology3.getDateTimeMillis(1970, 72009726, 16, 895);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72009726 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        int int11 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        boolean boolean17 = julianChronology15.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField18 = julianChronology15.months();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone20.getName((-1L), locale23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone20.isLocalDateTimeGap(localDateTime25);
        boolean boolean28 = dateTimeZone20.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology29 = julianChronology15.withZone(dateTimeZone20);
        int int31 = dateTimeZone20.getOffset((-35999900L));
        java.lang.String str33 = dateTimeZone20.getShortName(0L);
        java.lang.String str34 = dateTimeZone20.getID();
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        long long38 = dateTimeZone20.adjustOffset(52L, false);
        org.joda.time.Chronology chronology39 = julianChronology3.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField40 = julianChronology3.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 10);
        boolean boolean5 = instant4.isAfterNow();
        org.joda.time.Instant instant7 = instant4.withMillis(170401582L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.plus(readableDuration10);
        org.joda.time.Instant instant13 = instant11.withMillis((long) (byte) -1);
        boolean boolean14 = instant13.isEqualNow();
        org.joda.time.Instant instant16 = instant13.plus(31799999L);
        org.joda.time.Instant instant19 = instant16.withDurationAdded((-126000001L), 360000000);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant19.withDurationAdded(readableDuration20, (int) (short) -1);
        boolean boolean23 = instant7.isBefore((org.joda.time.ReadableInstant) instant22);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1582);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant23);
        java.lang.String str25 = instant23.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        java.lang.String str30 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.dayOfWeek();
        org.joda.time.Instant instant34 = gJChronology28.getGregorianCutover();
        boolean boolean35 = instant23.equals((java.lang.Object) gJChronology28);
        boolean boolean36 = instant14.isAfter((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant38 = instant23.minus((-61543965598418L));
        org.joda.time.DateTimeZone dateTimeZone39 = instant23.getZone();
        org.joda.time.Instant instant40 = instant23.toInstant();
        java.lang.String str41 = instant40.toString();
        boolean boolean43 = instant40.isAfter((-12242519999904L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant40, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str25, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GJChronology[+00:00:01.582]" + "'", str30, "GJChronology[+00:00:01.582]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str41, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.nextTransition((long) (byte) -1);
        int int39 = dateTimeZone31.getOffsetFromLocal(0L);
        long long43 = dateTimeZone31.convertLocalToUTC((long) 'a', true, (long) 4);
        java.util.TimeZone timeZone44 = dateTimeZone31.toTimeZone();
        long long46 = dateTimeZone31.nextTransition(9730L);
        long long50 = dateTimeZone31.convertLocalToUTC((-12219444000349L), true, (long) 4200000);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 11L + "'", long34 == 11L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 97L + "'", long43 == 97L);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 9730L + "'", long46 == 9730L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-12219444000349L) + "'", long50 == (-12219444000349L));
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.hourOfDay();
        long long24 = julianChronology3.add((long) (short) 100, (long) (short) 100, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology3.hourOfHalfday();
        java.lang.Object obj26 = null;
        boolean boolean27 = julianChronology3.equals(obj26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology3.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = julianChronology3.getDateTimeMillis(18600000, (int) '#', (int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.minutes();
        java.lang.String str7 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        java.lang.String str13 = dateTimeZone9.getNameKey(10L);
        java.lang.String str15 = dateTimeZone9.getName((long) (byte) 10);
        org.joda.time.Chronology chronology16 = julianChronology3.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JulianChronology[+10:00]" + "'", str7, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone12.getName((-71999990L), locale15);
        long long20 = dateTimeZone12.convertLocalToUTC((long) ' ', false, (-35999900L));
        long long24 = dateTimeZone12.convertLocalToUTC(187200000L, true, (-431999901L));
        java.lang.String str26 = dateTimeZone12.getNameKey((long) 3920);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField31 = julianChronology30.centuries();
        org.joda.time.DurationField durationField32 = julianChronology30.weeks();
        org.joda.time.DurationField durationField33 = julianChronology30.days();
        org.joda.time.DurationField durationField34 = julianChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology30.hourOfHalfday();
        org.joda.time.Chronology chronology36 = julianChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology30.millisOfDay();
        int int38 = julianChronology30.getMinimumDaysInFirstWeek();
        java.lang.String str39 = julianChronology30.toString();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology30.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone41 = julianChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology30.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.clockhourOfHalfday();
        int int49 = gJChronology45.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology45.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.Chronology chronology55 = gJChronology54.withUTC();
        org.joda.time.DurationField durationField56 = gJChronology54.millis();
        long long60 = gJChronology54.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField61 = gJChronology54.millis();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology54.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology54.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology54.getZone();
        long long66 = dateTimeZone51.getMillisKeepLocal(dateTimeZone64, (-593285831998337L));
        org.joda.time.Chronology chronology67 = julianChronology30.withZone(dateTimeZone51);
        long long69 = dateTimeZone12.getMillisKeepLocal(dateTimeZone51, 40L);
        long long72 = dateTimeZone51.convertLocalToUTC((-3599980L), false);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35999990L) + "'", long10 == (-35999990L));
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-35999968L) + "'", long20 == (-35999968L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 151200000L + "'", long24 == 151200000L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(julianChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JulianChronology[+10:00]" + "'", str39, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-593285831998337L) + "'", long66 == (-593285831998337L));
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 40L + "'", long69 == 40L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-39599980L) + "'", long72 == (-39599980L));
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1969, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (-35999900L), (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.era();
        org.joda.time.ReadablePartial readablePartial11 = null;
        int[] intArray13 = new int[] { 43203104 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial11, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-35999900L) + "'", long8 == (-35999900L));
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[43203104]");
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.months();
        org.joda.time.DurationField durationField14 = gJChronology2.centuries();
        org.joda.time.DurationField durationField15 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.centuryOfEra();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getShortName((-35999890L), locale14);
        org.joda.time.Chronology chronology16 = julianChronology3.withZone(dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getName((long) 1969);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000000L + "'", long10 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField14 = gJChronology2.weeks();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.joda.time.Instant instant26 = instant23.withDurationAdded((-12219292800000L), 0);
        boolean boolean28 = instant23.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.monthOfYear();
        boolean boolean39 = instant23.equals((java.lang.Object) dateTimeField38);
        org.joda.time.Instant instant41 = instant23.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = instant41.isSupported(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant41.isSupported(dateTimeFieldType44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = instant41.toString(dateTimeFormatter46);
        boolean boolean49 = instant41.isAfter(3L);
        boolean boolean50 = gJChronology2.equals((java.lang.Object) instant41);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology2.weekyear();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str47, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        java.lang.String str9 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GJChronology[+10:00]" + "'", str9, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology19 = gJChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.minuteOfDay();
        org.joda.time.DurationField durationField12 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.era();
        org.joda.time.DurationField durationField15 = julianChronology3.halfdays();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = julianChronology3.get(readablePeriod16, (-62112218399902L), (-61638141598800L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfEra();
        int int10 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology2.getZone();
        org.joda.time.DurationField durationField14 = gJChronology2.years();
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = gJChronology2.set(readablePartial15, 3129100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+10:00]" + "'", str8, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.Instant instant10 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        java.lang.String str16 = dateTimeZone12.getNameKey(10L);
        java.lang.String str18 = dateTimeZone12.getName((long) (byte) -1);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.minuteOfHour();
        org.joda.time.DateTime dateTime21 = instant10.toDateTime((org.joda.time.Chronology) gJChronology19);
        boolean boolean23 = dateTime21.isEqual(1836000731L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        int int11 = julianChronology3.getMinimumDaysInFirstWeek();
        java.lang.String str12 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology18.dayOfYear();
        boolean boolean20 = dateTimeZone14.equals((java.lang.Object) julianChronology18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JulianChronology[+10:00]" + "'", str12, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long4 = dateTimeZone2.previousTransition(0L);
        java.lang.Object obj5 = null;
        boolean boolean6 = dateTimeZone2.equals(obj5);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        java.lang.String str6 = julianChronology3.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, (long) (short) 1, (-1));
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology3.getZone();
        org.joda.time.DurationField durationField13 = julianChronology3.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JulianChronology[+10:00]" + "'", str6, "JulianChronology[+10:00]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        java.util.Date date6 = instant5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        int int11 = dateTimeZone8.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField13 = julianChronology12.centuries();
        boolean boolean14 = instant5.equals((java.lang.Object) durationField13);
        java.lang.String str15 = instant5.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        org.joda.time.MutableDateTime mutableDateTime18 = instant5.toMutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant5.minus(readableDuration19);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1969-12-31T23:59:59.991Z" + "'", str15, "1969-12-31T23:59:59.991Z");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.Instant instant15 = instant13.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.Chronology chronology19 = gJChronology18.withUTC();
        org.joda.time.DurationField durationField20 = gJChronology18.millis();
        long long24 = gJChronology18.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField25 = gJChronology18.millis();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField28 = gJChronology18.centuries();
        org.joda.time.DurationField durationField29 = gJChronology18.hours();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology18.getZone();
        org.joda.time.DurationField durationField32 = gJChronology18.millis();
        org.joda.time.MutableDateTime mutableDateTime33 = instant13.toMutableDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = mutableDateTime33.isSupported(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean8 = dateTimeZone6.isFixed();
        long long10 = dateTimeZone6.previousTransition(100L);
        java.util.TimeZone timeZone11 = dateTimeZone6.toTimeZone();
        long long13 = dateTimeZone6.previousTransition(5201L);
        org.joda.time.Chronology chronology14 = julianChronology2.withZone(dateTimeZone6);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField16 = gJChronology15.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5201L + "'", long13 == 5201L);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.Instant instant8 = instant6.withMillis((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.clockhourOfDay();
        org.joda.time.Chronology chronology16 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.weekyear();
        boolean boolean18 = instant6.equals((java.lang.Object) gJChronology11);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        boolean boolean24 = julianChronology22.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology25 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology22.era();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone29.getShortName((long) (byte) 1, locale31);
        org.joda.time.Chronology chronology33 = julianChronology22.withZone(dateTimeZone29);
        boolean boolean35 = dateTimeZone29.isStandardOffset((-73965769918558030L));
        org.joda.time.DateTime dateTime36 = instant6.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.Chronology chronology40 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.millisOfDay();
        org.joda.time.DurationField durationField43 = gJChronology39.halfdays();
        org.joda.time.DurationField durationField44 = gJChronology39.millis();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology47 = gJChronology39.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField48 = gJChronology39.minutes();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology39.halfdayOfDay();
        org.joda.time.DurationField durationField50 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology39.secondOfDay();
        long long55 = gJChronology39.add((long) 9, 0L, 0);
        org.joda.time.Instant instant56 = gJChronology39.getGregorianCutover();
        boolean boolean57 = dateTimeZone29.equals((java.lang.Object) instant56);
        long long59 = dateTimeZone29.previousTransition(177540895L);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 9L + "'", long55 == 9L);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 177540895L + "'", long59 == 177540895L);
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = gJChronology11.centuries();
        boolean boolean18 = julianChronology3.equals((java.lang.Object) gJChronology11);
        org.joda.time.DurationField durationField19 = julianChronology3.minutes();
        int int20 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField21 = julianChronology3.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.millis();
        long long16 = gJChronology2.getDateTimeMillis((-35999990L), 0, 16, 0, 8);
        long long20 = gJChronology2.add((-60514251257512L), 1644536753308L, 0);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-35039992L) + "'", long16 == (-35039992L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60514251257512L) + "'", long20 == (-60514251257512L));
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime27.getZone();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology2.add(readablePeriod9, (-52L), 1);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = gJChronology2.getDateTimeMillis(36000001, (int) (byte) 100, 1, 19, 97, 40, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-52L) + "'", long12 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.eras();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.Chronology chronology9 = julianChronology3.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField9 = gJChronology2.hours();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField12 = gJChronology2.millis();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = gJChronology2.get(readablePartial13, (-1295998588800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+10:00]" + "'", str10, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology2.getZone();
        org.joda.time.ReadablePartial readablePartial10 = null;
        int[] intArray16 = new int[] { '4', ' ', 20, (byte) 10, 3600000 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial10, intArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+10:00]" + "'", str8, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[52, 32, 20, 10, 3600000]");
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(9, 8);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("1970-01-01T19:59:59.968Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Chronology chronology3 = gJChronology0.withZone(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        long long12 = julianChronology3.add(1L, (-421199991L), 0);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = julianChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant9.plus(readableDuration13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.plus(35L);
        java.lang.String str18 = instant14.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        org.joda.time.MutableDateTime mutableDateTime21 = instant14.toMutableDateTime(dateTimeZone20);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) mutableDateTime21, 1);
        org.joda.time.ReadablePartial readablePartial24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = gJChronology23.set(readablePartial24, (-60514215227594L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str18, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(gJChronology23);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.DateTimeZone dateTimeZone13 = julianChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.weekyear();
        boolean boolean15 = gJChronology2.equals((java.lang.Object) dateTimeField14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.hourOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField9 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField12 = gJChronology2.halfdays();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        boolean boolean19 = instant14.isAfter(223199999L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant23.withMillis((long) (byte) -1);
        org.joda.time.Instant instant27 = instant25.minus((long) (short) 10);
        org.joda.time.Instant instant29 = instant27.plus((long) 126000000);
        boolean boolean30 = instant14.isEqual((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        boolean boolean40 = instant39.isAfterNow();
        boolean boolean41 = instant39.isAfterNow();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant44 = instant39.withDurationAdded(readableDuration42, 20);
        boolean boolean45 = instant27.isEqual((org.joda.time.ReadableInstant) instant39);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant39.minus(readableDuration46);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str11, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instant47);
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-11T09:46:51.954Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = gJChronology8.weeks();
        org.joda.time.DurationField durationField11 = gJChronology8.halfdays();
        org.joda.time.Instant instant12 = gJChronology8.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.hourOfDay();
        org.joda.time.DurationField durationField14 = gJChronology8.years();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = gJChronology8.getDateTimeMillis((-17399899L), (int) '4', 1582, (int) (short) 0, 36000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.year();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        org.joda.time.Chronology chronology12 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.Chronology chronology11 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = gJChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology18.getZone();
        long long26 = dateTimeZone24.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology27 = gJChronology10.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology40 = julianChronology35.withZone(dateTimeZone39);
        long long42 = dateTimeZone29.getMillisKeepLocal(dateTimeZone39, 10L);
        org.joda.time.Chronology chronology43 = gJChronology10.withZone(dateTimeZone39);
        org.joda.time.Chronology chronology44 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.minuteOfDay();
        boolean boolean46 = julianChronology3.equals((java.lang.Object) dateTimeField45);
        org.joda.time.Chronology chronology47 = julianChronology3.withUTC();
        org.joda.time.Chronology chronology48 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField49 = julianChronology3.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-12219292800000L) + "'", long26 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 11L + "'", long42 == 11L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        boolean boolean26 = julianChronology24.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology27 = julianChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology24.hourOfHalfday();
        java.lang.String str29 = julianChronology24.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        boolean boolean35 = julianChronology33.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology36 = julianChronology33.withUTC();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology38 = julianChronology33.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = julianChronology33.seconds();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology33.year();
        org.joda.time.DateTimeZone dateTimeZone42 = julianChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = julianChronology33.getZone();
        org.joda.time.Chronology chronology44 = julianChronology24.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46);
        boolean boolean50 = julianChronology48.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology51 = julianChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology48.era();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = julianChronology48.weeks();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology48.hourOfHalfday();
        boolean boolean56 = dateTimeZone43.equals((java.lang.Object) julianChronology48);
        org.joda.time.Chronology chronology57 = julianChronology3.withZone(dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            long long65 = julianChronology3.getDateTimeMillis(3920, 660, 40, 69, (-3600000), 36000, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JulianChronology[+10:00]" + "'", str29, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(julianChronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DurationField durationField8 = julianChronology3.millis();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        boolean boolean14 = julianChronology12.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField15 = julianChronology12.days();
        long long20 = julianChronology12.getDateTimeMillis(1970, 8, 10, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology12.getZone();
        org.joda.time.Chronology chronology22 = julianChronology12.withUTC();
        boolean boolean23 = julianChronology3.equals((java.lang.Object) julianChronology12);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology3.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 20181600100L + "'", long20 == 20181600100L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(72000, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        java.lang.String str2 = instant1.toString();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str2, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.seconds();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = julianChronology3.getDateTimeMillis(100, 126000000, (int) (byte) 100, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 126000000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField14 = julianChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology3.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = julianChronology3.add(readablePeriod18, (-110L), 126000000);
        java.lang.String str22 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology3.yearOfCentury();
        org.joda.time.DurationField durationField25 = julianChronology3.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-110L) + "'", long21 == (-110L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JulianChronology[+10:00]" + "'", str22, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        boolean boolean19 = instant14.isAfter(223199999L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant23.withMillis((long) (byte) -1);
        org.joda.time.Instant instant27 = instant25.minus((long) (short) 10);
        org.joda.time.Instant instant29 = instant27.plus((long) 126000000);
        boolean boolean30 = instant14.isEqual((org.joda.time.ReadableInstant) instant27);
        boolean boolean32 = instant14.isBefore(25200L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        boolean boolean38 = julianChronology36.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology36.millisOfDay();
        boolean boolean45 = instant14.equals((java.lang.Object) julianChronology36);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.Chronology chronology49 = gJChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.millisOfDay();
        org.joda.time.DurationField durationField52 = gJChronology48.halfdays();
        org.joda.time.DurationField durationField53 = gJChronology48.millis();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology56 = gJChronology48.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology48.minuteOfDay();
        org.joda.time.Instant instant58 = gJChronology48.getGregorianCutover();
        org.joda.time.Instant instant60 = instant58.minus(0L);
        org.joda.time.Instant instant61 = instant58.toInstant();
        boolean boolean62 = instant14.isBefore((org.joda.time.ReadableInstant) instant61);
        java.lang.String str63 = instant61.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str11, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str63, "1582-10-15T00:00:00.000Z");
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.era();
        long long14 = julianChronology3.add((-30448000L), (-35999976L), 1);
        org.joda.time.DurationField durationField15 = julianChronology3.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-66447976L) + "'", long14 == (-66447976L));
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.Instant instant43 = instant37.toInstant();
        boolean boolean45 = instant43.isBefore((long) ' ');
        boolean boolean46 = instant26.isAfter((org.joda.time.ReadableInstant) instant43);
        boolean boolean47 = instant26.isBeforeNow();
        org.joda.time.Instant instant49 = instant26.withMillis(1644572759806L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology52.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone54 = julianChronology52.getZone();
        int int56 = dateTimeZone54.getOffset(36000002L);
        org.joda.time.MutableDateTime mutableDateTime57 = instant26.toMutableDateTime(dateTimeZone54);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(julianChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime57);
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.year();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.Chronology chronology17 = gJChronology14.withUTC();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.Chronology chronology23 = gJChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.dayOfWeek();
        org.joda.time.Chronology chronology25 = gJChronology22.withUTC();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology28 = chronology25.withZone(dateTimeZone27);
        java.lang.String str29 = dateTimeZone27.getID();
        org.joda.time.Chronology chronology30 = gJChronology14.withZone(dateTimeZone27);
        boolean boolean31 = gJChronology2.equals((java.lang.Object) gJChronology14);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology2.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = gJChronology2.get(readablePeriod33, (-60514215308675L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.001" + "'", str29, "+00:00:00.001");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getShortName((-35999890L), locale14);
        org.joda.time.Chronology chronology16 = julianChronology3.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone17 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.monthOfYear();
        org.joda.time.DurationField durationField30 = gJChronology20.halfdays();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology20.getZone();
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone31.isLocalDateTimeGap(localDateTime32);
        org.joda.time.Chronology chronology34 = julianChronology3.withZone(dateTimeZone31);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone31.getShortName(0L, locale36);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000000L + "'", long10 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        long long31 = instant15.getMillis();
        org.joda.time.Instant instant32 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = instant15.getZone();
        long long35 = dateTimeZone33.previousTransition((long) (short) 100);
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.Chronology chronology37 = julianChronology3.withZone(dateTimeZone33);
        java.lang.String str38 = dateTimeZone33.getID();
        java.lang.String str39 = dateTimeZone33.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str17, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 36000000L + "'", long31 == 36000000L);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.days();
        org.joda.time.DurationField durationField6 = julianChronology3.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        long long11 = julianChronology3.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        boolean boolean17 = dateTimeZone15.isFixed();
        long long20 = dateTimeZone15.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology22 = julianChronology3.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField23 = julianChronology3.centuries();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = julianChronology3.get(readablePeriod24, 187200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36000001L + "'", long11 == 36000001L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-71999990L) + "'", long20 == (-71999990L));
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField9 = gJChronology2.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = gJChronology2.getDateTimeMillis((int) (short) 10, 40, 18600000, (int) (byte) 1, (int) '4', 97, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField5 = gJChronology2.millis();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.Chronology chronology18 = gJChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.monthOfYear();
        org.joda.time.DurationField durationField26 = gJChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology17.hourOfDay();
        boolean boolean28 = gJChronology2.equals((java.lang.Object) gJChronology17);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology17.hourOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField5 = gJChronology2.seconds();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant11.withDurationAdded(readableDuration31, 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DurationField durationField38 = gJChronology36.millis();
        org.joda.time.Chronology chronology39 = gJChronology36.withUTC();
        org.joda.time.Instant instant40 = gJChronology36.getGregorianCutover();
        int int41 = instant11.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.plus(readableDuration44);
        org.joda.time.Instant instant47 = instant45.withMillis((long) (byte) -1);
        org.joda.time.Instant instant49 = instant47.plus((long) (short) 0);
        java.lang.String str50 = instant49.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone51.getShortName(52L, locale54);
        org.joda.time.MutableDateTime mutableDateTime56 = instant49.toMutableDateTime(dateTimeZone51);
        long long58 = dateTimeZone51.previousTransition(0L);
        org.joda.time.MutableDateTime mutableDateTime59 = instant11.toMutableDateTime(dateTimeZone51);
        boolean boolean61 = instant11.isAfter((-60514179282091L));
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str13, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 36000000L + "'", long27 == 36000000L);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str50, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology3.getZone();
        int int14 = dateTimeZone12.getOffset((-35999899L));
        java.lang.String str16 = dateTimeZone12.getNameKey((-126000001L));
        int int18 = dateTimeZone12.getOffset(151200024L);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant27);
        java.lang.String str29 = instant27.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        org.joda.time.Instant instant41 = instant38.withDurationAdded((-12219292800000L), 0);
        int int42 = instant27.compareTo((org.joda.time.ReadableInstant) instant38);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant27.minus(readableDuration43);
        java.util.Date date45 = instant27.toDate();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.dayOfYear();
        org.joda.time.Instant instant52 = gJChronology48.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant52.minus(readableDuration53);
        org.joda.time.Instant instant57 = instant54.withDurationAdded((-12219292800000L), 0);
        boolean boolean58 = instant27.isEqual((org.joda.time.ReadableInstant) instant54);
        org.joda.time.Instant instant60 = instant27.minus((-35999968L));
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone67 = gJChronology63.getZone();
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, (org.joda.time.ReadableInstant) instant69);
        java.lang.String str71 = instant69.toString();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, readableInstant73);
        org.joda.time.DateTimeZone dateTimeZone75 = gJChronology74.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology74.dayOfYear();
        org.joda.time.Instant instant78 = gJChronology74.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Instant instant80 = instant78.minus(readableDuration79);
        org.joda.time.Instant instant83 = instant80.withDurationAdded((-12219292800000L), 0);
        int int84 = instant69.compareTo((org.joda.time.ReadableInstant) instant80);
        long long85 = instant69.getMillis();
        org.joda.time.Instant instant86 = instant69.toInstant();
        org.joda.time.DateTimeZone dateTimeZone87 = instant69.getZone();
        long long89 = dateTimeZone87.previousTransition((long) (short) 100);
        long long92 = dateTimeZone87.convertLocalToUTC((long) (-1), false);
        org.joda.time.DateTime dateTime93 = instant27.toDateTime(dateTimeZone87);
        java.util.Date date94 = instant27.toDate();
        org.joda.time.Instant instant96 = instant27.minus(43129898499L);
        int int97 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant27);
        org.joda.time.ReadableDuration readableDuration98 = null;
        org.joda.time.Instant instant99 = instant27.plus(readableDuration98);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str29, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(gJChronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(gJChronology70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str71, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 36000000L + "'", long85 == 36000000L);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 100L + "'", long89 == 100L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 36000000 + "'", int97 == 36000000);
        org.junit.Assert.assertNotNull(instant99);
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        java.lang.Object obj11 = null;
        boolean boolean12 = julianChronology3.equals(obj11);
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        java.lang.String str14 = julianChronology3.toString();
        long long18 = julianChronology3.add(1800000071L, 36000660L, (int) (byte) 1);
        int int19 = julianChronology3.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JulianChronology[+10:00]" + "'", str14, "JulianChronology[+10:00]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1836000731L + "'", long18 == 1836000731L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        int int8 = dateTimeZone6.getStandardOffset(312910024L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.clockhourOfHalfday();
        int int16 = gJChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology12.getZone();
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.Chronology chronology20 = julianChronology3.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        int int19 = dateTimeZone8.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = julianChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology20.era();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology20.yearOfEra();
        org.joda.time.DurationField durationField26 = julianChronology20.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, (long) 36000000, 4);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = julianChronology3.withZone(dateTimeZone11);
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = julianChronology3.set(readablePartial13, (-110L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000000L + "'", long10 == 36000000L);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.getID();
        boolean boolean6 = dateTimeZone4.isFixed();
        long long8 = dateTimeZone4.previousTransition(100L);
        java.util.TimeZone timeZone9 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone11.isLocalDateTimeGap(localDateTime12);
        long long15 = dateTimeZone2.getMillisKeepLocal(dateTimeZone11, (-35992119L));
        long long18 = dateTimeZone11.convertLocalToUTC((-60514215220566L), false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-71992119L) + "'", long15 == (-71992119L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60514251220566L) + "'", long18 == (-60514251220566L));
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField14 = julianChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.year();
        java.lang.Class<?> wildcardClass9 = dateTimeField8.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("3500-05-29T00:15:21.380Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '3500-05-29T00:15:21.380Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = julianChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.weekyearOfCentury();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Chronology chronology11 = julianChronology2.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology2.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = julianChronology2.centuries();
        org.joda.time.DurationField durationField5 = julianChronology2.weeks();
        org.joda.time.DurationField durationField6 = julianChronology2.days();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology2.year();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = julianChronology2.getDateTimeMillis(1836000071L, 126000000, 1969, 0, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 126000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.seconds();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.year();
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = julianChronology3.getZone();
        org.joda.time.DurationField durationField14 = julianChronology3.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = julianChronology3.getDateTimeMillis(0, 86400000, 126000000, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+32:01");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+32:01\" is malformed at \"32:01\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean8 = dateTimeZone6.isFixed();
        long long10 = dateTimeZone6.previousTransition(100L);
        java.util.TimeZone timeZone11 = dateTimeZone6.toTimeZone();
        long long13 = dateTimeZone6.previousTransition(5201L);
        org.joda.time.Chronology chronology14 = julianChronology2.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology2.year();
        java.lang.String str16 = julianChronology2.toString();
        org.joda.time.DurationField durationField17 = julianChronology2.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5201L + "'", long13 == 5201L);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[+00:00:00.001]" + "'", str16, "JulianChronology[+00:00:00.001]");
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField13 = julianChronology12.centuries();
        java.lang.String str14 = julianChronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology12.getZone();
        long long18 = dateTimeZone15.convertLocalToUTC((long) 0, true);
        boolean boolean19 = gJChronology2.equals((java.lang.Object) true);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField22 = gJChronology2.hours();
        org.joda.time.Chronology chronology23 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JulianChronology[+10:00]" + "'", str14, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-36000000L) + "'", long18 == (-36000000L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, 36000000L, 0);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.weekOfWeekyear();
        java.lang.String str13 = julianChronology3.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000000L + "'", long10 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JulianChronology[+10:00]" + "'", str13, "JulianChronology[+10:00]");
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.hourOfDay();
        org.joda.time.DurationField durationField10 = gJChronology8.days();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology8.getZone();
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(1477055615397994L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        int int19 = dateTimeZone8.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = julianChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.clockhourOfDay();
        long long27 = julianChronology20.getDateTimeMillis((int) (short) 100, 1, (int) (short) 1, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        boolean boolean33 = julianChronology31.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField34 = julianChronology31.months();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone36.getName((-1L), locale39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone36.isLocalDateTimeGap(localDateTime41);
        boolean boolean44 = dateTimeZone36.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology45 = julianChronology31.withZone(dateTimeZone36);
        int int47 = dateTimeZone36.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        boolean boolean50 = dateTimeZone36.isStandardOffset(52L);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        long long53 = dateTimeZone36.getMillisKeepLocal(dateTimeZone51, (-35999990L));
        org.joda.time.Chronology chronology54 = julianChronology20.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField55 = julianChronology20.years();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        long long59 = julianChronology20.add(readablePeriod56, 395999984L, 1969);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-59011667999903L) + "'", long27 == (-59011667999903L));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36000000 + "'", int47 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-35999990L) + "'", long53 == (-35999990L));
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 395999984L + "'", long59 == 395999984L);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology20 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField21 = gJChronology2.halfdays();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfHour();
        java.lang.String str11 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField13 = gJChronology2.days();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GJChronology[+10:00]" + "'", str11, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.weekyears();
        long long8 = julianChronology2.add((long) 1200, (long) 1200, 20);
        org.joda.time.DurationField durationField9 = julianChronology2.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = julianChronology2.add(61544001598418L, (-12242591999904L), 360000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -12242591999904 * 360000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 25200L + "'", long8 == 25200L);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField21 = julianChronology20.centuries();
        java.lang.String str22 = julianChronology20.toString();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology20.centuryOfEra();
        org.joda.time.DurationField durationField26 = julianChronology20.seconds();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology20.hourOfDay();
        boolean boolean30 = instant15.equals((java.lang.Object) julianChronology20);
        java.lang.String str31 = instant15.toString();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JulianChronology[+10:00]" + "'", str22, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str31, "1582-10-15T00:00:00.000Z");
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.Chronology chronology11 = gJChronology2.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = gJChronology2.getDateTimeMillis(36000000, 1970, 18600000, 1582, (int) (byte) 0, 9, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1582 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = julianChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology2.monthOfYear();
        org.joda.time.DurationField durationField7 = julianChronology2.minutes();
        java.lang.String str8 = julianChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JulianChronology[+00:00:00.001]" + "'", str8, "JulianChronology[+00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int10 = dateTimeZone7.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        java.lang.String str40 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.dayOfWeek();
        org.joda.time.Instant instant44 = gJChronology38.getGregorianCutover();
        boolean boolean45 = instant33.equals((java.lang.Object) gJChronology38);
        boolean boolean46 = instant24.isAfter((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant48 = instant33.minus((-61543965598418L));
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.Chronology chronology53 = gJChronology52.withUTC();
        org.joda.time.DurationField durationField54 = gJChronology52.millis();
        long long58 = gJChronology52.add((long) '4', 0L, (int) (byte) -1);
        int int59 = gJChronology52.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology52.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime61 = instant48.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone63.getShortName((-35999890L), locale65);
        long long69 = dateTimeZone63.adjustOffset((-35999899L), true);
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeZone63.getName((-107999990L), locale71);
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63, 1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        long long78 = julianChronology74.add(readablePeriod75, 100L, 5);
        org.joda.time.DateTimeField dateTimeField79 = julianChronology74.clockhourOfHalfday();
        int int80 = instant48.get(dateTimeField79);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str35, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GJChronology[+10:00]" + "'", str40, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-35999899L) + "'", long69 == (-35999899L));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertNotNull(julianChronology74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L + "'", long78 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 7 + "'", int80 == 7);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology13 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        boolean boolean15 = instant9.isAfter((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        long long22 = dateTimeZone17.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        boolean boolean24 = instant9.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        int int48 = instant33.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant50 = instant44.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = instant50.toString(dateTimeFormatter51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant50.plus(readableDuration53);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Instant instant57 = dateTime55.toInstant();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.dayOfYear();
        org.joda.time.Instant instant67 = gJChronology63.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant67.minus(readableDuration68);
        org.joda.time.Instant instant72 = instant69.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant69.plus(readableDuration73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, (org.joda.time.ReadableInstant) instant74);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology75.millisOfSecond();
        org.joda.time.DurationField durationField77 = gJChronology75.days();
        org.joda.time.DateTime dateTime78 = dateTime55.toDateTime((org.joda.time.Chronology) gJChronology75);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str11, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-71999990L) + "'", long22 == (-71999990L));
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str35, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str52, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(gJChronology56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(julianChronology60);
        org.junit.Assert.assertNotNull(gJChronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(gJChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField8 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology3.getZone();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((-36000000L), locale14);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset((long) (short) 0, false);
        long long14 = dateTimeZone7.convertLocalToUTC((-60514215252321L), true);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60514215252321L) + "'", long14 == (-60514215252321L));
        org.junit.Assert.assertNotNull(julianChronology15);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        java.lang.String str3 = dateTimeZone1.getShortName((-35999900L));
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((-59082465599991L), locale5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+100:00" + "'", str3, "+100:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(86400000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology3.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = julianChronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology7.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-71999990L) + "'", long6 == (-71999990L));
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        int int16 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = gJChronology2.get(readablePeriod18, (-12219328799965L), (-52L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        java.lang.String str8 = gJChronology2.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = gJChronology2.getDateTimeMillis(2022, (int) (short) 100, 1582, 18600000, 72000, 8, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18600000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+10:00]" + "'", str8, "GJChronology[+10:00]");
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.nextTransition((long) (byte) -1);
        int int39 = dateTimeZone31.getOffsetFromLocal(0L);
        long long43 = dateTimeZone31.convertLocalToUTC((long) 'a', true, (long) 4);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone31.getShortName(0L, locale45);
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone31.isLocalDateTimeGap(localDateTime48);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 11L + "'", long34 == 11L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 97L + "'", long43 == 97L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(julianChronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        long long10 = dateTimeZone7.convertUTCToLocal((-107999990L));
        org.joda.time.Instant instant12 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        java.lang.String str24 = instant22.toString();
        int int25 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) instant22);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) instant26);
        java.util.Date date28 = instant27.toDate();
        org.joda.time.Instant instant30 = instant27.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Chronology chronology46 = gJChronology41.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology41.getZone();
        long long49 = dateTimeZone47.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology50 = gJChronology33.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean54 = dateTimeZone52.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.chrono.JulianChronology julianChronology58 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56);
        boolean boolean60 = julianChronology58.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology61 = julianChronology58.withUTC();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology63 = julianChronology58.withZone(dateTimeZone62);
        long long65 = dateTimeZone52.getMillisKeepLocal(dateTimeZone62, 10L);
        org.joda.time.Chronology chronology66 = gJChronology33.withZone(dateTimeZone62);
        long long68 = dateTimeZone62.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime69 = instant27.toMutableDateTime(dateTimeZone62);
        int int70 = instant12.compareTo((org.joda.time.ReadableInstant) mutableDateTime69);
        boolean boolean71 = mutableDateTime69.isBeforeNow();
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology75.millisOfDay();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology75.clockhourOfDay();
        org.joda.time.Chronology chronology80 = gJChronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology75.dayOfYear();
        boolean boolean82 = dateTimeZone7.equals((java.lang.Object) dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-107999990L) + "'", long10 == (-107999990L));
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str24, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-12219292800000L) + "'", long49 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(julianChronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 11L + "'", long65 == 11L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(gJChronology75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 10);
        org.joda.time.Instant instant6 = instant4.withMillis((-35999990L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant32 = instant26.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = instant32.toString(dateTimeFormatter33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant32.plus(readableDuration35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, (org.joda.time.ReadableInstant) instant46);
        java.lang.String str48 = instant46.toString();
        int int49 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((java.lang.Object) instant46);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((java.lang.Object) instant50);
        java.util.Date date52 = instant51.toDate();
        org.joda.time.Instant instant54 = instant51.withMillis((long) (byte) 10);
        int int55 = instant36.compareTo((org.joda.time.ReadableInstant) instant54);
        boolean boolean56 = instant4.isAfter((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        boolean boolean62 = julianChronology60.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology63 = julianChronology60.withUTC();
        org.joda.time.DateTimeZone dateTimeZone64 = julianChronology60.getZone();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology60.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology60.centuryOfEra();
        org.joda.time.DurationField durationField67 = julianChronology60.years();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, readableInstant69);
        org.joda.time.DateTimeZone dateTimeZone71 = gJChronology70.getZone();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology70.getZone();
        org.joda.time.Instant instant76 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74, (org.joda.time.ReadableInstant) instant76);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology77.clockhourOfHalfday();
        org.joda.time.Chronology chronology79 = gJChronology77.withUTC();
        org.joda.time.Instant instant80 = gJChronology77.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Instant instant82 = instant80.minus(readableDuration81);
        boolean boolean83 = julianChronology60.equals((java.lang.Object) instant80);
        org.joda.time.Instant instant85 = instant80.minus((-435599901L));
        boolean boolean86 = instant85.isBeforeNow();
        int int87 = instant54.compareTo((org.joda.time.ReadableInstant) instant85);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int89 = instant85.get(dateTimeFieldType88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str17, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str34, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str48, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(julianChronology60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(gJChronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(gJChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.Chronology chronology19 = gJChronology16.withUTC();
        org.joda.time.DurationField durationField20 = gJChronology16.hours();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.clockhourOfDay();
        java.lang.String str22 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.halfdayOfDay();
        org.joda.time.Chronology chronology25 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology16.minuteOfHour();
        boolean boolean30 = instant8.equals((java.lang.Object) dateTimeField29);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GJChronology[+10:00]" + "'", str22, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        long long10 = dateTimeZone8.nextTransition((-12219292800000L));
        long long12 = dateTimeZone8.convertUTCToLocal((long) 1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone8.getName((long) (-1), locale14);
        long long19 = dateTimeZone8.convertLocalToUTC(1L, true, (long) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.Chronology chronology23 = gJChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.millisOfDay();
        org.joda.time.DurationField durationField26 = gJChronology22.halfdays();
        org.joda.time.DurationField durationField27 = gJChronology22.millis();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology30 = gJChronology22.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.minuteOfDay();
        org.joda.time.Instant instant32 = gJChronology22.getGregorianCutover();
        org.joda.time.Instant instant34 = instant32.minus(0L);
        int int35 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) instant34);
        long long36 = instant34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone37 = instant34.getZone();
        long long41 = dateTimeZone37.convertLocalToUTC(576000389L, false, 16010L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-12219292800000L) + "'", long10 == (-12219292800000L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 36000001L + "'", long12 == 36000001L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-35999999L) + "'", long19 == (-35999999L));
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-12219292800000L) + "'", long36 == (-12219292800000L));
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 576000389L + "'", long41 == 576000389L);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant74 = instant19.minus(3L);
        org.joda.time.DateTimeZone dateTimeZone75 = instant19.getZone();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9L + "'", long18 == 9L);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int10 = dateTimeZone7.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology13 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField15 = gJChronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.millisOfDay();
        org.joda.time.DurationField durationField23 = gJChronology19.halfdays();
        org.joda.time.DurationField durationField24 = gJChronology19.millis();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology27 = gJChronology19.withZone(dateTimeZone26);
        org.joda.time.DurationField durationField28 = gJChronology19.minutes();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology19.halfdayOfDay();
        org.joda.time.DurationField durationField30 = gJChronology19.centuries();
        org.joda.time.DurationField durationField31 = gJChronology19.days();
        org.joda.time.Instant instant32 = gJChronology19.getGregorianCutover();
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant33.withDurationAdded(readableDuration34, (int) (byte) 10);
        org.joda.time.Instant instant38 = instant33.plus(3129100L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.Chronology chronology42 = gJChronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.millisOfDay();
        long long48 = gJChronology41.add((long) (byte) 1, (long) (short) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology41.hourOfDay();
        org.joda.time.DateTime dateTime53 = instant33.toDateTime((org.joda.time.Chronology) gJChronology41);
        int int54 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 5201L + "'", long48 == 5201L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 36000000 + "'", int54 == 36000000);
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology6 = julianChronology5.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = chronology6.getDateTimeMillis(4, (-3600000), (int) '#', 4200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        org.joda.time.Chronology chronology14 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Chronology chronology11 = julianChronology2.withZone(dateTimeZone10);
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology11.set(readablePartial12, 1052L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.plus((long) (short) 0);
        long long8 = instant5.getMillis();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.DurationField durationField15 = gJChronology12.years();
        org.joda.time.DurationField durationField16 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.yearOfEra();
        boolean boolean18 = instant6.equals((java.lang.Object) dateTimeField17);
        boolean boolean19 = instant6.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.centuryOfEra();
        boolean boolean25 = instant6.equals((java.lang.Object) gJChronology22);
        boolean boolean26 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant6.minus(readableDuration27);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GJChronology[+10:00]" + "'", str23, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.dayOfWeek();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.year();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = julianChronology3.getDateTimeMillis(0, 45, 1582, 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.weekyear();
        org.joda.time.DurationField durationField7 = julianChronology3.days();
        org.joda.time.Chronology chronology8 = julianChronology3.withUTC();
        long long12 = julianChronology3.add((long) (byte) 0, 4L, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 400L + "'", long12 == 400L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant17.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        boolean boolean22 = instant19.isAfter((long) (byte) 0);
        int int23 = instant11.compareTo((org.joda.time.ReadableInstant) instant19);
        java.lang.String str24 = instant19.toString();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str9, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str24, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = julianChronology3.getDateTimeMillis(24, (int) (short) 0, 1969, 18600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        java.util.TimeZone timeZone10 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone11.getName(36000001L, locale13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.Instant instant16 = gJChronology15.getGregorianCutover();
        int int17 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant27);
        java.lang.String str29 = instant27.toString();
        int int30 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTime dateTime31 = instant16.toDateTime(dateTimeZone18);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime31.getZone();
        boolean boolean34 = dateTime31.isEqualNow();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str29, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str32, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField21 = julianChronology20.centuries();
        java.lang.String str22 = julianChronology20.toString();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology20.centuryOfEra();
        org.joda.time.DurationField durationField26 = julianChronology20.seconds();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology20.hourOfDay();
        boolean boolean30 = instant15.equals((java.lang.Object) julianChronology20);
        org.joda.time.Chronology chronology31 = instant15.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = instant15.toString(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JulianChronology[+10:00]" + "'", str22, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str33, "1582-10-15T00:00:00.000Z");
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (long) '#', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial15 = null;
        int[] intArray21 = new int[] { 126000000, 72000, 895, 4, 16 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial15, intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[126000000, 72000, 895, 4, 16]");
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology11 = julianChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) (-1));
        long long19 = dateTimeZone13.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long21 = dateTimeZone13.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology22 = julianChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant31);
        java.lang.String str33 = instant31.toString();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant31.withDurationAdded(readableDuration34, (int) (byte) -1);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-35999899L) + "'", long21 == (-35999899L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str33, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        long long10 = gJChronology2.add((long) (short) -1, (-35999900L), 4);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = gJChronology2.add(readablePeriod11, 278L, 10);
        java.lang.String str15 = gJChronology2.toString();
        org.joda.time.Chronology chronology16 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-143999601L) + "'", long10 == (-143999601L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 278L + "'", long14 == 278L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+10:00]" + "'", str15, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        int int10 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = julianChronology3.add((-6211224827991830L), (-129599672399904L), 72000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -129599672399904 * 72000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        long long14 = gJChronology9.add((long) (short) -1, (long) 10, (int) (byte) -1);
        int int15 = gJChronology9.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = gJChronology9.get(readablePartial17, (-60514215211319L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+10:00,cutover=1970-01-01T10:00:00.000Z]" + "'", str10, "GJChronology[+10:00,cutover=1970-01-01T10:00:00.000Z]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-11L) + "'", long14 == (-11L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField14 = julianChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology3.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = julianChronology3.get(readablePartial18, (-61832704789991L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant24 = instant19.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-36000000L), 0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant27.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = instant27.getZone();
        org.joda.time.Instant instant32 = instant27.plus(4L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(instant32);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getShortName((-35999890L), locale14);
        org.joda.time.Chronology chronology16 = julianChronology3.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.millisOfDay();
        org.joda.time.DurationField durationField23 = gJChronology19.halfdays();
        org.joda.time.DurationField durationField24 = gJChronology19.millis();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology27 = gJChronology19.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology19.minuteOfDay();
        org.joda.time.Instant instant29 = gJChronology19.getGregorianCutover();
        org.joda.time.Instant instant31 = instant29.withMillis(52L);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) instant29);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = gJChronology32.getDateTimeMillis(360000000, 32400000, 5, 32400000, 72009726, 126000000, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000000L + "'", long10 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(gJChronology32);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = gJChronology2.centuries();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = chronology9.get(readablePeriod10, 11L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getName((long) (byte) 10);
        long long25 = dateTimeZone18.convertLocalToUTC((-35999900L), false);
        int int27 = dateTimeZone18.getOffsetFromLocal((long) 278);
        boolean boolean29 = dateTimeZone18.isStandardOffset((long) 4);
        org.joda.time.Chronology chronology30 = julianChronology10.withZone(dateTimeZone18);
        long long34 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false, 151200000L);
        int int36 = dateTimeZone18.getStandardOffset(0L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-71999900L) + "'", long25 == (-71999900L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-35999999L) + "'", long34 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField37 = gJChronology2.years();
        org.joda.time.Chronology chronology38 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField40 = gJChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) instant49);
        java.lang.String str51 = instant49.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.dayOfYear();
        org.joda.time.Instant instant58 = gJChronology54.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant58.minus(readableDuration59);
        org.joda.time.Instant instant63 = instant60.withDurationAdded((-12219292800000L), 0);
        int int64 = instant49.compareTo((org.joda.time.ReadableInstant) instant60);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant66 = instant49.minus(readableDuration65);
        java.util.Date date67 = instant49.toDate();
        boolean boolean68 = gJChronology2.equals((java.lang.Object) instant49);
        org.joda.time.Instant instant70 = instant49.plus((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        boolean boolean72 = instant49.isSupported(dateTimeFieldType71);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology75 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = julianChronology75.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology75.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = julianChronology75.hourOfDay();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology75.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology75.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology75.dayOfWeek();
        int int82 = instant49.get(dateTimeField81);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 11L + "'", long34 == 11L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str51, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(julianChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField8 = gJChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology11.millis();
        long long17 = gJChronology11.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField18 = gJChronology11.millis();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = gJChronology11.months();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.Chronology chronology29 = gJChronology24.withZone(dateTimeZone27);
        long long32 = dateTimeZone27.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone33 = dateTimeZone27.toTimeZone();
        long long36 = dateTimeZone27.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology37 = gJChronology11.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology11.yearOfEra();
        boolean boolean39 = gJChronology2.equals((java.lang.Object) gJChronology11);
        org.joda.time.DurationField durationField40 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology2.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = gJChronology2.getDateTimeMillis((-60514215282090L), 86400000, 32400000, (int) (byte) 100, 126000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-35999990L) + "'", long32 == (-35999990L));
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-36000001L) + "'", long36 == (-36000001L));
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        java.lang.String str10 = dateTimeZone6.getNameKey(10L);
        long long12 = dateTimeZone6.convertUTCToLocal((-12219328800000L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = julianChronology16.days();
        int int23 = julianChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField24 = julianChronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology16.millisOfDay();
        boolean boolean26 = dateTimeZone6.equals((java.lang.Object) dateTimeField25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Chronology chronology36 = gJChronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology31.getZone();
        long long39 = dateTimeZone37.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology40 = gJChronology27.withZone(dateTimeZone37);
        long long42 = dateTimeZone1.getMillisKeepLocal(dateTimeZone37, (long) 19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone45 = dateTimeZone1.toTimeZone();
        java.lang.String str47 = dateTimeZone1.getNameKey((long) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-12219292800000L) + "'", long12 == (-12219292800000L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-12219292800000L) + "'", long39 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-35999981L) + "'", long42 == (-35999981L));
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = julianChronology3.get(readablePeriod10, 0L, (-17399899L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = gJChronology2.get(readablePartial7, (-12959963999999L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.minuteOfHour();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = gJChronology2.getDateTimeMillis(18600000, 36000, (-1), (int) '4', (int) '4', (int) (byte) 10, 20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        long long13 = gJChronology2.add(0L, (long) 0, 100);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfCentury();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        int int14 = dateTimeZone5.getOffsetFromLocal((long) 278);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.monthOfYear();
        boolean boolean41 = instant25.equals((java.lang.Object) dateTimeField40);
        org.joda.time.Instant instant43 = instant25.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant43.isSupported(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = instant43.toString(dateTimeFormatter48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant53 = instant43.withDurationAdded((long) 0, (int) 'a');
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.seconds();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-71999900L) + "'", long12 == (-71999900L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (long) '#', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone10.getShortName((long) (byte) 1, locale12);
        org.joda.time.Chronology chronology14 = julianChronology3.withZone(dateTimeZone10);
        java.lang.String str15 = julianChronology3.toString();
        org.joda.time.DurationField durationField16 = julianChronology3.months();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JulianChronology[+10:00]" + "'", str15, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        java.lang.String str9 = dateTimeZone7.getName((long) 0);
        long long12 = dateTimeZone7.adjustOffset(1L, true);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology2.add(readablePeriod14, (-107999989L), 24);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField21 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 10);
        long long27 = dateTimeZone24.convertLocalToUTC((-61513207200000L), false);
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = gJChronology2.getDateTimeMillis((int) (byte) 0, 100, 97, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-107999989L) + "'", long17 == (-107999989L));
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-61513203000000L) + "'", long27 == (-61513203000000L));
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        boolean boolean43 = instant40.isAfter((long) (byte) 1);
        boolean boolean44 = instant40.isBeforeNow();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000000L + "'", long6 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str17, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField9 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology2.halfdays();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfDay();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.Instant instant14 = gJChronology10.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.minus(readableDuration15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.plus(readableDuration17);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = instant18.getZone();
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology21.yearOfEra();
        boolean boolean23 = gJChronology2.equals((java.lang.Object) dateTimeField22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant24 = new org.joda.time.Instant((java.lang.Object) dateTimeField22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.GJYearOfEraDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+10:00]" + "'", str7, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        boolean boolean19 = instant14.isAfter(223199999L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant23.withMillis((long) (byte) -1);
        org.joda.time.Instant instant27 = instant25.minus((long) (short) 10);
        org.joda.time.Instant instant29 = instant27.plus((long) 126000000);
        boolean boolean30 = instant14.isEqual((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        boolean boolean40 = instant39.isAfterNow();
        boolean boolean41 = instant39.isAfterNow();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant44 = instant39.withDurationAdded(readableDuration42, 20);
        boolean boolean45 = instant27.isEqual((org.joda.time.ReadableInstant) instant39);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.Chronology chronology49 = gJChronology48.withUTC();
        java.lang.String str50 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField55 = gJChronology48.seconds();
        org.joda.time.DateTime dateTime56 = instant27.toDateTime((org.joda.time.Chronology) gJChronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int58 = dateTime56.get(dateTimeFieldType57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str11, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GJChronology[+10:00]" + "'", str50, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 19);
        boolean boolean2 = instant1.isEqualNow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        java.lang.String str2 = gJChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = gJChronology0.days();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        boolean boolean10 = julianChronology8.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology11 = julianChronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology13 = julianChronology8.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = julianChronology8.seconds();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology17 = julianChronology8.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = gJChronology0.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology0.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = gJChronology0.get(readablePeriod21, 35999991L, 36000110L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GJChronology[+10:00]" + "'", str2, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getNameKey(10L);
        java.lang.String str7 = dateTimeZone1.getName((long) (byte) -1);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Chronology chronology40 = instant8.getChronology();
        org.joda.time.ReadablePartial readablePartial41 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology40.set(readablePartial41, (-61513203000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone5.getName(10L, locale11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        long long17 = dateTimeZone5.convertLocalToUTC((-7467297965999790L), false);
        boolean boolean18 = dateTimeZone5.isFixed();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-7467298001999790L) + "'", long17 == (-7467298001999790L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField11 = julianChronology3.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = julianChronology3.getDateTimeMillis((int) (short) 1, 1970, 8, 40, (int) (byte) 100, 72009726, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant6.plus(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = instant6.get(dateTimeFieldType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        java.lang.String str6 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.year();
        org.joda.time.DurationField durationField8 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.year();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[+10:00]" + "'", str6, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.Instant instant8 = instant6.toInstant();
        org.joda.time.Instant instant11 = instant6.withDurationAdded((-36000001L), 1200);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        java.lang.String str24 = instant22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.Instant instant36 = instant33.withDurationAdded((-12219292800000L), 0);
        int int37 = instant22.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant22.minus(readableDuration38);
        java.util.Date date40 = instant22.toDate();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.Instant instant52 = instant49.withDurationAdded((-12219292800000L), 0);
        boolean boolean53 = instant22.isEqual((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant55 = instant22.minus((-35999968L));
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, (org.joda.time.ReadableInstant) instant64);
        java.lang.String str66 = instant64.toString();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.Instant instant73 = gJChronology69.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant75 = instant73.minus(readableDuration74);
        org.joda.time.Instant instant78 = instant75.withDurationAdded((-12219292800000L), 0);
        int int79 = instant64.compareTo((org.joda.time.ReadableInstant) instant75);
        long long80 = instant64.getMillis();
        org.joda.time.Instant instant81 = instant64.toInstant();
        org.joda.time.DateTimeZone dateTimeZone82 = instant64.getZone();
        long long84 = dateTimeZone82.previousTransition((long) (short) 100);
        long long87 = dateTimeZone82.convertLocalToUTC((long) (-1), false);
        org.joda.time.DateTime dateTime88 = instant22.toDateTime(dateTimeZone82);
        java.util.Date date89 = instant22.toDate();
        org.joda.time.Instant instant91 = instant22.minus(43129898499L);
        org.joda.time.DateTimeZone dateTimeZone92 = instant22.getZone();
        boolean boolean93 = instant11.equals((java.lang.Object) instant22);
        org.joda.time.Instant instant95 = instant11.minus(132477032786400000L);
        org.joda.time.Instant instant98 = instant95.withDurationAdded(47520034319L, 18600000);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str24, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(gJChronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(gJChronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str66, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 36000000L + "'", long80 == 36000000L);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(instant95);
        org.junit.Assert.assertNotNull(instant98);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.millisOfDay();
        org.joda.time.DurationField durationField13 = gJChronology9.halfdays();
        org.joda.time.DurationField durationField14 = gJChronology9.millis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology17 = gJChronology9.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.minuteOfDay();
        int int19 = instant4.get(dateTimeField18);
        org.joda.time.Instant instant22 = instant4.withDurationAdded((long) 9, (int) (byte) -1);
        boolean boolean23 = instant4.isBeforeNow();
        boolean boolean24 = instant4.isEqualNow();
        org.joda.time.DateTime dateTime25 = instant4.toDateTime();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1200 + "'", int19 == 1200);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = gJChronology2.days();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = gJChronology2.add(readablePeriod11, (-62159565599948L), 3600000);
        org.joda.time.DurationField durationField15 = gJChronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.secondOfDay();
        boolean boolean25 = gJChronology2.equals((java.lang.Object) gJChronology18);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.halfdayOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62159565599948L) + "'", long14 == (-62159565599948L));
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+10:00]" + "'", str19, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        long long22 = dateTimeZone16.convertLocalToUTC((-71999990L), false);
        java.lang.String str23 = dateTimeZone16.getID();
        long long27 = dateTimeZone16.convertLocalToUTC((-48645335529L), false, 0L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-107999990L) + "'", long22 == (-107999990L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-48681335529L) + "'", long27 == (-48681335529L));
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.Chronology chronology46 = gJChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology45.monthOfYear();
        boolean boolean53 = instant37.equals((java.lang.Object) dateTimeField52);
        org.joda.time.Instant instant55 = instant37.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = instant55.isSupported(dateTimeFieldType56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = instant55.isSupported(dateTimeFieldType58);
        org.joda.time.Instant instant62 = instant55.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant64 = instant62.withMillis(187199999L);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant67 = instant62.withDurationAdded(readableDuration65, 1200);
        boolean boolean68 = instant26.isEqual((org.joda.time.ReadableInstant) instant62);
        org.joda.time.Instant instant70 = instant62.minus(1052L);
        boolean boolean72 = instant62.isBefore((-35998030L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.dayOfWeek();
        java.lang.String str9 = julianChronology3.toString();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = julianChronology3.getDateTimeMillis(660, 24, 360000000, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JulianChronology[+10:00]" + "'", str9, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = instant20.toDateTime();
        java.util.Date date25 = instant20.toDate();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.millisOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.secondOfMinute();
        int int34 = instant20.get(dateTimeField33);
        org.joda.time.Chronology chronology35 = instant20.getChronology();
        boolean boolean36 = instant9.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant20.withDurationAdded(readableDuration37, 7);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str11, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        int int14 = dateTimeZone12.getStandardOffset((long) 8);
        java.util.TimeZone timeZone15 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DurationField durationField11 = julianChronology3.weekyears();
        org.joda.time.Chronology chronology12 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        java.lang.String str12 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.Chronology chronology15 = julianChronology3.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology15.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JulianChronology[+10:00]" + "'", str12, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant1.getChronology();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology42.add(readablePeriod43, 134401582L, (-3600000));
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000000L + "'", long6 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str17, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 134401582L + "'", long46 == 134401582L);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology4 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology11 = julianChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) (-1));
        long long19 = dateTimeZone13.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long21 = dateTimeZone13.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology22 = julianChronology10.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField23 = julianChronology10.minutes();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = julianChronology10.get(readablePeriod24, 10371503448098510L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-35999899L) + "'", long21 == (-35999899L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(36000000L);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField12 = gJChronology11.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology11.days();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, 43129898499L, 36000001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 36000001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = instant8.isEqual(readableInstant14);
        org.joda.time.Chronology chronology16 = instant8.getChronology();
        org.joda.time.Chronology chronology17 = instant8.getChronology();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant8.minus(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = instant8.isSupported(dateTimeFieldType20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant22 = new org.joda.time.Instant((java.lang.Object) boolean21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.Chronology chronology31 = instant27.getChronology();
        org.joda.time.Chronology chronology32 = instant27.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = instant27.get(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000000L + "'", long24 == 36000000L);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        long long11 = julianChronology3.getDateTimeMillis(1970, 8, 10, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology3.getZone();
        int int16 = dateTimeZone14.getStandardOffset((-1295998588800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 20181600100L + "'", long11 == 20181600100L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = julianChronology3.add(readablePeriod12, (long) (short) 100, 126000000);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = julianChronology3.getDateTimeMillis(19, 72009726, 69, 126000000, (int) (short) 1, (-1), 32400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 126000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        long long7 = dateTimeZone1.previousTransition((long) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.DurationField durationField13 = julianChronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology11.add(readablePeriod15, (long) 36000000, 4);
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) 36000000);
        java.lang.String str20 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        boolean boolean26 = julianChronology24.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology24.era();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology24.era();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology24.year();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone34.getShortName((long) (short) -1, locale36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str40 = dateTimeZone39.getID();
        boolean boolean41 = dateTimeZone39.isFixed();
        long long43 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) 1);
        java.lang.String str44 = dateTimeZone34.getID();
        org.joda.time.Chronology chronology45 = julianChronology24.withZone(dateTimeZone34);
        boolean boolean46 = dateTimeZone1.equals((java.lang.Object) julianChronology24);
        org.joda.time.DurationField durationField47 = julianChronology24.hours();
        long long51 = julianChronology24.add((-6211221875999790L), 348910025L, (-3600000));
        org.joda.time.ReadablePartial readablePartial52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = julianChronology24.get(readablePartial52, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 36000000L + "'", long18 == 36000000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-7467297965999790L) + "'", long51 == (-7467297965999790L));
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        java.lang.String str11 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.yearOfEra();
        java.lang.String str15 = gJChronology9.toString();
        boolean boolean16 = instant1.equals((java.lang.Object) gJChronology9);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology9.minuteOfDay();
        org.joda.time.DurationField durationField18 = gJChronology9.weeks();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000000L + "'", long6 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GJChronology[+10:00]" + "'", str11, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+10:00]" + "'", str15, "GJChronology[+10:00]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.Instant instant31 = gJChronology25.getGregorianCutover();
        boolean boolean32 = instant20.equals((java.lang.Object) gJChronology25);
        boolean boolean33 = instant11.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology34 = instant11.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str22, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GJChronology[+10:00]" + "'", str27, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        long long13 = gJChronology2.add(0L, (long) 0, 100);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T10:00:00.000+10:00");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant10);
        java.lang.String str12 = instant10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        int int25 = instant10.compareTo((org.joda.time.ReadableInstant) instant21);
        long long26 = instant10.getMillis();
        long long27 = instant10.getMillis();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant10.withDurationAdded(readableDuration28, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology45.getZone();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant51);
        java.lang.String str53 = instant51.toString();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.Chronology chronology57 = gJChronology56.withUTC();
        java.lang.String str58 = gJChronology56.toString();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.monthOfYear();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology56.dayOfWeek();
        org.joda.time.Instant instant62 = gJChronology56.getGregorianCutover();
        boolean boolean63 = instant51.equals((java.lang.Object) gJChronology56);
        boolean boolean64 = instant42.isAfter((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Instant instant66 = instant51.minus((-61543965598418L));
        boolean boolean67 = instant51.isEqualNow();
        int int68 = instant30.compareTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant71 = instant30.withDurationAdded(readableDuration69, (int) (byte) -1);
        long long72 = instant30.getMillis();
        boolean boolean73 = instant1.isAfter((org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int75 = instant30.get(dateTimeFieldType74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str12, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 36000000L + "'", long26 == 36000000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 36000000L + "'", long27 == 36000000L);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str53, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GJChronology[+10:00]" + "'", str58, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 36000000L + "'", long72 == 36000000L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField10 = gJChronology2.months();
        org.joda.time.ReadablePartial readablePartial11 = null;
        int[] intArray13 = new int[] { 1582 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial11, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1582]");
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        java.lang.String str2 = gJChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = gJChronology0.days();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        boolean boolean10 = julianChronology8.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology11 = julianChronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology13 = julianChronology8.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = julianChronology8.seconds();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology17 = julianChronology8.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = gJChronology0.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology21.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology21.getZone();
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.Chronology chronology28 = gJChronology0.withZone(dateTimeZone24);
        int int30 = dateTimeZone24.getOffsetFromLocal(52005600809L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 86400000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GJChronology[+10:00]" + "'", str2, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        int int14 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField21 = julianChronology18.months();
        boolean boolean22 = julianChronology3.equals((java.lang.Object) julianChronology18);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology18.year();
        org.joda.time.DurationField durationField24 = julianChronology18.hours();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = julianChronology18.get(readablePeriod25, 0L, (-12219328799965L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        java.lang.String str6 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField8 = gJChronology2.weeks();
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = gJChronology2.get(readablePartial9, (-107999989L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[+10:00]" + "'", str6, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, (-60514215308675L), 278);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60514215308675L) + "'", long13 == (-60514215308675L));
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean8 = dateTimeZone6.isFixed();
        long long10 = dateTimeZone6.previousTransition(100L);
        java.util.TimeZone timeZone11 = dateTimeZone6.toTimeZone();
        long long13 = dateTimeZone6.previousTransition(5201L);
        org.joda.time.Chronology chronology14 = julianChronology2.withZone(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant15);
        java.lang.String str17 = dateTimeZone6.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5201L + "'", long13 == 5201L);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        boolean boolean6 = instant5.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone7 = instant5.getZone();
        int int9 = dateTimeZone7.getStandardOffset((long) 895);
        java.lang.String str11 = dateTimeZone7.getName((-165600001L));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.clockhourOfDay();
        int int16 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = julianChronology3.getDateTimeMillis(1582, 72000, 1969, (int) (byte) 0, 40, 3600000, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1L);
        boolean boolean6 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.Chronology chronology22 = gJChronology17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology17.getZone();
        long long25 = dateTimeZone23.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology26 = gJChronology9.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        boolean boolean36 = julianChronology34.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology37 = julianChronology34.withUTC();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology39 = julianChronology34.withZone(dateTimeZone38);
        long long41 = dateTimeZone28.getMillisKeepLocal(dateTimeZone38, 10L);
        org.joda.time.Chronology chronology42 = gJChronology9.withZone(dateTimeZone38);
        org.joda.time.Chronology chronology43 = gJChronology9.withUTC();
        org.joda.time.DateTime dateTime44 = instant5.toDateTime(chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime44.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology49.year();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology49.weekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology54 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = julianChronology54.clockhourOfDay();
        org.joda.time.DurationField durationField56 = julianChronology54.hours();
        long long60 = julianChronology54.add((long) 36000000, (long) ' ', 3600000);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology54.dayOfWeek();
        boolean boolean62 = julianChronology49.equals((java.lang.Object) julianChronology54);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology54.hourOfDay();
        boolean boolean64 = dateTime44.equals((java.lang.Object) julianChronology54);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-12219292800000L) + "'", long25 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 11L + "'", long41 == 11L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(julianChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(julianChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 151200000L + "'", long60 == 151200000L);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.weeks();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.year();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology16.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone22.getName((long) 36000000, locale24);
        int int27 = dateTimeZone22.getOffset((long) ' ');
        org.joda.time.Chronology chronology28 = julianChronology16.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField29 = julianChronology16.months();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology16.minuteOfHour();
        boolean boolean31 = gJChronology2.equals((java.lang.Object) julianChronology16);
        org.joda.time.DurationField durationField32 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField12 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+10:00]" + "'", str8, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        java.lang.String str11 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant23);
        java.lang.String str25 = instant23.toString();
        int int26 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant23);
        java.util.TimeZone timeZone27 = dateTimeZone14.toTimeZone();
        org.joda.time.Chronology chronology28 = julianChronology3.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology3.millisOfSecond();
        org.joda.time.DurationField durationField30 = julianChronology3.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JulianChronology[+10:00]" + "'", str11, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str25, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        java.lang.String str6 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = gJChronology2.getDateTimeMillis(36000000, 895, (int) (byte) -1, 86400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86400000 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[+10:00]" + "'", str6, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.Instant instant10 = instant8.toInstant();
        org.joda.time.Instant instant11 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.joda.time.Instant instant26 = instant23.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant23.plus(readableDuration27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant28);
        int int31 = dateTimeZone13.getOffset(151200000L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.Chronology chronology35 = gJChronology34.withUTC();
        java.lang.String str36 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.monthOfYear();
        org.joda.time.Chronology chronology38 = gJChronology34.withUTC();
        java.lang.String str39 = chronology38.toString();
        boolean boolean40 = dateTimeZone13.equals((java.lang.Object) str39);
        org.joda.time.MutableDateTime mutableDateTime41 = instant11.toMutableDateTime(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GJChronology[+10:00]" + "'", str36, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GJChronology[UTC]" + "'", str39, "GJChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology4 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.year();
        org.joda.time.DurationField durationField6 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = julianChronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Chronology chronology18 = julianChronology9.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        boolean boolean20 = julianChronology3.equals((java.lang.Object) durationField19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology3.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(julianChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField16 = julianChronology15.centuries();
        org.joda.time.DurationField durationField17 = julianChronology15.weeks();
        org.joda.time.DurationField durationField18 = julianChronology15.days();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = julianChronology15.add(readablePeriod19, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getShortName((-35999890L), locale26);
        org.joda.time.Chronology chronology28 = julianChronology15.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.millisOfDay();
        org.joda.time.DurationField durationField35 = gJChronology31.halfdays();
        org.joda.time.DurationField durationField36 = gJChronology31.millis();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology39 = gJChronology31.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology31.minuteOfDay();
        org.joda.time.Instant instant41 = gJChronology31.getGregorianCutover();
        org.joda.time.Instant instant43 = instant41.withMillis(52L);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, (org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.Chronology chronology46 = gJChronology2.withZone(dateTimeZone24);
        java.lang.String str47 = dateTimeZone24.getID();
        long long49 = dateTimeZone24.previousTransition((long) 353);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 36000000L + "'", long22 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 353L + "'", long49 == 353L);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField8 = gJChronology2.months();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekOfWeekyear();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[UTC]" + "'", str3, "GJChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.era();
        org.joda.time.DurationField durationField4 = gJChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology0.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = gJChronology0.getDateTimeMillis(0L, 2022, (int) (short) 10, (int) (short) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.Instant instant43 = instant37.toInstant();
        boolean boolean45 = instant43.isBefore((long) ' ');
        boolean boolean46 = instant26.isAfter((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant48 = instant26.minus(4L);
        org.joda.time.Instant instant51 = instant48.withDurationAdded(2506L, (int) (short) 0);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((java.lang.Object) instant48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = instant48.isSupported(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField12 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DurationField durationField14 = gJChronology2.months();
        org.joda.time.ReadablePartial readablePartial15 = null;
        int[] intArray22 = new int[] { (byte) 0, 1970, 660, 2022, 0, 4 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial15, intArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1970, 660, 2022, 0, 4]");
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology11 = julianChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField16 = julianChronology15.centuries();
        java.lang.String str17 = julianChronology15.toString();
        java.lang.String str18 = julianChronology15.toString();
        org.joda.time.DurationField durationField19 = julianChronology15.weekyears();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone21.getName((-1L), locale24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone21.isLocalDateTimeGap(localDateTime26);
        boolean boolean29 = dateTimeZone21.isStandardOffset(36000000L);
        java.lang.String str30 = dateTimeZone21.toString();
        org.joda.time.Chronology chronology31 = julianChronology15.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology32 = julianChronology10.withZone(dateTimeZone21);
        boolean boolean33 = dateTimeZone21.isFixed();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JulianChronology[+10:00]" + "'", str17, "JulianChronology[+10:00]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JulianChronology[+10:00]" + "'", str18, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField9 = gJChronology2.hours();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.year();
        org.joda.time.DurationField durationField12 = gJChronology2.seconds();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+10:00]" + "'", str10, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(4200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.months();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = julianChronology3.add(readablePeriod10, 3600000L, 1200);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = julianChronology3.getDateTimeMillis((int) (byte) -1, (int) (byte) 100, 360000000, 2022, (int) (byte) 10, 0, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3600000L + "'", long13 == 3600000L);
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology8.add(readablePeriod10, (-12219292800000L), (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology8.millisOfDay();
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = gJChronology8.get(readablePartial15, (long) 7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-12219292800000L) + "'", long13 == (-12219292800000L));
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.Instant instant12 = gJChronology8.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        boolean boolean17 = julianChronology3.equals((java.lang.Object) mutableDateTime15);
        boolean boolean18 = mutableDateTime15.isEqualNow();
        boolean boolean19 = mutableDateTime15.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = mutableDateTime15.toDateTime(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = julianChronology3.getDateTimeMillis(18600000, 0, (int) (short) -1, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getNameKey(10L);
        java.lang.String str14 = dateTimeZone8.getName((long) (byte) -1);
        org.joda.time.Chronology chronology15 = gJChronology2.withZone(dateTimeZone8);
        long long18 = dateTimeZone8.adjustOffset(0L, true);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        boolean boolean24 = julianChronology22.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology22.secondOfDay();
        long long30 = julianChronology22.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        boolean boolean36 = julianChronology34.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology37 = julianChronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology34.era();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology34.minuteOfHour();
        org.joda.time.DurationField durationField40 = julianChronology34.weeks();
        org.joda.time.DurationField durationField41 = julianChronology34.days();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology34.millisOfDay();
        org.joda.time.DurationField durationField44 = julianChronology34.millis();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology34.clockhourOfHalfday();
        boolean boolean46 = julianChronology22.equals((java.lang.Object) julianChronology34);
        boolean boolean47 = dateTimeZone8.equals((java.lang.Object) julianChronology22);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology22.secondOfMinute();
        int int49 = julianChronology22.getMinimumDaysInFirstWeek();
        java.lang.String str50 = julianChronology22.toString();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology22.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial52 = null;
        int[] intArray59 = new int[] { 126000000, 1582, (byte) -1, 18600000, 5, 97 };
        // The following exception was thrown during execution in test generation
        try {
            julianChronology22.validate(readablePartial52, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 36000001L + "'", long30 == 36000001L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "JulianChronology[+10:00]" + "'", str50, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[126000000, 1582, -1, 18600000, 5, 97]");
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        java.lang.String str6 = julianChronology3.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, (long) (short) 1, (-1));
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.weekyear();
        java.lang.String str12 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.millisOfSecond();
        java.lang.String str14 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JulianChronology[+10:00]" + "'", str6, "JulianChronology[+10:00]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JulianChronology[+10:00]" + "'", str12, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JulianChronology[+10:00]" + "'", str14, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(252097310L);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField15 = gJChronology2.months();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = gJChronology2.getDateTimeMillis(3600000, (int) (short) 0, 97, 45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.Instant instant30 = instant26.withMillis(36000001L);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant33.withDurationAdded(readableDuration34, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = instant33.toString(dateTimeFormatter37);
        org.joda.time.Instant instant41 = instant33.withDurationAdded(0L, 1582);
        long long42 = instant41.getMillis();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.Chronology chronology46 = gJChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.DurationField durationField48 = gJChronology45.days();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.halfdayOfDay();
        int int50 = instant41.get(dateTimeField49);
        boolean boolean51 = instant41.isBeforeNow();
        boolean boolean52 = instant31.isAfter((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant53 = instant31.toInstant();
        org.joda.time.Instant instant55 = instant53.plus(32409730L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str38, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 36000000L + "'", long42 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant55);
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        java.lang.String str12 = dateTimeZone10.getShortName((-35999981L));
        java.lang.String str14 = dateTimeZone10.getShortName((-32398031L));
        long long16 = dateTimeZone10.nextTransition((long) '4');
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        long long73 = instant46.getMillis();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology76 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, readableInstant78);
        org.joda.time.DateTimeZone dateTimeZone80 = gJChronology79.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology79.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology79.dayOfYear();
        org.joda.time.Instant instant83 = gJChronology79.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant85 = instant83.minus(readableDuration84);
        org.joda.time.Instant instant88 = instant85.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Instant instant90 = instant85.plus(readableDuration89);
        org.joda.time.chrono.GJChronology gJChronology91 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75, (org.joda.time.ReadableInstant) instant90);
        org.joda.time.ReadableInstant readableInstant92 = null;
        boolean boolean93 = instant90.isAfter(readableInstant92);
        org.joda.time.Instant instant95 = instant90.withMillis(35999999L);
        boolean boolean96 = instant46.isAfter((org.joda.time.ReadableInstant) instant95);
        org.joda.time.DateTime dateTime97 = instant95.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime98 = instant95.toMutableDateTime();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9L + "'", long18 == 9L);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(julianChronology76);
        org.junit.Assert.assertNotNull(gJChronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertNotNull(gJChronology91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(instant95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(mutableDateTime98);
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-12219328800000L));
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology4 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = julianChronology4.minuteOfDay();
        org.joda.time.DurationField durationField6 = julianChronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology4.year();
        int int9 = instant1.get(dateTimeField8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 20);
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        boolean boolean13 = instant1.isEqual((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = instant1.get(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(julianChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1582 + "'", int9 == 1582);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField7 = gJChronology2.seconds();
        org.joda.time.DurationField durationField8 = gJChronology2.minutes();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, 360000000L, 43203104);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 43203104");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.plus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean40 = instant35.isEqual(35L);
        boolean boolean41 = instant21.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean42 = instant9.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone43 = instant9.getZone();
        org.joda.time.DateTime dateTime44 = instant9.toDateTime();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = gJChronology2.getDateTimeMillis(36000000, 0, 353, 1970, 72000, 4200000, 126000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfDay();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology21 = julianChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.hourOfHalfday();
        java.lang.String str23 = julianChronology18.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField33 = julianChronology27.seconds();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology27.year();
        org.joda.time.DateTimeZone dateTimeZone36 = julianChronology27.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = julianChronology27.getZone();
        org.joda.time.Chronology chronology38 = julianChronology18.withZone(dateTimeZone37);
        long long40 = dateTimeZone11.getMillisKeepLocal(dateTimeZone37, (-35999900L));
        org.joda.time.Chronology chronology41 = julianChronology3.withZone(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JulianChronology[+10:00]" + "'", str23, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-71999900L) + "'", long40 == (-71999900L));
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.hours();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-59011667999903L));
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, (int) (short) 0);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 0);
        java.util.Date date10 = instant6.toDate();
        long long11 = instant6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        int int35 = instant20.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.dayOfWeek();
        org.joda.time.DurationField durationField41 = gJChronology38.years();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.weekyear();
        boolean boolean43 = instant20.equals((java.lang.Object) dateTimeField42);
        org.joda.time.Instant instant45 = instant20.withMillis(32L);
        boolean boolean46 = instant6.isEqual((org.joda.time.ReadableInstant) instant45);
        boolean boolean47 = instant1.isBefore((org.joda.time.ReadableInstant) instant45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.Chronology chronology55 = gJChronology50.withZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology50.getZone();
        long long58 = dateTimeZone56.nextTransition((-12219292800000L));
        long long60 = dateTimeZone56.convertUTCToLocal((long) 1);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeZone56.getName((long) (-1), locale62);
        long long67 = dateTimeZone56.convertLocalToUTC(1L, true, (long) 0);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, readableInstant69);
        org.joda.time.Chronology chronology71 = gJChronology70.withUTC();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.millisOfDay();
        org.joda.time.DurationField durationField74 = gJChronology70.halfdays();
        org.joda.time.DurationField durationField75 = gJChronology70.millis();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology78 = gJChronology70.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology70.minuteOfDay();
        org.joda.time.Instant instant80 = gJChronology70.getGregorianCutover();
        org.joda.time.Instant instant82 = instant80.minus(0L);
        int int83 = dateTimeZone56.getOffset((org.joda.time.ReadableInstant) instant82);
        long long84 = instant82.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        boolean boolean86 = instant82.isSupported(dateTimeFieldType85);
        org.joda.time.Instant instant87 = instant82.toInstant();
        boolean boolean88 = instant45.isEqual((org.joda.time.ReadableInstant) instant87);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Instant instant90 = instant45.minus(readableDuration89);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36000000L + "'", long11 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str22, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-12219292800000L) + "'", long58 == (-12219292800000L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 36000001L + "'", long60 == 36000001L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-35999999L) + "'", long67 == (-35999999L));
        org.junit.Assert.assertNotNull(gJChronology70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 36000000 + "'", int83 == 36000000);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-12219292800000L) + "'", long84 == (-12219292800000L));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(instant90);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.Chronology chronology26 = gJChronology21.withZone(dateTimeZone24);
        long long29 = dateTimeZone24.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str31 = dateTimeZone24.getName((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str34 = dateTimeZone33.getID();
        boolean boolean35 = dateTimeZone33.isFixed();
        int int37 = dateTimeZone33.getOffsetFromLocal((-12219292800000L));
        java.lang.String str38 = dateTimeZone33.getID();
        boolean boolean39 = dateTimeZone24.equals((java.lang.Object) str38);
        org.joda.time.Chronology chronology40 = gJChronology2.withZone(dateTimeZone24);
        long long43 = dateTimeZone24.convertLocalToUTC((-60514215291895L), true);
        long long47 = dateTimeZone24.convertLocalToUTC(0L, true, (-2303999692L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9L + "'", long18 == 9L);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-35999990L) + "'", long29 == (-35999990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60514251291895L) + "'", long43 == (-60514251291895L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-36000000L) + "'", long47 == (-36000000L));
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        long long8 = instant6.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant6.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long24 = dateTimeZone17.previousTransition(5201L);
        org.joda.time.Chronology chronology25 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology13.year();
        int int27 = instant6.get(dateTimeField26);
        org.joda.time.DateTime dateTime28 = instant6.toDateTimeISO();
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant30.withDurationAdded(readableDuration31, 0);
        java.util.Date date34 = instant30.toDate();
        long long35 = instant30.getMillis();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        java.lang.String str40 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.yearOfEra();
        java.lang.String str44 = gJChronology38.toString();
        boolean boolean45 = instant30.equals((java.lang.Object) gJChronology38);
        org.joda.time.Chronology chronology46 = instant30.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = instant30.toString(dateTimeFormatter47);
        boolean boolean49 = instant6.isAfter((org.joda.time.ReadableInstant) instant30);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-12219292800000L) + "'", long8 == (-12219292800000L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5201L + "'", long24 == 5201L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1582 + "'", int27 == 1582);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 36000000L + "'", long35 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GJChronology[+10:00]" + "'", str40, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GJChronology[+10:00]" + "'", str44, "GJChronology[+10:00]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str48, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology12.minuteOfDay();
        org.joda.time.DurationField durationField14 = julianChronology12.weekyears();
        boolean boolean15 = gJChronology2.equals((java.lang.Object) julianChronology12);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.era();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.days();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.clockhourOfDay();
        java.lang.String str10 = gJChronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.DurationField durationField12 = gJChronology8.days();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = julianChronology16.seconds();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology25 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = gJChronology8.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology29.getZone();
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology36 = gJChronology8.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology37 = gJChronology2.withZone(dateTimeZone32);
        java.lang.String str38 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology2.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = gJChronology2.get(readablePeriod40, (long) '#', (-5900380595998018L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+10:00]" + "'", str10, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GJChronology[+10:00]" + "'", str38, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.ReadablePartial readablePartial15 = null;
        int[] intArray18 = new int[] { 86400000, 40 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial15, intArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[86400000, 40]");
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DurationField durationField11 = julianChronology3.weeks();
        long long15 = julianChronology3.add((-6211221875999790L), 187199999L, 9);
        org.joda.time.DurationField durationField16 = julianChronology3.minutes();
        org.joda.time.Chronology chronology17 = julianChronology3.withUTC();
        java.lang.String str18 = julianChronology3.toString();
        org.joda.time.DurationField durationField19 = julianChronology3.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-6211220191199799L) + "'", long15 == (-6211220191199799L));
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JulianChronology[+10:00]" + "'", str18, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField8 = julianChronology3.months();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = julianChronology3.add(readablePeriod9, (long) (short) 100, (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long17 = julianChronology3.getDateTimeMillis(895, 1582, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1582 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField8 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField13 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.minuteOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant74 = instant19.minus(3L);
        org.joda.time.DateTimeZone dateTimeZone75 = instant19.getZone();
        org.joda.time.Chronology chronology76 = instant19.getChronology();
        org.joda.time.Instant instant77 = instant19.toInstant();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9L + "'", long18 == 9L);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(instant77);
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.Instant instant28 = instant23.minus((-435599901L));
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, (org.joda.time.ReadableInstant) instant38);
        java.lang.String str40 = instant38.toString();
        int int41 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((java.lang.Object) instant38);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((java.lang.Object) instant42);
        java.util.Date date44 = instant43.toDate();
        org.joda.time.Instant instant46 = instant43.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.Chronology chronology50 = gJChronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology49.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology49.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str61 = dateTimeZone60.getID();
        org.joda.time.Chronology chronology62 = gJChronology57.withZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology57.getZone();
        long long65 = dateTimeZone63.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology66 = gJChronology49.withZone(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean70 = dateTimeZone68.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone72);
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone72);
        boolean boolean76 = julianChronology74.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology77 = julianChronology74.withUTC();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology79 = julianChronology74.withZone(dateTimeZone78);
        long long81 = dateTimeZone68.getMillisKeepLocal(dateTimeZone78, 10L);
        org.joda.time.Chronology chronology82 = gJChronology49.withZone(dateTimeZone78);
        long long84 = dateTimeZone78.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime85 = instant43.toMutableDateTime(dateTimeZone78);
        int int86 = instant28.compareTo((org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.chrono.GJChronology gJChronology89 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone87, readableInstant88);
        org.joda.time.Chronology chronology90 = gJChronology89.withUTC();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology89.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField92 = gJChronology89.millisOfDay();
        org.joda.time.DateTimeField dateTimeField93 = gJChronology89.hourOfDay();
        org.joda.time.DateTimeField dateTimeField94 = gJChronology89.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField95 = gJChronology89.secondOfMinute();
        org.joda.time.DurationField durationField96 = gJChronology89.months();
        org.joda.time.DateTimeField dateTimeField97 = gJChronology89.dayOfYear();
        org.joda.time.DateTime dateTime98 = instant43.toDateTime((org.joda.time.Chronology) gJChronology89);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str40, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(gJChronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-12219292800000L) + "'", long65 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(julianChronology74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 11L + "'", long81 == 11L);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(gJChronology89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        long long25 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant8.withDurationAdded(readableDuration26, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant8.plus(readableDuration29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant8.plus(readableDuration31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.plus(readableDuration33);
        boolean boolean35 = instant32.isEqualNow();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000000L + "'", long24 == 36000000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 36000000L + "'", long25 == 36000000L);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology3.getZone();
        org.joda.time.DurationField durationField10 = julianChronology3.hours();
        long long14 = julianChronology3.add((-35998030L), 224765998800L, (int) (short) 10);
        java.lang.Object obj15 = null;
        boolean boolean16 = julianChronology3.equals(obj15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        java.lang.String str26 = instant23.toString();
        org.joda.time.Instant instant28 = instant23.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone29 = instant23.getZone();
        org.joda.time.Chronology chronology30 = julianChronology3.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2247623989970L + "'", long14 == 2247623989970L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str26, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        long long14 = dateTimeZone5.convertLocalToUTC((long) (-1), false);
        boolean boolean16 = dateTimeZone5.isStandardOffset((-60514215226866L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35999990L) + "'", long10 == (-35999990L));
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-36000001L) + "'", long14 == (-36000001L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.millisOfDay();
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = gJChronology2.get(readablePartial17, (-422964038L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = chronology8.months();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = chronology8.get(readablePeriod10, 36000002L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField14 = julianChronology11.months();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone16.getName((-1L), locale19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        boolean boolean24 = dateTimeZone16.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology25 = julianChronology11.withZone(dateTimeZone16);
        int int27 = dateTimeZone16.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField29 = julianChronology28.months();
        org.joda.time.DurationField durationField30 = julianChronology28.weeks();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.millisOfSecond();
        int int33 = instant6.get(dateTimeField32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant6.minus(readableDuration34);
        long long36 = instant6.getMillis();
        boolean boolean37 = instant6.isBeforeNow();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-12219292800000L) + "'", long36 == (-12219292800000L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.millisOfSecond();
        org.joda.time.Chronology chronology4 = julianChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.Chronology chronology9 = julianChronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        long long12 = dateTimeZone8.nextTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        java.lang.String str23 = instant21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        int int36 = instant21.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant21.minus(readableDuration37);
        java.util.Date date39 = instant21.toDate();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.dayOfYear();
        org.joda.time.Instant instant46 = gJChronology42.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant46.minus(readableDuration47);
        org.joda.time.Instant instant51 = instant48.withDurationAdded((-12219292800000L), 0);
        boolean boolean52 = instant21.isEqual((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone53 = instant48.getZone();
        int int55 = dateTimeZone53.getOffsetFromLocal(100L);
        long long57 = dateTimeZone8.getMillisKeepLocal(dateTimeZone53, (-71992119L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str23, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 277207881L + "'", long57 == 277207881L);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        java.lang.String str2 = gJChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = gJChronology0.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = gJChronology0.getDateTimeMillis(72000, 36000001, 0, 43203104, 3600000, (-1), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43203104 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GJChronology[+10:00]" + "'", str2, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone7.nextTransition(1L);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = julianChronology14.getDateTimeMillis(43203104, 3600000, 97, 4, 126000000, (int) '4', 86400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 126000000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.001" + "'", str9, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(julianChronology14);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray19 = new int[] { 16, (short) 10, 32400000, '#', 36000000, 45 };
        // The following exception was thrown during execution in test generation
        try {
            julianChronology3.validate(readablePartial12, intArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[16, 10, 32400000, 35, 36000000, 45]");
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.ReadablePartial readablePartial7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = julianChronology3.set(readablePartial7, (long) 72009726);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant4.minus(readableDuration5);
        java.util.Date date7 = instant4.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.dayOfYear();
        boolean boolean18 = instant4.equals((java.lang.Object) julianChronology11);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.halfdayOfDay();
        org.joda.time.Chronology chronology20 = julianChronology11.withUTC();
        org.joda.time.DurationField durationField21 = chronology20.centuries();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.Instant instant12 = gJChronology8.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = instant12.toDateTime();
        java.util.Date date17 = instant12.toDate();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Chronology chronology25 = gJChronology20.withZone(dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.getName((long) (byte) 10);
        java.util.TimeZone timeZone28 = dateTimeZone23.toTimeZone();
        long long32 = dateTimeZone23.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean33 = instant12.equals((java.lang.Object) (byte) 10);
        boolean boolean34 = instant5.isBefore((org.joda.time.ReadableInstant) instant12);
        java.lang.String str35 = instant12.toString();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-35999990L) + "'", long32 == (-35999990L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str35, "1582-10-15T00:00:00.000Z");
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean8 = dateTimeZone6.isFixed();
        long long10 = dateTimeZone6.previousTransition(100L);
        java.util.TimeZone timeZone11 = dateTimeZone6.toTimeZone();
        long long13 = dateTimeZone6.previousTransition(5201L);
        org.joda.time.Chronology chronology14 = julianChronology2.withZone(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant15);
        long long18 = dateTimeZone6.convertUTCToLocal(52L);
        long long22 = dateTimeZone6.convertLocalToUTC((-484113722469376L), true, (-35997448L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5201L + "'", long13 == 5201L);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 36000052L + "'", long18 == 36000052L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-484113758469376L) + "'", long22 == (-484113758469376L));
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("1970-01-01T10:00:00.100Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '1970-01-01T10:00:00.100Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology2.getDateTimeMillis((int) 'a', (int) (short) -1, 660, 72000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology7.era();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology7.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = gJChronology7.getDateTimeMillis((int) ' ', (int) (short) 10, 1582, 40, 20, 16, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-71999990L) + "'", long6 == (-71999990L));
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.minuteOfDay();
        org.joda.time.Chronology chronology8 = julianChronology3.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = julianChronology3.getDateTimeMillis(3425069132722063L, (int) (short) 0, 24, 36000001, 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000001 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Chronology chronology11 = julianChronology2.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology2.secondOfMinute();
        org.joda.time.DurationField durationField15 = julianChronology2.hours();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology2.dayOfYear();
        org.joda.time.DurationField durationField17 = julianChronology2.millis();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology2.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        java.util.TimeZone timeZone10 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone12.isLocalDateTimeGap(localDateTime13);
        int int16 = dateTimeZone12.getOffsetFromLocal((long) 353);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        java.lang.String str14 = dateTimeZone9.getShortName((-12219292800000L));
        java.lang.String str15 = dateTimeZone9.getID();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = gJChronology18.withZone(dateTimeZone21);
        java.lang.String str25 = dateTimeZone21.getName(52L);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone21.isLocalDateTimeGap(localDateTime26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant29.withDurationAdded(readableDuration30, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = instant29.toString(dateTimeFormatter33);
        org.joda.time.Instant instant37 = instant29.withDurationAdded(0L, 1582);
        long long38 = instant37.getMillis();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant37.withDurationAdded(readableDuration39, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.Instant instant51 = gJChronology47.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.minus(readableDuration52);
        org.joda.time.Instant instant56 = instant53.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant53.plus(readableDuration57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, (org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.dayOfYear();
        org.joda.time.Instant instant66 = gJChronology62.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant66.minus(readableDuration67);
        org.joda.time.Instant instant71 = instant68.withDurationAdded((-12219292800000L), 0);
        org.joda.time.MutableDateTime mutableDateTime72 = instant68.toMutableDateTime();
        int int73 = instant58.compareTo((org.joda.time.ReadableInstant) mutableDateTime72);
        boolean boolean74 = instant41.isBefore((org.joda.time.ReadableInstant) mutableDateTime72);
        int int75 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) mutableDateTime72);
        int int76 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int78 = mutableDateTime72.get(dateTimeFieldType77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str34, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 36000000L + "'", long38 == 36000000L);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(gJChronology59);
        org.junit.Assert.assertNotNull(gJChronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 36000000 + "'", int75 == 36000000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.secondOfDay();
        org.joda.time.DurationField durationField15 = julianChronology3.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean8 = dateTimeZone6.isFixed();
        long long10 = dateTimeZone6.previousTransition(100L);
        java.util.TimeZone timeZone11 = dateTimeZone6.toTimeZone();
        long long13 = dateTimeZone6.previousTransition(5201L);
        org.joda.time.Chronology chronology14 = julianChronology2.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology2.minuteOfDay();
        org.joda.time.DurationField durationField16 = julianChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology2.dayOfMonth();
        org.joda.time.DurationField durationField18 = julianChronology2.months();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology2.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5201L + "'", long13 == 5201L);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.Instant instant14 = instant6.toInstant();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.era();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gJChronology2.add(readablePeriod4, (long) (short) -1, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(36000000L);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField12 = gJChronology11.months();
        org.joda.time.DurationField durationField13 = gJChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.secondOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.days();
        long long19 = gJChronology11.add(0L, (long) (short) 1, (int) '#');
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.weekyear();
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray23 = new int[] { (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology11.validate(readablePartial21, intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0]");
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        java.lang.String str14 = dateTimeZone12.getName((long) 0);
        long long17 = dateTimeZone12.adjustOffset(1L, true);
        org.joda.time.Chronology chronology18 = gJChronology7.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) ' ');
        java.lang.String str25 = dateTimeZone22.getID();
        boolean boolean26 = dateTimeZone12.equals((java.lang.Object) dateTimeZone22);
        org.joda.time.Chronology chronology27 = gJChronology2.withZone(dateTimeZone12);
        java.lang.String str29 = dateTimeZone12.getName((long) 1);
        int int31 = dateTimeZone12.getOffset((-6211221875988790L));
        long long33 = dateTimeZone12.previousTransition((-60514215277148L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-60514215277148L) + "'", long33 == (-60514215277148L));
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone24 = dateTimeZone18.toTimeZone();
        long long27 = dateTimeZone18.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.Instant instant29 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = gJChronology2.add(readablePeriod30, (-36000001L), 1);
        org.joda.time.Chronology chronology34 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyearOfCentury();
        org.joda.time.DurationField durationField37 = chronology34.days();
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology34.getDateTimeMillis((-11L), 0, 4200000, 126000000, 360000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4200000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-35999990L) + "'", long23 == (-35999990L));
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-36000001L) + "'", long27 == (-36000001L));
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-36000001L) + "'", long33 == (-36000001L));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField7 = julianChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.Chronology chronology11 = julianChronology3.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getName((long) 36000000, locale11);
        int int14 = dateTimeZone9.getOffset((long) ' ');
        org.joda.time.Chronology chronology15 = julianChronology3.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = instant7.toDateTime();
        java.util.Date date12 = instant7.toDate();
        boolean boolean13 = instant7.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime14 = instant7.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        int int28 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((java.lang.Object) instant25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.clockhourOfHalfday();
        org.joda.time.DurationField durationField36 = gJChronology32.weeks();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.halfdayOfDay();
        boolean boolean38 = instant29.equals((java.lang.Object) gJChronology32);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 'a');
        boolean boolean41 = instant29.isAfter((org.joda.time.ReadableInstant) instant40);
        boolean boolean42 = instant7.isEqual((org.joda.time.ReadableInstant) instant29);
        java.lang.String str43 = instant7.toString();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str27, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str43, "1582-10-15T00:00:00.000Z");
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = gJChronology2.getDateTimeMillis(353, (int) ' ', 24, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(395999984L);
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DurationField durationField18 = gJChronology17.seconds();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = gJChronology17.get(readablePeriod19, (-35900L), (-60514251282542L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1200, 69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 69");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        int int14 = dateTimeZone5.getOffsetFromLocal((long) 278);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.monthOfYear();
        boolean boolean41 = instant25.equals((java.lang.Object) dateTimeField40);
        org.joda.time.Instant instant43 = instant25.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant43.isSupported(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = instant43.toString(dateTimeFormatter48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.secondOfMinute();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-71999900L) + "'", long12 == (-71999900L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = julianChronology10.getDateTimeMillis((-12219292800000L), 20, 1969, 1582, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone8.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, 35999999L);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone1.getName((-31L), locale17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant19, 1582);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 1582");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 71999999L + "'", long13 == 71999999L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        int int9 = dateTimeZone7.getOffset((long) 1);
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getName(36000010L);
        boolean boolean15 = dateTimeZone11.isStandardOffset((long) (-1));
        int int17 = dateTimeZone11.getStandardOffset((-12219325308000L));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField22 = julianChronology21.centuries();
        org.joda.time.DurationField durationField23 = julianChronology21.weeks();
        org.joda.time.DurationField durationField24 = julianChronology21.days();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = julianChronology21.add(readablePeriod25, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone30.getShortName((-35999890L), locale32);
        org.joda.time.Chronology chronology34 = julianChronology21.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        boolean boolean40 = julianChronology38.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology41 = julianChronology38.withUTC();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology43 = julianChronology38.withZone(dateTimeZone42);
        org.joda.time.DurationField durationField44 = julianChronology38.days();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology38.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        boolean boolean49 = dateTimeZone47.isFixed();
        long long51 = dateTimeZone47.previousTransition(100L);
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = julianChronology38.withZone(dateTimeZone53);
        java.util.TimeZone timeZone55 = dateTimeZone53.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        boolean boolean57 = julianChronology21.equals((java.lang.Object) dateTimeZone56);
        long long59 = dateTimeZone11.getMillisKeepLocal(dateTimeZone56, (long) 5);
        long long61 = dateTimeZone56.nextTransition(3425068160722063L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology63 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 36000000L + "'", long28 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:00" + "'", str48, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 5L + "'", long59 == 5L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3425068160722063L + "'", long61 == 3425068160722063L);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = gJChronology2.get(readablePartial8, (-35999275L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.hours();
        org.joda.time.DurationField durationField8 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        long long31 = instant15.getMillis();
        org.joda.time.Instant instant32 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = instant15.getZone();
        long long35 = dateTimeZone33.previousTransition((long) (short) 100);
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.Chronology chronology37 = julianChronology3.withZone(dateTimeZone33);
        java.lang.String str38 = dateTimeZone33.getID();
        java.lang.String str39 = dateTimeZone33.getID();
        long long41 = dateTimeZone33.nextTransition((-61513203000000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str17, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 36000000L + "'", long31 == 36000000L);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-61513203000000L) + "'", long41 == (-61513203000000L));
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField11 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField12 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (-61513243200000L), 4);
        org.junit.Assert.assertNotNull(gJChronology3);
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = julianChronology10.getDateTimeMillis(3920, (int) (byte) 10, 1200, 0, 40, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.days();
        org.joda.time.ReadablePartial readablePartial6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = julianChronology3.set(readablePartial6, 576000389L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.minus(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.minus(readableDuration17);
        org.joda.time.Instant instant21 = instant18.withDurationAdded((-12219292800000L), 0);
        boolean boolean23 = instant18.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology26.monthOfYear();
        boolean boolean34 = instant18.equals((java.lang.Object) dateTimeField33);
        org.joda.time.Instant instant36 = instant18.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = instant36.isSupported(dateTimeFieldType37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = instant36.isSupported(dateTimeFieldType39);
        org.joda.time.Instant instant43 = instant36.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant45 = instant43.withMillis(187199999L);
        int int46 = instant9.compareTo((org.joda.time.ReadableInstant) instant45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant9.plus(readableDuration47);
        boolean boolean50 = instant48.isBefore((-21361518000971028L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology12 = julianChronology3.withUTC();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = chronology12.get(readablePartial13, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.Chronology chronology30 = gJChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology29.secondOfMinute();
        org.joda.time.Instant instant36 = gJChronology29.getGregorianCutover();
        org.joda.time.DurationField durationField37 = gJChronology29.weekyears();
        org.joda.time.DateTime dateTime38 = instant23.toDateTime((org.joda.time.Chronology) gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        boolean boolean16 = julianChronology14.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology17 = julianChronology14.withUTC();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology19 = julianChronology14.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField20 = julianChronology14.seconds();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology14.year();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology14.getZone();
        org.joda.time.Chronology chronology24 = julianChronology3.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        long long27 = dateTimeZone23.getMillisKeepLocal(dateTimeZone25, 0L);
        java.lang.String str28 = dateTimeZone23.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant29 = new org.joda.time.Instant((java.lang.Object) str28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+10:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DurationField durationField8 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = julianChronology3.get(readablePeriod10, 107999998L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (long) '#', 100);
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology2.halfdays();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField15 = julianChronology14.weeks();
        org.joda.time.DurationField durationField16 = julianChronology14.millis();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.yearOfCentury();
        org.joda.time.DurationField durationField20 = julianChronology14.minutes();
        boolean boolean21 = julianChronology3.equals((java.lang.Object) julianChronology14);
        org.joda.time.DurationField durationField22 = julianChronology3.seconds();
        org.joda.time.DurationField durationField23 = julianChronology3.years();
        long long28 = julianChronology3.getDateTimeMillis((-3600000), (int) (short) 1, (int) (short) 1, 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-113669495769600000L) + "'", long28 == (-113669495769600000L));
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.centuries();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfDay();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.DurationField durationField8 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfDay();
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+10:00]" + "'", str7, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        int int11 = julianChronology3.getMinimumDaysInFirstWeek();
        java.lang.String str12 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = julianChronology3.get(readablePeriod16, (-60514215257464L), (-1295998588800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JulianChronology[+10:00]" + "'", str12, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.Chronology chronology26 = instant8.getChronology();
        boolean boolean27 = instant8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = instant8.get(dateTimeFieldType35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000000L + "'", long24 == 36000000L);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField7 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.millisOfSecond();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = julianChronology3.get(readablePeriod11, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        java.lang.String str14 = dateTimeZone12.getName((long) 0);
        long long17 = dateTimeZone12.adjustOffset(1L, true);
        org.joda.time.Chronology chronology18 = gJChronology7.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) ' ');
        java.lang.String str25 = dateTimeZone22.getID();
        boolean boolean26 = dateTimeZone12.equals((java.lang.Object) dateTimeZone22);
        org.joda.time.Chronology chronology27 = gJChronology2.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology2.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant29 = new org.joda.time.Instant((java.lang.Object) dateTimeField28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology12 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.seconds();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.year();
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology3.getZone();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = julianChronology3.add(readablePeriod13, (-35999900L), (int) '#');
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) dateTimeField17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-35999900L) + "'", long16 == (-35999900L));
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.era();
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        org.joda.time.DurationField durationField17 = gJChronology15.millis();
        org.joda.time.Chronology chronology18 = gJChronology15.withUTC();
        org.joda.time.DurationField durationField19 = gJChronology15.seconds();
        org.joda.time.DurationField durationField20 = gJChronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = gJChronology15.halfdays();
        boolean boolean23 = dateTimeZone12.equals((java.lang.Object) durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        java.lang.String str2 = gJChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = gJChronology0.days();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        boolean boolean10 = julianChronology8.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology11 = julianChronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology13 = julianChronology8.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = julianChronology8.seconds();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology17 = julianChronology8.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = gJChronology0.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology21.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology21.getZone();
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.Chronology chronology28 = gJChronology0.withZone(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = gJChronology0.getDateTimeMillis((int) (short) -1, (-3600000), 0, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GJChronology[+10:00]" + "'", str2, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, (-60514215308675L), 278);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.year();
        org.joda.time.Chronology chronology15 = gJChronology2.withUTC();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60514215308675L) + "'", long13 == (-60514215308675L));
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        long long21 = instant11.getMillis();
        org.joda.time.Chronology chronology22 = instant11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = chronology22.get(readablePeriod23, (-5L), (-60514215308675L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str9, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-12219328800000L) + "'", long21 == (-12219328800000L));
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        java.lang.String str6 = julianChronology3.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, (long) (short) 1, (-1));
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = julianChronology3.add(readablePeriod12, (-179999601L), (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = julianChronology3.getDateTimeMillis(0, 69, 1969, 1, 69, 45, 895);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JulianChronology[+10:00]" + "'", str6, "JulianChronology[+10:00]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-179999601L) + "'", long15 == (-179999601L));
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        java.lang.String str11 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField13 = julianChronology3.weekyears();
        int int14 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = julianChronology3.getDateTimeMillis(0, 0, 32400000, (-1), 24, 36000001, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JulianChronology[+10:00]" + "'", str11, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfWeek();
        org.joda.time.DurationField durationField11 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = gJChronology2.getDateTimeMillis((int) (byte) 0, 36000000, (int) '4', 0, (int) (short) 1, 20, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        org.joda.time.Instant instant16 = instant13.plus(35L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.Instant instant31 = instant25.toInstant();
        boolean boolean33 = instant31.isBefore((long) ' ');
        boolean boolean34 = instant16.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = instant16.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DurationField durationField40 = gJChronology38.millis();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.secondOfDay();
        org.joda.time.DateTime dateTime42 = instant16.toDateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.Chronology chronology46 = gJChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.Chronology chronology48 = gJChronology45.withUTC();
        org.joda.time.DurationField durationField49 = gJChronology45.halfdays();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology45.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology53.getZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str57 = dateTimeZone56.getID();
        org.joda.time.Chronology chronology58 = gJChronology53.withZone(dateTimeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        long long61 = dateTimeZone50.getMillisKeepLocal(dateTimeZone56, (long) (-1));
        boolean boolean62 = dateTime42.equals((java.lang.Object) long61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64);
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology65.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology65.getZone();
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69, (org.joda.time.ReadableInstant) instant71);
        java.lang.String str73 = instant71.toString();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74, readableInstant75);
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology76.getZone();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology76.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology76.dayOfYear();
        org.joda.time.Instant instant80 = gJChronology76.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Instant instant82 = instant80.minus(readableDuration81);
        org.joda.time.Instant instant85 = instant82.withDurationAdded((-12219292800000L), 0);
        int int86 = instant71.compareTo((org.joda.time.ReadableInstant) instant82);
        long long87 = instant71.getMillis();
        org.joda.time.Instant instant88 = instant71.toInstant();
        org.joda.time.Chronology chronology89 = instant71.getChronology();
        boolean boolean90 = instant71.isAfterNow();
        org.joda.time.Instant instant93 = instant71.withDurationAdded(36000000L, 0);
        boolean boolean95 = instant93.isAfter(151199999L);
        org.joda.time.Instant instant97 = instant93.minus((-60514215308675L));
        boolean boolean98 = dateTime42.isAfter((org.joda.time.ReadableInstant) instant97);
        org.joda.time.DateTimeZone dateTimeZone99 = dateTime42.getZone();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(gJChronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(gJChronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str73, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 36000000L + "'", long87 == 36000000L);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(instant97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(dateTimeZone99);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.Chronology chronology6 = gJChronology4.withUTC();
        org.joda.time.DurationField durationField7 = gJChronology4.months();
        org.joda.time.DurationField durationField8 = gJChronology4.weeks();
        org.joda.time.Instant instant9 = gJChronology4.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) mutableDateTime10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.Instant instant43 = instant37.toInstant();
        boolean boolean45 = instant43.isBefore((long) ' ');
        boolean boolean46 = instant26.isAfter((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant48 = instant26.minus(4L);
        org.joda.time.Chronology chronology49 = instant26.getChronology();
        boolean boolean51 = instant26.isAfter((-107999950L));
        org.joda.time.DateTimeZone dateTimeZone52 = instant26.getZone();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant26.minus(readableDuration53);
        boolean boolean55 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant58 = instant26.withDurationAdded(readableDuration56, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology62.getZone();
        org.joda.time.Instant instant68 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, (org.joda.time.ReadableInstant) instant68);
        java.lang.String str70 = instant68.toString();
        int int71 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) instant68);
        org.joda.time.Instant instant72 = new org.joda.time.Instant((java.lang.Object) instant68);
        org.joda.time.DateTimeZone dateTimeZone73 = instant68.getZone();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant76 = instant68.withDurationAdded(readableDuration74, (int) ' ');
        org.joda.time.MutableDateTime mutableDateTime77 = instant68.toMutableDateTimeISO();
        int int78 = instant26.compareTo((org.joda.time.ReadableInstant) mutableDateTime77);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(gJChronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(gJChronology69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str70, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        int int14 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.centuryOfEra();
        org.joda.time.Chronology chronology18 = julianChronology3.withUTC();
        org.joda.time.ReadablePartial readablePartial19 = null;
        int[] intArray25 = new int[] { 43203104, 1200, 1582, 5, 86400000 };
        // The following exception was thrown during execution in test generation
        try {
            julianChronology3.validate(readablePartial19, intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[43203104, 1200, 1582, 5, 86400000]");
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.year();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        boolean boolean15 = dateTimeZone13.isFixed();
        long long17 = dateTimeZone13.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        java.lang.String str19 = dateTimeZone13.getID();
        int int21 = dateTimeZone13.getOffsetFromLocal((long) 1);
        org.joda.time.Chronology chronology22 = julianChronology3.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.getID();
        org.joda.time.Chronology chronology38 = gJChronology33.withZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology33.getZone();
        long long41 = dateTimeZone39.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology42 = gJChronology25.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48);
        boolean boolean52 = julianChronology50.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology53 = julianChronology50.withUTC();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology55 = julianChronology50.withZone(dateTimeZone54);
        long long57 = dateTimeZone44.getMillisKeepLocal(dateTimeZone54, 10L);
        org.joda.time.Chronology chronology58 = gJChronology25.withZone(dateTimeZone54);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant63 = instant60.withDurationAdded(readableDuration61, 0);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant63.minus(readableDuration64);
        org.joda.time.DateTimeZone dateTimeZone66 = instant63.getZone();
        boolean boolean67 = dateTimeZone54.equals((java.lang.Object) dateTimeZone66);
        boolean boolean68 = dateTimeZone13.equals((java.lang.Object) dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-12219292800000L) + "'", long41 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(julianChronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 11L + "'", long57 == 11L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField6 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.DurationField durationField12 = chronology10.hours();
        org.joda.time.DurationField durationField13 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.weekyearOfCentury();
        boolean boolean15 = julianChronology3.equals((java.lang.Object) chronology10);
        org.joda.time.DurationField durationField16 = chronology10.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField37 = gJChronology2.years();
        org.joda.time.Chronology chronology38 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.Chronology chronology41 = gJChronology2.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology2.getZone();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 11L + "'", long34 == 11L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DurationField durationField12 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        int int6 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField7 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.era();
        org.joda.time.ReadablePartial readablePartial10 = null;
        int[] intArray11 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial10, intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.DurationField durationField5 = chronology3.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology3.getZone();
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.clockhourOfHalfday();
        boolean boolean15 = dateTimeZone6.equals((java.lang.Object) gJChronology10);
        java.lang.String str16 = gJChronology10.toString();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+10:00]" + "'", str16, "GJChronology[+10:00]");
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        int int6 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone8.isLocalDateTimeGap(localDateTime9);
        java.lang.String str12 = dateTimeZone8.getShortName((-60514251282542L));
        long long15 = dateTimeZone8.adjustOffset((-35999976L), true);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-35999976L) + "'", long15 == (-35999976L));
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = julianChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = julianChronology2.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField7 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant4.toMutableDateTimeISO();
        java.util.Date date8 = mutableDateTime7.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.Chronology chronology24 = gJChronology19.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology19.getZone();
        long long27 = dateTimeZone25.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology28 = gJChronology11.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        boolean boolean38 = julianChronology36.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology39 = julianChronology36.withUTC();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology41 = julianChronology36.withZone(dateTimeZone40);
        long long43 = dateTimeZone30.getMillisKeepLocal(dateTimeZone40, 10L);
        org.joda.time.Chronology chronology44 = gJChronology11.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology11.getZone();
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime7.toMutableDateTime(dateTimeZone47);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-12219292800000L) + "'", long27 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 11L + "'", long43 == 11L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.monthOfYear();
        org.joda.time.DurationField durationField12 = julianChronology3.halfdays();
        org.joda.time.DurationField durationField13 = julianChronology3.centuries();
        org.joda.time.DurationField durationField14 = julianChronology3.years();
        org.joda.time.DurationField durationField15 = julianChronology3.hours();
        org.joda.time.Chronology chronology16 = julianChronology3.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1L);
        boolean boolean6 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime mutableDateTime9 = instant1.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.nextTransition((long) (byte) -1);
        int int39 = dateTimeZone31.getOffsetFromLocal(0L);
        long long43 = dateTimeZone31.convertLocalToUTC((long) 'a', true, (long) 4);
        java.util.TimeZone timeZone44 = dateTimeZone31.toTimeZone();
        long long46 = dateTimeZone31.nextTransition(9730L);
        java.util.TimeZone timeZone47 = dateTimeZone31.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = gJChronology48.get(readablePeriod50, 36000045L, 187199999L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 11L + "'", long34 == 11L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 97L + "'", long43 == 97L);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 9730L + "'", long46 == 9730L);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.hours();
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = gJChronology2.get(readablePartial10, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.centuries();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = gJChronology2.getDateTimeMillis(126000000, 3600000, 36000, 7, (int) (short) 1, 32400000, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32400000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DurationField durationField11 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.dayOfMonth();
        java.lang.Class<?> wildcardClass13 = julianChronology3.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) ' ');
        long long22 = dateTimeZone17.convertLocalToUTC(100L, true);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant31);
        java.lang.String str33 = instant31.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = instant31.getZone();
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant31);
        org.joda.time.Chronology chronology36 = julianChronology3.withZone(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = julianChronology3.getDateTimeMillis(36000001, 20, 4200000, (int) '#', (int) (short) -1, 360000000, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-35999900L) + "'", long22 == (-35999900L));
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str33, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        java.lang.String str6 = julianChronology3.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, (long) (short) 1, (-1));
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.weekyear();
        java.lang.String str12 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology3.add(readablePeriod14, (long) 126000000, (int) 'a');
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology3.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = julianChronology3.getDateTimeMillis(20, 69, 19, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JulianChronology[+10:00]" + "'", str6, "JulianChronology[+10:00]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JulianChronology[+10:00]" + "'", str12, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 126000000L + "'", long17 == 126000000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(20, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant5 = instant2.withDurationAdded(readableDuration3, 0);
        org.joda.time.Instant instant7 = instant5.minus((long) (short) -1);
        boolean boolean8 = instant5.isAfterNow();
        java.lang.String str9 = instant5.toString();
        org.joda.time.Instant instant10 = instant5.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str9, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        long long8 = dateTimeZone1.previousTransition(288097310L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        boolean boolean18 = instant17.isAfterNow();
        boolean boolean19 = instant17.isAfterNow();
        int int20 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant17);
        long long23 = dateTimeZone1.adjustOffset(0L, true);
        java.lang.String str25 = dateTimeZone1.getShortName(31799999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(julianChronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 288097310L + "'", long8 == 288097310L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField14 = julianChronology3.months();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology18.getZone();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) instant24);
        java.lang.String str26 = instant24.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        int int39 = instant24.compareTo((org.joda.time.ReadableInstant) instant35);
        long long40 = instant24.getMillis();
        org.joda.time.Instant instant41 = instant24.toInstant();
        org.joda.time.DateTimeZone dateTimeZone42 = instant24.getZone();
        long long44 = dateTimeZone42.previousTransition((long) (short) 100);
        java.lang.String str45 = dateTimeZone42.toString();
        org.joda.time.Chronology chronology46 = julianChronology3.withZone(dateTimeZone42);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = chronology46.getDateTimeMillis((int) (byte) -1, 7, 360000000, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str26, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 36000000L + "'", long40 == 36000000L);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 10);
        int int4 = dateTimeZone2.getOffset((long) ' ');
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.TimeZone timeZone7 = dateTimeZone2.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4200000 + "'", int4 == 4200000);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+01:10");
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.year();
        java.lang.String str8 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        boolean boolean17 = julianChronology15.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = julianChronology15.withZone(dateTimeZone19);
        org.joda.time.DurationField durationField21 = julianChronology15.days();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology15.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.getID();
        boolean boolean26 = dateTimeZone24.isFixed();
        long long28 = dateTimeZone24.previousTransition(100L);
        java.util.TimeZone timeZone29 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.Chronology chronology31 = julianChronology15.withZone(dateTimeZone30);
        java.util.TimeZone timeZone32 = dateTimeZone30.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology37.getZone();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, (org.joda.time.ReadableInstant) instant43);
        long long46 = dateTimeZone41.nextTransition((long) 0);
        long long48 = dateTimeZone34.getMillisKeepLocal(dateTimeZone41, (long) (byte) 100);
        java.lang.String str50 = dateTimeZone41.getNameKey((-60514215282090L));
        org.joda.time.Chronology chronology51 = julianChronology3.withZone(dateTimeZone41);
        java.lang.String str53 = dateTimeZone41.getShortName(6984008964L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JulianChronology[+10:00]" + "'", str8, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = julianChronology3.getDateTimeMillis(18600000, (-3600000), 1, 69, (int) '4', 3920, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (short) 0, true);
        java.lang.String str5 = dateTimeZone0.getShortName(10L);
        long long8 = dateTimeZone0.convertLocalToUTC(1644421548079L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644421548079L + "'", long8 == 1644421548079L);
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.Instant instant1 = gJChronology0.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField3 = gJChronology0.months();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone18.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant31);
        long long34 = dateTimeZone29.nextTransition((long) 0);
        long long36 = dateTimeZone22.getMillisKeepLocal(dateTimeZone29, (long) (byte) 100);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone22.getName((-35999900L), locale38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField41 = gJChronology40.weekyears();
        org.joda.time.DurationField durationField42 = gJChronology40.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology11 = gJChronology9.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getName((long) (byte) 10);
        long long24 = dateTimeZone17.convertLocalToUTC((-35999900L), false);
        long long27 = dateTimeZone17.adjustOffset((long) '#', false);
        int int29 = dateTimeZone17.getOffset((long) (byte) 10);
        org.joda.time.Chronology chronology30 = chronology11.withZone(dateTimeZone17);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone17.getName((long) 'a', locale32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str41 = dateTimeZone40.getID();
        org.joda.time.Chronology chronology42 = gJChronology37.withZone(dateTimeZone40);
        java.lang.String str44 = dateTimeZone40.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        org.joda.time.Chronology chronology46 = julianChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology45.dayOfMonth();
        boolean boolean48 = gJChronology34.equals((java.lang.Object) dateTimeField47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology34.getZone();
        org.joda.time.Chronology chronology50 = gJChronology34.withUTC();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        long long54 = gJChronology34.add(readablePeriod51, (-12242519999904L), 0);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology34.year();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-71999900L) + "'", long24 == (-71999900L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 35L + "'", long27 == 35L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-12242519999904L) + "'", long54 == (-12242519999904L));
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        int int19 = dateTimeZone8.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = julianChronology20.months();
        org.joda.time.DurationField durationField22 = julianChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology20.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        java.lang.String str15 = gJChronology2.toString();
        org.joda.time.Instant instant16 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTime dateTime17 = instant16.toDateTimeISO();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+10:00]" + "'", str15, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int5 = dateTimeZone1.getOffsetFromLocal((-62112218399999L));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) ' ');
        java.lang.String str12 = dateTimeZone9.getID();
        boolean boolean14 = dateTimeZone9.isStandardOffset(0L);
        java.lang.String str16 = dateTimeZone9.getShortName((-7433151155985290L));
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone9, 223199999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone9.isLocalDateTimeGap(localDateTime20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.001" + "'", str12, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.001" + "'", str16, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 223199999L + "'", long18 == 223199999L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone24 = dateTimeZone18.toTimeZone();
        long long27 = dateTimeZone18.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = gJChronology2.add(readablePeriod29, (long) (byte) 0, (int) (short) 10);
        org.joda.time.Chronology chronology33 = gJChronology2.withUTC();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-35999990L) + "'", long23 == (-35999990L));
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-36000001L) + "'", long27 == (-36000001L));
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        int int6 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        long long13 = gJChronology2.add((-35999981L), 52L, 36000001);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfYear();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1836000071L + "'", long13 == 1836000071L);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField14 = julianChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology3.getZone();
        org.joda.time.DurationField durationField16 = julianChronology3.millis();
        org.joda.time.DurationField durationField17 = julianChronology3.seconds();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology3.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) instant14);
        org.joda.time.Instant instant17 = instant14.minus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField22 = gJChronology20.millis();
        long long26 = gJChronology20.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField27 = gJChronology20.millis();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Instant instant30 = gJChronology20.getGregorianCutover();
        int int31 = instant14.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant33 = instant30.minus((-66447976L));
        org.joda.time.MutableDateTime mutableDateTime34 = instant30.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = mutableDateTime34.isSupported(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str11, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        long long13 = gJChronology2.add((-35999191L), 2247623989970L, (int) ' ');
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.weekOfWeekyear();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 71923931679849L + "'", long13 == 71923931679849L);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        boolean boolean42 = instant1.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.Chronology chronology46 = gJChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.DurationField durationField48 = gJChronology45.years();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        java.lang.String str55 = dateTimeZone51.getNameKey(10L);
        java.lang.String str57 = dateTimeZone51.getName((long) (byte) -1);
        org.joda.time.Chronology chronology58 = gJChronology45.withZone(dateTimeZone51);
        long long61 = dateTimeZone51.adjustOffset(0L, true);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        org.joda.time.chrono.JulianChronology julianChronology65 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63);
        boolean boolean67 = julianChronology65.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField68 = julianChronology65.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology65.secondOfDay();
        long long73 = julianChronology65.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.chrono.JulianChronology julianChronology77 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone75);
        boolean boolean79 = julianChronology77.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology80 = julianChronology77.withUTC();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology77.era();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology77.minuteOfHour();
        org.joda.time.DurationField durationField83 = julianChronology77.weeks();
        org.joda.time.DurationField durationField84 = julianChronology77.days();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology77.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField86 = julianChronology77.millisOfDay();
        org.joda.time.DurationField durationField87 = julianChronology77.millis();
        org.joda.time.DateTimeField dateTimeField88 = julianChronology77.clockhourOfHalfday();
        boolean boolean89 = julianChronology65.equals((java.lang.Object) julianChronology77);
        boolean boolean90 = dateTimeZone51.equals((java.lang.Object) julianChronology65);
        org.joda.time.DateTimeZone dateTimeZone91 = julianChronology65.getZone();
        org.joda.time.MutableDateTime mutableDateTime92 = instant1.toMutableDateTime(dateTimeZone91);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000000L + "'", long6 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str17, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(julianChronology53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(julianChronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 36000001L + "'", long73 == 36000001L);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(julianChronology77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(mutableDateTime92);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology20 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField22 = gJChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        long long25 = dateTimeZone23.nextTransition((-3600000L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-3600000L) + "'", long25 == (-3600000L));
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfDay();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = gJChronology2.set(readablePartial11, 187200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+10:00]" + "'", str7, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.Instant instant43 = instant37.toInstant();
        boolean boolean45 = instant43.isBefore((long) ' ');
        boolean boolean46 = instant26.isAfter((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant48 = instant26.minus(4L);
        org.joda.time.Chronology chronology49 = instant26.getChronology();
        boolean boolean51 = instant26.isAfter((-107999950L));
        org.joda.time.DateTimeZone dateTimeZone52 = instant26.getZone();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant26.minus(readableDuration53);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        boolean boolean56 = instant55.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime57 = instant55.toMutableDateTime();
        boolean boolean58 = instant26.isBefore((org.joda.time.ReadableInstant) instant55);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant55.plus(readableDuration59);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(instant60);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) (-1));
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField5 = gJChronology4.weeks();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = gJChronology4.getDateTimeMillis(0, 353, 43203104, 1, 18600000, (int) (byte) -1, 4200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18600000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology11 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.year();
        long long17 = julianChronology10.add((-62158787999900L), (-424799991L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.year();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-62159212799891L) + "'", long17 == (-62159212799891L));
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        java.lang.String str11 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.yearOfEra();
        java.lang.String str15 = gJChronology9.toString();
        boolean boolean16 = instant1.equals((java.lang.Object) gJChronology9);
        org.joda.time.Chronology chronology17 = instant1.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = instant1.toString(dateTimeFormatter18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = instant1.get(dateTimeFieldType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000000L + "'", long6 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GJChronology[+10:00]" + "'", str11, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+10:00]" + "'", str15, "GJChronology[+10:00]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str19, "1970-01-01T10:00:00.000Z");
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        int int19 = dateTimeZone8.getOffset((-35999900L));
        int int21 = dateTimeZone8.getOffset((long) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.Chronology chronology25 = gJChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.dayOfWeek();
        org.joda.time.Chronology chronology27 = gJChronology24.withUTC();
        org.joda.time.DurationField durationField28 = gJChronology24.halfdays();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology24.getZone();
        int int31 = dateTimeZone29.getOffset((long) 1);
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str35 = dateTimeZone33.getName(36000010L);
        long long37 = dateTimeZone8.getMillisKeepLocal(dateTimeZone33, (-35999890L));
        java.lang.String str39 = dateTimeZone8.getShortName(288097310L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41);
        boolean boolean45 = julianChronology43.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology46 = julianChronology43.withUTC();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology48 = julianChronology43.withZone(dateTimeZone47);
        org.joda.time.DurationField durationField49 = julianChronology43.days();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology43.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology43.halfdayOfDay();
        boolean boolean54 = dateTimeZone8.equals((java.lang.Object) julianChronology43);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = julianChronology43.getDateTimeMillis((int) (short) 0, (int) (short) 1, 1970, 18600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-35999890L) + "'", long37 == (-35999890L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.months();
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfMinute();
        java.lang.String str12 = gJChronology2.toString();
        org.joda.time.DurationField durationField13 = gJChronology2.weeks();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GJChronology[+10:00]" + "'", str12, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.Instant instant9 = instant4.withDurationAdded(6400L, 69);
        org.joda.time.ReadableInstant readableInstant10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = instant4.compareTo(readableInstant10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = julianChronology2.hours();
        long long8 = julianChronology2.add((long) 36000000, (long) ' ', 3600000);
        org.joda.time.Chronology chronology9 = julianChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology9.hours();
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = chronology9.get(readablePartial12, (-12839674758129L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 151200000L + "'", long8 == 151200000L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = julianChronology3.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField10 = julianChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.secondOfMinute();
        int int20 = instant6.get(dateTimeField19);
        org.joda.time.Instant instant22 = instant6.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        boolean boolean28 = julianChronology26.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology26.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = julianChronology26.getZone();
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone31.getShortName(224765998800L, locale33);
        boolean boolean35 = instant6.equals((java.lang.Object) dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        long long14 = gJChronology9.add((long) (short) -1, (long) 10, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.year();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.halfdayOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+10:00,cutover=1970-01-01T10:00:00.000Z]" + "'", str10, "GJChronology[+10:00,cutover=1970-01-01T10:00:00.000Z]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-11L) + "'", long14 == (-11L));
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = instant6.toMutableDateTimeISO();
        org.joda.time.Instant instant31 = instant6.toInstant();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(instant31);
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant11.withDurationAdded(readableDuration31, 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DurationField durationField38 = gJChronology36.millis();
        org.joda.time.Chronology chronology39 = gJChronology36.withUTC();
        org.joda.time.Instant instant40 = gJChronology36.getGregorianCutover();
        int int41 = instant11.compareTo((org.joda.time.ReadableInstant) instant40);
        java.util.Date date42 = instant40.toDate();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str13, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 36000000L + "'", long27 == 36000000L);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Oct 15 00:00:00 UTC 1582");
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        boolean boolean11 = mutableDateTime9.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime9.getZone();
        boolean boolean13 = mutableDateTime9.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime9.getZone();
        boolean boolean16 = mutableDateTime9.isBefore(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = mutableDateTime9.isSupported(dateTimeFieldType17);
        java.util.Date date19 = mutableDateTime9.toDate();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Oct 15 00:00:00 UTC 1582");
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.hourOfDay();
        java.lang.String str13 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = julianChronology3.getDateTimeMillis((-48681335529L), 4, (-3600000), (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JulianChronology[+10:00]" + "'", str13, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) ' ');
        long long8 = dateTimeZone3.convertLocalToUTC(100L, true);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = instant17.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        boolean boolean27 = julianChronology25.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology28 = julianChronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology30 = julianChronology25.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = julianChronology25.seconds();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology25.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology25.year();
        org.joda.time.DateTimeZone dateTimeZone34 = julianChronology25.getZone();
        java.lang.String str35 = dateTimeZone34.getID();
        java.lang.String str36 = dateTimeZone34.getID();
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        boolean boolean38 = gJChronology21.equals((java.lang.Object) gJChronology37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology21.halfdayOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-35999900L) + "'", long8 == (-35999900L));
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str19, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.Chronology chronology11 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = gJChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology18.getZone();
        long long26 = dateTimeZone24.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology27 = gJChronology10.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology40 = julianChronology35.withZone(dateTimeZone39);
        long long42 = dateTimeZone29.getMillisKeepLocal(dateTimeZone39, 10L);
        org.joda.time.Chronology chronology43 = gJChronology10.withZone(dateTimeZone39);
        org.joda.time.Chronology chronology44 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.minuteOfDay();
        boolean boolean46 = julianChronology3.equals((java.lang.Object) dateTimeField45);
        org.joda.time.DurationField durationField47 = julianChronology3.weeks();
        org.joda.time.Chronology chronology48 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology3.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-12219292800000L) + "'", long26 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 11L + "'", long42 == 11L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        int int10 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        long long11 = julianChronology3.getDateTimeMillis((int) (byte) -1, 4, 1, (int) '4');
        org.joda.time.DurationField durationField12 = julianChronology3.centuries();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = julianChronology3.set(readablePartial13, (-12242519999904L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-62159565599948L) + "'", long11 == (-62159565599948L));
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        long long12 = julianChronology3.add(1L, (-421199991L), 0);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            julianChronology3.validate(readablePartial14, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology11 = gJChronology9.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getName((long) (byte) 10);
        long long24 = dateTimeZone17.convertLocalToUTC((-35999900L), false);
        long long27 = dateTimeZone17.adjustOffset((long) '#', false);
        int int29 = dateTimeZone17.getOffset((long) (byte) 10);
        org.joda.time.Chronology chronology30 = chronology11.withZone(dateTimeZone17);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone17.getName((long) 'a', locale32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str41 = dateTimeZone40.getID();
        org.joda.time.Chronology chronology42 = gJChronology37.withZone(dateTimeZone40);
        java.lang.String str44 = dateTimeZone40.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        org.joda.time.Chronology chronology46 = julianChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology45.dayOfMonth();
        boolean boolean48 = gJChronology34.equals((java.lang.Object) dateTimeField47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology34.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = gJChronology34.getDateTimeMillis((int) '#', 43203104, 126000000, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43203104 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-71999900L) + "'", long24 == (-71999900L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 35L + "'", long27 == 35L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyearOfCentury();
        int int11 = gJChronology2.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        java.lang.String str6 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.yearOfEra();
        org.joda.time.ReadablePartial readablePartial14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = gJChronology2.set(readablePartial14, 71999999L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[+10:00]" + "'", str6, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        java.lang.String str3 = dateTimeZone1.getName((-59082429599991L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1L);
        boolean boolean6 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(100L);
        boolean boolean9 = instant5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(0L);
        long long12 = instant11.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.minus(readableDuration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        int int16 = instant5.compareTo((org.joda.time.ReadableInstant) instant14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant5.plus(readableDuration17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        org.joda.time.DateTimeZone dateTimeZone72 = instant46.getZone();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant46.minus(readableDuration73);
        org.joda.time.Instant instant76 = instant74.plus((-12219328800000L));
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, readableInstant78);
        org.joda.time.DateTimeZone dateTimeZone80 = gJChronology79.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology79.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology79.dayOfYear();
        org.joda.time.Instant instant83 = gJChronology79.getGregorianCutover();
        org.joda.time.Chronology chronology84 = instant83.getChronology();
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Instant instant86 = instant83.minus(readableDuration85);
        long long87 = instant83.getMillis();
        java.lang.String str88 = instant83.toString();
        org.joda.time.Instant instant91 = instant83.withDurationAdded((-431999901L), (int) (byte) 1);
        boolean boolean93 = instant83.isAfter((long) (short) 100);
        int int94 = instant74.compareTo((org.joda.time.ReadableInstant) instant83);
        boolean boolean95 = mutableDateTime19.isEqual((org.joda.time.ReadableInstant) instant83);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(gJChronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-12219292800000L) + "'", long87 == (-12219292800000L));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str88, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getName((long) (byte) 10);
        long long25 = dateTimeZone18.convertLocalToUTC((-35999900L), false);
        int int27 = dateTimeZone18.getOffsetFromLocal((long) 278);
        boolean boolean29 = dateTimeZone18.isStandardOffset((long) 4);
        org.joda.time.Chronology chronology30 = julianChronology10.withZone(dateTimeZone18);
        long long34 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false, 151200000L);
        long long37 = dateTimeZone18.adjustOffset(0L, false);
        java.util.TimeZone timeZone38 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str41 = dateTimeZone39.getShortName(132477032786400000L);
        long long45 = dateTimeZone39.convertLocalToUTC(16L, true, (-2117997565889223L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-71999900L) + "'", long25 == (-71999900L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-35999999L) + "'", long34 == (-35999999L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-35999984L) + "'", long45 == (-35999984L));
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        boolean boolean12 = dateTime10.isEqualNow();
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.era();
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = dateTime16.get(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        java.lang.String str2 = gJChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GJChronology[+10:00]" + "'", str2, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1970-01-03T13:59:59.999Z");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone7.getName((-1L), locale10);
        long long13 = dateTimeZone7.previousTransition((long) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.DurationField durationField19 = julianChronology17.millis();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology17.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = julianChronology17.add(readablePeriod21, (long) 36000000, 4);
        boolean boolean25 = dateTimeZone7.equals((java.lang.Object) 36000000);
        long long27 = dateTimeZone7.nextTransition((-36000001L));
        java.lang.String str29 = dateTimeZone7.getShortName(0L);
        org.joda.time.MutableDateTime mutableDateTime30 = instant3.toMutableDateTime(dateTimeZone7);
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.plus(readableDuration32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) instant42);
        java.lang.String str44 = instant42.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.Instant instant51 = gJChronology47.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.minus(readableDuration52);
        org.joda.time.Instant instant56 = instant53.withDurationAdded((-12219292800000L), 0);
        int int57 = instant42.compareTo((org.joda.time.ReadableInstant) instant53);
        long long58 = instant42.getMillis();
        org.joda.time.Instant instant59 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone60 = instant42.getZone();
        int int61 = instant33.compareTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant63 = instant33.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant63.plus(readableDuration64);
        long long66 = instant63.getMillis();
        org.joda.time.Instant instant68 = instant63.plus((-71999990L));
        long long69 = instant68.getMillis();
        boolean boolean70 = mutableDateTime30.isBefore((org.joda.time.ReadableInstant) instant68);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000000L + "'", long24 == 36000000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-36000001L) + "'", long27 == (-36000001L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str44, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 36000000L + "'", long58 == 36000000L);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-60514215154134L) + "'", long66 == (-60514215154134L));
        org.junit.Assert.assertNotNull(instant68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-60514287154124L) + "'", long69 == (-60514287154124L));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        org.joda.time.DurationField durationField12 = julianChronology3.seconds();
        org.joda.time.DurationField durationField13 = julianChronology3.seconds();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.dayOfWeek();
        org.joda.time.DurationField durationField15 = julianChronology3.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = julianChronology3.getDateTimeMillis(45, 2022, 20, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = instant11.get(dateTimeFieldType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("1969-12-31T04:00:00.011Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.plus(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.minus(readableDuration17);
        org.joda.time.Instant instant21 = instant18.withDurationAdded((-12219292800000L), 0);
        boolean boolean23 = instant18.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology26.monthOfYear();
        boolean boolean34 = instant18.equals((java.lang.Object) dateTimeField33);
        org.joda.time.Instant instant36 = instant18.withMillis(1L);
        boolean boolean37 = instant7.equals((java.lang.Object) 1L);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DurationField durationField39 = gJChronology38.hours();
        org.joda.time.Chronology chronology40 = gJChronology38.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JulianChronology[+10:00]" + "'", str5, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology2.add(readablePeriod7, 36000010L, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology2.getDateTimeMillis(45, 9, 7, 0, 9, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000010L + "'", long10 == 36000010L);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = gJChronology2.getDateTimeMillis(0, 1969, 45, (-3600000), (int) (byte) 0, 1969, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.dayOfYear();
        org.joda.time.DurationField durationField13 = julianChronology3.months();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology3.getZone();
        org.joda.time.DurationField durationField17 = julianChronology3.halfdays();
        org.joda.time.Chronology chronology18 = julianChronology3.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology36 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField37 = gJChronology2.years();
        org.joda.time.Chronology chronology38 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField40 = gJChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) instant49);
        java.lang.String str51 = instant49.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.dayOfYear();
        org.joda.time.Instant instant58 = gJChronology54.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant58.minus(readableDuration59);
        org.joda.time.Instant instant63 = instant60.withDurationAdded((-12219292800000L), 0);
        int int64 = instant49.compareTo((org.joda.time.ReadableInstant) instant60);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant66 = instant49.minus(readableDuration65);
        java.util.Date date67 = instant49.toDate();
        boolean boolean68 = gJChronology2.equals((java.lang.Object) instant49);
        org.joda.time.Instant instant70 = instant49.plus((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72);
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology73.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology73.dayOfYear();
        org.joda.time.Instant instant77 = gJChronology73.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Instant instant79 = instant77.minus(readableDuration78);
        org.joda.time.Chronology chronology80 = instant77.getChronology();
        org.joda.time.Instant instant82 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant85 = instant82.withDurationAdded(readableDuration83, 0);
        boolean boolean87 = instant85.isEqual((long) 1);
        boolean boolean88 = instant85.isBeforeNow();
        boolean boolean89 = instant77.isEqual((org.joda.time.ReadableInstant) instant85);
        boolean boolean90 = instant70.isAfter((org.joda.time.ReadableInstant) instant85);
        boolean boolean91 = instant85.isAfterNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = null;
        java.lang.String str93 = instant85.toString(dateTimeFormatter92);
        boolean boolean95 = instant85.isEqual((-12242555999904L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 11L + "'", long34 == 11L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str51, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(gJChronology73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str93, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField13 = julianChronology12.centuries();
        java.lang.String str14 = julianChronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology12.getZone();
        long long18 = dateTimeZone15.convertLocalToUTC((long) 0, true);
        boolean boolean19 = gJChronology2.equals((java.lang.Object) true);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField22 = gJChronology2.hours();
        org.joda.time.Chronology chronology23 = gJChronology2.withUTC();
        org.joda.time.Instant instant24 = gJChronology2.getGregorianCutover();
        boolean boolean26 = instant24.isAfter(18600000L);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JulianChronology[+10:00]" + "'", str14, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-36000000L) + "'", long18 == (-36000000L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, 36000000L, 0);
        org.joda.time.DurationField durationField11 = julianChronology3.hours();
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = julianChronology3.get(readablePartial12, (-68399903L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000000L + "'", long10 == 36000000L);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = chronology10.minutes();
        org.joda.time.DurationField durationField15 = chronology10.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("1970-01-01T00:00:00.100Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, (-60514215308675L), 278);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.year();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology2.add(86400000L, 6532309281596915L, 360000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 6532309281596915 * 360000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60514215308675L) + "'", long13 == (-60514215308675L));
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant9.plus(readableDuration13);
        org.joda.time.DateTime dateTime15 = instant9.toDateTime();
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = dateTime15.isAfter(readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, (org.joda.time.ReadableInstant) instant26);
        java.lang.String str28 = instant26.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        int int41 = instant26.compareTo((org.joda.time.ReadableInstant) instant37);
        boolean boolean43 = instant26.isBefore((long) 'a');
        org.joda.time.Instant instant44 = instant26.toInstant();
        boolean boolean45 = instant44.isEqualNow();
        org.joda.time.Instant instant46 = new org.joda.time.Instant((java.lang.Object) instant44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.dayOfYear();
        org.joda.time.Instant instant53 = gJChronology49.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant53.minus(readableDuration54);
        org.joda.time.Instant instant58 = instant55.withDurationAdded((-12219292800000L), 0);
        boolean boolean60 = instant55.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.Chronology chronology64 = gJChronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology63.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology63.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology63.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology63.monthOfYear();
        boolean boolean71 = instant55.equals((java.lang.Object) dateTimeField70);
        org.joda.time.Instant instant73 = instant55.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = instant73.isSupported(dateTimeFieldType74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        boolean boolean77 = instant73.isSupported(dateTimeFieldType76);
        org.joda.time.Instant instant80 = instant73.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant82 = instant80.withMillis(187199999L);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant85 = instant80.withDurationAdded(readableDuration83, 1200);
        boolean boolean86 = instant44.isEqual((org.joda.time.ReadableInstant) instant80);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = null;
        boolean boolean88 = instant80.isSupported(dateTimeFieldType87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = instant80.isSupported(dateTimeFieldType89);
        java.lang.String str91 = instant80.toString();
        boolean boolean92 = dateTime15.isBefore((org.joda.time.ReadableInstant) instant80);
        org.joda.time.chrono.GJChronology gJChronology93 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            long long99 = gJChronology93.getDateTimeMillis((-35999999L), (int) '#', 1969, 895, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str28, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(gJChronology63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970-06-24T23:59:59.901Z" + "'", str91, "1970-06-24T23:59:59.901Z");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(gJChronology93);
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) ' ');
        java.lang.String str18 = dateTimeZone15.getID();
        long long20 = dateTimeZone15.previousTransition((-1L));
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone15.getShortName(1L, locale22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology31 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.era();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology28.minuteOfHour();
        org.joda.time.DurationField durationField34 = julianChronology28.weeks();
        org.joda.time.DurationField durationField35 = julianChronology28.days();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = julianChronology28.getZone();
        int int39 = dateTimeZone37.getOffset((-35999899L));
        java.lang.String str41 = dateTimeZone37.getNameKey((-126000001L));
        org.joda.time.Chronology chronology42 = julianChronology24.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology43 = julianChronology3.withZone(dateTimeZone37);
        boolean boolean45 = dateTimeZone37.isStandardOffset(36000045L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Chronology chronology9 = instant6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str12 = dateTimeZone11.getID();
        boolean boolean13 = dateTimeZone11.isFixed();
        long long15 = dateTimeZone11.previousTransition(100L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        java.util.TimeZone timeZone23 = dateTimeZone17.toTimeZone();
        boolean boolean24 = dateTimeZone11.equals((java.lang.Object) timeZone23);
        boolean boolean25 = instant6.equals((java.lang.Object) boolean24);
        org.joda.time.DateTime dateTime26 = instant6.toDateTime();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        boolean boolean17 = julianChronology15.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField18 = julianChronology15.months();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone20.getName((-1L), locale23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone20.isLocalDateTimeGap(localDateTime25);
        boolean boolean28 = dateTimeZone20.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology29 = julianChronology15.withZone(dateTimeZone20);
        int int31 = dateTimeZone20.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        long long34 = dateTimeZone20.convertUTCToLocal((-35999990L));
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology35.getDateTimeMillis((int) '#', 115200000, 895, 97, 24, 100, 32400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        int int6 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfDay();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfMonth();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        java.lang.Class<?> wildcardClass13 = gJChronology2.getClass();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+10:00]" + "'", str8, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology11 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField13 = gJChronology2.seconds();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        long long15 = dateTimeZone5.adjustOffset((long) '#', false);
        java.util.TimeZone timeZone16 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone18.getOffset(readableInstant19);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-71999900L) + "'", long12 == (-71999900L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35L + "'", long15 == 35L);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField14 = julianChronology13.centuries();
        java.lang.String str15 = julianChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.yearOfEra();
        org.joda.time.DurationField durationField17 = julianChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.minuteOfDay();
        boolean boolean22 = julianChronology13.equals((java.lang.Object) dateTimeField21);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology13.secondOfMinute();
        int int24 = julianChronology13.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField31 = julianChronology28.months();
        boolean boolean32 = julianChronology13.equals((java.lang.Object) julianChronology28);
        boolean boolean33 = instant8.equals((java.lang.Object) julianChronology13);
        org.joda.time.Instant instant35 = instant8.plus((-35999890L));
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        long long39 = dateTimeZone36.adjustOffset((-6211221875999790L), true);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology40.secondOfDay();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[+10:00]" + "'", str4, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JulianChronology[+10:00]" + "'", str15, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-6211221875999790L) + "'", long39 == (-6211221875999790L));
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone4 = julianChronology2.getZone();
        int int5 = julianChronology2.getMinimumDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = julianChronology2.getDateTimeMillis((int) (short) 1, (int) (byte) 1, 1200, (-1), 1200, 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(36000);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.dayOfWeek();
        org.joda.time.DurationField durationField38 = gJChronology35.years();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.weekyear();
        boolean boolean40 = instant17.equals((java.lang.Object) dateTimeField39);
        org.joda.time.Instant instant42 = instant17.withMillis(32L);
        boolean boolean43 = instant8.isBefore((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant45 = instant8.withMillis(52L);
        boolean boolean46 = dateTimeZone1.equals((java.lang.Object) instant8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str19, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = instant26.isSupported(dateTimeFieldType29);
        org.joda.time.Instant instant33 = instant26.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant35 = instant33.withMillis(187199999L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant33.withDurationAdded(readableDuration36, 1200);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        boolean boolean44 = julianChronology42.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology45 = julianChronology42.withUTC();
        org.joda.time.DateTimeZone dateTimeZone46 = julianChronology42.getZone();
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = instant38.toDateTime(dateTimeZone46);
        long long49 = dateTime48.getMillis();
        java.util.Date date50 = dateTime48.toDate();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(julianChronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 15119999901L + "'", long49 == 15119999901L);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Jun 24 23:59:59 UTC 1970");
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.Chronology chronology26 = instant8.getChronology();
        boolean boolean27 = instant8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology31.getZone();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, (org.joda.time.ReadableInstant) instant37);
        java.lang.String str39 = instant37.toString();
        int int40 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((java.lang.Object) instant37);
        boolean boolean43 = instant37.isAfter((-107999990L));
        boolean boolean45 = instant37.isAfter((-12219292799965L));
        boolean boolean46 = instant8.isAfter((org.joda.time.ReadableInstant) instant37);
        boolean boolean47 = instant37.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.Chronology chronology51 = gJChronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology50.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str62 = dateTimeZone61.getID();
        org.joda.time.Chronology chronology63 = gJChronology58.withZone(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology58.getZone();
        long long66 = dateTimeZone64.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology67 = gJChronology50.withZone(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean71 = dateTimeZone69.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone73);
        org.joda.time.chrono.JulianChronology julianChronology75 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone73);
        boolean boolean77 = julianChronology75.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology78 = julianChronology75.withUTC();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology80 = julianChronology75.withZone(dateTimeZone79);
        long long82 = dateTimeZone69.getMillisKeepLocal(dateTimeZone79, 10L);
        org.joda.time.Chronology chronology83 = gJChronology50.withZone(dateTimeZone79);
        org.joda.time.Chronology chronology84 = gJChronology50.withUTC();
        org.joda.time.DurationField durationField85 = gJChronology50.years();
        org.joda.time.Chronology chronology86 = gJChronology50.withUTC();
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.Chronology chronology89 = gJChronology50.withZone(dateTimeZone88);
        org.joda.time.DateTimeZone dateTimeZone90 = gJChronology50.getZone();
        org.joda.time.MutableDateTime mutableDateTime91 = instant37.toMutableDateTime(dateTimeZone90);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000000L + "'", long24 == 36000000L);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str39, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(gJChronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-12219292800000L) + "'", long66 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(julianChronology75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 11L + "'", long82 == 11L);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(mutableDateTime91);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        int int11 = julianChronology3.getMinimumDaysInFirstWeek();
        java.lang.String str12 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField14 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JulianChronology[+10:00]" + "'", str12, "JulianChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.millisOfSecond();
        org.joda.time.DurationField durationField21 = julianChronology3.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, 10L);
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField41 = gJChronology2.months();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12219292800000L) + "'", long18 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 11L + "'", long34 == 11L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.hours();
        org.joda.time.DateTimeZone dateTimeZone8 = julianChronology3.getZone();
        int int10 = dateTimeZone8.getOffset((-1295998588800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.year();
        java.lang.String str13 = gJChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = gJChronology2.get(readablePeriod14, 40L, (-12242591999904L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+10:00]" + "'", str13, "GJChronology[+10:00]");
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime20 = instant4.toMutableDateTime((org.joda.time.Chronology) julianChronology13);
        long long21 = mutableDateTime20.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        boolean boolean35 = instant30.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.monthOfYear();
        boolean boolean46 = instant30.equals((java.lang.Object) dateTimeField45);
        org.joda.time.Instant instant48 = instant30.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = instant48.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.dayOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant57.minus(readableDuration58);
        org.joda.time.Instant instant62 = instant59.withDurationAdded((-12219292800000L), 0);
        boolean boolean64 = instant59.isEqual(35L);
        org.joda.time.Instant instant65 = instant59.toInstant();
        boolean boolean67 = instant65.isBefore((long) ' ');
        boolean boolean68 = instant48.isAfter((org.joda.time.ReadableInstant) instant65);
        boolean boolean69 = mutableDateTime20.isBefore((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        java.lang.String str74 = gJChronology72.toString();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology72.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology72.dayOfWeek();
        org.joda.time.Instant instant78 = gJChronology72.getGregorianCutover();
        boolean boolean79 = instant78.isEqualNow();
        org.joda.time.Instant instant81 = instant78.minus((-35999900L));
        org.joda.time.MutableDateTime mutableDateTime82 = instant81.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone84);
        boolean boolean86 = dateTimeZone84.isFixed();
        long long89 = dateTimeZone84.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology90 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone84);
        java.util.Locale locale92 = null;
        java.lang.String str93 = dateTimeZone84.getName((long) (short) -1, locale92);
        boolean boolean94 = dateTimeZone84.isFixed();
        long long96 = dateTimeZone84.nextTransition(36009730L);
        org.joda.time.MutableDateTime mutableDateTime97 = instant81.toMutableDateTime(dateTimeZone84);
        boolean boolean98 = mutableDateTime20.isAfter((org.joda.time.ReadableInstant) instant81);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 36000000L + "'", long21 == 36000000L);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(gJChronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "GJChronology[+10:00]" + "'", str74, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-71999990L) + "'", long89 == (-71999990L));
        org.junit.Assert.assertNotNull(gJChronology90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+10:00" + "'", str93, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 36009730L + "'", long96 == 36009730L);
        org.junit.Assert.assertNotNull(mutableDateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = julianChronology3.get(readablePartial13, (-48645335529L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        int int9 = dateTimeZone7.getStandardOffset((-59011667999903L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant17.plus(readableDuration20);
        int int22 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.Instant instant11 = instant9.minus((-35999991L));
        java.lang.String str12 = instant9.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        java.lang.String str24 = instant22.toString();
        int int25 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) instant22);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) instant26);
        java.util.Date date28 = instant27.toDate();
        org.joda.time.Instant instant30 = instant27.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Chronology chronology46 = gJChronology41.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology41.getZone();
        long long49 = dateTimeZone47.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology50 = gJChronology33.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean54 = dateTimeZone52.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.chrono.JulianChronology julianChronology58 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56);
        boolean boolean60 = julianChronology58.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology61 = julianChronology58.withUTC();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology63 = julianChronology58.withZone(dateTimeZone62);
        long long65 = dateTimeZone52.getMillisKeepLocal(dateTimeZone62, 10L);
        org.joda.time.Chronology chronology66 = gJChronology33.withZone(dateTimeZone62);
        long long68 = dateTimeZone62.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime69 = instant27.toMutableDateTime(dateTimeZone62);
        org.joda.time.Instant instant71 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, readableInstant73);
        org.joda.time.DateTimeZone dateTimeZone75 = gJChronology74.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology74.dayOfYear();
        org.joda.time.Instant instant78 = gJChronology74.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime81 = instant78.toMutableDateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime82 = instant78.toDateTime();
        org.joda.time.Instant instant84 = instant78.withMillis(100L);
        boolean boolean85 = instant71.isAfter((org.joda.time.ReadableInstant) instant78);
        boolean boolean86 = mutableDateTime69.isBefore((org.joda.time.ReadableInstant) instant78);
        int int87 = instant9.compareTo((org.joda.time.ReadableInstant) instant78);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str12, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str24, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 10:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-12219292800000L) + "'", long49 == (-12219292800000L));
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(julianChronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 11L + "'", long65 == 11L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(gJChronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = dateTime6.isSupported(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology4 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.year();
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DurationField durationField8 = julianChronology3.years();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = julianChronology3.getDateTimeMillis(4200000, 126000000, 4, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 126000000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = julianChronology3.seconds();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology12.minuteOfDay();
        org.joda.time.DurationField durationField14 = julianChronology12.weekyears();
        boolean boolean15 = gJChronology2.equals((java.lang.Object) julianChronology12);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField18 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+10:00]" + "'", str5, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology11 = gJChronology9.withUTC();
        long long16 = gJChronology9.getDateTimeMillis(1, (int) (short) 10, 1, (int) (short) 1);
        org.joda.time.DurationField durationField17 = gJChronology9.millis();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = gJChronology9.getDateTimeMillis(134401582L, (int) '#', 36000001, (-1), 660);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62112218399999L) + "'", long16 == (-62112218399999L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = gJChronology2.getDateTimeMillis(69, (int) (byte) 10, 0, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = gJChronology2.getDateTimeMillis((int) (short) 1, (int) '#', 18600000, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = gJChronology2.days();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = gJChronology2.get(readablePeriod10, 0L, (-73965769954558030L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-12219292800000L), 0);
        boolean boolean14 = instant9.isEqual(35L);
        boolean boolean15 = instant0.isEqual((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant9.plus(readableDuration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, (org.joda.time.ReadableInstant) instant26);
        java.lang.String str28 = instant26.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        int int41 = instant26.compareTo((org.joda.time.ReadableInstant) instant37);
        long long42 = instant26.getMillis();
        long long43 = instant26.getMillis();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant46 = instant26.withDurationAdded(readableDuration44, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant26.plus(readableDuration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant26.plus(readableDuration49);
        boolean boolean51 = instant17.equals((java.lang.Object) readableDuration49);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str28, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 36000000L + "'", long42 == 36000000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 36000000L + "'", long43 == 36000000L);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.DateTime dateTime7 = instant4.toDateTimeISO();
        boolean boolean8 = dateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        boolean boolean34 = instant17.isBefore((long) 'a');
        org.joda.time.Instant instant35 = instant17.toInstant();
        boolean boolean36 = instant35.isEqualNow();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((java.lang.Object) instant35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        boolean boolean51 = instant46.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.Chronology chronology55 = gJChronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology54.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology54.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology54.monthOfYear();
        boolean boolean62 = instant46.equals((java.lang.Object) dateTimeField61);
        org.joda.time.Instant instant64 = instant46.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = instant64.isSupported(dateTimeFieldType65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = instant64.isSupported(dateTimeFieldType67);
        org.joda.time.Instant instant71 = instant64.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant73 = instant71.withMillis(187199999L);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant76 = instant71.withDurationAdded(readableDuration74, 1200);
        boolean boolean77 = instant35.isEqual((org.joda.time.ReadableInstant) instant71);
        boolean boolean78 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant79 = new org.joda.time.Instant();
        org.joda.time.Instant instant81 = instant79.withMillis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone82, readableInstant83);
        org.joda.time.DateTimeZone dateTimeZone85 = gJChronology84.getZone();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology84.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField87 = gJChronology84.year();
        int int88 = instant81.get(dateTimeField87);
        org.joda.time.Instant instant91 = instant81.withDurationAdded((-60514251282542L), 660);
        boolean boolean92 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant91);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str19, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(gJChronology84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.Instant instant31 = gJChronology25.getGregorianCutover();
        boolean boolean32 = instant20.equals((java.lang.Object) gJChronology25);
        boolean boolean33 = instant11.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant35 = instant20.minus((-61543965598418L));
        org.joda.time.DateTimeZone dateTimeZone36 = instant20.getZone();
        org.joda.time.Instant instant37 = instant20.toInstant();
        boolean boolean38 = instant20.isBeforeNow();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant40.withDurationAdded(readableDuration41, 0);
        boolean boolean45 = instant43.isEqual((long) 1);
        org.joda.time.DateTime dateTime46 = instant43.toDateTimeISO();
        boolean boolean47 = dateTime46.isAfterNow();
        boolean boolean48 = instant20.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str22, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GJChronology[+10:00]" + "'", str27, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.previousTransition(110L);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant22.plus(readableDuration26);
        java.util.Date date28 = instant27.toDate();
        org.joda.time.Instant instant30 = instant27.plus(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-12219292800000L), 0);
        boolean boolean44 = instant39.isEqual(35L);
        org.joda.time.Instant instant45 = instant39.toInstant();
        boolean boolean47 = instant45.isBefore((long) ' ');
        boolean boolean48 = instant30.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone49 = instant30.getZone();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime55 = instant30.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant30);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 110L + "'", long12 == 110L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(gJChronology56);
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(19, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 3600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        boolean boolean9 = instant8.isAfterNow();
        boolean boolean10 = instant8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = instant8.getZone();
        java.lang.String str13 = dateTimeZone11.getShortName((-431999901L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.Instant instant7 = instant5.withMillis(36000052L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = instant7.isEqual(readableInstant8);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = gJChronology2.get(readablePeriod10, 132477032786400000L, (-60514215194392L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant24 = instant19.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-36000000L), 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField32 = julianChronology31.centuries();
        org.joda.time.DurationField durationField33 = julianChronology31.weeks();
        org.joda.time.DurationField durationField34 = julianChronology31.years();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone37 = julianChronology31.getZone();
        org.joda.time.MutableDateTime mutableDateTime38 = instant24.toMutableDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, (org.joda.time.ReadableInstant) instant47);
        java.lang.String str49 = instant47.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.dayOfYear();
        org.joda.time.Instant instant56 = gJChronology52.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant56.minus(readableDuration57);
        org.joda.time.Instant instant61 = instant58.withDurationAdded((-12219292800000L), 0);
        int int62 = instant47.compareTo((org.joda.time.ReadableInstant) instant58);
        long long63 = instant47.getMillis();
        org.joda.time.Instant instant64 = instant47.toInstant();
        org.joda.time.DateTimeZone dateTimeZone65 = instant47.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) instant47, 4200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 4200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str49, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 36000000L + "'", long63 == 36000000L);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.Chronology chronology26 = gJChronology21.withZone(dateTimeZone24);
        long long29 = dateTimeZone24.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str31 = dateTimeZone24.getName((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str34 = dateTimeZone33.getID();
        boolean boolean35 = dateTimeZone33.isFixed();
        int int37 = dateTimeZone33.getOffsetFromLocal((-12219292800000L));
        java.lang.String str38 = dateTimeZone33.getID();
        boolean boolean39 = dateTimeZone24.equals((java.lang.Object) str38);
        org.joda.time.Chronology chronology40 = gJChronology2.withZone(dateTimeZone24);
        long long43 = dateTimeZone24.convertLocalToUTC((-60514215291895L), true);
        long long47 = dateTimeZone24.convertLocalToUTC((-62111872799990L), true, (-60514215168419L));
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9L + "'", long18 == 9L);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-35999990L) + "'", long29 == (-35999990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60514251291895L) + "'", long43 == (-60514251291895L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-62111908799990L) + "'", long47 == (-62111908799990L));
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = gJChronology17.get(readablePartial18, (-35997494L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(julianChronology2);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(gJChronology17);
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.year();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = gJChronology2.add(readablePeriod6, (-11L), (int) (short) 0);
        org.joda.time.DurationField durationField10 = gJChronology2.millis();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.months();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology2.getDateTimeMillis(1970, 1200, 115200000, 36000001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GJChronology[+10:00]" + "'", str3, "GJChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-11L) + "'", long9 == (-11L));
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField5 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.centuryOfEra();
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[UTC]" + "'", str10, "GJChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.DateTimeZone dateTimeZone25 = instant8.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = instant8.get(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T10:00:00.000Z" + "'", str10, "1970-01-01T10:00:00.000Z");
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000000L + "'", long24 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }
}
